
FC_SPI_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c268  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  0800c418  0800c418  0001c418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d224  0800d224  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d224  0800d224  0001d224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d22c  0800d22c  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d22c  0800d22c  0001d22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d230  0800d230  0001d230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800d234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202ec  2**0
                  CONTENTS
 10 .bss          000018a4  200002ec  200002ec  000202ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b90  20001b90  000202ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000161b6  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003921  00000000  00000000  000364d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00039df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  0003ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000297c2  00000000  00000000  0003bb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001738a  00000000  00000000  00065352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebcb7  00000000  00000000  0007c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168393  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e60  00000000  00000000  001683e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c400 	.word	0x0800c400

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	0800c400 	.word	0x0800c400

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <IMU_UART_CB>:
#define IMU_DMA_TX hdma_usart3_tx


IMU imu;

void IMU_UART_CB(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	; (800103c <IMU_UART_CB+0x90>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d11b      	bne.n	8000ffa <IMU_UART_CB+0x4e>
		imu.IMU_got_data = true;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <IMU_UART_CB+0x94>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		imu.IMU_data_Size = Size;
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <IMU_UART_CB+0x94>)
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	f8a2 3802 	strh.w	r3, [r2, #2050]	; 0x802
		imu.no_stuck=true;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <IMU_UART_CB+0x94>)
 8000fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 8000fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe2:	4917      	ldr	r1, [pc, #92]	; (8001040 <IMU_UART_CB+0x94>)
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <IMU_UART_CB+0x98>)
 8000fe6:	f007 fa7b 	bl	80084e0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <IMU_UART_CB+0x9c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <IMU_UART_CB+0x9c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0208 	bic.w	r2, r2, #8
 8000ff8:	601a      	str	r2, [r3, #0]
//		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, IMU_dma_buffer, IMU_BUFFER_SIZE);
//		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);

	}
	//for uart data overflow safety
	if (Size >= 1024) {
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001000:	d317      	bcc.n	8001032 <IMU_UART_CB+0x86>
		memset(imu.IMU_buffer, 0, IMU_BUFFER_SIZE);
 8001002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001006:	2100      	movs	r1, #0
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <IMU_UART_CB+0x94>)
 800100a:	f008 fc5d 	bl	80098c8 <memset>
		imu.IMU_data_Size=0;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <IMU_UART_CB+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 8001016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800101a:	4909      	ldr	r1, [pc, #36]	; (8001040 <IMU_UART_CB+0x94>)
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <IMU_UART_CB+0x98>)
 800101e:	f007 fa5f 	bl	80084e0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <IMU_UART_CB+0x9c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <IMU_UART_CB+0x9c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0208 	bic.w	r2, r2, #8
 8001030:	601a      	str	r2, [r3, #0]

	}
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40004800 	.word	0x40004800
 8001040:	20000308 	.word	0x20000308
 8001044:	200019b8 	.word	0x200019b8
 8001048:	20001abc 	.word	0x20001abc

0800104c <IMU_Init>:
void imu_callback( XsensEventFlag_t event, XsensEventData_t *mtdata );
void IMU_Init() {
 800104c:	b580      	push	{r7, lr}
 800104e:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8001052:	af00      	add	r7, sp, #0
	printf("IMU initializing......\n");
 8001054:	482c      	ldr	r0, [pc, #176]	; (8001108 <IMU_Init+0xbc>)
 8001056:	f009 f92f 	bl	800a2b8 <puts>
	//setup DMA
	HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 800105a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800105e:	492b      	ldr	r1, [pc, #172]	; (800110c <IMU_Init+0xc0>)
 8001060:	482b      	ldr	r0, [pc, #172]	; (8001110 <IMU_Init+0xc4>)
 8001062:	f007 fa3d 	bl	80084e0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <IMU_Init+0xc8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <IMU_Init+0xc8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0208 	bic.w	r2, r2, #8
 8001074:	601a      	str	r2, [r3, #0]

	// Setup custom handler callbacks to catch acknowledgements from IMU
	xsens_mti_override_id_handler(MT_ACK_GOTOCONFIG, 					&handle_ack_gotoconfig);
 8001076:	4928      	ldr	r1, [pc, #160]	; (8001118 <IMU_Init+0xcc>)
 8001078:	2031      	movs	r0, #49	; 0x31
 800107a:	f001 fa75 	bl	8002568 <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_GOTOMEASUREMENT,			&handle_ack_gotomeasurement);
 800107e:	4927      	ldr	r1, [pc, #156]	; (800111c <IMU_Init+0xd0>)
 8001080:	2011      	movs	r0, #17
 8001082:	f001 fa71 	bl	8002568 <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_OUTPUTCONFIGURATION, &handle_ack_outputconfiguration);
 8001086:	4926      	ldr	r1, [pc, #152]	; (8001120 <IMU_Init+0xd4>)
 8001088:	20c1      	movs	r0, #193	; 0xc1
 800108a:	f001 fa6d 	bl	8002568 <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_RESET, 							&myHandle_WAKEUP_cb);
 800108e:	4925      	ldr	r1, [pc, #148]	; (8001124 <IMU_Init+0xd8>)
 8001090:	2041      	movs	r0, #65	; 0x41
 8001092:	f001 fa69 	bl	8002568 <xsens_mti_override_id_handler>

	xsens_interface_t imu_interface_S = XSENS_INTERFACE_RX_TX( &imu_callback, &imu_send_data );
 8001096:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800109a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800109e:	4a22      	ldr	r2, [pc, #136]	; (8001128 <IMU_Init+0xdc>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	4611      	mov	r1, r2
 80010a4:	f640 0314 	movw	r3, #2068	; 0x814
 80010a8:	461a      	mov	r2, r3
 80010aa:	f008 fbff 	bl	80098ac <memcpy>
	imu.imu_interface = imu_interface_S;
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <IMU_Init+0xc0>)
 80010b0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80010b4:	f6a3 0114 	subw	r1, r3, #2068	; 0x814
 80010b8:	f602 0308 	addw	r3, r2, #2056	; 0x808
 80010bc:	f640 0214 	movw	r2, #2068	; 0x814
 80010c0:	4618      	mov	r0, r3
 80010c2:	f008 fbf3 	bl	80098ac <memcpy>

	imu.ack_flag = ACK_NONE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <IMU_Init+0xc0>)
 80010c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010cc:	2200      	movs	r2, #0
 80010ce:	771a      	strb	r2, [r3, #28]

	imu.output_Hz = 100;   // Hz acceleration message rate
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <IMU_Init+0xc0>)
 80010d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d6:	2264      	movs	r2, #100	; 0x64
 80010d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	imu.imu_state = STATE_STARTUP;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <IMU_Init+0xc0>)
 80010de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010e2:	2200      	movs	r2, #0
 80010e4:	775a      	strb	r2, [r3, #29]
	imu.calided = false;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <IMU_Init+0xc0>)
 80010e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	IMU_State_mechine();
 80010f2:	f000 f853 	bl	800119c <IMU_State_mechine>
	printf("IMU:initialization finish.\n");
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <IMU_Init+0xe0>)
 80010f8:	f009 f8de 	bl	800a2b8 <puts>
}
 80010fc:	bf00      	nop
 80010fe:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	0800c418 	.word	0x0800c418
 800110c:	20000308 	.word	0x20000308
 8001110:	200019b8 	.word	0x200019b8
 8001114:	20001abc 	.word	0x20001abc
 8001118:	080016d9 	.word	0x080016d9
 800111c:	080016fd 	.word	0x080016fd
 8001120:	08001721 	.word	0x08001721
 8001124:	08001745 	.word	0x08001745
 8001128:	0800c44c 	.word	0x0800c44c
 800112c:	0800c430 	.word	0x0800c430

08001130 <IMU_process_data>:

void IMU_process_data() {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	if (imu.IMU_got_data) {
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <IMU_process_data+0x64>)
 8001138:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 800113c:	2b00      	cmp	r3, #0
 800113e:	d025      	beq.n	800118c <IMU_process_data+0x5c>
		for (int i = 0; i < imu.IMU_data_Size; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	e00a      	b.n	800115c <IMU_process_data+0x2c>
			xsens_mti_parse(&imu.imu_interface, imu.IMU_buffer[i]);
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <IMU_process_data+0x64>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	4811      	ldr	r0, [pc, #68]	; (8001198 <IMU_process_data+0x68>)
 8001152:	f001 f92b 	bl	80023ac <xsens_mti_parse>
		for (int i = 0; i < imu.IMU_data_Size; i++) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3301      	adds	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <IMU_process_data+0x64>)
 800115e:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4293      	cmp	r3, r2
 8001168:	dbed      	blt.n	8001146 <IMU_process_data+0x16>
		}
		//set
		memset(imu.IMU_buffer, imu.IMU_data_Size, IMU_BUFFER_SIZE);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <IMU_process_data+0x64>)
 800116c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8001170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <IMU_process_data+0x64>)
 8001178:	f008 fba6 	bl	80098c8 <memset>
		imu.IMU_got_data = false;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <IMU_process_data+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		imu.IMU_data_Size = 0;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <IMU_process_data+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000308 	.word	0x20000308
 8001198:	20000b10 	.word	0x20000b10

0800119c <IMU_State_mechine>:

void IMU_State_mechine(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

	switch (imu.imu_state) {
 80011a0:	4ba6      	ldr	r3, [pc, #664]	; (800143c <IMU_State_mechine+0x2a0>)
 80011a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a6:	7f5b      	ldrb	r3, [r3, #29]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	f200 8135 	bhi.w	8001418 <IMU_State_mechine+0x27c>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <IMU_State_mechine+0x18>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011d9 	.word	0x080011d9
 80011b8:	08001207 	.word	0x08001207
 80011bc:	08001231 	.word	0x08001231
 80011c0:	08001259 	.word	0x08001259
 80011c4:	080012b9 	.word	0x080012b9
 80011c8:	080012ed 	.word	0x080012ed
 80011cc:	08001317 	.word	0x08001317
 80011d0:	08001331 	.word	0x08001331
 80011d4:	08001373 	.word	0x08001373
	case STATE_STARTUP:
		printf("IMU:Start up...\n");
 80011d8:	4899      	ldr	r0, [pc, #612]	; (8001440 <IMU_State_mechine+0x2a4>)
 80011da:	f009 f86d 	bl	800a2b8 <puts>
//		xsens_mti_request(&imu.imu_interface, MT_RESET);
		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 80011de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e2:	4996      	ldr	r1, [pc, #600]	; (800143c <IMU_State_mechine+0x2a0>)
 80011e4:	4897      	ldr	r0, [pc, #604]	; (8001444 <IMU_State_mechine+0x2a8>)
 80011e6:	f007 f97b 	bl	80084e0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 80011ea:	4b97      	ldr	r3, [pc, #604]	; (8001448 <IMU_State_mechine+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b95      	ldr	r3, [pc, #596]	; (8001448 <IMU_State_mechine+0x2ac>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0208 	bic.w	r2, r2, #8
 80011f8:	601a      	str	r2, [r3, #0]

		imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 80011fa:	4b90      	ldr	r3, [pc, #576]	; (800143c <IMU_State_mechine+0x2a0>)
 80011fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001200:	2202      	movs	r2, #2
 8001202:	775a      	strb	r2, [r3, #29]
//			imu.imu_state = STATE_ACK_WAKEUP;
	break;
 8001204:	e117      	b.n	8001436 <IMU_State_mechine+0x29a>

	case STATE_ACK_WAKEUP:
		// Read configuration packet response
		// TODO: MDATA2 odd input handling?

		if (imu.ack_flag == ACK_WAKEUP) {
 8001206:	4b8d      	ldr	r3, [pc, #564]	; (800143c <IMU_State_mechine+0x2a0>)
 8001208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120c:	7f1b      	ldrb	r3, [r3, #28]
 800120e:	2b04      	cmp	r3, #4
 8001210:	f040 8108 	bne.w	8001424 <IMU_State_mechine+0x288>
			printf("IMU:IMU is wake...\n");
 8001214:	488d      	ldr	r0, [pc, #564]	; (800144c <IMU_State_mechine+0x2b0>)
 8001216:	f009 f84f 	bl	800a2b8 <puts>
			imu.ack_flag = ACK_NONE;
 800121a:	4b88      	ldr	r3, [pc, #544]	; (800143c <IMU_State_mechine+0x2a0>)
 800121c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001220:	2200      	movs	r2, #0
 8001222:	771a      	strb	r2, [r3, #28]
			imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 8001224:	4b85      	ldr	r3, [pc, #532]	; (800143c <IMU_State_mechine+0x2a0>)
 8001226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800122a:	2202      	movs	r2, #2
 800122c:	775a      	strb	r2, [r3, #29]
		}
	break;
 800122e:	e0f9      	b.n	8001424 <IMU_State_mechine+0x288>

	case STATE_REQUEST_CONFIG_MODE:
		printf("IMU:Requesting config mode...\n");
 8001230:	4887      	ldr	r0, [pc, #540]	; (8001450 <IMU_State_mechine+0x2b4>)
 8001232:	f009 f841 	bl	800a2b8 <puts>
		xsens_mti_request(&imu.imu_interface, MT_GOTOCONFIG);
 8001236:	2130      	movs	r1, #48	; 0x30
 8001238:	4886      	ldr	r0, [pc, #536]	; (8001454 <IMU_State_mechine+0x2b8>)
 800123a:	f001 fafa 	bl	8002832 <xsens_mti_request>
		imu.imu_state = STATE_ACK_CONFIG_MODE;
 800123e:	4b7f      	ldr	r3, [pc, #508]	; (800143c <IMU_State_mechine+0x2a0>)
 8001240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001244:	2203      	movs	r2, #3
 8001246:	775a      	strb	r2, [r3, #29]
//		HAL_Delay(100);
		imu.timer_timeOut = HAL_GetTick();
 8001248:	f003 fd68 	bl	8004d1c <HAL_GetTick>
 800124c:	4603      	mov	r3, r0
 800124e:	4a7b      	ldr	r2, [pc, #492]	; (800143c <IMU_State_mechine+0x2a0>)
 8001250:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001254:	6213      	str	r3, [r2, #32]
	break;
 8001256:	e0ee      	b.n	8001436 <IMU_State_mechine+0x29a>

	case STATE_ACK_CONFIG_MODE:
		// Wait for GoToConfigAck to return
		// handle_gotoconfigack will fire when it does, and set our flag
		if (imu.ack_flag == ACK_CONFIG) {
 8001258:	4b78      	ldr	r3, [pc, #480]	; (800143c <IMU_State_mechine+0x2a0>)
 800125a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125e:	7f1b      	ldrb	r3, [r3, #28]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10d      	bne.n	8001280 <IMU_State_mechine+0xe4>
			printf("IMU:IMU in config mode\n");
 8001264:	487c      	ldr	r0, [pc, #496]	; (8001458 <IMU_State_mechine+0x2bc>)
 8001266:	f009 f827 	bl	800a2b8 <puts>
			imu.ack_flag = ACK_NONE;
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <IMU_State_mechine+0x2a0>)
 800126c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001270:	2200      	movs	r2, #0
 8001272:	771a      	strb	r2, [r3, #28]
			imu.imu_state = STATE_SET_OUTPUT_CONFIG;
 8001274:	4b71      	ldr	r3, [pc, #452]	; (800143c <IMU_State_mechine+0x2a0>)
 8001276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127a:	2204      	movs	r2, #4
 800127c:	775a      	strb	r2, [r3, #29]
		} else if (HAL_GetTick() - imu.timer_timeOut > 2000) {
			imu.timer_timeOut = HAL_GetTick();
			imu.imu_state = STATE_STARTUP;
			printf("IMU:again: ");
		}
	break;
 800127e:	e0d3      	b.n	8001428 <IMU_State_mechine+0x28c>
		} else if (HAL_GetTick() - imu.timer_timeOut > 2000) {
 8001280:	f003 fd4c 	bl	8004d1c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	4b6d      	ldr	r3, [pc, #436]	; (800143c <IMU_State_mechine+0x2a0>)
 8001288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001294:	f240 80c8 	bls.w	8001428 <IMU_State_mechine+0x28c>
			imu.timer_timeOut = HAL_GetTick();
 8001298:	f003 fd40 	bl	8004d1c <HAL_GetTick>
 800129c:	4603      	mov	r3, r0
 800129e:	4a67      	ldr	r2, [pc, #412]	; (800143c <IMU_State_mechine+0x2a0>)
 80012a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012a4:	6213      	str	r3, [r2, #32]
			imu.imu_state = STATE_STARTUP;
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <IMU_State_mechine+0x2a0>)
 80012a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ac:	2200      	movs	r2, #0
 80012ae:	775a      	strb	r2, [r3, #29]
			printf("IMU:again: ");
 80012b0:	486a      	ldr	r0, [pc, #424]	; (800145c <IMU_State_mechine+0x2c0>)
 80012b2:	f008 ff7b 	bl	800a1ac <iprintf>
	break;
 80012b6:	e0b7      	b.n	8001428 <IMU_State_mechine+0x28c>

	case STATE_SET_OUTPUT_CONFIG:
		printf("IMU:change Rot Setting\n");
 80012b8:	4869      	ldr	r0, [pc, #420]	; (8001460 <IMU_State_mechine+0x2c4>)
 80012ba:	f008 fffd 	bl	800a2b8 <puts>
//			changeRotMatrix(imu, bool Frame, float x, float y, float z);
//		changeRotMatrix(1, 0, 0, 0);
		}
//		changeRotMatrix(0, 0, 1.570795, 0);

		printf("IMU:Setting output rate to %d Hz\n", imu.output_Hz);
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <IMU_State_mechine+0x2a0>)
 80012c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80012c8:	4619      	mov	r1, r3
 80012ca:	4866      	ldr	r0, [pc, #408]	; (8001464 <IMU_State_mechine+0x2c8>)
 80012cc:	f008 ff6e 	bl	800a1ac <iprintf>
		changeOutputRate(imu.output_Hz);
 80012d0:	4b5a      	ldr	r3, [pc, #360]	; (800143c <IMU_State_mechine+0x2a0>)
 80012d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fa58 	bl	8001790 <changeOutputRate>



		imu.imu_state = STATE_ACK_OUTPUT_CONFIG;
 80012e0:	4b56      	ldr	r3, [pc, #344]	; (800143c <IMU_State_mechine+0x2a0>)
 80012e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e6:	2205      	movs	r2, #5
 80012e8:	775a      	strb	r2, [r3, #29]
	break;
 80012ea:	e0a4      	b.n	8001436 <IMU_State_mechine+0x29a>

	case STATE_ACK_OUTPUT_CONFIG:
		// Read configuration packet response
		// TODO: MDATA2 odd input handling?

		if (imu.ack_flag == ACK_CONFIGURED) {
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <IMU_State_mechine+0x2a0>)
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	7f1b      	ldrb	r3, [r3, #28]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	f040 8099 	bne.w	800142c <IMU_State_mechine+0x290>
			printf("IMU:IMU confirmed config...\n");
 80012fa:	485b      	ldr	r0, [pc, #364]	; (8001468 <IMU_State_mechine+0x2cc>)
 80012fc:	f008 ffdc 	bl	800a2b8 <puts>
			imu.imu_state = STATE_REQUEST_MEASUREMENT_MODE;
 8001300:	4b4e      	ldr	r3, [pc, #312]	; (800143c <IMU_State_mechine+0x2a0>)
 8001302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001306:	2206      	movs	r2, #6
 8001308:	775a      	strb	r2, [r3, #29]
			imu.ack_flag = ACK_NONE;
 800130a:	4b4c      	ldr	r3, [pc, #304]	; (800143c <IMU_State_mechine+0x2a0>)
 800130c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001310:	2200      	movs	r2, #0
 8001312:	771a      	strb	r2, [r3, #28]
		}
	break;
 8001314:	e08a      	b.n	800142c <IMU_State_mechine+0x290>

	case STATE_REQUEST_MEASUREMENT_MODE:
		printf("IMU:Requesting measurement mode...\n");
 8001316:	4855      	ldr	r0, [pc, #340]	; (800146c <IMU_State_mechine+0x2d0>)
 8001318:	f008 ffce 	bl	800a2b8 <puts>
		xsens_mti_request(&imu.imu_interface, MT_GOTOMEASUREMENT);
 800131c:	2110      	movs	r1, #16
 800131e:	484d      	ldr	r0, [pc, #308]	; (8001454 <IMU_State_mechine+0x2b8>)
 8001320:	f001 fa87 	bl	8002832 <xsens_mti_request>
		imu.imu_state = STATE_ACK_MEASUREMENT_MODE;
 8001324:	4b45      	ldr	r3, [pc, #276]	; (800143c <IMU_State_mechine+0x2a0>)
 8001326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132a:	2207      	movs	r2, #7
 800132c:	775a      	strb	r2, [r3, #29]
		break;
 800132e:	e082      	b.n	8001436 <IMU_State_mechine+0x29a>

	case STATE_ACK_MEASUREMENT_MODE:
		// Wait x in this mode before attempting to configure different settings

		if (imu.ack_flag == ACK_MEASUREMENT) {
 8001330:	4b42      	ldr	r3, [pc, #264]	; (800143c <IMU_State_mechine+0x2a0>)
 8001332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001336:	7f1b      	ldrb	r3, [r3, #28]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d179      	bne.n	8001430 <IMU_State_mechine+0x294>
			// Go back to the start of the settings flow
			imu.imu_state = STATE_RUNNING;
 800133c:	4b3f      	ldr	r3, [pc, #252]	; (800143c <IMU_State_mechine+0x2a0>)
 800133e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001342:	2208      	movs	r2, #8
 8001344:	775a      	strb	r2, [r3, #29]
			imu.ack_flag = ACK_NONE;
 8001346:	4b3d      	ldr	r3, [pc, #244]	; (800143c <IMU_State_mechine+0x2a0>)
 8001348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134c:	2200      	movs	r2, #0
 800134e:	771a      	strb	r2, [r3, #28]
			printf("start running\n");
 8001350:	4847      	ldr	r0, [pc, #284]	; (8001470 <IMU_State_mechine+0x2d4>)
 8001352:	f008 ffb1 	bl	800a2b8 <puts>
			imu.timer_timeOut = HAL_GetTick();
 8001356:	f003 fce1 	bl	8004d1c <HAL_GetTick>
 800135a:	4603      	mov	r3, r0
 800135c:	4a37      	ldr	r2, [pc, #220]	; (800143c <IMU_State_mechine+0x2a0>)
 800135e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001362:	6213      	str	r3, [r2, #32]
			imu.no_stuck=true;
 8001364:	4b35      	ldr	r3, [pc, #212]	; (800143c <IMU_State_mechine+0x2a0>)
 8001366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
	break;
 8001370:	e05e      	b.n	8001430 <IMU_State_mechine+0x294>

	case STATE_RUNNING:
		if(imu.IMU_got_data == true){
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <IMU_State_mechine+0x2a0>)
 8001374:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00d      	beq.n	8001398 <IMU_State_mechine+0x1fc>
			imu.timer_timeOut = HAL_GetTick();
 800137c:	f003 fcce 	bl	8004d1c <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <IMU_State_mechine+0x2a0>)
 8001384:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001388:	6213      	str	r3, [r2, #32]
			imu.no_stuck=true;
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <IMU_State_mechine+0x2a0>)
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001396:	e02a      	b.n	80013ee <IMU_State_mechine+0x252>
		}else if((imu.no_stuck == false) && (HAL_GetTick() - imu.timer_timeOut > 2000)){
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <IMU_State_mechine+0x2a0>)
 800139a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01a      	beq.n	80013e2 <IMU_State_mechine+0x246>
 80013ac:	f003 fcb6 	bl	8004d1c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <IMU_State_mechine+0x2a0>)
 80013b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013c0:	d90f      	bls.n	80013e2 <IMU_State_mechine+0x246>

			printf("recieve error\n");
 80013c2:	482c      	ldr	r0, [pc, #176]	; (8001474 <IMU_State_mechine+0x2d8>)
 80013c4:	f008 ff78 	bl	800a2b8 <puts>
			imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <IMU_State_mechine+0x2a0>)
 80013ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ce:	2202      	movs	r2, #2
 80013d0:	775a      	strb	r2, [r3, #29]
			imu.timer_timeOut = HAL_GetTick();
 80013d2:	f003 fca3 	bl	8004d1c <HAL_GetTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <IMU_State_mechine+0x2a0>)
 80013da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	e005      	b.n	80013ee <IMU_State_mechine+0x252>

		}else{
			imu.no_stuck=false;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <IMU_State_mechine+0x2a0>)
 80013e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}

		if(imu.calided == false){
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <IMU_State_mechine+0x2a0>)
 80013f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d018      	beq.n	8001434 <IMU_State_mechine+0x298>
			xsens_mti_reset_orientation(&imu.imu_interface, XSENS_ORIENTATION_ALIGNMENT_RESET);
 8001402:	2104      	movs	r1, #4
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <IMU_State_mechine+0x2b8>)
 8001406:	f001 fa53 	bl	80028b0 <xsens_mti_reset_orientation>
			imu.calided = true;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <IMU_State_mechine+0x2a0>)
 800140c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
//				imu.imu_state = STATE_REQUEST_CONFIG_MODE;
//			}
//

//		}
	break;
 8001416:	e00d      	b.n	8001434 <IMU_State_mechine+0x298>
	default:
		// Oops!
		imu.imu_state = STATE_STARTUP;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <IMU_State_mechine+0x2a0>)
 800141a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141e:	2200      	movs	r2, #0
 8001420:	775a      	strb	r2, [r3, #29]
		break;
 8001422:	e008      	b.n	8001436 <IMU_State_mechine+0x29a>
	break;
 8001424:	bf00      	nop
 8001426:	e006      	b.n	8001436 <IMU_State_mechine+0x29a>
	break;
 8001428:	bf00      	nop
 800142a:	e004      	b.n	8001436 <IMU_State_mechine+0x29a>
	break;
 800142c:	bf00      	nop
 800142e:	e002      	b.n	8001436 <IMU_State_mechine+0x29a>
	break;
 8001430:	bf00      	nop
 8001432:	e000      	b.n	8001436 <IMU_State_mechine+0x29a>
	break;
 8001434:	bf00      	nop
	}
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000308 	.word	0x20000308
 8001440:	0800cc60 	.word	0x0800cc60
 8001444:	200019b8 	.word	0x200019b8
 8001448:	20001abc 	.word	0x20001abc
 800144c:	0800cc70 	.word	0x0800cc70
 8001450:	0800cc84 	.word	0x0800cc84
 8001454:	20000b10 	.word	0x20000b10
 8001458:	0800cca4 	.word	0x0800cca4
 800145c:	0800ccbc 	.word	0x0800ccbc
 8001460:	0800ccc8 	.word	0x0800ccc8
 8001464:	0800cce0 	.word	0x0800cce0
 8001468:	0800cd04 	.word	0x0800cd04
 800146c:	0800cd20 	.word	0x0800cd20
 8001470:	0800cd44 	.word	0x0800cd44
 8001474:	0800cd54 	.word	0x0800cd54

08001478 <imu_callback>:

void imu_callback(XsensEventFlag_t event, XsensEventData_t *mtdata) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b09b      	sub	sp, #108	; 0x6c
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6639      	str	r1, [r7, #96]	; 0x60
 8001482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	switch (event) {
 8001486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800148a:	2b1c      	cmp	r3, #28
 800148c:	f200 811e 	bhi.w	80016cc <imu_callback+0x254>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <imu_callback+0x20>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	0800150d 	.word	0x0800150d
 800149c:	080016cd 	.word	0x080016cd
 80014a0:	080016cd 	.word	0x080016cd
 80014a4:	080016cd 	.word	0x080016cd
 80014a8:	080016cd 	.word	0x080016cd
 80014ac:	08001525 	.word	0x08001525
 80014b0:	080016cd 	.word	0x080016cd
 80014b4:	080016cd 	.word	0x080016cd
 80014b8:	080016cd 	.word	0x080016cd
 80014bc:	080016cd 	.word	0x080016cd
 80014c0:	080016cd 	.word	0x080016cd
 80014c4:	080015c1 	.word	0x080015c1
 80014c8:	08001591 	.word	0x08001591
 80014cc:	080016cd 	.word	0x080016cd
 80014d0:	08001561 	.word	0x08001561
 80014d4:	080016cd 	.word	0x080016cd
 80014d8:	080016cd 	.word	0x080016cd
 80014dc:	080016cd 	.word	0x080016cd
 80014e0:	080016cd 	.word	0x080016cd
 80014e4:	080016cd 	.word	0x080016cd
 80014e8:	080016cd 	.word	0x080016cd
 80014ec:	0800161d 	.word	0x0800161d
 80014f0:	080016cd 	.word	0x080016cd
 80014f4:	080016cd 	.word	0x080016cd
 80014f8:	080016cd 	.word	0x080016cd
 80014fc:	08001635 	.word	0x08001635
 8001500:	0800165b 	.word	0x0800165b
 8001504:	08001673 	.word	0x08001673
 8001508:	080015ef 	.word	0x080015ef
	case XSENS_EVT_TEMPERATURE:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT) {
 800150c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0a      	cmp	r3, #10
 8001512:	f040 80c8 	bne.w	80016a6 <imu_callback+0x22e>
			imu.temp = mtdata->data.f4;
 8001516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800151a:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <imu_callback+0x25c>)
 800151c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001520:	6293      	str	r3, [r2, #40]	; 0x28
//			printf("get Temp\n");
		}
	break;
 8001522:	e0c0      	b.n	80016a6 <imu_callback+0x22e>

	case XSENS_EVT_QUATERNION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT4) {
 8001524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b0d      	cmp	r3, #13
 800152a:	f040 80be 	bne.w	80016aa <imu_callback+0x232>
			imu.quaternionWXYZ[0] = mtdata->data.f4x4[0];
 800152e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001532:	4a68      	ldr	r2, [pc, #416]	; (80016d4 <imu_callback+0x25c>)
 8001534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001538:	62d3      	str	r3, [r2, #44]	; 0x2c
			imu.quaternionWXYZ[1] = mtdata->data.f4x4[1];
 800153a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800153c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800153e:	4a65      	ldr	r2, [pc, #404]	; (80016d4 <imu_callback+0x25c>)
 8001540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
			imu.quaternionWXYZ[2] = mtdata->data.f4x4[2];
 8001546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <imu_callback+0x25c>)
 800154c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001550:	6353      	str	r3, [r2, #52]	; 0x34
			imu.quaternionWXYZ[3] = mtdata->data.f4x4[3];
 8001552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001556:	4a5f      	ldr	r2, [pc, #380]	; (80016d4 <imu_callback+0x25c>)
 8001558:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800155c:	6393      	str	r3, [r2, #56]	; 0x38
//			printf("get Quat\n");
		}
	break;
 800155e:	e0a4      	b.n	80016aa <imu_callback+0x232>

	case XSENS_EVT_RATE_OF_TURN:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	f040 80a2 	bne.w	80016ae <imu_callback+0x236>
			imu.rateOfTurnXYZ[0] = mtdata->data.f4x3[0];
 800156a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800156c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800156e:	4a59      	ldr	r2, [pc, #356]	; (80016d4 <imu_callback+0x25c>)
 8001570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001574:	63d3      	str	r3, [r2, #60]	; 0x3c
			imu.rateOfTurnXYZ[1] = mtdata->data.f4x3[1];
 8001576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800157a:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <imu_callback+0x25c>)
 800157c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
			imu.rateOfTurnXYZ[2] = mtdata->data.f4x3[2];
 8001582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a53      	ldr	r2, [pc, #332]	; (80016d4 <imu_callback+0x25c>)
 8001588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
//      printf("get Rot\n");
		}
	break;
 800158e:	e08e      	b.n	80016ae <imu_callback+0x236>

	case XSENS_EVT_FREE_ACCELERATION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b0c      	cmp	r3, #12
 8001596:	f040 808c 	bne.w	80016b2 <imu_callback+0x23a>
			imu.freeAccelerationXYZ[0] = mtdata->data.f4x3[0];
 800159a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800159e:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <imu_callback+0x25c>)
 80015a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a4:	6493      	str	r3, [r2, #72]	; 0x48
			imu.freeAccelerationXYZ[1] = mtdata->data.f4x3[1];
 80015a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015aa:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <imu_callback+0x25c>)
 80015ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
			imu.freeAccelerationXYZ[2] = mtdata->data.f4x3[2];
 80015b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <imu_callback+0x25c>)
 80015b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015bc:	6513      	str	r3, [r2, #80]	; 0x50
//      printf("get Facc\n");
		}
	break;
 80015be:	e078      	b.n	80016b2 <imu_callback+0x23a>

	case XSENS_EVT_ACCELERATION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 80015c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d176      	bne.n	80016b6 <imu_callback+0x23e>
			imu.accelerationXYZ[0] = mtdata->data.f4x3[0];
 80015c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015cc:	4a41      	ldr	r2, [pc, #260]	; (80016d4 <imu_callback+0x25c>)
 80015ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d2:	6553      	str	r3, [r2, #84]	; 0x54
			imu.accelerationXYZ[1] = mtdata->data.f4x3[1];
 80015d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015d8:	4a3e      	ldr	r2, [pc, #248]	; (80016d4 <imu_callback+0x25c>)
 80015da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
			imu.accelerationXYZ[2] = mtdata->data.f4x3[2];
 80015e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <imu_callback+0x25c>)
 80015e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ea:	65d3      	str	r3, [r2, #92]	; 0x5c
//       printf("get Facc\n");
		}
	break;
 80015ec:	e063      	b.n	80016b6 <imu_callback+0x23e>

	case XSENS_EVT_GNSS_PVT_DATA:
		if (mtdata->type == XSENS_EVT_TYPE_GNSS_DATA) {
 80015ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b2d      	cmp	r3, #45	; 0x2d
 80015f4:	d161      	bne.n	80016ba <imu_callback+0x242>
			imu.myGnssData = gnssPvt_parse(mtdata->gnssPvtData);
 80015f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015f8:	1c9a      	adds	r2, r3, #2
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <imu_callback+0x25c>)
 80015fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001600:	461c      	mov	r4, r3
 8001602:	463b      	mov	r3, r7
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f991 	bl	800192e <gnssPvt_parse>
 800160c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8001610:	4639      	mov	r1, r7
 8001612:	2260      	movs	r2, #96	; 0x60
 8001614:	4618      	mov	r0, r3
 8001616:	f008 f949 	bl	80098ac <memcpy>
//       printf("get Gnss data\n");
		}
	break;
 800161a:	e04e      	b.n	80016ba <imu_callback+0x242>

	case XSENS_EVT_STATUS_WORD:
		if (mtdata->type == XSENS_EVT_TYPE_U32) {
 800161c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d14c      	bne.n	80016be <imu_callback+0x246>
			imu.status = mtdata->data.u4;
 8001624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001628:	4a2a      	ldr	r2, [pc, #168]	; (80016d4 <imu_callback+0x25c>)
 800162a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800162e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
//			printf("get Sword\n");
		}
	break;
 8001632:	e044      	b.n	80016be <imu_callback+0x246>
//      printf("get Facc\n");
		}
	break;

	case XSENS_EVT_LAT_LON:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT2) {
 8001634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b0b      	cmp	r3, #11
 800163a:	d142      	bne.n	80016c2 <imu_callback+0x24a>
			imu.latitude = mtdata->data.f4x2[0];
 800163c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800163e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001640:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <imu_callback+0x25c>)
 8001642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001646:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			imu.longitude = mtdata->data.f4x2[1];
 800164a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800164c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <imu_callback+0x25c>)
 8001650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001654:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
//			printf("get LatLon\n");
		}
	break;
 8001658:	e033      	b.n	80016c2 <imu_callback+0x24a>

	case XSENS_EVT_ALTITUDE_ELLIPSOID:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT) {
 800165a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b0a      	cmp	r3, #10
 8001660:	d131      	bne.n	80016c6 <imu_callback+0x24e>
			imu.altitudeEllip = mtdata->data.f4;
 8001662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <imu_callback+0x25c>)
 8001668:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800166c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
//			printf("get Alt\n");
		}
	break;
 8001670:	e029      	b.n	80016c6 <imu_callback+0x24e>

	case XSENS_EVT_VELOCITY_XYZ:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d127      	bne.n	80016ca <imu_callback+0x252>
			imu.velocityXYZ[0] = mtdata->data.f4x3[0];
 800167a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800167c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <imu_callback+0x25c>)
 8001680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001684:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
			imu.velocityXYZ[1] = mtdata->data.f4x3[1];
 8001688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800168a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <imu_callback+0x25c>)
 800168e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
			imu.velocityXYZ[2] = mtdata->data.f4x3[2];
 8001696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <imu_callback+0x25c>)
 800169c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
//			printf("get Vel\n");
		}
	break;
 80016a4:	e011      	b.n	80016ca <imu_callback+0x252>
	break;
 80016a6:	bf00      	nop
 80016a8:	e010      	b.n	80016cc <imu_callback+0x254>
	break;
 80016aa:	bf00      	nop
 80016ac:	e00e      	b.n	80016cc <imu_callback+0x254>
	break;
 80016ae:	bf00      	nop
 80016b0:	e00c      	b.n	80016cc <imu_callback+0x254>
	break;
 80016b2:	bf00      	nop
 80016b4:	e00a      	b.n	80016cc <imu_callback+0x254>
	break;
 80016b6:	bf00      	nop
 80016b8:	e008      	b.n	80016cc <imu_callback+0x254>
	break;
 80016ba:	bf00      	nop
 80016bc:	e006      	b.n	80016cc <imu_callback+0x254>
	break;
 80016be:	bf00      	nop
 80016c0:	e004      	b.n	80016cc <imu_callback+0x254>
	break;
 80016c2:	bf00      	nop
 80016c4:	e002      	b.n	80016cc <imu_callback+0x254>
	break;
 80016c6:	bf00      	nop
 80016c8:	e000      	b.n	80016cc <imu_callback+0x254>
	break;
 80016ca:	bf00      	nop

	}
}
 80016cc:	bf00      	nop
 80016ce:	376c      	adds	r7, #108	; 0x6c
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	20000308 	.word	0x20000308

080016d8 <handle_ack_gotoconfig>:

// Command ACK callback functions
void handle_ack_gotoconfig(xsens_packet_buffer_t *packet) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_CONFIG;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <handle_ack_gotoconfig+0x20>)
 80016e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e6:	2201      	movs	r2, #1
 80016e8:	771a      	strb	r2, [r3, #28]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000308 	.word	0x20000308

080016fc <handle_ack_gotomeasurement>:

void handle_ack_gotomeasurement(xsens_packet_buffer_t *packet) {
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_MEASUREMENT;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <handle_ack_gotomeasurement+0x20>)
 8001706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170a:	2202      	movs	r2, #2
 800170c:	771a      	strb	r2, [r3, #28]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000308 	.word	0x20000308

08001720 <handle_ack_outputconfiguration>:

void handle_ack_outputconfiguration(xsens_packet_buffer_t *packet) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_CONFIGURED;
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <handle_ack_outputconfiguration+0x20>)
 800172a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172e:	2203      	movs	r2, #3
 8001730:	771a      	strb	r2, [r3, #28]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000308 	.word	0x20000308

08001744 <myHandle_WAKEUP_cb>:

void myHandle_WAKEUP_cb(xsens_packet_buffer_t *packet) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_WAKEUP;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <myHandle_WAKEUP_cb+0x20>)
 800174e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001752:	2204      	movs	r2, #4
 8001754:	771a      	strb	r2, [r3, #28]
	printf("get Wake up\n");
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <myHandle_WAKEUP_cb+0x24>)
 8001758:	f008 fdae 	bl	800a2b8 <puts>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000308 	.word	0x20000308
 8001768:	0800cd64 	.word	0x0800cd64

0800176c <imu_send_data>:

// The library calls this function to send packets to the IMU
void imu_send_data( uint8_t *data, uint16_t length ) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&IMU_uart, data, length);
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	461a      	mov	r2, r3
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <imu_send_data+0x20>)
 8001780:	f006 fe30 	bl	80083e4 <HAL_UART_Transmit_DMA>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200019b8 	.word	0x200019b8

08001790 <changeOutputRate>:
		rotPacket.payload[i + 3] = rotData.data.u4;
	}
	xsens_mti_send(&imu.imu_interface, &rotPacket);
}

void changeOutputRate(int output_rate){
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	XsensFrequencyConfig_t settings[] = {
 8001798:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800179c:	81bb      	strh	r3, [r7, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	81fb      	strh	r3, [r7, #14]
 80017a4:	f242 0310 	movw	r3, #8208	; 0x2010
 80017a8:	823b      	strh	r3, [r7, #16]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	827b      	strh	r3, [r7, #18]
 80017b0:	f248 0320 	movw	r3, #32800	; 0x8020
 80017b4:	82bb      	strh	r3, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	82fb      	strh	r3, [r7, #22]
 80017bc:	f244 0330 	movw	r3, #16432	; 0x4030
 80017c0:	833b      	strh	r3, [r7, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	837b      	strh	r3, [r7, #26]
 80017c8:	f244 0320 	movw	r3, #16416	; 0x4020
 80017cc:	83bb      	strh	r3, [r7, #28]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	83fb      	strh	r3, [r7, #30]
 80017d4:	f247 0310 	movw	r3, #28688	; 0x7010
 80017d8:	843b      	strh	r3, [r7, #32]
 80017da:	2304      	movs	r3, #4
 80017dc:	847b      	strh	r3, [r7, #34]	; 0x22
 80017de:	f24e 0320 	movw	r3, #57376	; 0xe020
 80017e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ea:	f245 0330 	movw	r3, #20528	; 0x5030
 80017ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80017f6:	f245 0340 	movw	r3, #20544	; 0x5040
 80017fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80017fc:	2304      	movs	r3, #4
 80017fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001800:	f245 0320 	movw	r3, #20512	; 0x5020
 8001804:	863b      	strh	r3, [r7, #48]	; 0x30
 8001806:	2304      	movs	r3, #4
 8001808:	867b      	strh	r3, [r7, #50]	; 0x32
 800180a:	f24d 0310 	movw	r3, #53264	; 0xd010
 800180e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	b29b      	uxth	r3, r3
 8001814:	86fb      	strh	r3, [r7, #54]	; 0x36
		{ .id = XDI_ALTITUDE_ELLIPSOID, .frequency = 4 },
		{ .id =	XDI_VELOCITY_XYZ, 			.frequency = output_rate },
//		  { .id = XSENS_IDENTIFIER_FORMAT(XDI_QUATERNION, XSENS_FLOAT_FIXED1220, XSENS_COORD_ENU), .frequency = 100 },
	};

	xsens_mti_set_configuration(&imu.imu_interface, settings, XSENS_ARR_ELEM(settings));
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	220b      	movs	r2, #11
 800181c:	4619      	mov	r1, r3
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <changeOutputRate+0x9c>)
 8001820:	f001 f88b 	bl	800293a <xsens_mti_set_configuration>

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	; 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000b10 	.word	0x20000b10

08001830 <f32_to_f16>:
 *      Author: liu willy
 */

#include "IMU_rel/float16Tool.h"

void f32_to_f16(f32_t *fIn, f16_t *u){
 8001830:	b480      	push	{r7}
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
    f32_t f32inf = { 255UL << 23 };
 800183a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800183e:	617b      	str	r3, [r7, #20]
    f32_t f16inf = { 31UL << 23 };
 8001840:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8001844:	613b      	str	r3, [r7, #16]
    f32_t magic = { 15UL << 23 };
 8001846:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 800184a:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000U;
 800184c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001850:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = ~0xFFFU;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <f32_to_f16+0xb0>)
 8001854:	61fb      	str	r3, [r7, #28]

    f32_t in;
    in.f = fIn->f;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u32 & sign_mask;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	6a3a      	ldr	r2, [r7, #32]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
    in.u32 ^= sign;
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4053      	eors	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (in.u32 >= f32inf.u32)
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	d30a      	bcc.n	800188e <f32_to_f16+0x5e>
    {
        out = (in.u32 > f32inf.u32) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	d902      	bls.n	8001886 <f32_to_f16+0x56>
 8001880:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001884:	e001      	b.n	800188a <f32_to_f16+0x5a>
 8001886:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800188a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800188c:	e018      	b.n	80018c0 <f32_to_f16+0x90>
    }
    else
    {
        in.u32 &= round_mask;
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4013      	ands	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 8001896:	ed97 7a02 	vldr	s14, [r7, #8]
 800189a:	edd7 7a03 	vldr	s15, [r7, #12]
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a2:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u32 -= round_mask;
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	60bb      	str	r3, [r7, #8]
        if (in.u32 > f16inf.u32)
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d901      	bls.n	80018ba <f32_to_f16+0x8a>
        {
            in.u32 = f16inf.u32;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u32 >> 13);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	0b5b      	lsrs	r3, r3, #13
 80018be:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    out |= (uint16_t)(sign >> 16);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	0c1b      	lsrs	r3, r3, #16
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018c8:	4313      	orrs	r3, r2
 80018ca:	84fb      	strh	r3, [r7, #38]	; 0x26
    u->u16 = out;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018d0:	801a      	strh	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	372c      	adds	r7, #44	; 0x2c
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	fffff000 	.word	0xfffff000

080018e4 <makeNum>:
 *      Author: liu willy
 */

#include "IMU_rel/gnssPvtDataParser.h"

uint32_t makeNum(const uint8_t pvtDataStr[], uint8_t num, uint8_t offset){
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
 80018f0:	4613      	mov	r3, r2
 80018f2:	70bb      	strb	r3, [r7, #2]
    uint32_t result=0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < num; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e00c      	b.n	8001918 <makeNum+0x34>
    {
        result = (result<<8) | pvtDataStr[i+offset];
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	78b9      	ldrb	r1, [r7, #2]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	440a      	add	r2, r1
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	440a      	add	r2, r1
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < num; i++)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	d3ee      	bcc.n	80018fe <makeNum+0x1a>
    }
    return result;
 8001920:	68fb      	ldr	r3, [r7, #12]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <gnssPvt_parse>:

GnssPvtData_t gnssPvt_parse(const uint8_t pvtDataStr[]){
 800192e:	b580      	push	{r7, lr}
 8001930:	b09a      	sub	sp, #104	; 0x68
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
    GnssPvtData_t pvtDataOut={0};
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	2260      	movs	r2, #96	; 0x60
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f007 ffc1 	bl	80098c8 <memset>
    pvtDataOut.itow         = (makeNum(pvtDataStr, 4, 0));
 8001946:	2200      	movs	r2, #0
 8001948:	2104      	movs	r1, #4
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f7ff ffca 	bl	80018e4 <makeNum>
 8001950:	4603      	mov	r3, r0
 8001952:	60bb      	str	r3, [r7, #8]
    pvtDataOut.year         = (makeNum(pvtDataStr, 2, 4));
 8001954:	2204      	movs	r2, #4
 8001956:	2102      	movs	r1, #2
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f7ff ffc3 	bl	80018e4 <makeNum>
 800195e:	4603      	mov	r3, r0
 8001960:	b29b      	uxth	r3, r3
 8001962:	81bb      	strh	r3, [r7, #12]
    pvtDataOut.month        = (makeNum(pvtDataStr, 1, 6));
 8001964:	2206      	movs	r2, #6
 8001966:	2101      	movs	r1, #1
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f7ff ffbb 	bl	80018e4 <makeNum>
 800196e:	4603      	mov	r3, r0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73bb      	strb	r3, [r7, #14]
    pvtDataOut.day          = (makeNum(pvtDataStr, 1, 7));
 8001974:	2207      	movs	r2, #7
 8001976:	2101      	movs	r1, #1
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7ff ffb3 	bl	80018e4 <makeNum>
 800197e:	4603      	mov	r3, r0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	73fb      	strb	r3, [r7, #15]
    pvtDataOut.hour         = (makeNum(pvtDataStr, 1, 8));
 8001984:	2208      	movs	r2, #8
 8001986:	2101      	movs	r1, #1
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7ff ffab 	bl	80018e4 <makeNum>
 800198e:	4603      	mov	r3, r0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	743b      	strb	r3, [r7, #16]
    pvtDataOut.minute       = (makeNum(pvtDataStr, 1, 9));
 8001994:	2209      	movs	r2, #9
 8001996:	2101      	movs	r1, #1
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7ff ffa3 	bl	80018e4 <makeNum>
 800199e:	4603      	mov	r3, r0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	747b      	strb	r3, [r7, #17]
    pvtDataOut.second       = (makeNum(pvtDataStr, 1, 10));
 80019a4:	220a      	movs	r2, #10
 80019a6:	2101      	movs	r1, #1
 80019a8:	6838      	ldr	r0, [r7, #0]
 80019aa:	f7ff ff9b 	bl	80018e4 <makeNum>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	74bb      	strb	r3, [r7, #18]
    pvtDataOut.valid        = (makeNum(pvtDataStr, 1, 11));
 80019b4:	220b      	movs	r2, #11
 80019b6:	2101      	movs	r1, #1
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f7ff ff93 	bl	80018e4 <makeNum>
 80019be:	4603      	mov	r3, r0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	74fb      	strb	r3, [r7, #19]
    pvtDataOut.tAcc         = (makeNum(pvtDataStr, 4, 12));
 80019c4:	220c      	movs	r2, #12
 80019c6:	2104      	movs	r1, #4
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7ff ff8b 	bl	80018e4 <makeNum>
 80019ce:	4603      	mov	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]
    pvtDataOut.nano         = (makeNum(pvtDataStr, 4, 16));
 80019d2:	2210      	movs	r2, #16
 80019d4:	2104      	movs	r1, #4
 80019d6:	6838      	ldr	r0, [r7, #0]
 80019d8:	f7ff ff84 	bl	80018e4 <makeNum>
 80019dc:	4603      	mov	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]
    pvtDataOut.fixtype      = (makeNum(pvtDataStr, 1, 20));
 80019e0:	2214      	movs	r2, #20
 80019e2:	2101      	movs	r1, #1
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff ff7d 	bl	80018e4 <makeNum>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	773b      	strb	r3, [r7, #28]
    pvtDataOut.flags        = (makeNum(pvtDataStr, 1, 21));
 80019f0:	2215      	movs	r2, #21
 80019f2:	2101      	movs	r1, #1
 80019f4:	6838      	ldr	r0, [r7, #0]
 80019f6:	f7ff ff75 	bl	80018e4 <makeNum>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	777b      	strb	r3, [r7, #29]
    pvtDataOut.numSV        = (makeNum(pvtDataStr, 1, 22));
 8001a00:	2216      	movs	r2, #22
 8001a02:	2101      	movs	r1, #1
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7ff ff6d 	bl	80018e4 <makeNum>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	77bb      	strb	r3, [r7, #30]
    pvtDataOut.Reserved1    = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    pvtDataOut.longitude    = (makeNum(pvtDataStr, 4, 24));
 8001a14:	2218      	movs	r2, #24
 8001a16:	2104      	movs	r1, #4
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f7ff ff63 	bl	80018e4 <makeNum>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	623b      	str	r3, [r7, #32]
    pvtDataOut.latitude     = (makeNum(pvtDataStr, 4, 28));
 8001a22:	221c      	movs	r2, #28
 8001a24:	2104      	movs	r1, #4
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	f7ff ff5c 	bl	80018e4 <makeNum>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    pvtDataOut.height       = (makeNum(pvtDataStr, 4, 32));
 8001a30:	2220      	movs	r2, #32
 8001a32:	2104      	movs	r1, #4
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f7ff ff55 	bl	80018e4 <makeNum>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    pvtDataOut.hMSL         = (makeNum(pvtDataStr, 4, 36));
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	2104      	movs	r1, #4
 8001a42:	6838      	ldr	r0, [r7, #0]
 8001a44:	f7ff ff4e 	bl	80018e4 <makeNum>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pvtDataOut.hAcc         = (makeNum(pvtDataStr, 4, 40));
 8001a4c:	2228      	movs	r2, #40	; 0x28
 8001a4e:	2104      	movs	r1, #4
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f7ff ff47 	bl	80018e4 <makeNum>
 8001a56:	4603      	mov	r3, r0
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
    pvtDataOut.vAcc         = (makeNum(pvtDataStr, 4, 44));
 8001a5a:	222c      	movs	r2, #44	; 0x2c
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f7ff ff40 	bl	80018e4 <makeNum>
 8001a64:	4603      	mov	r3, r0
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
    pvtDataOut.velN         = (makeNum(pvtDataStr, 4, 48));
 8001a68:	2230      	movs	r2, #48	; 0x30
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	6838      	ldr	r0, [r7, #0]
 8001a6e:	f7ff ff39 	bl	80018e4 <makeNum>
 8001a72:	4603      	mov	r3, r0
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
    pvtDataOut.velE         = (makeNum(pvtDataStr, 4, 52));
 8001a76:	2234      	movs	r2, #52	; 0x34
 8001a78:	2104      	movs	r1, #4
 8001a7a:	6838      	ldr	r0, [r7, #0]
 8001a7c:	f7ff ff32 	bl	80018e4 <makeNum>
 8001a80:	4603      	mov	r3, r0
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
    pvtDataOut.velD         = (makeNum(pvtDataStr, 4, 56));
 8001a84:	2238      	movs	r2, #56	; 0x38
 8001a86:	2104      	movs	r1, #4
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f7ff ff2b 	bl	80018e4 <makeNum>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	643b      	str	r3, [r7, #64]	; 0x40
    pvtDataOut.gSpeed       = (makeNum(pvtDataStr, 4, 60));
 8001a92:	223c      	movs	r2, #60	; 0x3c
 8001a94:	2104      	movs	r1, #4
 8001a96:	6838      	ldr	r0, [r7, #0]
 8001a98:	f7ff ff24 	bl	80018e4 <makeNum>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
    pvtDataOut.headMot      = (makeNum(pvtDataStr, 4, 64));
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	6838      	ldr	r0, [r7, #0]
 8001aa6:	f7ff ff1d 	bl	80018e4 <makeNum>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
    pvtDataOut.sAcc         = (makeNum(pvtDataStr, 4, 68));
 8001aae:	2244      	movs	r2, #68	; 0x44
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	6838      	ldr	r0, [r7, #0]
 8001ab4:	f7ff ff16 	bl	80018e4 <makeNum>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    pvtDataOut.headAcc      = (makeNum(pvtDataStr, 4, 72));
 8001abc:	2248      	movs	r2, #72	; 0x48
 8001abe:	2104      	movs	r1, #4
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f7ff ff0f 	bl	80018e4 <makeNum>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	653b      	str	r3, [r7, #80]	; 0x50
    pvtDataOut.headVeh      = (makeNum(pvtDataStr, 4, 76));
 8001aca:	224c      	movs	r2, #76	; 0x4c
 8001acc:	2104      	movs	r1, #4
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f7ff ff08 	bl	80018e4 <makeNum>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	657b      	str	r3, [r7, #84]	; 0x54
    pvtDataOut.gdop         = (makeNum(pvtDataStr, 2, 80));
 8001ad8:	2250      	movs	r2, #80	; 0x50
 8001ada:	2102      	movs	r1, #2
 8001adc:	6838      	ldr	r0, [r7, #0]
 8001ade:	f7ff ff01 	bl	80018e4 <makeNum>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    pvtDataOut.pdop         = (makeNum(pvtDataStr, 2, 82));
 8001aea:	2252      	movs	r2, #82	; 0x52
 8001aec:	2102      	movs	r1, #2
 8001aee:	6838      	ldr	r0, [r7, #0]
 8001af0:	f7ff fef8 	bl	80018e4 <makeNum>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    pvtDataOut.tdop         = (makeNum(pvtDataStr, 2, 84));
 8001afc:	2254      	movs	r2, #84	; 0x54
 8001afe:	2102      	movs	r1, #2
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f7ff feef 	bl	80018e4 <makeNum>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    pvtDataOut.vdop         = (makeNum(pvtDataStr, 2, 86));
 8001b0e:	2256      	movs	r2, #86	; 0x56
 8001b10:	2102      	movs	r1, #2
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f7ff fee6 	bl	80018e4 <makeNum>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pvtDataOut.hdop         = (makeNum(pvtDataStr, 2, 88));
 8001b20:	2258      	movs	r2, #88	; 0x58
 8001b22:	2102      	movs	r1, #2
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f7ff fedd 	bl	80018e4 <makeNum>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    pvtDataOut.ndop         = (makeNum(pvtDataStr, 2, 90));
 8001b32:	225a      	movs	r2, #90	; 0x5a
 8001b34:	2102      	movs	r1, #2
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	f7ff fed4 	bl	80018e4 <makeNum>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    pvtDataOut.edop         = (makeNum(pvtDataStr, 2, 92));
 8001b44:	225c      	movs	r2, #92	; 0x5c
 8001b46:	2102      	movs	r1, #2
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff fecb 	bl	80018e4 <makeNum>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    return pvtDataOut;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2260      	movs	r2, #96	; 0x60
 8001b60:	4619      	mov	r1, r3
 8001b62:	f007 fea3 	bl	80098ac <memcpy>
}
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	3768      	adds	r7, #104	; 0x68
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <xsens_mdata2_process>:
// MData2 packets have a series of smaller structures of data
// This handler walks through the buffer, identifies the XDA type from two bytes
// Then applies relevant conversions back into native types/structures as necessary
// Packets don't have a fixed number of child elements
void xsens_mdata2_process( xsens_packet_buffer_t *packet, callback_event_t evt_cb )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0c4      	sub	sp, #272	; 0x110
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b7e:	6018      	str	r0, [r3, #0]
 8001b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b88:	6019      	str	r1, [r3, #0]
    mdata2_parser_state_t md2_state      = XDI_PARSE_ID_B1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    mdata2_packet_t       output         = { 0 };
 8001b90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f007 fe91 	bl	80098c8 <memset>
    uint8_t               bytes_consumed = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

    // Walk through the packet and run a tiny statemachine
    // to parse the sub-fields
    for( uint16_t i = 0; i < packet->length; i++ )
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001bb2:	e09e      	b.n	8001cf2 <xsens_mdata2_process+0x182>
    {
        switch( md2_state )
 8001bb4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	f200 8085 	bhi.w	8001cc8 <xsens_mdata2_process+0x158>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <xsens_mdata2_process+0x54>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bff 	.word	0x08001bff
 8001bcc:	08001c33 	.word	0x08001c33
 8001bd0:	08001c57 	.word	0x08001c57
        {
            case XDI_PARSE_ID_B1:
                // High byte
                output.id = ( uint16_t )( (uint16_t)packet->payload[i] << 8u );
 8001bd4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001bd8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bdc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	791b      	ldrb	r3, [r3, #4]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bf4:	801a      	strh	r2, [r3, #0]
                md2_state = XDI_PARSE_ID_B2;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001bfc:	e074      	b.n	8001ce8 <xsens_mdata2_process+0x178>

            case XDI_PARSE_ID_B2:
                // Low byte
                output.id |= ( uint16_t )( (uint16_t)packet->payload[i] );
 8001bfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c06:	881a      	ldrh	r2, [r3, #0]
 8001c08:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001c0c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001c10:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001c14:	6809      	ldr	r1, [r1, #0]
 8001c16:	440b      	add	r3, r1
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c28:	801a      	strh	r2, [r3, #0]
                md2_state = XDI_PARSE_LENGTH;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001c30:	e05a      	b.n	8001ce8 <xsens_mdata2_process+0x178>

            case XDI_PARSE_LENGTH:
                // Length is one byte
                output.length = packet->payload[i];
 8001c32:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001c36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c3a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	791a      	ldrb	r2, [r3, #4]
 8001c44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c4c:	709a      	strb	r2, [r3, #2]
                md2_state     = XDI_PARSE_DATA;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001c54:	e048      	b.n	8001ce8 <xsens_mdata2_process+0x178>

            case XDI_PARSE_DATA:
                // Copy data across
                output.payload[bytes_consumed] = packet->payload[i];
 8001c56:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001c5a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001c5e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001c62:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001c66:	6809      	ldr	r1, [r1, #0]
 8001c68:	440a      	add	r2, r1
 8001c6a:	7911      	ldrb	r1, [r2, #4]
 8001c6c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c70:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001c74:	4413      	add	r3, r2
 8001c76:	460a      	mov	r2, r1
 8001c78:	70da      	strb	r2, [r3, #3]
                bytes_consumed++;
 8001c7a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

                // Once the field's data been copied to our sub-buffer,
                // handle it
                if( bytes_consumed >= output.length )
 8001c84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c8c:	789b      	ldrb	r3, [r3, #2]
 8001c8e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d327      	bcc.n	8001ce6 <xsens_mdata2_process+0x176>
                {
                    // Using the isolated field, search for matching XID
                    // and then convert payloads to LE & structured data
                    xsens_mdata2_decode_field( &output, evt_cb );
 8001c96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c9a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c9e:	f107 0208 	add.w	r2, r7, #8
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f000 f835 	bl	8001d14 <xsens_mdata2_decode_field>

                    // Cleanup our state before parsing remaining fields
                    md2_state      = XDI_PARSE_ID_B1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                    bytes_consumed = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
                    memset( &output, 0, sizeof( mdata2_packet_t ) );
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f007 fe01 	bl	80098c8 <memset>
                }
                break;
 8001cc6:	e00e      	b.n	8001ce6 <xsens_mdata2_process+0x176>

            default:
                // Case switch should be an exhaustive match?
                // Reset state?
                md2_state      = XDI_PARSE_ID_B1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                bytes_consumed = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
                memset( &output, 0, sizeof( mdata2_packet_t ) );
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f007 fdf2 	bl	80098c8 <memset>
                break;
 8001ce4:	e000      	b.n	8001ce8 <xsens_mdata2_process+0x178>
                break;
 8001ce6:	bf00      	nop
    for( uint16_t i = 0; i < packet->length; i++ )
 8001ce8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001cec:	3301      	adds	r3, #1
 8001cee:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	885b      	ldrh	r3, [r3, #2]
 8001cfe:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f4ff af56 	bcc.w	8001bb4 <xsens_mdata2_process+0x44>
        }
    }

    // Finished MData2 parsing in payload
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <xsens_mdata2_decode_field>:
};

// With the 'isolated' field from the rest of the payload,
// convert to LE and pass to user cb in a union
void xsens_mdata2_decode_field( mdata2_packet_t *output, callback_event_t evt_cb )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b0b2      	sub	sp, #200	; 0xc8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
    XsensEventData_t             value       = { 0 };
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	22b0      	movs	r2, #176	; 0xb0
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f007 fdce 	bl	80098c8 <memset>
    const mdata2_decode_rules_t *decode_rule = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    enum XSENS_FLOAT_TYPE number_precision = XSENS_IDENTIFIER_FORMAT_GET_PRECISION( output->id );
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
    enum XSENS_COORDINATE_SYSTEM coordinate_system = XSENS_IDENTIFIER_FORMAT_GET_COORD_SYSTEM( output->id );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
    uint16_t id_simplifed = XSENS_IDENTIFIER_FORMAT_SIMPLIFY( output->id );
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	f023 030f 	bic.w	r3, r3, #15
 8001d56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    
    // Find the matching XID in the table
    uint8_t table_length = sizeof( xid_decode_table ) / sizeof( mdata2_decode_rules_t );
 8001d5a:	231d      	movs	r3, #29
 8001d5c:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
    for( uint8_t i = 0; i < table_length; i++ )
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001d66:	e015      	b.n	8001d94 <xsens_mdata2_decode_field+0x80>
    {
        if( xid_decode_table[i].xid == id_simplifed )
 8001d68:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001d6c:	4ad6      	ldr	r2, [pc, #856]	; (80020c8 <xsens_mdata2_decode_field+0x3b4>)
 8001d6e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d107      	bne.n	8001d8a <xsens_mdata2_decode_field+0x76>
        {
            decode_rule = &xid_decode_table[i];
 8001d7a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4ad1      	ldr	r2, [pc, #836]	; (80020c8 <xsens_mdata2_decode_field+0x3b4>)
 8001d82:	4413      	add	r3, r2
 8001d84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            break;
 8001d88:	e00a      	b.n	8001da0 <xsens_mdata2_decode_field+0x8c>
    for( uint8_t i = 0; i < table_length; i++ )
 8001d8a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001d94:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8001d98:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3e3      	bcc.n	8001d68 <xsens_mdata2_decode_field+0x54>
        }
    }

    // Apply post-processing (BE->LE) strategy specific to the packet type
    if( decode_rule )
 8001da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 82fd 	beq.w	80023a4 <xsens_mdata2_decode_field+0x690>
    {


    	if(decode_rule->xid == XDI_GNSS_PVT_DATA){
 8001daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f247 0210 	movw	r2, #28688	; 0x7010
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d11b      	bne.n	8001df0 <xsens_mdata2_decode_field+0xdc>
    		value.type = decode_rule->type;
 8001db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	723b      	strb	r3, [r7, #8]
				value.coord_ref = coordinate_system;
 8001dc0:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001dc4:	727b      	strb	r3, [r7, #9]
    		memcpy(value.gnssPvtData, output->payload, 94);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1cd9      	adds	r1, r3, #3
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	3302      	adds	r3, #2
 8001dd0:	225e      	movs	r2, #94	; 0x5e
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 fd6a 	bl	80098ac <memcpy>

				// Call the user-callback with the transformed data
				if( evt_cb )
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <xsens_mdata2_decode_field+0xdc>
				{
						evt_cb( decode_rule->event, &value );
 8001dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001de2:	789a      	ldrb	r2, [r3, #2]
 8001de4:	f107 0108 	add.w	r1, r7, #8
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4610      	mov	r0, r2
 8001dec:	4798      	blx	r3
 8001dee:	e2d9      	b.n	80023a4 <xsens_mdata2_decode_field+0x690>
						return;
				}
    	}

        // The structure describes the typical type
        value.type = decode_rule->type;
 8001df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df4:	78db      	ldrb	r3, [r3, #3]
 8001df6:	723b      	strb	r3, [r7, #8]

        //  For situations where non-single precision is used, apply an offset to the enum
        //  to correctly describe the type as fixed-precision or double, etc
        if( number_precision )
 8001df8:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01c      	beq.n	8001e3a <xsens_mdata2_decode_field+0x126>
        {
            if( decode_rule->type < XSENS_EVT_TYPE_FLOAT )
 8001e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e04:	78db      	ldrb	r3, [r3, #3]
 8001e06:	2b09      	cmp	r3, #9
 8001e08:	d80a      	bhi.n	8001e20 <xsens_mdata2_decode_field+0x10c>
            {
                // Enum offset doesn't apply cleanly for non-float default values
                // So we 'zero' out the table's value, and use the precision offset to get
                // the single-value type field of that type
                value.type = XSENS_EVT_TYPE_FLOAT + ( number_precision * 10 );
 8001e0a:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	723b      	strb	r3, [r7, #8]
 8001e1e:	e00c      	b.n	8001e3a <xsens_mdata2_decode_field+0x126>
            }
            else
            {
                value.type = decode_rule->type + ( number_precision * 10 );
 8001e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e24:	78da      	ldrb	r2, [r3, #3]
 8001e26:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	0089      	lsls	r1, r1, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	723b      	strb	r3, [r7, #8]
            }
        }

        // Provide the local tangent plane coordinate scheme in the callback
        value.coord_ref = coordinate_system;
 8001e3a:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001e3e:	727b      	strb	r3, [r7, #9]

        // Convert BE data to LE, put it in the right union field
        switch( value.type )
 8001e40:	7a3b      	ldrb	r3, [r7, #8]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	2b2b      	cmp	r3, #43	; 0x2b
 8001e46:	f200 829f 	bhi.w	8002388 <xsens_mdata2_decode_field+0x674>
 8001e4a:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <xsens_mdata2_decode_field+0x13c>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001f01 	.word	0x08001f01
 8001e54:	08001f0b 	.word	0x08001f0b
 8001e58:	08001f1d 	.word	0x08001f1d
 8001e5c:	08002389 	.word	0x08002389
 8001e60:	08002389 	.word	0x08002389
 8001e64:	08002389 	.word	0x08002389
 8001e68:	08002389 	.word	0x08002389
 8001e6c:	08002389 	.word	0x08002389
 8001e70:	08002389 	.word	0x08002389
 8001e74:	08001f2d 	.word	0x08001f2d
 8001e78:	08001f41 	.word	0x08001f41
 8001e7c:	08001f67 	.word	0x08001f67
 8001e80:	08001f9f 	.word	0x08001f9f
 8001e84:	08001fe9 	.word	0x08001fe9
 8001e88:	08002389 	.word	0x08002389
 8001e8c:	08002389 	.word	0x08002389
 8001e90:	08002389 	.word	0x08002389
 8001e94:	08002389 	.word	0x08002389
 8001e98:	08002389 	.word	0x08002389
 8001e9c:	08001f2d 	.word	0x08001f2d
 8001ea0:	08001f41 	.word	0x08001f41
 8001ea4:	08001f67 	.word	0x08001f67
 8001ea8:	08001f9f 	.word	0x08001f9f
 8001eac:	08001fe9 	.word	0x08001fe9
 8001eb0:	08002389 	.word	0x08002389
 8001eb4:	08002389 	.word	0x08002389
 8001eb8:	08002389 	.word	0x08002389
 8001ebc:	08002389 	.word	0x08002389
 8001ec0:	08002389 	.word	0x08002389
 8001ec4:	0800208d 	.word	0x0800208d
 8001ec8:	080020a1 	.word	0x080020a1
 8001ecc:	080020cd 	.word	0x080020cd
 8001ed0:	08002109 	.word	0x08002109
 8001ed4:	08002159 	.word	0x08002159
 8001ed8:	08002389 	.word	0x08002389
 8001edc:	08002389 	.word	0x08002389
 8001ee0:	08002389 	.word	0x08002389
 8001ee4:	08002389 	.word	0x08002389
 8001ee8:	08002389 	.word	0x08002389
 8001eec:	0800220d 	.word	0x0800220d
 8001ef0:	08002221 	.word	0x08002221
 8001ef4:	08002249 	.word	0x08002249
 8001ef8:	08002285 	.word	0x08002285
 8001efc:	080022d5 	.word	0x080022d5
        {
            case XSENS_EVT_TYPE_U8:
                value.data.u1 = output->payload[0];
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	78db      	ldrb	r3, [r3, #3]
 8001f04:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                break;
 8001f08:	e241      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_U16:
                value.data.u2 = xsens_coalesce_16BE_16LE( &output->payload[0] );
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fe84 	bl	8002c1c <xsens_coalesce_16BE_16LE>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                break;
 8001f1a:	e238      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_U32:
                value.data.u4 = xsens_coalesce_32BE_32LE( &output->payload[0] );
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fe90 	bl	8002c46 <xsens_coalesce_32BE_32LE>
 8001f26:	4603      	mov	r3, r0
 8001f28:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8001f2a:	e230      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT:
            case XSENS_EVT_TYPE_1220FP:
                value.data.f4 = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3303      	adds	r3, #3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fea4 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001f36:	eef0 7a40 	vmov.f32	s15, s0
 8001f3a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                break;
 8001f3e:	e226      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT2:
            case XSENS_EVT_TYPE_1220FP2:
                value.data.f4x2[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3303      	adds	r3, #3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fe9a 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001f4a:	eef0 7a40 	vmov.f32	s15, s0
 8001f4e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x2[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3307      	adds	r3, #7
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fe91 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001f5c:	eef0 7a40 	vmov.f32	s15, s0
 8001f60:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                break;
 8001f64:	e213      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT3:
            case XSENS_EVT_TYPE_1220FP3:
                value.data.f4x3[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3303      	adds	r3, #3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fe87 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001f70:	eef0 7a40 	vmov.f32	s15, s0
 8001f74:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x3[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3307      	adds	r3, #7
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fe7e 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001f82:	eef0 7a40 	vmov.f32	s15, s0
 8001f86:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x3[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	330b      	adds	r3, #11
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fe75 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                break;
 8001f9c:	e1f7      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT4:
            case XSENS_EVT_TYPE_1220FP4:
                value.data.f4x4[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fe6b 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001fa8:	eef0 7a40 	vmov.f32	s15, s0
 8001fac:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x4[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3307      	adds	r3, #7
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fe62 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001fba:	eef0 7a40 	vmov.f32	s15, s0
 8001fbe:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x4[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	330b      	adds	r3, #11
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fe59 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001fcc:	eef0 7a40 	vmov.f32	s15, s0
 8001fd0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                value.data.f4x4[3] = xsens_coalesce_32BE_F32LE( &output->payload[12] );
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	330f      	adds	r3, #15
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fe50 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001fde:	eef0 7a40 	vmov.f32	s15, s0
 8001fe2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                break;
 8001fe6:	e1d2      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT9:
            case XSENS_EVT_TYPE_1220FP9:
                value.data.f4x9[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3303      	adds	r3, #3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fe46 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8001ff2:	eef0 7a40 	vmov.f32	s15, s0
 8001ff6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x9[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3307      	adds	r3, #7
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fe3d 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
 8002008:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x9[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	330b      	adds	r3, #11
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fe34 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8002016:	eef0 7a40 	vmov.f32	s15, s0
 800201a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                value.data.f4x9[3] = xsens_coalesce_32BE_F32LE( &output->payload[12] );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	330f      	adds	r3, #15
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fe2b 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                value.data.f4x9[4] = xsens_coalesce_32BE_F32LE( &output->payload[16] );
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3313      	adds	r3, #19
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fe22 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 800203a:	eef0 7a40 	vmov.f32	s15, s0
 800203e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
                value.data.f4x9[5] = xsens_coalesce_32BE_F32LE( &output->payload[20] );
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3317      	adds	r3, #23
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fe19 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
                value.data.f4x9[6] = xsens_coalesce_32BE_F32LE( &output->payload[24] );
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	331b      	adds	r3, #27
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fe10 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 800205e:	eef0 7a40 	vmov.f32	s15, s0
 8002062:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
                value.data.f4x9[7] = xsens_coalesce_32BE_F32LE( &output->payload[28] );
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	331f      	adds	r3, #31
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fe07 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8002070:	eef0 7a40 	vmov.f32	s15, s0
 8002074:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                value.data.f4x9[8] = xsens_coalesce_32BE_F32LE( &output->payload[32] );
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3323      	adds	r3, #35	; 0x23
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fdfe 	bl	8002c7e <xsens_coalesce_32BE_F32LE>
 8002082:	eef0 7a40 	vmov.f32	s15, s0
 8002086:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
                break;
 800208a:	e180      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP:
                xsens_coalesce_48BE_48LE( &value.data.fp1632, &output->payload[0] );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	1cda      	adds	r2, r3, #3
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	3368      	adds	r3, #104	; 0x68
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fe14 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                break;
 800209e:	e176      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP2:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x2[0], &output->payload[0] );
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1cda      	adds	r2, r3, #3
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	3368      	adds	r3, #104	; 0x68
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fe0a 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x2[1], &output->payload[6] );
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f103 0209 	add.w	r2, r3, #9
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	3370      	adds	r3, #112	; 0x70
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fe00 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                break;
 80020c6:	e162      	b.n	800238e <xsens_mdata2_decode_field+0x67a>
 80020c8:	0800cdb8 	.word	0x0800cdb8

            case XSENS_EVT_TYPE_1632FP3:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[0], &output->payload[0] );
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1cda      	adds	r2, r3, #3
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	3368      	adds	r3, #104	; 0x68
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fdf4 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[1], &output->payload[6] );
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f103 0209 	add.w	r2, r3, #9
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	3370      	adds	r3, #112	; 0x70
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fdea 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[2], &output->payload[12] );
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f103 020f 	add.w	r2, r3, #15
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	3378      	adds	r3, #120	; 0x78
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fde0 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                break;
 8002106:	e142      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP4:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[0], &output->payload[0] );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1cda      	adds	r2, r3, #3
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	3368      	adds	r3, #104	; 0x68
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fdd6 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[1], &output->payload[6] );
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0209 	add.w	r2, r3, #9
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	3370      	adds	r3, #112	; 0x70
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f000 fdcc 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[2], &output->payload[12] );
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f103 020f 	add.w	r2, r3, #15
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	3378      	adds	r3, #120	; 0x78
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fdc2 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[3], &output->payload[18] );
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f103 0215 	add.w	r2, r3, #21
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	3380      	adds	r3, #128	; 0x80
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fdb8 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                break;
 8002156:	e11a      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP9:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[0], &output->payload[0] );
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1cda      	adds	r2, r3, #3
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	3368      	adds	r3, #104	; 0x68
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fdae 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[1], &output->payload[6] );
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f103 0209 	add.w	r2, r3, #9
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	3370      	adds	r3, #112	; 0x70
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fda4 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[2], &output->payload[12] );
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f103 020f 	add.w	r2, r3, #15
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	3378      	adds	r3, #120	; 0x78
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fd9a 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[3], &output->payload[18] );
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 0215 	add.w	r2, r3, #21
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	3380      	adds	r3, #128	; 0x80
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fd90 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[4], &output->payload[24] );
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f103 021b 	add.w	r2, r3, #27
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	3388      	adds	r3, #136	; 0x88
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fd86 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[5], &output->payload[30] );
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f103 0221 	add.w	r2, r3, #33	; 0x21
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	3390      	adds	r3, #144	; 0x90
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fd7c 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[6], &output->payload[36] );
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 0227 	add.w	r2, r3, #39	; 0x27
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	3398      	adds	r3, #152	; 0x98
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fd72 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[7], &output->payload[42] );
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	33a0      	adds	r3, #160	; 0xa0
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fd68 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[8], &output->payload[48] );
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f103 0233 	add.w	r2, r3, #51	; 0x33
 80021fc:	f107 0308 	add.w	r3, r7, #8
 8002200:	33a8      	adds	r3, #168	; 0xa8
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fd5e 	bl	8002cc6 <xsens_coalesce_48BE_48LE>
                break;
 800220a:	e0c0      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE:
                xsens_swap_endian_u64( &value.data.f8, &output->payload[0] );
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1cda      	adds	r2, r3, #3
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	3368      	adds	r3, #104	; 0x68
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fccd 	bl	8002bb8 <xsens_swap_endian_u64>
                break;
 800221e:	e0b6      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE2:
                xsens_swap_endian_u64( &value.data.f8x2[0], &output->payload[0] );
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1cda      	adds	r2, r3, #3
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	3368      	adds	r3, #104	; 0x68
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fcc3 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x2[1], &output->payload[8] );
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f103 020b 	add.w	r2, r3, #11
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	3370      	adds	r3, #112	; 0x70
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fcb9 	bl	8002bb8 <xsens_swap_endian_u64>
                break;
 8002246:	e0a2      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE3:
                xsens_swap_endian_u64( &value.data.f8x3[0], &output->payload[0] );
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1cda      	adds	r2, r3, #3
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	3368      	adds	r3, #104	; 0x68
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fcaf 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x3[1], &output->payload[8] );
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f103 020b 	add.w	r2, r3, #11
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	3370      	adds	r3, #112	; 0x70
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fca5 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x3[2], &output->payload[16] );
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 0213 	add.w	r2, r3, #19
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	3378      	adds	r3, #120	; 0x78
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fc9b 	bl	8002bb8 <xsens_swap_endian_u64>
                break;
 8002282:	e084      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE4:
                xsens_swap_endian_u64( &value.data.f8x4[0], &output->payload[0] );
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1cda      	adds	r2, r3, #3
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	3368      	adds	r3, #104	; 0x68
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fc91 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[1], &output->payload[8] );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 020b 	add.w	r2, r3, #11
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	3370      	adds	r3, #112	; 0x70
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fc87 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[2], &output->payload[16] );
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f103 0213 	add.w	r2, r3, #19
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	3378      	adds	r3, #120	; 0x78
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fc7d 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[3], &output->payload[24] );
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f103 021b 	add.w	r2, r3, #27
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	3380      	adds	r3, #128	; 0x80
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fc73 	bl	8002bb8 <xsens_swap_endian_u64>
                break;
 80022d2:	e05c      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE9:
                xsens_swap_endian_u64( &value.data.f8x9[0], &output->payload[0] );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1cda      	adds	r2, r3, #3
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	3368      	adds	r3, #104	; 0x68
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fc69 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[1], &output->payload[8] );
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f103 020b 	add.w	r2, r3, #11
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	3370      	adds	r3, #112	; 0x70
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fc5f 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[2], &output->payload[16] );
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f103 0213 	add.w	r2, r3, #19
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	3378      	adds	r3, #120	; 0x78
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fc55 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[3], &output->payload[24] );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f103 021b 	add.w	r2, r3, #27
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	3380      	adds	r3, #128	; 0x80
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fc4b 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[4], &output->payload[32] );
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	3388      	adds	r3, #136	; 0x88
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fc41 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[5], &output->payload[40] );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	3390      	adds	r3, #144	; 0x90
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fc37 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[6], &output->payload[48] );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f103 0233 	add.w	r2, r3, #51	; 0x33
 8002350:	f107 0308 	add.w	r3, r7, #8
 8002354:	3398      	adds	r3, #152	; 0x98
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fc2d 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[7], &output->payload[56] );
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	33a0      	adds	r3, #160	; 0xa0
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fc23 	bl	8002bb8 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[8], &output->payload[64] );
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f103 0243 	add.w	r2, r3, #67	; 0x43
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	33a8      	adds	r3, #168	; 0xa8
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fc19 	bl	8002bb8 <xsens_swap_endian_u64>
                break;
 8002386:	e002      	b.n	800238e <xsens_mdata2_decode_field+0x67a>

            default:
                // There's an error or not supported, return a 'null' type?
                value.type = XSENS_EVT_TYPE_NONE;
 8002388:	2300      	movs	r3, #0
 800238a:	723b      	strb	r3, [r7, #8]
                break;
 800238c:	bf00      	nop
        }

        // Call the user-callback with the transformed data
        if( evt_cb )
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <xsens_mdata2_decode_field+0x690>
        {
            evt_cb( decode_rule->event, &value );
 8002394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002398:	789a      	ldrb	r2, [r3, #2]
 800239a:	f107 0108 	add.w	r1, r7, #8
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4610      	mov	r0, r2
 80023a2:	4798      	blx	r3
        }
    }
}
 80023a4:	37c8      	adds	r7, #200	; 0xc8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop

080023ac <xsens_mti_parse>:
    }
}

// Run each byte through the packet-level statemachine
void xsens_mti_parse( xsens_interface_t *interface, uint8_t byte )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
    // CRC is the sum of bytes including the CRC byte (ex PREAMBLE)
    if( interface->state != PARSER_PREAMBLE )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <xsens_mti_parse+0x26>
    {
        interface->crc += ( byte & 0xFF );
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 2808 	ldrb.w	r2, [r3, #2056]	; 0x808
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
    }

    switch( interface->state )
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b07      	cmp	r3, #7
 80023d8:	f200 8087 	bhi.w	80024ea <xsens_mti_parse+0x13e>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <xsens_mti_parse+0x38>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	08002405 	.word	0x08002405
 80023e8:	08002419 	.word	0x08002419
 80023ec:	08002427 	.word	0x08002427
 80023f0:	08002435 	.word	0x08002435
 80023f4:	08002465 	.word	0x08002465
 80023f8:	08002475 	.word	0x08002475
 80023fc:	08002493 	.word	0x08002493
 8002400:	080024c9 	.word	0x080024c9
    {
        case PARSER_PREAMBLE:
            if( byte == PREAMBLE_BYTE )
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2bfa      	cmp	r3, #250	; 0xfa
 8002408:	d16a      	bne.n	80024e0 <xsens_mti_parse+0x134>
            {
                xsens_mti_reset_parser( interface );
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f872 	bl	80024f4 <xsens_mti_reset_parser>
                interface->state = PARSER_ADDRESS;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002416:	e063      	b.n	80024e0 <xsens_mti_parse+0x134>

        case PARSER_ADDRESS:
            if( byte == ADDRESS_BYTE )
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2bff      	cmp	r3, #255	; 0xff
 800241c:	d162      	bne.n	80024e4 <xsens_mti_parse+0x138>
            {
                interface->state = PARSER_MESSAGE_ID;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002424:	e05e      	b.n	80024e4 <xsens_mti_parse+0x138>

        case PARSER_MESSAGE_ID:
            interface->packet.message_id = byte;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	709a      	strb	r2, [r3, #2]
            interface->state             = PARSER_LENGTH;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2203      	movs	r2, #3
 8002430:	701a      	strb	r2, [r3, #0]
            break;
 8002432:	e05a      	b.n	80024ea <xsens_mti_parse+0x13e>

        case PARSER_LENGTH:
            if( byte == LENGTH_EXTENDED_MODE )
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	2bff      	cmp	r3, #255	; 0xff
 8002438:	d102      	bne.n	8002440 <xsens_mti_parse+0x94>
            {
                interface->state = PARSER_LENGTH_EXTENDED_B1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	701a      	strb	r2, [r3, #0]
            }
            if( byte == LENGTH_NONE )
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <xsens_mti_parse+0xa8>
            {
                interface->packet.length = 0;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	809a      	strh	r2, [r3, #4]
                interface->state         = PARSER_CRC;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2207      	movs	r2, #7
 8002450:	701a      	strb	r2, [r3, #0]
            else
            {
                interface->packet.length = byte;
                interface->state         = PARSER_PAYLOAD;
            }
            break;
 8002452:	e04a      	b.n	80024ea <xsens_mti_parse+0x13e>
                interface->packet.length = byte;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	809a      	strh	r2, [r3, #4]
                interface->state         = PARSER_PAYLOAD;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2206      	movs	r2, #6
 8002460:	701a      	strb	r2, [r3, #0]
            break;
 8002462:	e042      	b.n	80024ea <xsens_mti_parse+0x13e>

        case PARSER_LENGTH_EXTENDED_B1:
            interface->packet.length = byte;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	809a      	strh	r2, [r3, #4]
            // TODO decode long length packets
            interface->state = PARSER_LENGTH_EXTENDED_B2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2205      	movs	r2, #5
 8002470:	701a      	strb	r2, [r3, #0]
            break;
 8002472:	e03a      	b.n	80024ea <xsens_mti_parse+0x13e>

        case PARSER_LENGTH_EXTENDED_B2:
            // TODO decode long length packets
            interface->packet.length &= byte << 8;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	889b      	ldrh	r3, [r3, #4]
 8002478:	b21a      	sxth	r2, r3
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b21b      	sxth	r3, r3
 8002480:	4013      	ands	r3, r2
 8002482:	b21b      	sxth	r3, r3
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	809a      	strh	r2, [r3, #4]
            interface->state = PARSER_PAYLOAD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2206      	movs	r2, #6
 800248e:	701a      	strb	r2, [r3, #0]
            break;
 8002490:	e02b      	b.n	80024ea <xsens_mti_parse+0x13e>

        case PARSER_PAYLOAD:
            interface->packet.payload[interface->payload_pos] = byte;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	719a      	strb	r2, [r3, #6]
            interface->payload_pos++;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 80024a8:	3301      	adds	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806

            // Once we've buffered the whole payload,
            // prepare to read the CRC
            if( interface->payload_pos >= interface->packet.length )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	889b      	ldrh	r3, [r3, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d313      	bcc.n	80024e8 <xsens_mti_parse+0x13c>
            {
                interface->state = PARSER_CRC;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2207      	movs	r2, #7
 80024c4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80024c6:	e00f      	b.n	80024e8 <xsens_mti_parse+0x13c>

        case PARSER_CRC:
            // Check if CRC is valid
            if( interface->crc == 0x00 )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3808 	ldrb.w	r3, [r3, #2056]	; 0x808
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <xsens_mti_parse+0x12c>
            {
                // Packet was successfully recieved
                // Run the payload handling function
                xsens_mti_handle_payload( interface );
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f826 	bl	8002524 <xsens_mti_handle_payload>
            else
            {
                // TODO send CRC failed event to user?
            }

            interface->state = PARSER_PREAMBLE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
            break;
 80024de:	e004      	b.n	80024ea <xsens_mti_parse+0x13e>
            break;
 80024e0:	bf00      	nop
 80024e2:	e002      	b.n	80024ea <xsens_mti_parse+0x13e>
            break;
 80024e4:	bf00      	nop
 80024e6:	e000      	b.n	80024ea <xsens_mti_parse+0x13e>
            break;
 80024e8:	bf00      	nop
    }
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop

080024f4 <xsens_mti_reset_parser>:

void xsens_mti_reset_parser( xsens_interface_t *interface )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    // Clear the parser state and buffers
    memset( &( interface->packet ), 0, sizeof( xsens_packet_buffer_t ) );
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3302      	adds	r3, #2
 8002500:	f640 0204 	movw	r2, #2052	; 0x804
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f007 f9de 	bl	80098c8 <memset>
    interface->payload_pos = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
    interface->crc         = 0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <xsens_mti_handle_payload>:

// With a valid packet, process the payload
void xsens_mti_handle_payload( xsens_interface_t *interface )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    xsens_packet_buffer_t *packet = &( interface->packet );
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3302      	adds	r3, #2
 8002530:	617b      	str	r3, [r7, #20]

    // Search the inbound handler table for a match
    message_handler_ref_t *handler = xsens_mti_find_inbound_handler_entry( packet->message_id );
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f832 	bl	80025a0 <xsens_mti_find_inbound_handler_entry>
 800253c:	6138      	str	r0, [r7, #16]

    // If the ID is recognised, call the handler function (if it exists)
    if( handler )
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <xsens_mti_handle_payload+0x38>
    {
        callback_payload_t payload_handler_fn = (callback_payload_t)handler->handler_fn;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	60fb      	str	r3, [r7, #12]
        if( payload_handler_fn )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <xsens_mti_handle_payload+0x38>
        {
            most_recent_interface = interface;    // internally cache the interface for cb access
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <xsens_mti_handle_payload+0x40>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6013      	str	r3, [r2, #0]
            payload_handler_fn( packet );
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6978      	ldr	r0, [r7, #20]
 800255a:	4798      	blx	r3
        }
    }
}
 800255c:	bf00      	nop
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200013f0 	.word	0x200013f0

08002568 <xsens_mti_override_id_handler>:

bool xsens_mti_override_id_handler( uint8_t id, callback_payload_t user_fn )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
    if( user_fn )
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <xsens_mti_override_id_handler+0x2c>
    {
        // Find the ID in the inbound handler 'jump table'
        message_handler_ref_t *handler = xsens_mti_find_inbound_handler_entry( id );
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f80f 	bl	80025a0 <xsens_mti_find_inbound_handler_entry>
 8002582:	60f8      	str	r0, [r7, #12]

        if( handler )
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <xsens_mti_override_id_handler+0x2c>
        {
            handler->handler_fn = user_fn;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	605a      	str	r2, [r3, #4]
            return true;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <xsens_mti_override_id_handler+0x2e>
        }
    }

    return false;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <xsens_mti_find_inbound_handler_entry>:

message_handler_ref_t *xsens_mti_find_inbound_handler_entry( uint8_t find_id )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
    uint8_t table_length = sizeof( inbound_handler_table ) / sizeof( message_handler_ref_t );
 80025aa:	2322      	movs	r3, #34	; 0x22
 80025ac:	73fb      	strb	r3, [r7, #15]

    return xsens_mti_find_handler_entry(find_id, inbound_handler_table, table_length );
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	4904      	ldr	r1, [pc, #16]	; (80025c4 <xsens_mti_find_inbound_handler_entry+0x24>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f807 	bl	80025c8 <xsens_mti_find_handler_entry>
 80025ba:	4603      	mov	r3, r0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000000 	.word	0x20000000

080025c8 <xsens_mti_find_handler_entry>:

message_handler_ref_t *xsens_mti_find_handler_entry( uint8_t find_id, message_handler_ref_t *entry_table, uint8_t entry_count )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71bb      	strb	r3, [r7, #6]
    for( uint8_t i = 0; i < entry_count; i++ )
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e00f      	b.n	80025fe <xsens_mti_find_handler_entry+0x36>
    {
        if( entry_table[i].id == find_id )
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	79fa      	ldrb	r2, [r7, #7]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d104      	bne.n	80025f8 <xsens_mti_find_handler_entry+0x30>
        {
            return &entry_table[i];
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	e007      	b.n	8002608 <xsens_mti_find_handler_entry+0x40>
    for( uint8_t i = 0; i < entry_count; i++ )
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	3301      	adds	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	429a      	cmp	r2, r3
 8002604:	d3eb      	bcc.n	80025de <xsens_mti_find_handler_entry+0x16>
        }
    }

    return (message_handler_ref_t *)NULL;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <xsens_mti_buffer_crc>:

uint8_t xsens_mti_buffer_crc( uint8_t *buffer, uint16_t size )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]

    for( uint16_t i = 0; i < size; i++ )
 8002624:	2300      	movs	r3, #0
 8002626:	81bb      	strh	r3, [r7, #12]
 8002628:	e009      	b.n	800263e <xsens_mti_buffer_crc+0x2a>
    {
        crc -= buffer[i];
 800262a:	89bb      	ldrh	r3, [r7, #12]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	73fb      	strb	r3, [r7, #15]
    for( uint16_t i = 0; i < size; i++ )
 8002638:	89bb      	ldrh	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	81bb      	strh	r3, [r7, #12]
 800263e:	89ba      	ldrh	r2, [r7, #12]
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	429a      	cmp	r2, r3
 8002644:	d3f1      	bcc.n	800262a <xsens_mti_buffer_crc+0x16>
    }

    return crc;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <xsens_mti_send>:

void xsens_mti_send( xsens_interface_t *interface, xsens_packet_buffer_t *packet )
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 800265a:	af00      	add	r7, sp, #0
 800265c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002660:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002664:	6018      	str	r0, [r3, #0]
 8002666:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800266a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800266e:	6019      	str	r1, [r3, #0]
    if( interface && packet )
 8002670:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002674:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80d4 	beq.w	8002828 <xsens_mti_send+0x1d4>
 8002680:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002684:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80cc 	beq.w	8002828 <xsens_mti_send+0x1d4>
    {
        uint8_t buffer[2048] = { 0 };
 8002690:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002694:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	3304      	adds	r3, #4
 800269e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f007 f90f 	bl	80098c8 <memset>
        uint16_t buffer_pos = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        uint8_t crc = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d

        // Preamble
        buffer[buffer_pos++] = PREAMBLE_BYTE;
 80026b6:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 80026c0:	461a      	mov	r2, r3
 80026c2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026c6:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80026ca:	21fa      	movs	r1, #250	; 0xfa
 80026cc:	5499      	strb	r1, [r3, r2]

        // Device Address
        buffer[buffer_pos++] = ADDRESS_BYTE;
 80026ce:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 80026d8:	461a      	mov	r2, r3
 80026da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026de:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80026e2:	21ff      	movs	r1, #255	; 0xff
 80026e4:	5499      	strb	r1, [r3, r2]

        // Message ID
        buffer[buffer_pos++] = packet->message_id;
 80026e6:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 80026f0:	461a      	mov	r2, r3
 80026f2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026f6:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	7819      	ldrb	r1, [r3, #0]
 80026fe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002702:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002706:	5499      	strb	r1, [r3, r2]

        // Payload Length
        if( packet->length < 0xFF )
 8002708:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800270c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	885b      	ldrh	r3, [r3, #2]
 8002714:	2bfe      	cmp	r3, #254	; 0xfe
 8002716:	d812      	bhi.n	800273e <xsens_mti_send+0xea>
        {
            buffer[buffer_pos++] = packet->length;
 8002718:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800271c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	8859      	ldrh	r1, [r3, #2]
 8002724:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 800272e:	461a      	mov	r2, r3
 8002730:	b2c9      	uxtb	r1, r1
 8002732:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002736:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800273a:	5499      	strb	r1, [r3, r2]
 800273c:	e01e      	b.n	800277c <xsens_mti_send+0x128>
        }
        else
        {
            // Extended packet handling sets the normal length byte to 255,
            // followed by two bytes of payload data
            buffer[buffer_pos++] = 0xFF;
 800273e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 8002748:	461a      	mov	r2, r3
 800274a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800274e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002752:	21ff      	movs	r1, #255	; 0xff
 8002754:	5499      	strb	r1, [r3, r2]

            memcpy( &buffer[buffer_pos], &packet->length, 2 );
 8002756:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800275a:	f107 020c 	add.w	r2, r7, #12
 800275e:	4413      	add	r3, r2
 8002760:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8002764:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	3202      	adds	r2, #2
 800276c:	8812      	ldrh	r2, [r2, #0]
 800276e:	b292      	uxth	r2, r2
 8002770:	801a      	strh	r2, [r3, #0]
            buffer_pos += 2;
 8002772:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002776:	3302      	adds	r3, #2
 8002778:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        }

        // Payload Data
        if( packet->length != 0 )
 800277c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002780:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	885b      	ldrh	r3, [r3, #2]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01e      	beq.n	80027ca <xsens_mti_send+0x176>
        {
            memcpy( &buffer[buffer_pos], (uint8_t *)packet->payload, packet->length );
 800278c:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002790:	f107 020c 	add.w	r2, r7, #12
 8002794:	18d0      	adds	r0, r2, r3
 8002796:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800279a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	1d19      	adds	r1, r3, #4
 80027a2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80027a6:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	885b      	ldrh	r3, [r3, #2]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f007 f87c 	bl	80098ac <memcpy>
            buffer_pos += packet->length;
 80027b4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80027b8:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	885a      	ldrh	r2, [r3, #2]
 80027c0:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80027c4:	4413      	add	r3, r2
 80027c6:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        }

        // Calculate the CRC of the packet, exluding the preamble
        buffer[buffer_pos] = xsens_mti_buffer_crc( &buffer[1], buffer_pos-1 );
 80027ca:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	f8b7 480e 	ldrh.w	r4, [r7, #2062]	; 0x80e
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	3301      	adds	r3, #1
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff18 	bl	8002614 <xsens_mti_buffer_crc>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80027ec:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80027f0:	551a      	strb	r2, [r3, r4]
        buffer_pos += 1;
 80027f2:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80027f6:	3301      	adds	r3, #1
 80027f8:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e

        // Pass the buffer to the user so they can send to hardware
        if( interface->output_cb )
 80027fc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002800:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <xsens_mti_send+0x1d4>
        {
            interface->output_cb( buffer, buffer_pos );
 800280e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002812:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800281c:	f8b7 180e 	ldrh.w	r1, [r7, #2062]	; 0x80e
 8002820:	f107 020c 	add.w	r2, r7, #12
 8002824:	4610      	mov	r0, r2
 8002826:	4798      	blx	r3
        }
    }
}
 8002828:	bf00      	nop
 800282a:	f607 0714 	addw	r7, r7, #2068	; 0x814
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <xsens_mti_request>:

void xsens_mti_request( xsens_interface_t *interface, uint8_t id )
{
 8002832:	b580      	push	{r7, lr}
 8002834:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8002838:	af00      	add	r7, sp, #0
 800283a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800283e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002842:	6018      	str	r0, [r3, #0]
 8002844:	460a      	mov	r2, r1
 8002846:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800284a:	f6a3 030d 	subw	r3, r3, #2061	; 0x80d
 800284e:	701a      	strb	r2, [r3, #0]
    xsens_packet_buffer_t packet = { 0 };
 8002850:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002854:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002858:	4618      	mov	r0, r3
 800285a:	f640 0304 	movw	r3, #2052	; 0x804
 800285e:	461a      	mov	r2, r3
 8002860:	2100      	movs	r1, #0
 8002862:	f007 f831 	bl	80098c8 <memset>

    packet.message_id = id;
 8002866:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800286a:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800286e:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8002872:	f6a2 020d 	subw	r2, r2, #2061	; 0x80d
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	701a      	strb	r2, [r3, #0]
    packet.length = 0;
 800287a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800287e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002882:	2200      	movs	r2, #0
 8002884:	805a      	strh	r2, [r3, #2]
    packet.payload[0] = 0;
 8002886:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800288a:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800288e:	2200      	movs	r2, #0
 8002890:	711a      	strb	r2, [r3, #4]

    xsens_mti_send( interface, &packet );
 8002892:	f107 020c 	add.w	r2, r7, #12
 8002896:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800289a:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800289e:	4611      	mov	r1, r2
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f7ff fed7 	bl	8002654 <xsens_mti_send>
}
 80028a6:	bf00      	nop
 80028a8:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <xsens_mti_reset_orientation>:
    xsens_mti_send( interface, &packet );
}


void xsens_mti_reset_orientation( xsens_interface_t *interface, XsensOrientationSetting_t code )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028bc:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80028c0:	6018      	str	r0, [r3, #0]
 80028c2:	460a      	mov	r2, r1
 80028c4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028c8:	f6a3 030d 	subw	r3, r3, #2061	; 0x80d
 80028cc:	701a      	strb	r2, [r3, #0]
    xsens_packet_buffer_t packet = { 0 };
 80028ce:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028d2:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80028d6:	4618      	mov	r0, r3
 80028d8:	f640 0304 	movw	r3, #2052	; 0x804
 80028dc:	461a      	mov	r2, r3
 80028de:	2100      	movs	r1, #0
 80028e0:	f006 fff2 	bl	80098c8 <memset>
    
    packet.message_id = MT_RESETORIENTATION;
 80028e4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028e8:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80028ec:	22a4      	movs	r2, #164	; 0xa4
 80028ee:	701a      	strb	r2, [r3, #0]
    packet.length = 2;
 80028f0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028f4:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80028f8:	2202      	movs	r2, #2
 80028fa:	805a      	strh	r2, [r3, #2]
    packet.payload[0] = 0x00;
 80028fc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002900:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002904:	2200      	movs	r2, #0
 8002906:	711a      	strb	r2, [r3, #4]
    packet.payload[1] = code;
 8002908:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800290c:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002910:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8002914:	f6a2 020d 	subw	r2, r2, #2061	; 0x80d
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	715a      	strb	r2, [r3, #5]

    xsens_mti_send( interface, &packet );
 800291c:	f107 020c 	add.w	r2, r7, #12
 8002920:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002924:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002928:	4611      	mov	r1, r2
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f7ff fe92 	bl	8002654 <xsens_mti_send>
}
 8002930:	bf00      	nop
 8002932:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <xsens_mti_set_configuration>:

void xsens_mti_set_configuration( xsens_interface_t *interface, XsensFrequencyConfig_t config[], uint8_t num_config )
{
 800293a:	b580      	push	{r7, lr}
 800293c:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8002940:	af00      	add	r7, sp, #0
 8002942:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002946:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800294a:	6018      	str	r0, [r3, #0]
 800294c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002950:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002954:	6019      	str	r1, [r3, #0]
 8002956:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800295a:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 800295e:	701a      	strb	r2, [r3, #0]
    // No more than 32 values can be configured
    if( interface && config && num_config && num_config <= 32 )
 8002960:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002964:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d074      	beq.n	8002a58 <xsens_mti_set_configuration+0x11e>
 800296e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002972:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d06d      	beq.n	8002a58 <xsens_mti_set_configuration+0x11e>
 800297c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002980:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d066      	beq.n	8002a58 <xsens_mti_set_configuration+0x11e>
 800298a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800298e:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b20      	cmp	r3, #32
 8002996:	d85f      	bhi.n	8002a58 <xsens_mti_set_configuration+0x11e>
    {
        xsens_packet_buffer_t packet = { 0 };
 8002998:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800299c:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 80029a0:	4618      	mov	r0, r3
 80029a2:	f640 0304 	movw	r3, #2052	; 0x804
 80029a6:	461a      	mov	r2, r3
 80029a8:	2100      	movs	r1, #0
 80029aa:	f006 ff8d 	bl	80098c8 <memset>
        packet.message_id = MT_SETOUTPUTCONFIGURATION;
 80029ae:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80029b2:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 80029b6:	22c0      	movs	r2, #192	; 0xc0
 80029b8:	701a      	strb	r2, [r3, #0]

        // Form a big-endian MData2 style 'packet' for each field
        //  2 bytes for ID
        //  2 bytes for frequency
        for( uint8_t i = 0; i <= num_config; i++ )
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 80029c0:	e037      	b.n	8002a32 <xsens_mti_set_configuration+0xf8>
        {
            uint8_t buff_pos = i * 4;
 80029c2:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
            
            // LE to BE conversion directly into the output buffer...
            xsens_swap_endian_u16( &packet.payload[buff_pos],   (uint8_t*)&config[i].id );
 80029cc:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80029d0:	f107 0210 	add.w	r2, r7, #16
 80029d4:	4413      	add	r3, r2
 80029d6:	1d18      	adds	r0, r3, #4
 80029d8:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80029e2:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f000 f8d0 	bl	8002b90 <xsens_swap_endian_u16>
            xsens_swap_endian_u16( &packet.payload[buff_pos+2], (uint8_t*)&config[i].frequency );
 80029f0:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80029f4:	3302      	adds	r3, #2
 80029f6:	f107 0210 	add.w	r2, r7, #16
 80029fa:	4413      	add	r3, r2
 80029fc:	1d18      	adds	r0, r3, #4
 80029fe:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8002a08:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3302      	adds	r3, #2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f000 f8bc 	bl	8002b90 <xsens_swap_endian_u16>
            packet.length = buff_pos;
 8002a18:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a22:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8002a26:	805a      	strh	r2, [r3, #2]
        for( uint8_t i = 0; i <= num_config; i++ )
 8002a28:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 8002a32:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a36:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002a3a:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d9be      	bls.n	80029c2 <xsens_mti_set_configuration+0x88>
        }

        // TODO: refactor as a MDATA2 output problem once generation fns are implemented?
        xsens_mti_send( interface, &packet );
 8002a44:	f107 0210 	add.w	r2, r7, #16
 8002a48:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a4c:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002a50:	4611      	mov	r1, r2
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	f7ff fdfe 	bl	8002654 <xsens_mti_send>
    }
}
 8002a58:	bf00      	nop
 8002a5a:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <xsens_internal_handle_device_id>:



void xsens_internal_handle_device_id( xsens_packet_buffer_t *packet )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ae      	sub	sp, #184	; 0xb8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    XsensEventData_t value = { 0 };
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	22b0      	movs	r2, #176	; 0xb0
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f006 ff27 	bl	80098c8 <memset>

    if( packet->length == 4 )    // MTi 1, 10, 100
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	885b      	ldrh	r3, [r3, #2]
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d109      	bne.n	8002a96 <xsens_internal_handle_device_id+0x32>
    {
        value.type    = XSENS_EVT_TYPE_U32;
 8002a82:	2303      	movs	r3, #3
 8002a84:	723b      	strb	r3, [r7, #8]
        value.data.u4 = xsens_coalesce_32BE_32LE( &packet->payload[0] );
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f8db 	bl	8002c46 <xsens_coalesce_32BE_32LE>
 8002a90:	4603      	mov	r3, r0
 8002a92:	673b      	str	r3, [r7, #112]	; 0x70
 8002a94:	e00c      	b.n	8002ab0 <xsens_internal_handle_device_id+0x4c>
    }
    else if( packet->length == 8 )    // MTi-600
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	885b      	ldrh	r3, [r3, #2]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d108      	bne.n	8002ab0 <xsens_internal_handle_device_id+0x4c>
    {
        // TODO: untested 8-byte device ID
        value.type    = XSENS_EVT_TYPE_U32;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	723b      	strb	r3, [r7, #8]
        value.data.u4 = xsens_coalesce_32BE_32LE( &packet->payload[4] );
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f8cd 	bl	8002c46 <xsens_coalesce_32BE_32LE>
 8002aac:	4603      	mov	r3, r0
 8002aae:	673b      	str	r3, [r7, #112]	; 0x70
    }

    if( most_recent_interface->event_cb )
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <xsens_internal_handle_device_id+0x74>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <xsens_internal_handle_device_id+0x6a>
    {
        most_recent_interface->event_cb( XSENS_EVT_DEVICE_ID, &value );
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <xsens_internal_handle_device_id+0x74>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002ac4:	f107 0208 	add.w	r2, r7, #8
 8002ac8:	4611      	mov	r1, r2
 8002aca:	2016      	movs	r0, #22
 8002acc:	4798      	blx	r3
    }
}
 8002ace:	bf00      	nop
 8002ad0:	37b8      	adds	r7, #184	; 0xb8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200013f0 	.word	0x200013f0

08002adc <xsens_internal_handle_product_code>:

void xsens_internal_handle_product_code( xsens_packet_buffer_t *packet )
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    // ASCII formatted code max 20 bytes
    // TODO: handle product code
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <xsens_internal_handle_hardware_version>:

void xsens_internal_handle_hardware_version( xsens_packet_buffer_t *packet )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
    // TODO: handle product code

    //    uint8_t hw_version[2];
    //    uint16_t *hw_ptr = (uint16_t *)&hw_version;
    //    hw_ptr           = xsens_coalesce_16BE_16LE( &packet->payload[0] );
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <xsens_internal_handle_firmware_version>:

void xsens_internal_handle_firmware_version( xsens_packet_buffer_t *packet )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    // TODO: handle firmware version

    uint8_t  major    = packet->payload[0];
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	75fb      	strb	r3, [r7, #23]
    uint8_t  minor    = packet->payload[1];
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	795b      	ldrb	r3, [r3, #5]
 8002b16:	75bb      	strb	r3, [r7, #22]
    uint8_t  revision = packet->payload[2];
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	799b      	ldrb	r3, [r3, #6]
 8002b1c:	757b      	strb	r3, [r7, #21]
    uint32_t build    = xsens_coalesce_32BE_32LE( &packet->payload[3] );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3307      	adds	r3, #7
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f88f 	bl	8002c46 <xsens_coalesce_32BE_32LE>
 8002b28:	6138      	str	r0, [r7, #16]
    uint32_t scm      = xsens_coalesce_32BE_32LE( &packet->payload[7] );
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	330b      	adds	r3, #11
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f889 	bl	8002c46 <xsens_coalesce_32BE_32LE>
 8002b34:	60f8      	str	r0, [r7, #12]
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <xsens_internal_handle_selftest_results>:

void xsens_internal_handle_selftest_results( xsens_packet_buffer_t *packet )
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
    // TODO: handle selftest results
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <xsens_internal_handle_error>:

void xsens_internal_handle_error( xsens_packet_buffer_t *packet )
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
    uint8_t error_code = packet->payload[0];
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	791b      	ldrb	r3, [r3, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]

        default:
            break;
    }
     */
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <xsens_internal_handle_mdata2>:

void xsens_internal_handle_mdata2( xsens_packet_buffer_t *packet )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    // MData2 packets contain 1 to n smaller packets
    // with variable length fields, see xsens_mdata2.c/.h
    xsens_mdata2_process( packet, most_recent_interface->event_cb );
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <xsens_internal_handle_mdata2+0x20>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe fff6 	bl	8001b70 <xsens_mdata2_process>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200013f0 	.word	0x200013f0

08002b90 <xsens_swap_endian_u16>:
#include "IMU_rel/xsens_utility.h"
#include "math.h"
#include "stdlib.h"

void xsens_swap_endian_u16( uint8_t *dest, uint8_t *source )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    dest[1] = source[0];
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	701a      	strb	r2, [r3, #0]
    dest[0] = source[1];
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	785a      	ldrb	r2, [r3, #1]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	701a      	strb	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <xsens_swap_endian_u64>:
    dest[1] = source[2];
    dest[0] = source[3];
}

void xsens_swap_endian_u64( uint8_t *dest, uint8_t *source )
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    dest[7] = source[0];
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3307      	adds	r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	701a      	strb	r2, [r3, #0]
    dest[6] = source[1];
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3306      	adds	r3, #6
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	7852      	ldrb	r2, [r2, #1]
 8002bd4:	701a      	strb	r2, [r3, #0]
    dest[5] = source[2];
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3305      	adds	r3, #5
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	7892      	ldrb	r2, [r2, #2]
 8002bde:	701a      	strb	r2, [r3, #0]
    dest[4] = source[3];
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	78d2      	ldrb	r2, [r2, #3]
 8002be8:	701a      	strb	r2, [r3, #0]
    dest[3] = source[4];
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3303      	adds	r3, #3
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	7912      	ldrb	r2, [r2, #4]
 8002bf2:	701a      	strb	r2, [r3, #0]
    dest[2] = source[5];
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	7952      	ldrb	r2, [r2, #5]
 8002bfc:	701a      	strb	r2, [r3, #0]
    dest[1] = source[6];
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3301      	adds	r3, #1
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	7992      	ldrb	r2, [r2, #6]
 8002c06:	701a      	strb	r2, [r3, #0]
    dest[0] = source[7];
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	79da      	ldrb	r2, [r3, #7]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	701a      	strb	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <xsens_coalesce_16BE_16LE>:

uint16_t xsens_coalesce_16BE_16LE( uint8_t *source )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    return ( source[1] << 0 | source[0] << 8 );
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3301      	adds	r3, #1
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	b21a      	sxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	b29b      	uxth	r3, r3
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <xsens_coalesce_32BE_32LE>:

uint32_t xsens_coalesce_32BE_32LE( uint8_t *source )
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
    return ( ( source[3] << 0 )
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3303      	adds	r3, #3
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
             | ( source[2] << 8 )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	431a      	orrs	r2, r3
             | ( source[1] << 16 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3301      	adds	r3, #1
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	431a      	orrs	r2, r3
             | ( source[0] << 24 ) );
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	4313      	orrs	r3, r2
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <xsens_coalesce_32BE_F32LE>:

float xsens_coalesce_32BE_F32LE( uint8_t *source )
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
    float    f;
    uint8_t *f_ptr = (uint8_t *)&f;
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	60fb      	str	r3, [r7, #12]

    f_ptr[3] = source[0];
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3303      	adds	r3, #3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	7812      	ldrb	r2, [r2, #0]
 8002c94:	701a      	strb	r2, [r3, #0]
    f_ptr[2] = source[1];
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	7852      	ldrb	r2, [r2, #1]
 8002c9e:	701a      	strb	r2, [r3, #0]
    f_ptr[1] = source[2];
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	7892      	ldrb	r2, [r2, #2]
 8002ca8:	701a      	strb	r2, [r3, #0]
    f_ptr[0] = source[3];
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	78da      	ldrb	r2, [r3, #3]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	701a      	strb	r2, [r3, #0]

    return f;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	ee07 3a90 	vmov	s15, r3
}
 8002cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <xsens_coalesce_48BE_48LE>:

// As per manual, big-endian 32-bit first, then BE 16-bit part i.e [b3, b2, b1, b0, b5, b4]
void xsens_coalesce_48BE_48LE( uint8_t *dest, uint8_t *source )
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
    dest[0] = source[3];
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	78da      	ldrb	r2, [r3, #3]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	701a      	strb	r2, [r3, #0]
    dest[1] = source[2];
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	7892      	ldrb	r2, [r2, #2]
 8002ce0:	701a      	strb	r2, [r3, #0]
    dest[2] = source[1];
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	7852      	ldrb	r2, [r2, #1]
 8002cea:	701a      	strb	r2, [r3, #0]
    dest[3] = source[0];
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3303      	adds	r3, #3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	701a      	strb	r2, [r3, #0]
    dest[4] = source[5];
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	7952      	ldrb	r2, [r2, #5]
 8002cfe:	701a      	strb	r2, [r3, #0]
    dest[5] = source[4];
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3305      	adds	r3, #5
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	7912      	ldrb	r2, [r2, #4]
 8002d08:	701a      	strb	r2, [r3, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6858      	ldr	r0, [r3, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	891b      	ldrh	r3, [r3, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	f003 fa35 	bl	80061a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	f004 fc24 	bl	800758e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8002d46:	bf00      	nop
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 f917 	bl	8007f80 <HAL_SPI_GetState>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d1f7      	bne.n	8002d48 <LoRa_readReg+0x32>
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	8b3a      	ldrh	r2, [r7, #24]
 8002d5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	f004 fd4f 	bl	8007806 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8002d68:	bf00      	nop
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f005 f906 	bl	8007f80 <HAL_SPI_GetState>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d1f7      	bne.n	8002d6a <LoRa_readReg+0x54>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6858      	ldr	r0, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	891b      	ldrh	r3, [r3, #8]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4619      	mov	r1, r3
 8002d86:	f003 fa0b 	bl	80061a0 <HAL_GPIO_WritePin>
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6858      	ldr	r0, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	891b      	ldrh	r3, [r3, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	4619      	mov	r1, r3
 8002dae:	f003 f9f7 	bl	80061a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	f004 fbe6 	bl	800758e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8002dc2:	bf00      	nop
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 f8d9 	bl	8007f80 <HAL_SPI_GetState>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d1f7      	bne.n	8002dc4 <LoRa_writeReg+0x32>
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	8b3a      	ldrh	r2, [r7, #24]
 8002dda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	f004 fbd5 	bl	800758e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8002de4:	bf00      	nop
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f005 f8c8 	bl	8007f80 <HAL_SPI_GetState>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d1f7      	bne.n	8002de6 <LoRa_writeReg+0x54>
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6858      	ldr	r0, [r3, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	891b      	ldrh	r3, [r3, #8]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4619      	mov	r1, r3
 8002e02:	f003 f9cd 	bl	80061a0 <HAL_GPIO_WritePin>
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <LoRa_read_single>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read_single(LoRa* _LoRa, uint8_t address){
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af02      	add	r7, sp, #8
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002e24:	f107 030f 	add.w	r3, r7, #15
 8002e28:	f107 010e 	add.w	r1, r7, #14
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff6f 	bl	8002d16 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <LoRa_write_single>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_single(LoRa* _LoRa, uint8_t address, uint8_t value){
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af02      	add	r7, sp, #8
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	70fb      	strb	r3, [r7, #3]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80; // address 8 bits + 1000 0000
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	73bb      	strb	r3, [r7, #14]
	data = value;
 8002e5c:	78bb      	ldrb	r3, [r7, #2]
 8002e5e:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8002e60:	f107 030f 	add.w	r3, r7, #15
 8002e64:	f107 010e 	add.w	r1, r7, #14
 8002e68:	2201      	movs	r2, #1
 8002e6a:	9200      	str	r2, [sp, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ff8f 	bl	8002d92 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <LoRa_BurstWrite>:
			uint8_t *value      --> address of values that you want to write
			uint8_t length      --> length of wrote value

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	460b      	mov	r3, r1
 8002e8a:	72fb      	strb	r3, [r7, #11]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6858      	ldr	r0, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	891b      	ldrh	r3, [r3, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f003 f97b 	bl	80061a0 <HAL_GPIO_WritePin>
	//say module that I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	f107 0117 	add.w	r1, r7, #23
 8002eb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f004 fb69 	bl	800758e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8002ebc:	bf00      	nop
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f005 f85c 	bl	8007f80 <HAL_SPI_GetState>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d1f7      	bne.n	8002ebe <LoRa_BurstWrite+0x42>
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	7abb      	ldrb	r3, [r7, #10]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	f004 fb57 	bl	800758e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8002ee0:	bf00      	nop
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f005 f84a 	bl	8007f80 <HAL_SPI_GetState>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d1f7      	bne.n	8002ee2 <LoRa_BurstWrite+0x66>
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6858      	ldr	r0, [r3, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	891b      	ldrh	r3, [r3, #8]
 8002efa:	2201      	movs	r2, #1
 8002efc:	4619      	mov	r1, r3
 8002efe:	f003 f94f 	bl	80061a0 <HAL_GPIO_WritePin>

}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	460b      	mov	r3, r1
 8002f1a:	71fb      	strb	r3, [r7, #7]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	if(isTransmitting(_LoRa)){
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa82 	bl	800342a <isTransmitting>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <LoRa_transmit+0x26>
		return 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e066      	b.n	8002ffe <LoRa_transmit+0xf4>
	}

	uint8_t mode = _LoRa->current_mode;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f36:	75fb      	strb	r3, [r7, #23]
	LoRa_gotoMode(_LoRa, STANDBY_MODE);
 8002f38:	2101      	movs	r1, #1
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f863 	bl	8003006 <LoRa_gotoMode>
	//reset FIFO address and payload length

	//transmit data fifo filling
	read = LoRa_read_single(_LoRa, SX127x_LoRa_FifoTxBaseAddr);  //LoRa_read_single return register value
 8002f40:	210e      	movs	r1, #14
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7ff ff63 	bl	8002e0e <LoRa_read_single>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75bb      	strb	r3, [r7, #22]
	LoRa_write_single(_LoRa, SX127x_LoRa_FifoAddrPtr, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	210d      	movs	r1, #13
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff ff76 	bl	8002e42 <LoRa_write_single>
	LoRa_write_single(_LoRa, SX127x_LoRa_PayloadLength, length);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2122      	movs	r1, #34	; 0x22
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff ff70 	bl	8002e42 <LoRa_write_single>
	LoRa_BurstWrite(_LoRa, SX127x_Fifo, data, length);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	2100      	movs	r1, #0
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff ff87 	bl	8002e7c <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8002f6e:	2103      	movs	r1, #3
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f848 	bl	8003006 <LoRa_gotoMode>

	uint32_t timer=HAL_GetTick();
 8002f76:	f001 fed1 	bl	8004d1c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]
	uint32_t cter=0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
	while(1){
		read = LoRa_read_single(_LoRa, SX127x_LoRa_IrqFlags);
 8002f80:	2112      	movs	r1, #18
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff43 	bl	8002e0e <LoRa_read_single>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	75bb      	strb	r3, [r7, #22]
		if((read & 0x08)!=0){                                  //only check the 3rd bit of read, if 1 -> Tx done
 8002f8c:	7dbb      	ldrb	r3, [r7, #22]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d011      	beq.n	8002fba <LoRa_transmit+0xb0>
			LoRa_write_single(_LoRa, SX127x_LoRa_IrqFlags, 0x08);  //clear Tx done flag
 8002f96:	2208      	movs	r2, #8
 8002f98:	2112      	movs	r1, #18
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff ff51 	bl	8002e42 <LoRa_write_single>
			LoRa_gotoMode(_LoRa, mode);
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f82e 	bl	8003006 <LoRa_gotoMode>
			timer = HAL_GetTick() - timer;
 8002faa:	f001 feb7 	bl	8004d1c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	613b      	str	r3, [r7, #16]
			return 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e021      	b.n	8002ffe <LoRa_transmit+0xf4>
		}
		else{
			if(--timeout==0){
 8002fba:	88bb      	ldrh	r3, [r7, #4]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	80bb      	strh	r3, [r7, #4]
 8002fc0:	88bb      	ldrh	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <LoRa_transmit+0xd6>
				LoRa_gotoMode(_LoRa, mode);
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f81b 	bl	8003006 <LoRa_gotoMode>
				timer = HAL_GetTick() - timer;
 8002fd0:	f001 fea4 	bl	8004d1c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	613b      	str	r3, [r7, #16]
				return 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e00e      	b.n	8002ffe <LoRa_transmit+0xf4>
			}
		}
//		HAL_Delay(1);
		for(uint32_t delay=0; delay<1000; delay++){
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	e003      	b.n	8002fee <LoRa_transmit+0xe4>
			asm("nop");
 8002fe6:	bf00      	nop
		for(uint32_t delay=0; delay<1000; delay++){
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	3301      	adds	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff4:	d3f7      	bcc.n	8002fe6 <LoRa_transmit+0xdc>
		}
		cter++;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
		read = LoRa_read_single(_LoRa, SX127x_LoRa_IrqFlags);
 8002ffc:	e7c0      	b.n	8002f80 <LoRa_transmit+0x76>
	}
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, uint8_t mode){
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	70fb      	strb	r3, [r7, #3]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read_single(_LoRa, SX127x_OpMode);
 8003012:	2101      	movs	r1, #1
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fefa 	bl	8002e0e <LoRa_read_single>
 800301a:	4603      	mov	r3, r0
 800301c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d108      	bne.n	800303a <LoRa_gotoMode+0x34>
		data = (read & 0xF8) | SLEEP_MODE;        //(x&0xF8): remain first 5 bits state, (x|0x00): change last 3 bits state
 8003028:	7bbb      	ldrb	r3, [r7, #14]
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003038:	e042      	b.n	80030c0 <LoRa_gotoMode+0xba>
	}else if (mode == STANDBY_MODE){
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10d      	bne.n	800305c <LoRa_gotoMode+0x56>
		data = (read & 0xF8) | STANDBY_MODE;
 8003040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003044:	f023 0307 	bic.w	r3, r3, #7
 8003048:	b25b      	sxtb	r3, r3
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	b25b      	sxtb	r3, r3
 8003050:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STANDBY_MODE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800305a:	e031      	b.n	80030c0 <LoRa_gotoMode+0xba>
	}else if (mode == TRANSMIT_MODE){
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d10d      	bne.n	800307e <LoRa_gotoMode+0x78>
		data = (read & 0xF8) | TRANSMIT_MODE;
 8003062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003066:	f023 0307 	bic.w	r3, r3, #7
 800306a:	b25b      	sxtb	r3, r3
 800306c:	f043 0303 	orr.w	r3, r3, #3
 8003070:	b25b      	sxtb	r3, r3
 8003072:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2203      	movs	r2, #3
 8003078:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800307c:	e020      	b.n	80030c0 <LoRa_gotoMode+0xba>
	}else if (mode == RXCONTIN_MODE){
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	2b05      	cmp	r3, #5
 8003082:	d10d      	bne.n	80030a0 <LoRa_gotoMode+0x9a>
		data = (read & 0xF8) | RXCONTIN_MODE;
 8003084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003088:	f023 0307 	bic.w	r3, r3, #7
 800308c:	b25b      	sxtb	r3, r3
 800308e:	f043 0305 	orr.w	r3, r3, #5
 8003092:	b25b      	sxtb	r3, r3
 8003094:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2205      	movs	r2, #5
 800309a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800309e:	e00f      	b.n	80030c0 <LoRa_gotoMode+0xba>
	}else if (mode == RXSINGLE_MODE){
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d10c      	bne.n	80030c0 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | RXSINGLE_MODE;
 80030a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	f043 0306 	orr.w	r3, r3, #6
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2206      	movs	r2, #6
 80030bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}

	LoRa_write_single(_LoRa, SX127x_OpMode, data);
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	461a      	mov	r2, r3
 80030c4:	2101      	movs	r1, #1
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff febb 	bl	8002e42 <LoRa_write_single>
//	HAL_Delay(10);
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	LoRa_reset(_LoRa);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f8e1 	bl	80032a4 <LoRa_reset>

	while(LoRa_isvalid(_LoRa)!=1);               //wait until LoRa available
 80030e2:	bf00      	nop
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f995 	bl	8003414 <LoRa_isvalid>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d1f9      	bne.n	80030e4 <LoRa_init+0x10>
	// goto sleep mode:
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80030f0:	2100      	movs	r1, #0
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ff87 	bl	8003006 <LoRa_gotoMode>
	HAL_Delay(10);
 80030f8:	200a      	movs	r0, #10
 80030fa:	f001 fe1b 	bl	8004d34 <HAL_Delay>

	SX127x_set_Tcxo(_LoRa, _LoRa->TCXOon);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f94c 	bl	80033a4 <SX127x_set_Tcxo>

	// turn into LoRa modem/Low frequency mode:
	read = LoRa_read_single(_LoRa, SX127x_OpMode);      //read current state of operation mode
 800310c:	2101      	movs	r1, #1
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fe7d 	bl	8002e0e <LoRa_read_single>
 8003114:	4603      	mov	r3, r0
 8003116:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8003118:	200a      	movs	r0, #10
 800311a:	f001 fe0b 	bl	8004d34 <HAL_Delay>
	uint8_t LowFreqModeOn = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
	if(_LoRa->frequency<500){
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003126:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800312a:	d201      	bcs.n	8003130 <LoRa_init+0x5c>
		LowFreqModeOn = 1;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
	}
	data = read | (_LoRa->LoRa_modem << 7) | (LowFreqModeOn<<3);             //needed operation mode register value
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003136:	01db      	lsls	r3, r3, #7
 8003138:	b25a      	sxtb	r2, r3
 800313a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800313e:	4313      	orrs	r3, r2
 8003140:	b25a      	sxtb	r2, r3
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	b25b      	sxtb	r3, r3
 8003148:	4313      	orrs	r3, r2
 800314a:	b25b      	sxtb	r3, r3
 800314c:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_OpMode, data);
 800314e:	7b7b      	ldrb	r3, [r7, #13]
 8003150:	461a      	mov	r2, r3
 8003152:	2101      	movs	r1, #1
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fe74 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(10);
 800315a:	200a      	movs	r0, #10
 800315c:	f001 fdea 	bl	8004d34 <HAL_Delay>

	// set frequency:
	LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8ba 	bl	80032e0 <LoRa_setFrequency>

	// set bandwidth, coding rate and expilicit mode:
	data = (_LoRa->bandWidth << 4) | (_LoRa->crcRate << 1) | (_LoRa->implicit_on << 0);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	b25a      	sxtb	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	b25b      	sxtb	r3, r3
 8003180:	4313      	orrs	r3, r2
 8003182:	b25a      	sxtb	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800318a:	b25b      	sxtb	r3, r3
 800318c:	4313      	orrs	r3, r2
 800318e:	b25b      	sxtb	r3, r3
 8003190:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_LoRa_ModemConfig, data);
 8003192:	7b7b      	ldrb	r3, [r7, #13]
 8003194:	461a      	mov	r2, r3
 8003196:	211d      	movs	r1, #29
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fe52 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(10);
 800319e:	200a      	movs	r0, #10
 80031a0:	f001 fdc8 	bl	8004d34 <HAL_Delay>

	// set spreading factor, CRC on, and Timeout Msb:
//	LoRa_setTOMsb_setCRCon(_LoRa);
	LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8c7 	bl	8003340 <LoRa_setSpreadingFactor>
	//enable CRC
	LoRa_set_CRCon(_LoRa, _LoRa->CRCon);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f905 	bl	80033ca <LoRa_set_CRCon>

	// set preamble:
	LoRa_write_single(_LoRa, SX127x_LoRa_PreambleMsb, _LoRa->preamble >> 8);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	2120      	movs	r1, #32
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fe37 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(10);
 80031d4:	200a      	movs	r0, #10
 80031d6:	f001 fdad 	bl	8004d34 <HAL_Delay>
	LoRa_write_single(_LoRa, SX127x_LoRa_PreambleLsb, _LoRa->preamble >> 0);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	2121      	movs	r1, #33	; 0x21
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fe2c 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(10);
 80031ea:	200a      	movs	r0, #10
 80031ec:	f001 fda2 	bl	8004d34 <HAL_Delay>

	// set output power gain:
	data = (_LoRa->paselect << 7) | (_LoRa->maxpower << 4) | (_LoRa->outputpower << 0);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031f6:	01db      	lsls	r3, r3, #7
 80031f8:	b25a      	sxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	b25b      	sxtb	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b25a      	sxtb	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800320e:	b25b      	sxtb	r3, r3
 8003210:	4313      	orrs	r3, r2
 8003212:	b25b      	sxtb	r3, r3
 8003214:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_PaConfig, data);
 8003216:	7b7b      	ldrb	r3, [r7, #13]
 8003218:	461a      	mov	r2, r3
 800321a:	2109      	movs	r1, #9
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fe10 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(10);
 8003222:	200a      	movs	r0, #10
 8003224:	f001 fd86 	bl	8004d34 <HAL_Delay>

    //20dBm output
	LoRa_write_single(_LoRa, SX127x_PaDac, _LoRa->PaDac);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800322e:	461a      	mov	r2, r3
 8003230:	214d      	movs	r1, #77	; 0x4d
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fe05 	bl	8002e42 <LoRa_write_single>

	//set OCP current protect
	data = (0x01 << 5) | (_LoRa->PaOcp);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800323e:	f043 0320 	orr.w	r3, r3, #32
 8003242:	737b      	strb	r3, [r7, #13]
	LoRa_write_single(_LoRa, SX127x_Ocp, data);
 8003244:	7b7b      	ldrb	r3, [r7, #13]
 8003246:	461a      	mov	r2, r3
 8003248:	210b      	movs	r1, #11
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fdf9 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(10);
 8003250:	200a      	movs	r0, #10
 8003252:	f001 fd6f 	bl	8004d34 <HAL_Delay>

	//normal I&Q
//	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ, 0x26);
//	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ2, 0x1d);
	//invert I&Q
	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ, 0x67);
 8003256:	2267      	movs	r2, #103	; 0x67
 8003258:	2133      	movs	r1, #51	; 0x33
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fdf1 	bl	8002e42 <LoRa_write_single>
	LoRa_write_single(_LoRa, SX127x_LoRa_InvertIQ2, 0x19);
 8003260:	2219      	movs	r2, #25
 8003262:	213b      	movs	r1, #59	; 0x3b
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fdec 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(10);
 800326a:	200a      	movs	r0, #10
 800326c:	f001 fd62 	bl	8004d34 <HAL_Delay>

//		// set Timeout Lsb:
//			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);

	// set base addresses
	LoRa_write_single(_LoRa, SX127x_LoRa_FifoRxBaseAddr, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	210f      	movs	r1, #15
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fde4 	bl	8002e42 <LoRa_write_single>
	LoRa_write_single(_LoRa, SX127x_LoRa_FifoTxBaseAddr, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	210e      	movs	r1, #14
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fddf 	bl	8002e42 <LoRa_write_single>
//			read = LoRa_read(_LoRa, RegDioMapping1);
//			data = read | 0x3F;
//			LoRa_write(_LoRa, RegDioMapping1, data);
//
	// goto standby mode:
	LoRa_gotoMode(_LoRa, STANDBY_MODE);
 8003284:	2101      	movs	r1, #1
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff febd 	bl	8003006 <LoRa_gotoMode>
	_LoRa->current_mode = STANDBY_MODE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	HAL_Delay(10);
 8003294:	200a      	movs	r0, #10
 8003296:	f001 fd4d 	bl	8004d34 <HAL_Delay>

	return LORA_OK;
 800329a:	23c8      	movs	r3, #200	; 0xc8
//			read = LoRa_read(_LoRa, RegVersion);
//			if(read == 0x12)
//				return LORA_OK;
//			else
//				return LORA_NOT_FOUND;
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68d8      	ldr	r0, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8a1b      	ldrh	r3, [r3, #16]
 80032b4:	2200      	movs	r2, #0
 80032b6:	4619      	mov	r1, r3
 80032b8:	f002 ff72 	bl	80061a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80032bc:	2001      	movs	r0, #1
 80032be:	f001 fd39 	bl	8004d34 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68d8      	ldr	r0, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8a1b      	ldrh	r3, [r3, #16]
 80032ca:	2201      	movs	r2, #1
 80032cc:	4619      	mov	r1, r3
 80032ce:	f002 ff67 	bl	80061a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032d2:	2064      	movs	r0, #100	; 0x64
 80032d4:	f001 fd2e 	bl	8004d34 <HAL_Delay>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, uint16_t freq){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
	uint8_t  data;
	uint32_t Frf;
	Frf = (freq * 524288) / 32;       //Frf = fRF*(2^19)/F(XOSC), 2^19 = 524288, F(XOSC) usually = 32MHz, Frf = 0xABCDEF
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	039b      	lsls	r3, r3, #14
 80032f0:	60fb      	str	r3, [r7, #12]

	// write Msb(0xAB):
	data = Frf >> 16;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	72fb      	strb	r3, [r7, #11]
	LoRa_write_single(_LoRa, SX127x_FrMsb, data);
 80032f8:	7afb      	ldrb	r3, [r7, #11]
 80032fa:	461a      	mov	r2, r3
 80032fc:	2106      	movs	r1, #6
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fd9f 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(1);
 8003304:	2001      	movs	r0, #1
 8003306:	f001 fd15 	bl	8004d34 <HAL_Delay>

	// write Mid(0xCD):
	data = Frf >> 8;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	72fb      	strb	r3, [r7, #11]
	LoRa_write_single(_LoRa, SX127x_FrMid, data);
 8003310:	7afb      	ldrb	r3, [r7, #11]
 8003312:	461a      	mov	r2, r3
 8003314:	2107      	movs	r1, #7
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff fd93 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(1);
 800331c:	2001      	movs	r0, #1
 800331e:	f001 fd09 	bl	8004d34 <HAL_Delay>

	// write Lsb(0xEF):
	data = Frf >> 0;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	72fb      	strb	r3, [r7, #11]
	LoRa_write_single(_LoRa, SX127x_FrLsb, data);
 8003326:	7afb      	ldrb	r3, [r7, #11]
 8003328:	461a      	mov	r2, r3
 800332a:	2108      	movs	r1, #8
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fd88 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(1);
 8003332:	2001      	movs	r0, #1
 8003334:	f001 fcfe 	bl	8004d34 <HAL_Delay>
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, uint8_t SF){
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	if (SF < 6) {
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	2b05      	cmp	r3, #5
 8003350:	d802      	bhi.n	8003358 <LoRa_setSpreadingFactor+0x18>
		SF = 6;
 8003352:	2306      	movs	r3, #6
 8003354:	70fb      	strb	r3, [r7, #3]
 8003356:	e004      	b.n	8003362 <LoRa_setSpreadingFactor+0x22>
	} else if (SF > 12) {
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d901      	bls.n	8003362 <LoRa_setSpreadingFactor+0x22>
		SF = 12;
 800335e:	230c      	movs	r3, #12
 8003360:	70fb      	strb	r3, [r7, #3]
//	} else {
//		LoRa_write_single(_LoRa, SX127x_LoRa_DetectOptimize, 0xc3);
//		LoRa_write_single(_LoRa, SX127x_LoRa_DetectionThreshold, 0x0a);
//	}

	read = LoRa_read_single(_LoRa, SX127x_LoRa_ModemConfig2);
 8003362:	211e      	movs	r1, #30
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fd52 	bl	8002e0e <LoRa_read_single>
 800336a:	4603      	mov	r3, r0
 800336c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 800336e:	2001      	movs	r0, #1
 8003370:	f001 fce0 	bl	8004d34 <HAL_Delay>

	data = (SF << 4) | (read & 0x0F);
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	b25a      	sxtb	r2, r3
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	b25b      	sxtb	r3, r3
 8003384:	4313      	orrs	r3, r2
 8003386:	b25b      	sxtb	r3, r3
 8003388:	73bb      	strb	r3, [r7, #14]
	LoRa_write_single(_LoRa, SX127x_LoRa_ModemConfig2, data);
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	461a      	mov	r2, r3
 800338e:	211e      	movs	r1, #30
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fd56 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(1);
 8003396:	2001      	movs	r0, #1
 8003398:	f001 fccc 	bl	8004d34 <HAL_Delay>
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <SX127x_set_Tcxo>:
			bool on --> LoRa object handler

		returns     : void
\* ----------------------------------------------------------------------------- */
void SX127x_set_Tcxo(LoRa* _LoRa, bool on)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
    uint8_t	data;
    data = on << 4;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	73fb      	strb	r3, [r7, #15]
    LoRa_write_single(_LoRa, SX127x_Tcxo, data);
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	461a      	mov	r2, r3
 80033ba:	214b      	movs	r1, #75	; 0x4b
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fd40 	bl	8002e42 <LoRa_write_single>
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <LoRa_set_CRCon>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
void LoRa_set_CRCon(LoRa* _LoRa, uint8_t CRCvalue){
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;
	read = LoRa_read_single(_LoRa, SX127x_LoRa_ModemConfig2);
 80033d6:	211e      	movs	r1, #30
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fd18 	bl	8002e0e <LoRa_read_single>
 80033de:	4603      	mov	r3, r0
 80033e0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f001 fca6 	bl	8004d34 <HAL_Delay>

	data = (CRCvalue << 2) | (read | 0x04);
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	73bb      	strb	r3, [r7, #14]
	LoRa_write_single(_LoRa, SX127x_LoRa_ModemConfig2, data);
 80033fa:	7bbb      	ldrb	r3, [r7, #14]
 80033fc:	461a      	mov	r2, r3
 80033fe:	211e      	movs	r1, #30
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fd1e 	bl	8002e42 <LoRa_write_single>
	HAL_Delay(1);
 8003406:	2001      	movs	r0, #1
 8003408:	f001 fc94 	bl	8004d34 <HAL_Delay>
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

	return 1;
 800341c:	2301      	movs	r3, #1
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <isTransmitting>:
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
bool isTransmitting(LoRa* _LoRa)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  if ((LoRa_read_single(_LoRa, SX127x_OpMode) & 0x07) == TRANSMIT_MODE) {
 8003432:	2101      	movs	r1, #1
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff fcea 	bl	8002e0e <LoRa_read_single>
 800343a:	4603      	mov	r3, r0
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	2b03      	cmp	r3, #3
 8003442:	d101      	bne.n	8003448 <isTransmitting+0x1e>
    return true;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <isTransmitting+0x20>

//  if (LoRa_read_single(_LoRa, SX127x_LoRa_IrqFlags) & 0x08) {
//    // clear IRQ's
//	  LoRa_write_single(_LoRa, SX127x_LoRa_IrqFlags, 0x08);
//  }
  return false;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800345a:	463b      	mov	r3, r7
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <MX_ADC3_Init+0x9c>)
 8003468:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <MX_ADC3_Init+0xa0>)
 800346a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <MX_ADC3_Init+0x9c>)
 800346e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003472:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <MX_ADC3_Init+0x9c>)
 8003476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800347a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <MX_ADC3_Init+0x9c>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <MX_ADC3_Init+0x9c>)
 8003484:	2200      	movs	r2, #0
 8003486:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <MX_ADC3_Init+0x9c>)
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <MX_ADC3_Init+0x9c>)
 8003492:	2200      	movs	r2, #0
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <MX_ADC3_Init+0x9c>)
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <MX_ADC3_Init+0xa4>)
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <MX_ADC3_Init+0x9c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <MX_ADC3_Init+0x9c>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <MX_ADC3_Init+0x9c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034b0:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <MX_ADC3_Init+0x9c>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80034b6:	480e      	ldr	r0, [pc, #56]	; (80034f0 <MX_ADC3_Init+0x9c>)
 80034b8:	f001 fc60 	bl	8004d7c <HAL_ADC_Init>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 80034c2:	f000 fed1 	bl	8004268 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80034c6:	2304      	movs	r3, #4
 80034c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80034d2:	463b      	mov	r3, r7
 80034d4:	4619      	mov	r1, r3
 80034d6:	4806      	ldr	r0, [pc, #24]	; (80034f0 <MX_ADC3_Init+0x9c>)
 80034d8:	f001 fd74 	bl	8004fc4 <HAL_ADC_ConfigChannel>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 80034e2:	f000 fec1 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200013f4 	.word	0x200013f4
 80034f4:	40012200 	.word	0x40012200
 80034f8:	0f000001 	.word	0x0f000001

080034fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a17      	ldr	r2, [pc, #92]	; (8003578 <HAL_ADC_MspInit+0x7c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d127      	bne.n	800356e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_ADC_MspInit+0x80>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4a15      	ldr	r2, [pc, #84]	; (800357c <HAL_ADC_MspInit+0x80>)
 8003528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800352c:	6453      	str	r3, [r2, #68]	; 0x44
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_ADC_MspInit+0x80>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_ADC_MspInit+0x80>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_ADC_MspInit+0x80>)
 8003544:	f043 0320 	orr.w	r3, r3, #32
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_ADC_MspInit+0x80>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800355a:	2303      	movs	r3, #3
 800355c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	4805      	ldr	r0, [pc, #20]	; (8003580 <HAL_ADC_MspInit+0x84>)
 800356a:	f002 fc6d 	bl	8005e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800356e:	bf00      	nop
 8003570:	3728      	adds	r7, #40	; 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40012200 	.word	0x40012200
 800357c:	40023800 	.word	0x40023800
 8003580:	40021400 	.word	0x40021400

08003584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	4b1f      	ldr	r3, [pc, #124]	; (800360c <MX_DMA_Init+0x88>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a1e      	ldr	r2, [pc, #120]	; (800360c <MX_DMA_Init+0x88>)
 8003594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <MX_DMA_Init+0x88>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <MX_DMA_Init+0x88>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <MX_DMA_Init+0x88>)
 80035b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <MX_DMA_Init+0x88>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	200c      	movs	r0, #12
 80035c8:	f002 f805 	bl	80055d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80035cc:	200c      	movs	r0, #12
 80035ce:	f002 f81e 	bl	800560e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	200e      	movs	r0, #14
 80035d8:	f001 fffd 	bl	80055d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80035dc:	200e      	movs	r0, #14
 80035de:	f002 f816 	bl	800560e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	203a      	movs	r0, #58	; 0x3a
 80035e8:	f001 fff5 	bl	80055d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80035ec:	203a      	movs	r0, #58	; 0x3a
 80035ee:	f002 f80e 	bl	800560e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	2046      	movs	r0, #70	; 0x46
 80035f8:	f001 ffed 	bl	80055d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80035fc:	2046      	movs	r0, #70	; 0x46
 80035fe:	f002 f806 	bl	800560e <HAL_NVIC_EnableIRQ>

}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003616:	f107 031c 	add.w	r3, r7, #28
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <MX_GPIO_Init+0x1cc>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a6b      	ldr	r2, [pc, #428]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003630:	f043 0310 	orr.w	r3, r3, #16
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b69      	ldr	r3, [pc, #420]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	4b65      	ldr	r3, [pc, #404]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a64      	ldr	r2, [pc, #400]	; (80037dc <MX_GPIO_Init+0x1cc>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b62      	ldr	r3, [pc, #392]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	4b5e      	ldr	r3, [pc, #376]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4a5d      	ldr	r2, [pc, #372]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003668:	f043 0320 	orr.w	r3, r3, #32
 800366c:	6313      	str	r3, [r2, #48]	; 0x30
 800366e:	4b5b      	ldr	r3, [pc, #364]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b57      	ldr	r3, [pc, #348]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a56      	ldr	r2, [pc, #344]	; (80037dc <MX_GPIO_Init+0x1cc>)
 8003684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <MX_GPIO_Init+0x1cc>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	4b50      	ldr	r3, [pc, #320]	; (80037dc <MX_GPIO_Init+0x1cc>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a4f      	ldr	r2, [pc, #316]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a48      	ldr	r2, [pc, #288]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b46      	ldr	r3, [pc, #280]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4b42      	ldr	r3, [pc, #264]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a41      	ldr	r2, [pc, #260]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <MX_GPIO_Init+0x1cc>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80036ea:	2201      	movs	r2, #1
 80036ec:	2110      	movs	r1, #16
 80036ee:	483c      	ldr	r0, [pc, #240]	; (80037e0 <MX_GPIO_Init+0x1d0>)
 80036f0:	f002 fd56 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80036f4:	2201      	movs	r2, #1
 80036f6:	2110      	movs	r1, #16
 80036f8:	483a      	ldr	r0, [pc, #232]	; (80037e4 <MX_GPIO_Init+0x1d4>)
 80036fa:	f002 fd51 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 80036fe:	2200      	movs	r2, #0
 8003700:	2180      	movs	r1, #128	; 0x80
 8003702:	4838      	ldr	r0, [pc, #224]	; (80037e4 <MX_GPIO_Init+0x1d4>)
 8003704:	f002 fd4c 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_DRDY_GPIO_Port, IMU_DRDY_Pin, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	2110      	movs	r1, #16
 800370c:	4836      	ldr	r0, [pc, #216]	; (80037e8 <MX_GPIO_Init+0x1d8>)
 800370e:	f002 fd47 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FEM_CTX_Pin|FEM_CPS_Pin, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003718:	4834      	ldr	r0, [pc, #208]	; (80037ec <MX_GPIO_Init+0x1dc>)
 800371a:	f002 fd41 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_SET);
 800371e:	2201      	movs	r2, #1
 8003720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003724:	4831      	ldr	r0, [pc, #196]	; (80037ec <MX_GPIO_Init+0x1dc>)
 8003726:	f002 fd3b 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800372a:	2310      	movs	r3, #16
 800372c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372e:	2301      	movs	r3, #1
 8003730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800373a:	f107 031c 	add.w	r3, r7, #28
 800373e:	4619      	mov	r1, r3
 8003740:	4827      	ldr	r0, [pc, #156]	; (80037e0 <MX_GPIO_Init+0x1d0>)
 8003742:	f002 fb81 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO0_Pin;
 8003746:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800374a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800374c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	4619      	mov	r1, r3
 800375c:	4824      	ldr	r0, [pc, #144]	; (80037f0 <MX_GPIO_Init+0x1e0>)
 800375e:	f002 fb73 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|IMU_RST_Pin;
 8003762:	2390      	movs	r3, #144	; 0x90
 8003764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003766:	2301      	movs	r3, #1
 8003768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003772:	f107 031c 	add.w	r3, r7, #28
 8003776:	4619      	mov	r1, r3
 8003778:	481a      	ldr	r0, [pc, #104]	; (80037e4 <MX_GPIO_Init+0x1d4>)
 800377a:	f002 fb65 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_DRDY_Pin;
 800377e:	2310      	movs	r3, #16
 8003780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003782:	2301      	movs	r3, #1
 8003784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_DRDY_GPIO_Port, &GPIO_InitStruct);
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4619      	mov	r1, r3
 8003794:	4814      	ldr	r0, [pc, #80]	; (80037e8 <MX_GPIO_Init+0x1d8>)
 8003796:	f002 fb57 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FEM_CTX_Pin|LoRa_RST_Pin|FEM_CPS_Pin;
 800379a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800379e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a0:	2301      	movs	r3, #1
 80037a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	4619      	mov	r1, r3
 80037b2:	480e      	ldr	r0, [pc, #56]	; (80037ec <MX_GPIO_Init+0x1dc>)
 80037b4:	f002 fb48 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 80037b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	4619      	mov	r1, r3
 80037ce:	4807      	ldr	r0, [pc, #28]	; (80037ec <MX_GPIO_Init+0x1dc>)
 80037d0:	f002 fb3a 	bl	8005e48 <HAL_GPIO_Init>

}
 80037d4:	bf00      	nop
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020800 	.word	0x40020800
 80037ec:	40020c00 	.word	0x40020c00
 80037f0:	40021400 	.word	0x40021400

080037f4 <__io_putchar>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

PUTCHAR_PROTOTYPE {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&EXT_uart, (uint8_t*) &ch, 1, 0xFFFF);
 80037fc:	1d39      	adds	r1, r7, #4
 80037fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003802:	2201      	movs	r2, #1
 8003804:	4803      	ldr	r0, [pc, #12]	; (8003814 <__io_putchar+0x20>)
 8003806:	f004 fd5a 	bl	80082be <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(&EXT_DMA_TX, (uint8_t *)&ch, 1);
	return ch;
 800380a:	687b      	ldr	r3, [r7, #4]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20001974 	.word	0x20001974

08003818 <HAL_UARTEx_RxEventCallback>:
uint16_t EXT_data_Size;

extern IMU imu;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
	IMU_UART_CB(huart, Size);
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fd fbbf 	bl	8000fac <IMU_UART_CB>

	if (huart->Instance == USART1) {
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <HAL_UARTEx_RxEventCallback+0x50>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d113      	bne.n	8003860 <HAL_UARTEx_RxEventCallback+0x48>
		EXT_got_data = true;
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_UARTEx_RxEventCallback+0x54>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
		EXT_data_Size = Size;
 800383e:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <HAL_UARTEx_RxEventCallback+0x58>)
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	8013      	strh	r3, [r2, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(&EXT_uart, EXT_buffer, EXT_BUFFER_SIZE);
 8003844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003848:	490a      	ldr	r1, [pc, #40]	; (8003874 <HAL_UARTEx_RxEventCallback+0x5c>)
 800384a:	480b      	ldr	r0, [pc, #44]	; (8003878 <HAL_UARTEx_RxEventCallback+0x60>)
 800384c:	f004 fe48 	bl	80084e0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_UARTEx_RxEventCallback+0x64>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_UARTEx_RxEventCallback+0x64>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0208 	bic.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
	}

}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40011000 	.word	0x40011000
 800386c:	2000189c 	.word	0x2000189c
 8003870:	2000189e 	.word	0x2000189e
 8003874:	2000149c 	.word	0x2000149c
 8003878:	20001974 	.word	0x20001974
 800387c:	200019fc 	.word	0x200019fc

08003880 <proc_data_4>:
	uint8_t datas[1024];
	int length;
} IMU_DATA_TO_SEND_t;
//typedef struct IMU_DATA_TO_SEND IMU_DATA_TO_SEND_t;

void proc_data_4(IMU_DATA_TO_SEND_t *data, float value){
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	ed87 0a00 	vstr	s0, [r7]
	f32_t f32_value;
	f32_value.f = value;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	60fb      	str	r3, [r7, #12]
	data->datas[data->length] = f32_value.u8[3];
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003896:	7bf9      	ldrb	r1, [r7, #15]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[2];
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038b0:	7bb9      	ldrb	r1, [r7, #14]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[1];
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038ca:	7b79      	ldrb	r1, [r7, #13]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[0];
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038e4:	7b39      	ldrb	r1, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <proc_data_2>:

void proc_data_2(IMU_DATA_TO_SEND_t *data, float value){
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	ed87 0a00 	vstr	s0, [r7]
	f16_t f16_value; f32_t temp;
	temp.f = value;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	60bb      	str	r3, [r7, #8]
	f32_to_f16(&temp, &f16_value);
 8003914:	f107 020c 	add.w	r2, r7, #12
 8003918:	f107 0308 	add.w	r3, r7, #8
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd ff86 	bl	8001830 <f32_to_f16>
	data->datas[data->length] = f16_value.u8[1];
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800392a:	7b79      	ldrb	r1, [r7, #13]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f16_value.u8[0];
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003944:	7b39      	ldrb	r1, [r7, #12]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <proc_data_2_uint16>:

void proc_data_2_uint16(IMU_DATA_TO_SEND_t *data, uint16_t value){
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
	f16_t temp;
	temp.u16 = value;
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	81bb      	strh	r3, [r7, #12]
	data->datas[data->length] = temp.u8[1];
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003976:	7b79      	ldrb	r1, [r7, #13]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = temp.u8[0];
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003990:	7b39      	ldrb	r1, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <proc_data_1_uint8>:

void proc_data_1_uint8(IMU_DATA_TO_SEND_t *data, uint8_t value){
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
	data->datas[data->length] = value;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	78f9      	ldrb	r1, [r7, #3]
 80039c6:	54d1      	strb	r1, [r2, r3]
	data->length+=1;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <imu_data_conv>:

void imu_data_conv(IMU *imu, IMU_DATA_TO_SEND_t *out){
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	out->length = 0;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	proc_data_1_uint8(out   , data_hour 	);
 80039f6:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <imu_data_conv+0x234>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	4619      	mov	r1, r3
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	f7ff ffd7 	bl	80039b0 <proc_data_1_uint8>
	proc_data_1_uint8(out   , data_min  	);
 8003a02:	4b86      	ldr	r3, [pc, #536]	; (8003c1c <imu_data_conv+0x238>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7ff ffd1 	bl	80039b0 <proc_data_1_uint8>
	proc_data_1_uint8(out   , data_sec  	);
 8003a0e:	4b84      	ldr	r3, [pc, #528]	; (8003c20 <imu_data_conv+0x23c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	4619      	mov	r1, r3
 8003a14:	6838      	ldr	r0, [r7, #0]
 8003a16:	f7ff ffcb 	bl	80039b0 <proc_data_1_uint8>
	proc_data_1_uint8(out 	, data_subSec );
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <imu_data_conv+0x240>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6838      	ldr	r0, [r7, #0]
 8003a22:	f7ff ffc5 	bl	80039b0 <proc_data_1_uint8>
	proc_data_2_uint16(out	, data_counter);
 8003a26:	4b80      	ldr	r3, [pc, #512]	; (8003c28 <imu_data_conv+0x244>)
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6838      	ldr	r0, [r7, #0]
 8003a2e:	f7ff ff97 	bl	8003960 <proc_data_2_uint16>
	proc_data_2(out    , imu->temp);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a38:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a40:	6838      	ldr	r0, [r7, #0]
 8003a42:	f7ff ff5f 	bl	8003904 <proc_data_2>
	proc_data_4(out    , imu->quaternionWXYZ[0]);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003a50:	eeb0 0a67 	vmov.f32	s0, s15
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f7ff ff13 	bl	8003880 <proc_data_4>
	proc_data_4(out    , imu->quaternionWXYZ[1]);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003a64:	eeb0 0a67 	vmov.f32	s0, s15
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f7ff ff09 	bl	8003880 <proc_data_4>
	proc_data_4(out    , imu->quaternionWXYZ[2]);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a74:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a78:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7c:	6838      	ldr	r0, [r7, #0]
 8003a7e:	f7ff feff 	bl	8003880 <proc_data_4>
	proc_data_4(out    , imu->quaternionWXYZ[3]);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a90:	6838      	ldr	r0, [r7, #0]
 8003a92:	f7ff fef5 	bl	8003880 <proc_data_4>
	proc_data_2(out    , imu->rateOfTurnXYZ[0]);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	f7ff ff2d 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->rateOfTurnXYZ[1]);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f7ff ff23 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->rateOfTurnXYZ[2]);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	6838      	ldr	r0, [r7, #0]
 8003ace:	f7ff ff19 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->freeAccelerationXYZ[0]);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003adc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f7ff ff0f 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->freeAccelerationXYZ[1]);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003af0:	eeb0 0a67 	vmov.f32	s0, s15
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	f7ff ff05 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->freeAccelerationXYZ[2]);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b00:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003b04:	eeb0 0a67 	vmov.f32	s0, s15
 8003b08:	6838      	ldr	r0, [r7, #0]
 8003b0a:	f7ff fefb 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->accelerationXYZ[0]);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b18:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1c:	6838      	ldr	r0, [r7, #0]
 8003b1e:	f7ff fef1 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->accelerationXYZ[1]);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b28:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b30:	6838      	ldr	r0, [r7, #0]
 8003b32:	f7ff fee7 	bl	8003904 <proc_data_2>
	proc_data_2(out    , imu->accelerationXYZ[2]);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003b40:	eeb0 0a67 	vmov.f32	s0, s15
 8003b44:	6838      	ldr	r0, [r7, #0]
 8003b46:	f7ff fedd 	bl	8003904 <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[0]);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b50:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003b54:	eeb0 0a67 	vmov.f32	s0, s15
 8003b58:	6838      	ldr	r0, [r7, #0]
 8003b5a:	f7ff fed3 	bl	8003904 <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[1]);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b64:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003b68:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f7ff fec9 	bl	8003904 <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[2]);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b78:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f7ff febf 	bl	8003904 <proc_data_2>
	proc_data_4(out, imu->latitude);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b90:	eeb0 0a67 	vmov.f32	s0, s15
 8003b94:	6838      	ldr	r0, [r7, #0]
 8003b96:	f7ff fe73 	bl	8003880 <proc_data_4>
	proc_data_4(out, imu->longitude);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba8:	6838      	ldr	r0, [r7, #0]
 8003baa:	f7ff fe69 	bl	8003880 <proc_data_4>
	proc_data_4(out, imu->altitudeEllip);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f7ff fe5f 	bl	8003880 <proc_data_4>
	proc_data_2(out, imu->velocityXYZ[0]);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd0:	6838      	ldr	r0, [r7, #0]
 8003bd2:	f7ff fe97 	bl	8003904 <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[1]);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f7ff fe8d 	bl	8003904 <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[2]);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf0:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf8:	6838      	ldr	r0, [r7, #0]
 8003bfa:	f7ff fe83 	bl	8003904 <proc_data_2>
	proc_data_4(out    , data_PA_temp);
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <imu_data_conv+0x248>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	eeb0 0a67 	vmov.f32	s0, s15
 8003c08:	6838      	ldr	r0, [r7, #0]
 8003c0a:	f7ff fe39 	bl	8003880 <proc_data_4>

}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20001492 	.word	0x20001492
 8003c1c:	20001493 	.word	0x20001493
 8003c20:	20001494 	.word	0x20001494
 8003c24:	20001495 	.word	0x20001495
 8003c28:	20001490 	.word	0x20001490
 8003c2c:	20001498 	.word	0x20001498

08003c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8003c38:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c3a:	f001 f809 	bl	8004c50 <HAL_Init>

  /* USER CODE BEGIN Init */

	HAL_UARTEx_ReceiveToIdle_DMA(&EXT_uart, EXT_buffer, EXT_BUFFER_SIZE);
 8003c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c42:	49c5      	ldr	r1, [pc, #788]	; (8003f58 <main+0x328>)
 8003c44:	48c5      	ldr	r0, [pc, #788]	; (8003f5c <main+0x32c>)
 8003c46:	f004 fc4b 	bl	80084e0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&EXT_DMA_RX, DMA_IT_HT);
 8003c4a:	4bc5      	ldr	r3, [pc, #788]	; (8003f60 <main+0x330>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4bc3      	ldr	r3, [pc, #780]	; (8003f60 <main+0x330>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0208 	bic.w	r2, r2, #8
 8003c58:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c5a:	f000 fa99 	bl	8004190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c5e:	f7ff fcd7 	bl	8003610 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c62:	f7ff fc8f 	bl	8003584 <MX_DMA_Init>
  MX_SPI1_Init();
 8003c66:	f000 fb89 	bl	800437c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003c6a:	f000 fe1b 	bl	80048a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003c6e:	f000 fe43 	bl	80048f8 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8003c72:	f000 fbb9 	bl	80043e8 <MX_SPI4_Init>
  MX_RTC_Init();
 8003c76:	f000 fafd 	bl	8004274 <MX_RTC_Init>
  MX_ADC3_Init();
 8003c7a:	f7ff fbeb 	bl	8003454 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  myLoRa.hSPIx = &hspi4;
 8003c7e:	4bb9      	ldr	r3, [pc, #740]	; (8003f64 <main+0x334>)
 8003c80:	4ab9      	ldr	r2, [pc, #740]	; (8003f68 <main+0x338>)
 8003c82:	601a      	str	r2, [r3, #0]
  myLoRa.CS_port = SPI4_CS_GPIO_Port;
 8003c84:	4bb7      	ldr	r3, [pc, #732]	; (8003f64 <main+0x334>)
 8003c86:	4ab9      	ldr	r2, [pc, #740]	; (8003f6c <main+0x33c>)
 8003c88:	605a      	str	r2, [r3, #4]
  myLoRa.CS_pin = SPI4_CS_Pin;
 8003c8a:	4bb6      	ldr	r3, [pc, #728]	; (8003f64 <main+0x334>)
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	811a      	strh	r2, [r3, #8]
  myLoRa.reset_port = LoRa_RST_GPIO_Port;
 8003c90:	4bb4      	ldr	r3, [pc, #720]	; (8003f64 <main+0x334>)
 8003c92:	4ab7      	ldr	r2, [pc, #732]	; (8003f70 <main+0x340>)
 8003c94:	60da      	str	r2, [r3, #12]
  myLoRa.reset_pin = LoRa_RST_Pin;
 8003c96:	4bb3      	ldr	r3, [pc, #716]	; (8003f64 <main+0x334>)
 8003c98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c9c:	821a      	strh	r2, [r3, #16]
  myLoRa.DIO0_port = DIO0_GPIO_Port;
 8003c9e:	4bb1      	ldr	r3, [pc, #708]	; (8003f64 <main+0x334>)
 8003ca0:	4ab4      	ldr	r2, [pc, #720]	; (8003f74 <main+0x344>)
 8003ca2:	615a      	str	r2, [r3, #20]
  myLoRa.DIO0_pin = DIO0_Pin;
 8003ca4:	4baf      	ldr	r3, [pc, #700]	; (8003f64 <main+0x334>)
 8003ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003caa:	831a      	strh	r2, [r3, #24]
  myLoRa.DIO1_port = DIO1_GPIO_Port;
 8003cac:	4bad      	ldr	r3, [pc, #692]	; (8003f64 <main+0x334>)
 8003cae:	4ab0      	ldr	r2, [pc, #704]	; (8003f70 <main+0x340>)
 8003cb0:	61da      	str	r2, [r3, #28]
  myLoRa.DIO1_pin = DIO1_Pin;
 8003cb2:	4bac      	ldr	r3, [pc, #688]	; (8003f64 <main+0x334>)
 8003cb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cb8:	841a      	strh	r2, [r3, #32]
  myLoRa.DIO2_port = DIO2_GPIO_Port;
 8003cba:	4baa      	ldr	r3, [pc, #680]	; (8003f64 <main+0x334>)
 8003cbc:	4aad      	ldr	r2, [pc, #692]	; (8003f74 <main+0x344>)
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
  myLoRa.DIO2_pin = DIO2_Pin;
 8003cc0:	4ba8      	ldr	r3, [pc, #672]	; (8003f64 <main+0x334>)
 8003cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
  myLoRa.LoRa_modem = LORA_MODEM;
 8003cc8:	4ba6      	ldr	r3, [pc, #664]	; (8003f64 <main+0x334>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.frequency = 433;           //MHz
 8003cd0:	4ba4      	ldr	r3, [pc, #656]	; (8003f64 <main+0x334>)
 8003cd2:	f240 12b1 	movw	r2, #433	; 0x1b1
 8003cd6:	859a      	strh	r2, [r3, #44]	; 0x2c
  myLoRa.bandWidth = BW_125KHz;
 8003cd8:	4ba2      	ldr	r3, [pc, #648]	; (8003f64 <main+0x334>)
 8003cda:	2207      	movs	r2, #7
 8003cdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  myLoRa.crcRate = CR_4_5;
 8003ce0:	4ba0      	ldr	r3, [pc, #640]	; (8003f64 <main+0x334>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  myLoRa.implicit_on = EXPLICIT;
 8003ce8:	4b9e      	ldr	r3, [pc, #632]	; (8003f64 <main+0x334>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  myLoRa.spredingFactor = SF_7;
 8003cf0:	4b9c      	ldr	r3, [pc, #624]	; (8003f64 <main+0x334>)
 8003cf2:	2207      	movs	r2, #7
 8003cf4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  myLoRa.preamble = 10;
 8003cf8:	4b9a      	ldr	r3, [pc, #616]	; (8003f64 <main+0x334>)
 8003cfa:	220a      	movs	r2, #10
 8003cfc:	865a      	strh	r2, [r3, #50]	; 0x32
  myLoRa.paselect = RFO;
 8003cfe:	4b99      	ldr	r3, [pc, #612]	; (8003f64 <main+0x334>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  myLoRa.maxpower = 7;
 8003d06:	4b97      	ldr	r3, [pc, #604]	; (8003f64 <main+0x334>)
 8003d08:	2207      	movs	r2, #7
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  myLoRa.outputpower = 10;                //0~15
 8003d0e:	4b95      	ldr	r3, [pc, #596]	; (8003f64 <main+0x334>)
 8003d10:	220a      	movs	r2, #10
 8003d12:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
//  myLoRa.paselect = PA_BOOST;
//  myLoRa.maxpower = 7;
//  myLoRa.outputpower = 15;
  myLoRa.PaDac = 0x84;      //0x84:max power = 17dBm   0x87:max power = 20dBm in PA_BOOST pin//-4~15
 8003d16:	4b93      	ldr	r3, [pc, #588]	; (8003f64 <main+0x334>)
 8003d18:	2284      	movs	r2, #132	; 0x84
 8003d1a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_RESET);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d24:	4892      	ldr	r0, [pc, #584]	; (8003f70 <main+0x340>)
 8003d26:	f002 fa3b 	bl	80061a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FEM_CTX_GPIO_Port, FEM_CTX_Pin, GPIO_PIN_RESET);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d30:	488f      	ldr	r0, [pc, #572]	; (8003f70 <main+0x340>)
 8003d32:	f002 fa35 	bl	80061a0 <HAL_GPIO_WritePin>
  myLoRa.PaOcp = 20;                     //default=0x0B=11, max=27
 8003d36:	4b8b      	ldr	r3, [pc, #556]	; (8003f64 <main+0x334>)
 8003d38:	2214      	movs	r2, #20
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  myLoRa.CRCon = 0;
 8003d3e:	4b89      	ldr	r3, [pc, #548]	; (8003f64 <main+0x334>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  myLoRa.TCXOon = 0;
 8003d46:	4b87      	ldr	r3, [pc, #540]	; (8003f64 <main+0x334>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  myLoRa.packetSize = 12;
 8003d4e:	4b85      	ldr	r3, [pc, #532]	; (8003f64 <main+0x334>)
 8003d50:	220c      	movs	r2, #12
 8003d52:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  LoRa_init(&myLoRa);              //initialize LoRa configuration
 8003d56:	4883      	ldr	r0, [pc, #524]	; (8003f64 <main+0x334>)
 8003d58:	f7ff f9bc 	bl	80030d4 <LoRa_init>


	IMU_Init();
 8003d5c:	f7fd f976 	bl	800104c <IMU_Init>


	HAL_ADC_Start(&hadc3);
 8003d60:	4885      	ldr	r0, [pc, #532]	; (8003f78 <main+0x348>)
 8003d62:	f001 f84f 	bl	8004e04 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t timer = HAL_GetTick();
 8003d66:	f000 ffd9 	bl	8004d1c <HAL_GetTick>
 8003d6a:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
	uint32_t loopRunTime = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
	bool GPS_no_calied = true;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457

	IMU_DATA_TO_SEND_t data2Lora;

	data_counter=0;
 8003d7a:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <main+0x34c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	801a      	strh	r2, [r3, #0]

	printf("init finish!!!!!!!!!!!!\n");
 8003d80:	487f      	ldr	r0, [pc, #508]	; (8003f80 <main+0x350>)
 8003d82:	f006 fa99 	bl	800a2b8 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//IMU data gathering
		IMU_process_data();
 8003d86:	f7fd f9d3 	bl	8001130 <IMU_process_data>

		IMU_State_mechine();
 8003d8a:	f7fd fa07 	bl	800119c <IMU_State_mechine>

		/* Get the RTC current Time */
		HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	497c      	ldr	r1, [pc, #496]	; (8003f84 <main+0x354>)
 8003d92:	487d      	ldr	r0, [pc, #500]	; (8003f88 <main+0x358>)
 8003d94:	f003 f984 	bl	80070a0 <HAL_RTC_GetTime>
		/* Get the RTC current Date */
		HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	497c      	ldr	r1, [pc, #496]	; (8003f8c <main+0x35c>)
 8003d9c:	487a      	ldr	r0, [pc, #488]	; (8003f88 <main+0x358>)
 8003d9e:	f003 fa61 	bl	8007264 <HAL_RTC_GetDate>

		if( (imu.myGnssData.numSV >= 4) &&
 8003da2:	4b7b      	ldr	r3, [pc, #492]	; (8003f90 <main+0x360>)
 8003da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d961      	bls.n	8003e74 <main+0x244>
				((GetDate.Year+2000) != imu.myGnssData.year) &&
 8003db0:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <main+0x35c>)
 8003db2:	78db      	ldrb	r3, [r3, #3]
 8003db4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003db8:	4a75      	ldr	r2, [pc, #468]	; (8003f90 <main+0x360>)
 8003dba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dbe:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
		if( (imu.myGnssData.numSV >= 4) &&
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d056      	beq.n	8003e74 <main+0x244>
				((GetDate.Year+2000) != imu.myGnssData.year) &&
 8003dc6:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d052      	beq.n	8003e74 <main+0x244>
				(GPS_no_calied)){
			printf("Reset RTC timer\n");
 8003dce:	4871      	ldr	r0, [pc, #452]	; (8003f94 <main+0x364>)
 8003dd0:	f006 fa72 	bl	800a2b8 <puts>
			RTC_TimeTypeDef IMU_time;
			RTC_DateTypeDef IMU_date;
			IMU_date.Year			= imu.myGnssData.year-2000;
 8003dd4:	4b6e      	ldr	r3, [pc, #440]	; (8003f90 <main+0x360>)
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	3330      	adds	r3, #48	; 0x30
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003de8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8003dec:	70da      	strb	r2, [r3, #3]
			IMU_date.Month		= imu.myGnssData.month;
 8003dee:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <main+0x360>)
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8003df8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003dfc:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8003e00:	705a      	strb	r2, [r3, #1]
			IMU_date.Date			= imu.myGnssData.day;
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <main+0x360>)
 8003e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e08:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8003e0c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003e10:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8003e14:	709a      	strb	r2, [r3, #2]
			IMU_time.Hours 		= imu.myGnssData.hour;
 8003e16:	4b5e      	ldr	r3, [pc, #376]	; (8003f90 <main+0x360>)
 8003e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003e20:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003e24:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003e28:	701a      	strb	r2, [r3, #0]
			IMU_time.Minutes 	= imu.myGnssData.minute;
 8003e2a:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <main+0x360>)
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8003e34:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003e38:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003e3c:	705a      	strb	r2, [r3, #1]
			IMU_time.Seconds	= imu.myGnssData.second;
 8003e3e:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <main+0x360>)
 8003e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e44:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8003e48:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003e4c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003e50:	709a      	strb	r2, [r3, #2]

			HAL_RTC_SetTime(&hrtc, &IMU_time, RTC_FORMAT_BIN);
 8003e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e56:	2200      	movs	r2, #0
 8003e58:	4619      	mov	r1, r3
 8003e5a:	484b      	ldr	r0, [pc, #300]	; (8003f88 <main+0x358>)
 8003e5c:	f003 f886 	bl	8006f6c <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &IMU_date, RTC_FORMAT_BIN);
 8003e60:	f107 0320 	add.w	r3, r7, #32
 8003e64:	2200      	movs	r2, #0
 8003e66:	4619      	mov	r1, r3
 8003e68:	4847      	ldr	r0, [pc, #284]	; (8003f88 <main+0x358>)
 8003e6a:	f003 f977 	bl	800715c <HAL_RTC_SetDate>

			GPS_no_calied= false;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
//			HAL_UART_Transmit(&EXT_uart, read_value, read_leng, 0xFFFF);
//		}
//		HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_RESET);      //low frequency port switch, RESET for transmit, SET for receive


		if(HAL_GetTick() - timer > 333){
 8003e74:	f000 ff52 	bl	8004d1c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8003e84:	f4ff af7f 	bcc.w	8003d86 <main+0x156>
 8003e88:	466b      	mov	r3, sp
 8003e8a:	461e      	mov	r6, r3

			data_hour 	= GetTime.Hours;
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <main+0x354>)
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <main+0x368>)
 8003e92:	701a      	strb	r2, [r3, #0]
			data_min  	= GetTime.Minutes;
 8003e94:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <main+0x354>)
 8003e96:	785a      	ldrb	r2, [r3, #1]
 8003e98:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <main+0x36c>)
 8003e9a:	701a      	strb	r2, [r3, #0]
			data_sec  	= GetTime.Seconds;
 8003e9c:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <main+0x354>)
 8003e9e:	789a      	ldrb	r2, [r3, #2]
 8003ea0:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <main+0x370>)
 8003ea2:	701a      	strb	r2, [r3, #0]
			data_subSec = ((float)(255-GetTime.SubSeconds)) * 1. / ((float)(GetTime.SecondFraction +1)) * 100;
 8003ea4:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <main+0x354>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb4:	ee17 0a90 	vmov	r0, s15
 8003eb8:	f7fc fb56 	bl	8000568 <__aeabi_f2d>
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <main+0x354>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	ee17 0a90 	vmov	r0, s15
 8003ed2:	f7fc fb49 	bl	8000568 <__aeabi_f2d>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4620      	mov	r0, r4
 8003edc:	4629      	mov	r1, r5
 8003ede:	f7fc fcc5 	bl	800086c <__aeabi_ddiv>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <main+0x374>)
 8003ef0:	f7fc fb92 	bl	8000618 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f7fc fe64 	bl	8000bc8 <__aeabi_d2uiz>
 8003f00:	4603      	mov	r3, r0
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	4b28      	ldr	r3, [pc, #160]	; (8003fa8 <main+0x378>)
 8003f06:	701a      	strb	r2, [r3, #0]
			data_PA_temp = HAL_ADC_GetValue(&hadc3);
 8003f08:	481b      	ldr	r0, [pc, #108]	; (8003f78 <main+0x348>)
 8003f0a:	f001 f84d 	bl	8004fa8 <HAL_ADC_GetValue>
 8003f0e:	ee07 0a90 	vmov	s15, r0
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <main+0x37c>)
 8003f18:	edc3 7a00 	vstr	s15, [r3]
			data_PA_temp = -(data_PA_temp-925.)/6.7+25.;
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <main+0x37c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fb21 	bl	8000568 <__aeabi_f2d>
 8003f26:	a308      	add	r3, pc, #32	; (adr r3, 8003f48 <main+0x318>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc f9bc 	bl	80002a8 <__aeabi_dsub>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	61ba      	str	r2, [r7, #24]
 8003f36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	a304      	add	r3, pc, #16	; (adr r3, 8003f50 <main+0x320>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	e035      	b.n	8003fb0 <main+0x380>
 8003f44:	f3af 8000 	nop.w
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	408ce800 	.word	0x408ce800
 8003f50:	cccccccd 	.word	0xcccccccd
 8003f54:	401acccc 	.word	0x401acccc
 8003f58:	2000149c 	.word	0x2000149c
 8003f5c:	20001974 	.word	0x20001974
 8003f60:	200019fc 	.word	0x200019fc
 8003f64:	20001454 	.word	0x20001454
 8003f68:	20001918 	.word	0x20001918
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40020c00 	.word	0x40020c00
 8003f74:	40021400 	.word	0x40021400
 8003f78:	200013f4 	.word	0x200013f4
 8003f7c:	20001490 	.word	0x20001490
 8003f80:	0800cd70 	.word	0x0800cd70
 8003f84:	20001440 	.word	0x20001440
 8003f88:	200018a0 	.word	0x200018a0
 8003f8c:	2000143c 	.word	0x2000143c
 8003f90:	20000308 	.word	0x20000308
 8003f94:	0800cd88 	.word	0x0800cd88
 8003f98:	20001492 	.word	0x20001492
 8003f9c:	20001493 	.word	0x20001493
 8003fa0:	20001494 	.word	0x20001494
 8003fa4:	40590000 	.word	0x40590000
 8003fa8:	20001495 	.word	0x20001495
 8003fac:	20001498 	.word	0x20001498
 8003fb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fb4:	f7fc fc5a 	bl	800086c <__aeabi_ddiv>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	4b6c      	ldr	r3, [pc, #432]	; (8004178 <main+0x548>)
 8003fc6:	f7fc f971 	bl	80002ac <__adddf3>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fe19 	bl	8000c08 <__aeabi_d2f>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4a68      	ldr	r2, [pc, #416]	; (800417c <main+0x54c>)
 8003fda:	6013      	str	r3, [r2, #0]


			//packing data from IMU to send via Lora
			imu_data_conv(&imu, &data2Lora);
 8003fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4867      	ldr	r0, [pc, #412]	; (8004180 <main+0x550>)
 8003fe4:	f7ff fcfe 	bl	80039e4 <imu_data_conv>

			//LoRa_transmit()
			uint8_t send_value[myLoRa.packetSize];
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <main+0x554>)
 8003fea:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 8003fee:	460b      	mov	r3, r1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8003ff6:	b2cb      	uxtb	r3, r1
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4698      	mov	r8, r3
 8003ffc:	4691      	mov	r9, r2
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004012:	b2cb      	uxtb	r3, r1
 8004014:	2200      	movs	r2, #0
 8004016:	469a      	mov	sl, r3
 8004018:	4693      	mov	fp, r2
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800402a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800402e:	460b      	mov	r3, r1
 8004030:	3307      	adds	r3, #7
 8004032:	08db      	lsrs	r3, r3, #3
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	ebad 0d03 	sub.w	sp, sp, r3
 800403a:	ab0c      	add	r3, sp, #48	; 0x30
 800403c:	3300      	adds	r3, #0
 800403e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
			uint8_t send_leng = sizeof(send_value)/sizeof(send_value[0]);
 8004042:	460b      	mov	r3, r1
 8004044:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
			uint8_t state;
			for (int i = 0;i<=myLoRa.packetSize;i++){
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800404e:	e01b      	b.n	8004088 <main+0x458>
				send_value[i] = (uint8_t)imu.accelerationXYZ[i];
 8004050:	4a4b      	ldr	r2, [pc, #300]	; (8004180 <main+0x550>)
 8004052:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8004056:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	3304      	adds	r3, #4
 8004060:	edd3 7a00 	vldr	s15, [r3]
 8004064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004068:	edc7 7a04 	vstr	s15, [r7, #16]
 800406c:	7c3b      	ldrb	r3, [r7, #16]
 800406e:	b2d9      	uxtb	r1, r3
 8004070:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8004074:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8004078:	4413      	add	r3, r2
 800407a:	460a      	mov	r2, r1
 800407c:	701a      	strb	r2, [r3, #0]
			for (int i = 0;i<=myLoRa.packetSize;i++){
 800407e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8004082:	3301      	adds	r3, #1
 8004084:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8004088:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <main+0x554>)
 800408a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800408e:	461a      	mov	r2, r3
 8004090:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8004094:	4293      	cmp	r3, r2
 8004096:	dddb      	ble.n	8004050 <main+0x420>
			}
			state = LoRa_transmit(&myLoRa, data2Lora.datas, data2Lora.length, TRANSMIT_TIMEOUT);
 8004098:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800409c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80040a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80040aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040ae:	4835      	ldr	r0, [pc, #212]	; (8004184 <main+0x554>)
 80040b0:	f7fe ff2b 	bl	8002f0a <LoRa_transmit>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 343e 	strb.w	r3, [r7, #1086]	; 0x43e



			loopRunTime = HAL_GetTick() - loopRunTime;
 80040ba:	f000 fe2f 	bl	8004d1c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n",
				imu.quaternionWXYZ[0],
 80040ca:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <main+0x550>)
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n",
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc fa48 	bl	8000568 <__aeabi_f2d>
 80040d8:	e9c7 0104 	strd	r0, r1, [r7, #16]
				imu.quaternionWXYZ[1],
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <main+0x550>)
 80040de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n",
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fc fa3f 	bl	8000568 <__aeabi_f2d>
 80040ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
				imu.quaternionWXYZ[2],
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <main+0x550>)
 80040f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n",
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fa36 	bl	8000568 <__aeabi_f2d>
 80040fc:	e9c7 0100 	strd	r0, r1, [r7]
				imu.quaternionWXYZ[3],
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <main+0x550>)
 8004102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n",
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fa2d 	bl	8000568 <__aeabi_f2d>
 800410e:	4604      	mov	r4, r0
 8004110:	460d      	mov	r5, r1
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <main+0x54c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc fa26 	bl	8000568 <__aeabi_f2d>
 800411c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004120:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8004124:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <main+0x558>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	930a      	str	r3, [sp, #40]	; 0x28
 800412e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8004132:	9309      	str	r3, [sp, #36]	; 0x24
 8004134:	9208      	str	r2, [sp, #32]
 8004136:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800413a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800413e:	ed97 7b00 	vldr	d7, [r7]
 8004142:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004146:	ed97 7b02 	vldr	d7, [r7, #8]
 800414a:	ed8d 7b00 	vstr	d7, [sp]
 800414e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004152:	480e      	ldr	r0, [pc, #56]	; (800418c <main+0x55c>)
 8004154:	f006 f82a 	bl	800a1ac <iprintf>
//			printf("%02d,%02d,%02d\r\n",IMU_time.Hours, IMU_time.Minutes, IMU_time.Seconds);


//			printf("\r\n");

			timer = HAL_GetTick();
 8004158:	f000 fde0 	bl	8004d1c <HAL_GetTick>
 800415c:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
			data_counter+=1;
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <main+0x558>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	4b07      	ldr	r3, [pc, #28]	; (8004188 <main+0x558>)
 800416a:	801a      	strh	r2, [r3, #0]
			loopRunTime = HAL_GetTick();
 800416c:	f000 fdd6 	bl	8004d1c <HAL_GetTick>
 8004170:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
 8004174:	46b5      	mov	sp, r6
		IMU_process_data();
 8004176:	e606      	b.n	8003d86 <main+0x156>
 8004178:	40390000 	.word	0x40390000
 800417c:	20001498 	.word	0x20001498
 8004180:	20000308 	.word	0x20000308
 8004184:	20001454 	.word	0x20001454
 8004188:	20001490 	.word	0x20001490
 800418c:	0800cd98 	.word	0x0800cd98

08004190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b094      	sub	sp, #80	; 0x50
 8004194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004196:	f107 0320 	add.w	r3, r7, #32
 800419a:	2230      	movs	r2, #48	; 0x30
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f005 fb92 	bl	80098c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041a4:	f107 030c 	add.w	r3, r7, #12
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <SystemClock_Config+0xd0>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4a28      	ldr	r2, [pc, #160]	; (8004260 <SystemClock_Config+0xd0>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	; 0x40
 80041c4:	4b26      	ldr	r3, [pc, #152]	; (8004260 <SystemClock_Config+0xd0>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80041d0:	2300      	movs	r3, #0
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	4b23      	ldr	r3, [pc, #140]	; (8004264 <SystemClock_Config+0xd4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80041dc:	4a21      	ldr	r2, [pc, #132]	; (8004264 <SystemClock_Config+0xd4>)
 80041de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <SystemClock_Config+0xd4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80041f0:	2305      	movs	r3, #5
 80041f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041fa:	2301      	movs	r3, #1
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041fe:	2302      	movs	r3, #2
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004208:	2308      	movs	r3, #8
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800420c:	2354      	movs	r3, #84	; 0x54
 800420e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004210:	2302      	movs	r3, #2
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004214:	2304      	movs	r3, #4
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004218:	f107 0320 	add.w	r3, r7, #32
 800421c:	4618      	mov	r0, r3
 800421e:	f001 ffd9 	bl	80061d4 <HAL_RCC_OscConfig>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004228:	f000 f81e 	bl	8004268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800422c:	230f      	movs	r3, #15
 800422e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004230:	2302      	movs	r3, #2
 8004232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800423c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004242:	f107 030c 	add.w	r3, r7, #12
 8004246:	2102      	movs	r1, #2
 8004248:	4618      	mov	r0, r3
 800424a:	f002 fa3b 	bl	80066c4 <HAL_RCC_ClockConfig>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004254:	f000 f808 	bl	8004268 <Error_Handler>
  }
}
 8004258:	bf00      	nop
 800425a:	3750      	adds	r7, #80	; 0x50
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	40007000 	.word	0x40007000

08004268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800426c:	b672      	cpsid	i
}
 800426e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004270:	e7fe      	b.n	8004270 <Error_Handler+0x8>
	...

08004274 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004288:	2300      	movs	r3, #0
 800428a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800428c:	4b24      	ldr	r3, [pc, #144]	; (8004320 <MX_RTC_Init+0xac>)
 800428e:	4a25      	ldr	r2, [pc, #148]	; (8004324 <MX_RTC_Init+0xb0>)
 8004290:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004292:	4b23      	ldr	r3, [pc, #140]	; (8004320 <MX_RTC_Init+0xac>)
 8004294:	2200      	movs	r2, #0
 8004296:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004298:	4b21      	ldr	r3, [pc, #132]	; (8004320 <MX_RTC_Init+0xac>)
 800429a:	227f      	movs	r2, #127	; 0x7f
 800429c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <MX_RTC_Init+0xac>)
 80042a0:	22ff      	movs	r2, #255	; 0xff
 80042a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <MX_RTC_Init+0xac>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <MX_RTC_Init+0xac>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <MX_RTC_Init+0xac>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042b6:	481a      	ldr	r0, [pc, #104]	; (8004320 <MX_RTC_Init+0xac>)
 80042b8:	f002 fde2 	bl	8006e80 <HAL_RTC_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80042c2:	f7ff ffd1 	bl	8004268 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	2201      	movs	r2, #1
 80042de:	4619      	mov	r1, r3
 80042e0:	480f      	ldr	r0, [pc, #60]	; (8004320 <MX_RTC_Init+0xac>)
 80042e2:	f002 fe43 	bl	8006f6c <HAL_RTC_SetTime>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80042ec:	f7ff ffbc 	bl	8004268 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80042f0:	2301      	movs	r3, #1
 80042f2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80042f4:	2301      	movs	r3, #1
 80042f6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80042f8:	2301      	movs	r3, #1
 80042fa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004300:	463b      	mov	r3, r7
 8004302:	2201      	movs	r2, #1
 8004304:	4619      	mov	r1, r3
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <MX_RTC_Init+0xac>)
 8004308:	f002 ff28 	bl	800715c <HAL_RTC_SetDate>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004312:	f7ff ffa9 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200018a0 	.word	0x200018a0
 8004324:	40002800 	.word	0x40002800

08004328 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	; 0x38
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	2230      	movs	r2, #48	; 0x30
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f005 fac5 	bl	80098c8 <memset>
  if(rtcHandle->Instance==RTC)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <HAL_RTC_MspInit+0x4c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d111      	bne.n	800436c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004348:	2320      	movs	r3, #32
 800434a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800434c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	4618      	mov	r0, r3
 8004358:	f002 fbd2 	bl	8006b00 <HAL_RCCEx_PeriphCLKConfig>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004362:	f7ff ff81 	bl	8004268 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <HAL_RTC_MspInit+0x50>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800436c:	bf00      	nop
 800436e:	3738      	adds	r7, #56	; 0x38
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40002800 	.word	0x40002800
 8004378:	42470e3c 	.word	0x42470e3c

0800437c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <MX_SPI1_Init+0x68>)
 8004384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800438c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <MX_SPI1_Init+0x64>)
 800439c:	2202      	movs	r2, #2
 800439e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043b0:	2238      	movs	r2, #56	; 0x38
 80043b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043bc:	2200      	movs	r2, #0
 80043be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043c8:	220a      	movs	r2, #10
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043cc:	4804      	ldr	r0, [pc, #16]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043ce:	f003 f855 	bl	800747c <HAL_SPI_Init>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80043d8:	f7ff ff46 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	200018c0 	.word	0x200018c0
 80043e4:	40013000 	.word	0x40013000

080043e8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <MX_SPI4_Init+0x64>)
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <MX_SPI4_Init+0x68>)
 80043f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <MX_SPI4_Init+0x64>)
 80043f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <MX_SPI4_Init+0x64>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <MX_SPI4_Init+0x64>)
 8004402:	2200      	movs	r2, #0
 8004404:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <MX_SPI4_Init+0x64>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <MX_SPI4_Init+0x64>)
 800440e:	2200      	movs	r2, #0
 8004410:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <MX_SPI4_Init+0x64>)
 8004414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004418:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <MX_SPI4_Init+0x64>)
 800441c:	2210      	movs	r2, #16
 800441e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <MX_SPI4_Init+0x64>)
 8004422:	2200      	movs	r2, #0
 8004424:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <MX_SPI4_Init+0x64>)
 8004428:	2200      	movs	r2, #0
 800442a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <MX_SPI4_Init+0x64>)
 800442e:	2200      	movs	r2, #0
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <MX_SPI4_Init+0x64>)
 8004434:	220a      	movs	r2, #10
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004438:	4804      	ldr	r0, [pc, #16]	; (800444c <MX_SPI4_Init+0x64>)
 800443a:	f003 f81f 	bl	800747c <HAL_SPI_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004444:	f7ff ff10 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20001918 	.word	0x20001918
 8004450:	40013400 	.word	0x40013400

08004454 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	f107 031c 	add.w	r3, r7, #28
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a49      	ldr	r2, [pc, #292]	; (8004598 <HAL_SPI_MspInit+0x144>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d152      	bne.n	800451c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	4b48      	ldr	r3, [pc, #288]	; (800459c <HAL_SPI_MspInit+0x148>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	4a47      	ldr	r2, [pc, #284]	; (800459c <HAL_SPI_MspInit+0x148>)
 8004480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004484:	6453      	str	r3, [r2, #68]	; 0x44
 8004486:	4b45      	ldr	r3, [pc, #276]	; (800459c <HAL_SPI_MspInit+0x148>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_SPI_MspInit+0x148>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	4a40      	ldr	r2, [pc, #256]	; (800459c <HAL_SPI_MspInit+0x148>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6313      	str	r3, [r2, #48]	; 0x30
 80044a2:	4b3e      	ldr	r3, [pc, #248]	; (800459c <HAL_SPI_MspInit+0x148>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	4b3a      	ldr	r3, [pc, #232]	; (800459c <HAL_SPI_MspInit+0x148>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_SPI_MspInit+0x148>)
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	6313      	str	r3, [r2, #48]	; 0x30
 80044be:	4b37      	ldr	r3, [pc, #220]	; (800459c <HAL_SPI_MspInit+0x148>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80044ca:	2360      	movs	r3, #96	; 0x60
 80044cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d6:	2303      	movs	r3, #3
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044da:	2305      	movs	r3, #5
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044de:	f107 031c 	add.w	r3, r7, #28
 80044e2:	4619      	mov	r1, r3
 80044e4:	482e      	ldr	r0, [pc, #184]	; (80045a0 <HAL_SPI_MspInit+0x14c>)
 80044e6:	f001 fcaf 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044ea:	2320      	movs	r3, #32
 80044ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	2303      	movs	r3, #3
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044fa:	2305      	movs	r3, #5
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fe:	f107 031c 	add.w	r3, r7, #28
 8004502:	4619      	mov	r1, r3
 8004504:	4827      	ldr	r0, [pc, #156]	; (80045a4 <HAL_SPI_MspInit+0x150>)
 8004506:	f001 fc9f 	bl	8005e48 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	2023      	movs	r0, #35	; 0x23
 8004510:	f001 f861 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004514:	2023      	movs	r0, #35	; 0x23
 8004516:	f001 f87a 	bl	800560e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800451a:	e038      	b.n	800458e <HAL_SPI_MspInit+0x13a>
  else if(spiHandle->Instance==SPI4)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <HAL_SPI_MspInit+0x154>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d133      	bne.n	800458e <HAL_SPI_MspInit+0x13a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_SPI_MspInit+0x148>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_SPI_MspInit+0x148>)
 8004530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004534:	6453      	str	r3, [r2, #68]	; 0x44
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_SPI_MspInit+0x148>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_SPI_MspInit+0x148>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a14      	ldr	r2, [pc, #80]	; (800459c <HAL_SPI_MspInit+0x148>)
 800454c:	f043 0310 	orr.w	r3, r3, #16
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_SPI_MspInit+0x148>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800455e:	2364      	movs	r3, #100	; 0x64
 8004560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456a:	2303      	movs	r3, #3
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800456e:	2305      	movs	r3, #5
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004572:	f107 031c 	add.w	r3, r7, #28
 8004576:	4619      	mov	r1, r3
 8004578:	480c      	ldr	r0, [pc, #48]	; (80045ac <HAL_SPI_MspInit+0x158>)
 800457a:	f001 fc65 	bl	8005e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	2100      	movs	r1, #0
 8004582:	2054      	movs	r0, #84	; 0x54
 8004584:	f001 f827 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8004588:	2054      	movs	r0, #84	; 0x54
 800458a:	f001 f840 	bl	800560e <HAL_NVIC_EnableIRQ>
}
 800458e:	bf00      	nop
 8004590:	3730      	adds	r7, #48	; 0x30
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40013000 	.word	0x40013000
 800459c:	40023800 	.word	0x40023800
 80045a0:	40020000 	.word	0x40020000
 80045a4:	40020400 	.word	0x40020400
 80045a8:	40013400 	.word	0x40013400
 80045ac:	40021000 	.word	0x40021000

080045b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_MspInit+0x4c>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <HAL_MspInit+0x4c>)
 80045c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c4:	6453      	str	r3, [r2, #68]	; 0x44
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_MspInit+0x4c>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_MspInit+0x4c>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <HAL_MspInit+0x4c>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_MspInit+0x4c>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800

08004600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004604:	e7fe      	b.n	8004604 <NMI_Handler+0x4>

08004606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800460a:	e7fe      	b.n	800460a <HardFault_Handler+0x4>

0800460c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004610:	e7fe      	b.n	8004610 <MemManage_Handler+0x4>

08004612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004616:	e7fe      	b.n	8004616 <BusFault_Handler+0x4>

08004618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800461c:	e7fe      	b.n	800461c <UsageFault_Handler+0x4>

0800461e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800463a:	b480      	push	{r7}
 800463c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800464c:	f000 fb52 	bl	8004cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004650:	bf00      	nop
 8004652:	bd80      	pop	{r7, pc}

08004654 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004658:	4802      	ldr	r0, [pc, #8]	; (8004664 <DMA1_Stream1_IRQHandler+0x10>)
 800465a:	f001 f98b 	bl	8005974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20001abc 	.word	0x20001abc

08004668 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800466c:	4802      	ldr	r0, [pc, #8]	; (8004678 <DMA1_Stream3_IRQHandler+0x10>)
 800466e:	f001 f981 	bl	8005974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20001b1c 	.word	0x20001b1c

0800467c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004680:	4802      	ldr	r0, [pc, #8]	; (800468c <SPI1_IRQHandler+0x10>)
 8004682:	f003 fb73 	bl	8007d6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200018c0 	.word	0x200018c0

08004690 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <USART1_IRQHandler+0x10>)
 8004696:	f003 ff89 	bl	80085ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20001974 	.word	0x20001974

080046a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <USART3_IRQHandler+0x10>)
 80046aa:	f003 ff7f 	bl	80085ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	200019b8 	.word	0x200019b8

080046b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <DMA2_Stream2_IRQHandler+0x10>)
 80046be:	f001 f959 	bl	8005974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200019fc 	.word	0x200019fc

080046cc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <DMA2_Stream7_IRQHandler+0x10>)
 80046d2:	f001 f94f 	bl	8005974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20001a5c 	.word	0x20001a5c

080046e0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <SPI4_IRQHandler+0x10>)
 80046e6:	f003 fb41 	bl	8007d6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20001918 	.word	0x20001918

080046f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return 1;
 80046f8:	2301      	movs	r3, #1
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_kill>:

int _kill(int pid, int sig)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800470e:	f005 f8a3 	bl	8009858 <__errno>
 8004712:	4603      	mov	r3, r0
 8004714:	2216      	movs	r2, #22
 8004716:	601a      	str	r2, [r3, #0]
  return -1;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <_exit>:

void _exit (int status)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800472c:	f04f 31ff 	mov.w	r1, #4294967295
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ffe7 	bl	8004704 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004736:	e7fe      	b.n	8004736 <_exit+0x12>

08004738 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e00a      	b.n	8004760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800474a:	f3af 8000 	nop.w
 800474e:	4601      	mov	r1, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	60ba      	str	r2, [r7, #8]
 8004756:	b2ca      	uxtb	r2, r1
 8004758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	3301      	adds	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	dbf0      	blt.n	800474a <_read+0x12>
  }

  return len;
 8004768:	687b      	ldr	r3, [r7, #4]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e009      	b.n	8004798 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	60ba      	str	r2, [r7, #8]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff f831 	bl	80037f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	3301      	adds	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	dbf1      	blt.n	8004784 <_write+0x12>
  }
  return len;
 80047a0:	687b      	ldr	r3, [r7, #4]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_close>:

int _close(int file)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047d2:	605a      	str	r2, [r3, #4]
  return 0;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <_isatty>:

int _isatty(int file)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047ea:	2301      	movs	r3, #1
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800481c:	4a14      	ldr	r2, [pc, #80]	; (8004870 <_sbrk+0x5c>)
 800481e:	4b15      	ldr	r3, [pc, #84]	; (8004874 <_sbrk+0x60>)
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <_sbrk+0x64>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <_sbrk+0x64>)
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <_sbrk+0x68>)
 8004834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <_sbrk+0x64>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d207      	bcs.n	8004854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004844:	f005 f808 	bl	8009858 <__errno>
 8004848:	4603      	mov	r3, r0
 800484a:	220c      	movs	r2, #12
 800484c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	e009      	b.n	8004868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <_sbrk+0x64>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <_sbrk+0x64>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	4a05      	ldr	r2, [pc, #20]	; (8004878 <_sbrk+0x64>)
 8004864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004866:	68fb      	ldr	r3, [r7, #12]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20030000 	.word	0x20030000
 8004874:	00000400 	.word	0x00000400
 8004878:	20001970 	.word	0x20001970
 800487c:	20001b90 	.word	0x20001b90

08004880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <SystemInit+0x20>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <SystemInit+0x20>)
 800488c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <MX_USART1_UART_Init+0x50>)
 80048ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048be:	2200      	movs	r2, #0
 80048c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048ca:	220c      	movs	r2, #12
 80048cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048da:	4805      	ldr	r0, [pc, #20]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048dc:	f003 fca2 	bl	8008224 <HAL_UART_Init>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80048e6:	f7ff fcbf 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20001974 	.word	0x20001974
 80048f4:	40011000 	.word	0x40011000

080048f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <MX_USART3_UART_Init+0x48>)
 80048fe:	4a11      	ldr	r2, [pc, #68]	; (8004944 <MX_USART3_UART_Init+0x4c>)
 8004900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <MX_USART3_UART_Init+0x48>)
 8004904:	4a10      	ldr	r2, [pc, #64]	; (8004948 <MX_USART3_UART_Init+0x50>)
 8004906:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <MX_USART3_UART_Init+0x48>)
 800490a:	2200      	movs	r2, #0
 800490c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <MX_USART3_UART_Init+0x48>)
 8004910:	2200      	movs	r2, #0
 8004912:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <MX_USART3_UART_Init+0x48>)
 8004916:	2200      	movs	r2, #0
 8004918:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <MX_USART3_UART_Init+0x48>)
 800491c:	220c      	movs	r2, #12
 800491e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <MX_USART3_UART_Init+0x48>)
 8004922:	2200      	movs	r2, #0
 8004924:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <MX_USART3_UART_Init+0x48>)
 8004928:	2200      	movs	r2, #0
 800492a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800492c:	4804      	ldr	r0, [pc, #16]	; (8004940 <MX_USART3_UART_Init+0x48>)
 800492e:	f003 fc79 	bl	8008224 <HAL_UART_Init>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8004938:	f7ff fc96 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800493c:	bf00      	nop
 800493e:	bd80      	pop	{r7, pc}
 8004940:	200019b8 	.word	0x200019b8
 8004944:	40004800 	.word	0x40004800
 8004948:	001e8480 	.word	0x001e8480

0800494c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 031c 	add.w	r3, r7, #28
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a97      	ldr	r2, [pc, #604]	; (8004bc8 <HAL_UART_MspInit+0x27c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f040 8091 	bne.w	8004a92 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	4b95      	ldr	r3, [pc, #596]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	4a94      	ldr	r2, [pc, #592]	; (8004bcc <HAL_UART_MspInit+0x280>)
 800497a:	f043 0310 	orr.w	r3, r3, #16
 800497e:	6453      	str	r3, [r2, #68]	; 0x44
 8004980:	4b92      	ldr	r3, [pc, #584]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	4b8e      	ldr	r3, [pc, #568]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	4a8d      	ldr	r2, [pc, #564]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	6313      	str	r3, [r2, #48]	; 0x30
 800499c:	4b8b      	ldr	r3, [pc, #556]	; (8004bcc <HAL_UART_MspInit+0x280>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049a8:	23c0      	movs	r3, #192	; 0xc0
 80049aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ac:	2302      	movs	r3, #2
 80049ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b4:	2303      	movs	r3, #3
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049b8:	2307      	movs	r3, #7
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049bc:	f107 031c 	add.w	r3, r7, #28
 80049c0:	4619      	mov	r1, r3
 80049c2:	4883      	ldr	r0, [pc, #524]	; (8004bd0 <HAL_UART_MspInit+0x284>)
 80049c4:	f001 fa40 	bl	8005e48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80049c8:	4b82      	ldr	r3, [pc, #520]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049ca:	4a83      	ldr	r2, [pc, #524]	; (8004bd8 <HAL_UART_MspInit+0x28c>)
 80049cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80049ce:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049d6:	4b7f      	ldr	r3, [pc, #508]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049d8:	2200      	movs	r2, #0
 80049da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049dc:	4b7d      	ldr	r3, [pc, #500]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049de:	2200      	movs	r2, #0
 80049e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049e2:	4b7c      	ldr	r3, [pc, #496]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049ea:	4b7a      	ldr	r3, [pc, #488]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049f0:	4b78      	ldr	r3, [pc, #480]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80049f6:	4b77      	ldr	r3, [pc, #476]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049fc:	4b75      	ldr	r3, [pc, #468]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a02:	4b74      	ldr	r3, [pc, #464]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a08:	4872      	ldr	r0, [pc, #456]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 8004a0a:	f000 fe1b 	bl	8005644 <HAL_DMA_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004a14:	f7ff fc28 	bl	8004268 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a6e      	ldr	r2, [pc, #440]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a1e:	4a6d      	ldr	r2, [pc, #436]	; (8004bd4 <HAL_UART_MspInit+0x288>)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004a24:	4b6d      	ldr	r3, [pc, #436]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a26:	4a6e      	ldr	r2, [pc, #440]	; (8004be0 <HAL_UART_MspInit+0x294>)
 8004a28:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004a2a:	4b6c      	ldr	r3, [pc, #432]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a30:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a32:	4b6a      	ldr	r3, [pc, #424]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a34:	2240      	movs	r2, #64	; 0x40
 8004a36:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a38:	4b68      	ldr	r3, [pc, #416]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a3e:	4b67      	ldr	r3, [pc, #412]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a44:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a46:	4b65      	ldr	r3, [pc, #404]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a4c:	4b63      	ldr	r3, [pc, #396]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004a52:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a58:	4b60      	ldr	r3, [pc, #384]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a5e:	4b5f      	ldr	r3, [pc, #380]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a64:	485d      	ldr	r0, [pc, #372]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a66:	f000 fded 	bl	8005644 <HAL_DMA_Init>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004a70:	f7ff fbfa 	bl	8004268 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a59      	ldr	r2, [pc, #356]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a78:	635a      	str	r2, [r3, #52]	; 0x34
 8004a7a:	4a58      	ldr	r2, [pc, #352]	; (8004bdc <HAL_UART_MspInit+0x290>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a80:	2200      	movs	r2, #0
 8004a82:	2100      	movs	r1, #0
 8004a84:	2025      	movs	r0, #37	; 0x25
 8004a86:	f000 fda6 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a8a:	2025      	movs	r0, #37	; 0x25
 8004a8c:	f000 fdbf 	bl	800560e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004a90:	e096      	b.n	8004bc0 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a53      	ldr	r2, [pc, #332]	; (8004be4 <HAL_UART_MspInit+0x298>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	f040 8091 	bne.w	8004bc0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	4b4a      	ldr	r3, [pc, #296]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	4a49      	ldr	r2, [pc, #292]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aac:	6413      	str	r3, [r2, #64]	; 0x40
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b43      	ldr	r3, [pc, #268]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004ac4:	f043 0308 	orr.w	r3, r3, #8
 8004ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aca:	4b40      	ldr	r3, [pc, #256]	; (8004bcc <HAL_UART_MspInit+0x280>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_TX_Pin|IMU_RX_Pin;
 8004ad6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004adc:	2302      	movs	r3, #2
 8004ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ae8:	2307      	movs	r3, #7
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aec:	f107 031c 	add.w	r3, r7, #28
 8004af0:	4619      	mov	r1, r3
 8004af2:	483d      	ldr	r0, [pc, #244]	; (8004be8 <HAL_UART_MspInit+0x29c>)
 8004af4:	f001 f9a8 	bl	8005e48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004af8:	4b3c      	ldr	r3, [pc, #240]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004afa:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <HAL_UART_MspInit+0x2a4>)
 8004afc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b04:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b06:	4b39      	ldr	r3, [pc, #228]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b0c:	4b37      	ldr	r3, [pc, #220]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b18:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b20:	4b32      	ldr	r3, [pc, #200]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004b26:	4b31      	ldr	r3, [pc, #196]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b2c:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b32:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004b38:	482c      	ldr	r0, [pc, #176]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b3a:	f000 fd83 	bl	8005644 <HAL_DMA_Init>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004b44:	f7ff fb90 	bl	8004268 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a28      	ldr	r2, [pc, #160]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b4e:	4a27      	ldr	r2, [pc, #156]	; (8004bec <HAL_UART_MspInit+0x2a0>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b56:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <HAL_UART_MspInit+0x2ac>)
 8004b58:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004b5a:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b60:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b64:	2240      	movs	r2, #64	; 0x40
 8004b66:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b68:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b6e:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b74:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b76:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004b82:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b88:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b8e:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004b94:	4817      	ldr	r0, [pc, #92]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004b96:	f000 fd55 	bl	8005644 <HAL_DMA_Init>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8004ba0:	f7ff fb62 	bl	8004268 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <HAL_UART_MspInit+0x2a8>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2027      	movs	r0, #39	; 0x27
 8004bb6:	f000 fd0e 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004bba:	2027      	movs	r0, #39	; 0x27
 8004bbc:	f000 fd27 	bl	800560e <HAL_NVIC_EnableIRQ>
}
 8004bc0:	bf00      	nop
 8004bc2:	3730      	adds	r7, #48	; 0x30
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40011000 	.word	0x40011000
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	40020400 	.word	0x40020400
 8004bd4:	200019fc 	.word	0x200019fc
 8004bd8:	40026440 	.word	0x40026440
 8004bdc:	20001a5c 	.word	0x20001a5c
 8004be0:	400264b8 	.word	0x400264b8
 8004be4:	40004800 	.word	0x40004800
 8004be8:	40020c00 	.word	0x40020c00
 8004bec:	20001abc 	.word	0x20001abc
 8004bf0:	40026028 	.word	0x40026028
 8004bf4:	20001b1c 	.word	0x20001b1c
 8004bf8:	40026058 	.word	0x40026058

08004bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c00:	480d      	ldr	r0, [pc, #52]	; (8004c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c02:	490e      	ldr	r1, [pc, #56]	; (8004c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c04:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c08:	e002      	b.n	8004c10 <LoopCopyDataInit>

08004c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c0e:	3304      	adds	r3, #4

08004c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c14:	d3f9      	bcc.n	8004c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c16:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c18:	4c0b      	ldr	r4, [pc, #44]	; (8004c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c1c:	e001      	b.n	8004c22 <LoopFillZerobss>

08004c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c20:	3204      	adds	r2, #4

08004c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c24:	d3fb      	bcc.n	8004c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c26:	f7ff fe2b 	bl	8004880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c2a:	f004 fe1b 	bl	8009864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c2e:	f7fe ffff 	bl	8003c30 <main>
  bx  lr    
 8004c32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004c34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c3c:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8004c40:	0800d234 	.word	0x0800d234
  ldr r2, =_sbss
 8004c44:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8004c48:	20001b90 	.word	0x20001b90

08004c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c4c:	e7fe      	b.n	8004c4c <ADC_IRQHandler>
	...

08004c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <HAL_Init+0x40>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <HAL_Init+0x40>)
 8004c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_Init+0x40>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <HAL_Init+0x40>)
 8004c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_Init+0x40>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <HAL_Init+0x40>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c78:	2003      	movs	r0, #3
 8004c7a:	f000 fca1 	bl	80055c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c7e:	200f      	movs	r0, #15
 8004c80:	f000 f808 	bl	8004c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c84:	f7ff fc94 	bl	80045b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023c00 	.word	0x40023c00

08004c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_InitTick+0x54>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_InitTick+0x58>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fcb9 	bl	800562a <HAL_SYSTICK_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e00e      	b.n	8004ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b0f      	cmp	r3, #15
 8004cc6:	d80a      	bhi.n	8004cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	f000 fc81 	bl	80055d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cd4:	4a06      	ldr	r2, [pc, #24]	; (8004cf0 <HAL_InitTick+0x5c>)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000110 	.word	0x20000110
 8004cec:	20000118 	.word	0x20000118
 8004cf0:	20000114 	.word	0x20000114

08004cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_IncTick+0x20>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_IncTick+0x24>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4413      	add	r3, r2
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <HAL_IncTick+0x24>)
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000118 	.word	0x20000118
 8004d18:	20001b7c 	.word	0x20001b7c

08004d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_GetTick+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20001b7c 	.word	0x20001b7c

08004d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d3c:	f7ff ffee 	bl	8004d1c <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d005      	beq.n	8004d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_Delay+0x44>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d5a:	bf00      	nop
 8004d5c:	f7ff ffde 	bl	8004d1c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d8f7      	bhi.n	8004d5c <HAL_Delay+0x28>
  {
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000118 	.word	0x20000118

08004d7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e033      	b.n	8004dfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fe fbae 	bl	80034fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d118      	bne.n	8004dec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004dc2:	f023 0302 	bic.w	r3, r3, #2
 8004dc6:	f043 0202 	orr.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa2a 	bl	8005228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	f043 0201 	orr.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40
 8004dea:	e001      	b.n	8004df0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_Start+0x1a>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0b2      	b.n	8004f84 <HAL_ADC_Start+0x180>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d018      	beq.n	8004e66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e44:	4b52      	ldr	r3, [pc, #328]	; (8004f90 <HAL_ADC_Start+0x18c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a52      	ldr	r2, [pc, #328]	; (8004f94 <HAL_ADC_Start+0x190>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	0c9a      	lsrs	r2, r3, #18
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004e58:	e002      	b.n	8004e60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f9      	bne.n	8004e5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d17a      	bne.n	8004f6a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	d106      	bne.n	8004ec2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f023 0206 	bic.w	r2, r3, #6
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8004ec0:	e002      	b.n	8004ec8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ed0:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <HAL_ADC_Start+0x194>)
 8004ed2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004edc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d12a      	bne.n	8004f40 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2b      	ldr	r2, [pc, #172]	; (8004f9c <HAL_ADC_Start+0x198>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d015      	beq.n	8004f20 <HAL_ADC_Start+0x11c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <HAL_ADC_Start+0x19c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d105      	bne.n	8004f0a <HAL_ADC_Start+0x106>
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <HAL_ADC_Start+0x194>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a25      	ldr	r2, [pc, #148]	; (8004fa4 <HAL_ADC_Start+0x1a0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d136      	bne.n	8004f82 <HAL_ADC_Start+0x17e>
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <HAL_ADC_Start+0x194>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d130      	bne.n	8004f82 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d129      	bne.n	8004f82 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f3c:	609a      	str	r2, [r3, #8]
 8004f3e:	e020      	b.n	8004f82 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <HAL_ADC_Start+0x198>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d11b      	bne.n	8004f82 <HAL_ADC_Start+0x17e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d114      	bne.n	8004f82 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e00b      	b.n	8004f82 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f043 0210 	orr.w	r2, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	20000110 	.word	0x20000110
 8004f94:	431bde83 	.word	0x431bde83
 8004f98:	40012300 	.word	0x40012300
 8004f9c:	40012000 	.word	0x40012000
 8004fa0:	40012100 	.word	0x40012100
 8004fa4:	40012200 	.word	0x40012200

08004fa8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x1c>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e113      	b.n	8005208 <HAL_ADC_ConfigChannel+0x244>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b09      	cmp	r3, #9
 8004fee:	d925      	bls.n	800503c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	3b1e      	subs	r3, #30
 8005006:	2207      	movs	r2, #7
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43da      	mvns	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	400a      	ands	r2, r1
 8005014:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68d9      	ldr	r1, [r3, #12]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	4618      	mov	r0, r3
 8005028:	4603      	mov	r3, r0
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4403      	add	r3, r0
 800502e:	3b1e      	subs	r3, #30
 8005030:	409a      	lsls	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	e022      	b.n	8005082 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6919      	ldr	r1, [r3, #16]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	2207      	movs	r2, #7
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	400a      	ands	r2, r1
 800505e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6919      	ldr	r1, [r3, #16]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	4618      	mov	r0, r3
 8005072:	4603      	mov	r3, r0
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4403      	add	r3, r0
 8005078:	409a      	lsls	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b06      	cmp	r3, #6
 8005088:	d824      	bhi.n	80050d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	3b05      	subs	r3, #5
 800509c:	221f      	movs	r2, #31
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43da      	mvns	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	400a      	ands	r2, r1
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4618      	mov	r0, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	3b05      	subs	r3, #5
 80050c6:	fa00 f203 	lsl.w	r2, r0, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	635a      	str	r2, [r3, #52]	; 0x34
 80050d2:	e04c      	b.n	800516e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d824      	bhi.n	8005126 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	3b23      	subs	r3, #35	; 0x23
 80050ee:	221f      	movs	r2, #31
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	43da      	mvns	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	400a      	ands	r2, r1
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	4618      	mov	r0, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	3b23      	subs	r3, #35	; 0x23
 8005118:	fa00 f203 	lsl.w	r2, r0, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
 8005124:	e023      	b.n	800516e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	3b41      	subs	r3, #65	; 0x41
 8005138:	221f      	movs	r2, #31
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43da      	mvns	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	400a      	ands	r2, r1
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	4618      	mov	r0, r3
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	3b41      	subs	r3, #65	; 0x41
 8005162:	fa00 f203 	lsl.w	r2, r0, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800516e:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_ADC_ConfigChannel+0x250>)
 8005170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a28      	ldr	r2, [pc, #160]	; (8005218 <HAL_ADC_ConfigChannel+0x254>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10f      	bne.n	800519c <HAL_ADC_ConfigChannel+0x1d8>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b12      	cmp	r3, #18
 8005182:	d10b      	bne.n	800519c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_ADC_ConfigChannel+0x254>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d12b      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x23a>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <HAL_ADC_ConfigChannel+0x258>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <HAL_ADC_ConfigChannel+0x1f4>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b11      	cmp	r3, #17
 80051b6:	d122      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a11      	ldr	r2, [pc, #68]	; (800521c <HAL_ADC_ConfigChannel+0x258>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d111      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051da:	4b11      	ldr	r3, [pc, #68]	; (8005220 <HAL_ADC_ConfigChannel+0x25c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <HAL_ADC_ConfigChannel+0x260>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	0c9a      	lsrs	r2, r3, #18
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051f0:	e002      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f9      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40012300 	.word	0x40012300
 8005218:	40012000 	.word	0x40012000
 800521c:	10000012 	.word	0x10000012
 8005220:	20000110 	.word	0x20000110
 8005224:	431bde83 	.word	0x431bde83

08005228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005230:	4b79      	ldr	r3, [pc, #484]	; (8005418 <ADC_Init+0x1f0>)
 8005232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800525c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6859      	ldr	r1, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	021a      	lsls	r2, r3, #8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6899      	ldr	r1, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	4a58      	ldr	r2, [pc, #352]	; (800541c <ADC_Init+0x1f4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d022      	beq.n	8005306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6899      	ldr	r1, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	e00f      	b.n	8005326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0202 	bic.w	r2, r2, #2
 8005334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6899      	ldr	r1, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	7e1b      	ldrb	r3, [r3, #24]
 8005340:	005a      	lsls	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01b      	beq.n	800538c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	3b01      	subs	r3, #1
 8005380:	035a      	lsls	r2, r3, #13
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e007      	b.n	800539c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	051a      	lsls	r2, r3, #20
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6899      	ldr	r1, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053de:	025a      	lsls	r2, r3, #9
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6899      	ldr	r1, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	029a      	lsls	r2, r3, #10
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40012300 	.word	0x40012300
 800541c:	0f000001 	.word	0x0f000001

08005420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <__NVIC_SetPriorityGrouping+0x44>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800543c:	4013      	ands	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800544c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005452:	4a04      	ldr	r2, [pc, #16]	; (8005464 <__NVIC_SetPriorityGrouping+0x44>)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	60d3      	str	r3, [r2, #12]
}
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <__NVIC_GetPriorityGrouping+0x18>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 0307 	and.w	r3, r3, #7
}
 8005476:	4618      	mov	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	e000ed00 	.word	0xe000ed00

08005484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800548e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005492:	2b00      	cmp	r3, #0
 8005494:	db0b      	blt.n	80054ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	f003 021f 	and.w	r2, r3, #31
 800549c:	4907      	ldr	r1, [pc, #28]	; (80054bc <__NVIC_EnableIRQ+0x38>)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2001      	movs	r0, #1
 80054a6:	fa00 f202 	lsl.w	r2, r0, r2
 80054aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	e000e100 	.word	0xe000e100

080054c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	6039      	str	r1, [r7, #0]
 80054ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	db0a      	blt.n	80054ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	490c      	ldr	r1, [pc, #48]	; (800550c <__NVIC_SetPriority+0x4c>)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	0112      	lsls	r2, r2, #4
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	440b      	add	r3, r1
 80054e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054e8:	e00a      	b.n	8005500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4908      	ldr	r1, [pc, #32]	; (8005510 <__NVIC_SetPriority+0x50>)
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	3b04      	subs	r3, #4
 80054f8:	0112      	lsls	r2, r2, #4
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	440b      	add	r3, r1
 80054fe:	761a      	strb	r2, [r3, #24]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	e000e100 	.word	0xe000e100
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f1c3 0307 	rsb	r3, r3, #7
 800552e:	2b04      	cmp	r3, #4
 8005530:	bf28      	it	cs
 8005532:	2304      	movcs	r3, #4
 8005534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3304      	adds	r3, #4
 800553a:	2b06      	cmp	r3, #6
 800553c:	d902      	bls.n	8005544 <NVIC_EncodePriority+0x30>
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3b03      	subs	r3, #3
 8005542:	e000      	b.n	8005546 <NVIC_EncodePriority+0x32>
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43da      	mvns	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	401a      	ands	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800555c:	f04f 31ff 	mov.w	r1, #4294967295
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	43d9      	mvns	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800556c:	4313      	orrs	r3, r2
         );
}
 800556e:	4618      	mov	r0, r3
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800558c:	d301      	bcc.n	8005592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800558e:	2301      	movs	r3, #1
 8005590:	e00f      	b.n	80055b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <SysTick_Config+0x40>)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800559a:	210f      	movs	r1, #15
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	f7ff ff8e 	bl	80054c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <SysTick_Config+0x40>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <SysTick_Config+0x40>)
 80055ac:	2207      	movs	r2, #7
 80055ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	e000e010 	.word	0xe000e010

080055c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff29 	bl	8005420 <__NVIC_SetPriorityGrouping>
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	4603      	mov	r3, r0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055e8:	f7ff ff3e 	bl	8005468 <__NVIC_GetPriorityGrouping>
 80055ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f7ff ff8e 	bl	8005514 <NVIC_EncodePriority>
 80055f8:	4602      	mov	r2, r0
 80055fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff ff5d 	bl	80054c0 <__NVIC_SetPriority>
}
 8005606:	bf00      	nop
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	4603      	mov	r3, r0
 8005616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ff31 	bl	8005484 <__NVIC_EnableIRQ>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff ffa2 	bl	800557c <SysTick_Config>
 8005638:	4603      	mov	r3, r0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005650:	f7ff fb64 	bl	8004d1c <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e099      	b.n	8005794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005680:	e00f      	b.n	80056a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005682:	f7ff fb4b 	bl	8004d1c <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b05      	cmp	r3, #5
 800568e:	d908      	bls.n	80056a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2203      	movs	r2, #3
 800569a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e078      	b.n	8005794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e8      	bne.n	8005682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4b38      	ldr	r3, [pc, #224]	; (800579c <HAL_DMA_Init+0x158>)
 80056bc:	4013      	ands	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d107      	bne.n	800570c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	4313      	orrs	r3, r2
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0307 	bic.w	r3, r3, #7
 8005722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b04      	cmp	r3, #4
 8005734:	d117      	bne.n	8005766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb01 	bl	8005d50 <DMA_CheckFifoParam>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2240      	movs	r2, #64	; 0x40
 8005758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005762:	2301      	movs	r3, #1
 8005764:	e016      	b.n	8005794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fab8 	bl	8005ce4 <DMA_CalcBaseAndBitshift>
 8005774:	4603      	mov	r3, r0
 8005776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577c:	223f      	movs	r2, #63	; 0x3f
 800577e:	409a      	lsls	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	f010803f 	.word	0xf010803f

080057a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_DMA_Start_IT+0x26>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e040      	b.n	8005848 <HAL_DMA_Start_IT+0xa8>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d12f      	bne.n	800583a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fa4a 	bl	8005c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f8:	223f      	movs	r2, #63	; 0x3f
 80057fa:	409a      	lsls	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0216 	orr.w	r2, r2, #22
 800580e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e005      	b.n	8005846 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005842:	2302      	movs	r3, #2
 8005844:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800585e:	f7ff fa5d 	bl	8004d1c <HAL_GetTick>
 8005862:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d008      	beq.n	8005882 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e052      	b.n	8005928 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0216 	bic.w	r2, r2, #22
 8005890:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d103      	bne.n	80058b2 <HAL_DMA_Abort+0x62>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0208 	bic.w	r2, r2, #8
 80058c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d2:	e013      	b.n	80058fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058d4:	f7ff fa22 	bl	8004d1c <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d90c      	bls.n	80058fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2203      	movs	r2, #3
 80058ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e015      	b.n	8005928 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e4      	bne.n	80058d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590e:	223f      	movs	r2, #63	; 0x3f
 8005910:	409a      	lsls	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d004      	beq.n	800594e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e00c      	b.n	8005968 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2205      	movs	r2, #5
 8005952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005980:	4b8e      	ldr	r3, [pc, #568]	; (8005bbc <HAL_DMA_IRQHandler+0x248>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a8e      	ldr	r2, [pc, #568]	; (8005bc0 <HAL_DMA_IRQHandler+0x24c>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0a9b      	lsrs	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	2208      	movs	r2, #8
 80059a0:	409a      	lsls	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01a      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	2208      	movs	r2, #8
 80059ce:	409a      	lsls	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	f043 0201 	orr.w	r2, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e4:	2201      	movs	r2, #1
 80059e6:	409a      	lsls	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a02:	2201      	movs	r2, #1
 8005a04:	409a      	lsls	r2, r3
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f043 0202 	orr.w	r2, r3, #2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	409a      	lsls	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d012      	beq.n	8005a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a38:	2204      	movs	r2, #4
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	f043 0204 	orr.w	r2, r3, #4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a50:	2210      	movs	r2, #16
 8005a52:	409a      	lsls	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d043      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d03c      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6e:	2210      	movs	r2, #16
 8005a70:	409a      	lsls	r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d018      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d024      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	e01f      	b.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
 8005ab4:	e016      	b.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0208 	bic.w	r2, r2, #8
 8005ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	2220      	movs	r2, #32
 8005aea:	409a      	lsls	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 808f 	beq.w	8005c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8087 	beq.w	8005c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d136      	bne.n	8005b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0216 	bic.w	r2, r2, #22
 8005b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <HAL_DMA_IRQHandler+0x1da>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0208 	bic.w	r2, r2, #8
 8005b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	223f      	movs	r2, #63	; 0x3f
 8005b64:	409a      	lsls	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d07e      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
        }
        return;
 8005b8a:	e079      	b.n	8005c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01d      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d031      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
 8005bb8:	e02c      	b.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
 8005bba:	bf00      	nop
 8005bbc:	20000110 	.word	0x20000110
 8005bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d023      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
 8005bd4:	e01e      	b.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10f      	bne.n	8005c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0210 	bic.w	r2, r2, #16
 8005bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d032      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d022      	beq.n	8005c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2205      	movs	r2, #5
 8005c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d307      	bcc.n	8005c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f2      	bne.n	8005c40 <HAL_DMA_IRQHandler+0x2cc>
 8005c5a:	e000      	b.n	8005c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
 8005c7e:	e000      	b.n	8005c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c80:	bf00      	nop
    }
  }
}
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d108      	bne.n	8005cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cc6:	e007      	b.n	8005cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	3b10      	subs	r3, #16
 8005cf4:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <DMA_CalcBaseAndBitshift+0x64>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	091b      	lsrs	r3, r3, #4
 8005cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cfe:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <DMA_CalcBaseAndBitshift+0x68>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d909      	bls.n	8005d26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	1d1a      	adds	r2, r3, #4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	659a      	str	r2, [r3, #88]	; 0x58
 8005d24:	e007      	b.n	8005d36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	aaaaaaab 	.word	0xaaaaaaab
 8005d4c:	0800ce44 	.word	0x0800ce44

08005d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11f      	bne.n	8005daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d856      	bhi.n	8005e1e <DMA_CheckFifoParam+0xce>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <DMA_CheckFifoParam+0x28>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d9b 	.word	0x08005d9b
 8005d80:	08005d89 	.word	0x08005d89
 8005d84:	08005e1f 	.word	0x08005e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d046      	beq.n	8005e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d98:	e043      	b.n	8005e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005da2:	d140      	bne.n	8005e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da8:	e03d      	b.n	8005e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db2:	d121      	bne.n	8005df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d837      	bhi.n	8005e2a <DMA_CheckFifoParam+0xda>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <DMA_CheckFifoParam+0x70>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	08005dd7 	.word	0x08005dd7
 8005dc8:	08005dd1 	.word	0x08005dd1
 8005dcc:	08005de9 	.word	0x08005de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e030      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d025      	beq.n	8005e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de6:	e022      	b.n	8005e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005df0:	d11f      	bne.n	8005e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005df6:	e01c      	b.n	8005e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d903      	bls.n	8005e06 <DMA_CheckFifoParam+0xb6>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d003      	beq.n	8005e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e04:	e018      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0a:	e015      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00e      	beq.n	8005e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e00b      	b.n	8005e36 <DMA_CheckFifoParam+0xe6>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e00a      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      break;
 8005e22:	bf00      	nop
 8005e24:	e008      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      break;
 8005e26:	bf00      	nop
 8005e28:	e006      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      break;
 8005e2a:	bf00      	nop
 8005e2c:	e004      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <DMA_CheckFifoParam+0xe8>
      break;
 8005e36:	bf00      	nop
    }
  } 
  
  return status; 
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop

08005e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e177      	b.n	8006154 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e64:	2201      	movs	r2, #1
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4013      	ands	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f040 8166 	bne.w	800614e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d005      	beq.n	8005e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d130      	bne.n	8005efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4013      	ands	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	f003 0201 	and.w	r2, r3, #1
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d017      	beq.n	8005f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	2203      	movs	r2, #3
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d123      	bne.n	8005f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	08da      	lsrs	r2, r3, #3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3208      	adds	r2, #8
 8005f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	220f      	movs	r2, #15
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4013      	ands	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	08da      	lsrs	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3208      	adds	r2, #8
 8005f86:	69b9      	ldr	r1, [r7, #24]
 8005f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	2203      	movs	r2, #3
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 0203 	and.w	r2, r3, #3
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80c0 	beq.w	800614e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4b66      	ldr	r3, [pc, #408]	; (800616c <HAL_GPIO_Init+0x324>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	4a65      	ldr	r2, [pc, #404]	; (800616c <HAL_GPIO_Init+0x324>)
 8005fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fde:	4b63      	ldr	r3, [pc, #396]	; (800616c <HAL_GPIO_Init+0x324>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fea:	4a61      	ldr	r2, [pc, #388]	; (8006170 <HAL_GPIO_Init+0x328>)
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4013      	ands	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a58      	ldr	r2, [pc, #352]	; (8006174 <HAL_GPIO_Init+0x32c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d037      	beq.n	8006086 <HAL_GPIO_Init+0x23e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a57      	ldr	r2, [pc, #348]	; (8006178 <HAL_GPIO_Init+0x330>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d031      	beq.n	8006082 <HAL_GPIO_Init+0x23a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a56      	ldr	r2, [pc, #344]	; (800617c <HAL_GPIO_Init+0x334>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d02b      	beq.n	800607e <HAL_GPIO_Init+0x236>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a55      	ldr	r2, [pc, #340]	; (8006180 <HAL_GPIO_Init+0x338>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d025      	beq.n	800607a <HAL_GPIO_Init+0x232>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a54      	ldr	r2, [pc, #336]	; (8006184 <HAL_GPIO_Init+0x33c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01f      	beq.n	8006076 <HAL_GPIO_Init+0x22e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a53      	ldr	r2, [pc, #332]	; (8006188 <HAL_GPIO_Init+0x340>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d019      	beq.n	8006072 <HAL_GPIO_Init+0x22a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a52      	ldr	r2, [pc, #328]	; (800618c <HAL_GPIO_Init+0x344>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <HAL_GPIO_Init+0x226>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a51      	ldr	r2, [pc, #324]	; (8006190 <HAL_GPIO_Init+0x348>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00d      	beq.n	800606a <HAL_GPIO_Init+0x222>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a50      	ldr	r2, [pc, #320]	; (8006194 <HAL_GPIO_Init+0x34c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d007      	beq.n	8006066 <HAL_GPIO_Init+0x21e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a4f      	ldr	r2, [pc, #316]	; (8006198 <HAL_GPIO_Init+0x350>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d101      	bne.n	8006062 <HAL_GPIO_Init+0x21a>
 800605e:	2309      	movs	r3, #9
 8006060:	e012      	b.n	8006088 <HAL_GPIO_Init+0x240>
 8006062:	230a      	movs	r3, #10
 8006064:	e010      	b.n	8006088 <HAL_GPIO_Init+0x240>
 8006066:	2308      	movs	r3, #8
 8006068:	e00e      	b.n	8006088 <HAL_GPIO_Init+0x240>
 800606a:	2307      	movs	r3, #7
 800606c:	e00c      	b.n	8006088 <HAL_GPIO_Init+0x240>
 800606e:	2306      	movs	r3, #6
 8006070:	e00a      	b.n	8006088 <HAL_GPIO_Init+0x240>
 8006072:	2305      	movs	r3, #5
 8006074:	e008      	b.n	8006088 <HAL_GPIO_Init+0x240>
 8006076:	2304      	movs	r3, #4
 8006078:	e006      	b.n	8006088 <HAL_GPIO_Init+0x240>
 800607a:	2303      	movs	r3, #3
 800607c:	e004      	b.n	8006088 <HAL_GPIO_Init+0x240>
 800607e:	2302      	movs	r3, #2
 8006080:	e002      	b.n	8006088 <HAL_GPIO_Init+0x240>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <HAL_GPIO_Init+0x240>
 8006086:	2300      	movs	r3, #0
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	f002 0203 	and.w	r2, r2, #3
 800608e:	0092      	lsls	r2, r2, #2
 8006090:	4093      	lsls	r3, r2
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	4313      	orrs	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006098:	4935      	ldr	r1, [pc, #212]	; (8006170 <HAL_GPIO_Init+0x328>)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	089b      	lsrs	r3, r3, #2
 800609e:	3302      	adds	r3, #2
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060a6:	4b3d      	ldr	r3, [pc, #244]	; (800619c <HAL_GPIO_Init+0x354>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	43db      	mvns	r3, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4013      	ands	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ca:	4a34      	ldr	r2, [pc, #208]	; (800619c <HAL_GPIO_Init+0x354>)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060d0:	4b32      	ldr	r3, [pc, #200]	; (800619c <HAL_GPIO_Init+0x354>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	43db      	mvns	r3, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4013      	ands	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <HAL_GPIO_Init+0x354>)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060fa:	4b28      	ldr	r3, [pc, #160]	; (800619c <HAL_GPIO_Init+0x354>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	43db      	mvns	r3, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4013      	ands	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800611e:	4a1f      	ldr	r2, [pc, #124]	; (800619c <HAL_GPIO_Init+0x354>)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006124:	4b1d      	ldr	r3, [pc, #116]	; (800619c <HAL_GPIO_Init+0x354>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	43db      	mvns	r3, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4013      	ands	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <HAL_GPIO_Init+0x354>)
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3301      	adds	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b0f      	cmp	r3, #15
 8006158:	f67f ae84 	bls.w	8005e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	3724      	adds	r7, #36	; 0x24
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40023800 	.word	0x40023800
 8006170:	40013800 	.word	0x40013800
 8006174:	40020000 	.word	0x40020000
 8006178:	40020400 	.word	0x40020400
 800617c:	40020800 	.word	0x40020800
 8006180:	40020c00 	.word	0x40020c00
 8006184:	40021000 	.word	0x40021000
 8006188:	40021400 	.word	0x40021400
 800618c:	40021800 	.word	0x40021800
 8006190:	40021c00 	.word	0x40021c00
 8006194:	40022000 	.word	0x40022000
 8006198:	40022400 	.word	0x40022400
 800619c:	40013c00 	.word	0x40013c00

080061a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
 80061ac:	4613      	mov	r3, r2
 80061ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061bc:	e003      	b.n	80061c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061be:	887b      	ldrh	r3, [r7, #2]
 80061c0:	041a      	lsls	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	619a      	str	r2, [r3, #24]
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e267      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d075      	beq.n	80062de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061f2:	4b88      	ldr	r3, [pc, #544]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d00c      	beq.n	8006218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fe:	4b85      	ldr	r3, [pc, #532]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006206:	2b08      	cmp	r3, #8
 8006208:	d112      	bne.n	8006230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800620a:	4b82      	ldr	r3, [pc, #520]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006216:	d10b      	bne.n	8006230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006218:	4b7e      	ldr	r3, [pc, #504]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d05b      	beq.n	80062dc <HAL_RCC_OscConfig+0x108>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d157      	bne.n	80062dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e242      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d106      	bne.n	8006248 <HAL_RCC_OscConfig+0x74>
 800623a:	4b76      	ldr	r3, [pc, #472]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a75      	ldr	r2, [pc, #468]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e01d      	b.n	8006284 <HAL_RCC_OscConfig+0xb0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006250:	d10c      	bne.n	800626c <HAL_RCC_OscConfig+0x98>
 8006252:	4b70      	ldr	r3, [pc, #448]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a6f      	ldr	r2, [pc, #444]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4b6d      	ldr	r3, [pc, #436]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a6c      	ldr	r2, [pc, #432]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e00b      	b.n	8006284 <HAL_RCC_OscConfig+0xb0>
 800626c:	4b69      	ldr	r3, [pc, #420]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a68      	ldr	r2, [pc, #416]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b66      	ldr	r3, [pc, #408]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a65      	ldr	r2, [pc, #404]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800627e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d013      	beq.n	80062b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fe fd46 	bl	8004d1c <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006294:	f7fe fd42 	bl	8004d1c <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e207      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a6:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0f0      	beq.n	8006294 <HAL_RCC_OscConfig+0xc0>
 80062b2:	e014      	b.n	80062de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fe fd32 	bl	8004d1c <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062bc:	f7fe fd2e 	bl	8004d1c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b64      	cmp	r3, #100	; 0x64
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e1f3      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ce:	4b51      	ldr	r3, [pc, #324]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0xe8>
 80062da:	e000      	b.n	80062de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d063      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ea:	4b4a      	ldr	r3, [pc, #296]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 030c 	and.w	r3, r3, #12
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f6:	4b47      	ldr	r3, [pc, #284]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d11c      	bne.n	800633c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006302:	4b44      	ldr	r3, [pc, #272]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630e:	4b41      	ldr	r3, [pc, #260]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_RCC_OscConfig+0x152>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d001      	beq.n	8006326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e1c7      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006326:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4937      	ldr	r1, [pc, #220]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006336:	4313      	orrs	r3, r2
 8006338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	e03a      	b.n	80063b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d020      	beq.n	8006386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006344:	4b34      	ldr	r3, [pc, #208]	; (8006418 <HAL_RCC_OscConfig+0x244>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634a:	f7fe fce7 	bl	8004d1c <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006352:	f7fe fce3 	bl	8004d1c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e1a8      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006364:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006370:	4b28      	ldr	r3, [pc, #160]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4925      	ldr	r1, [pc, #148]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006380:	4313      	orrs	r3, r2
 8006382:	600b      	str	r3, [r1, #0]
 8006384:	e015      	b.n	80063b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <HAL_RCC_OscConfig+0x244>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fe fcc6 	bl	8004d1c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006394:	f7fe fcc2 	bl	8004d1c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e187      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a6:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d036      	beq.n	800642c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063c6:	4b15      	ldr	r3, [pc, #84]	; (800641c <HAL_RCC_OscConfig+0x248>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fe fca6 	bl	8004d1c <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063d4:	f7fe fca2 	bl	8004d1c <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e167      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80063e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0x200>
 80063f2:	e01b      	b.n	800642c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f4:	4b09      	ldr	r3, [pc, #36]	; (800641c <HAL_RCC_OscConfig+0x248>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063fa:	f7fe fc8f 	bl	8004d1c <HAL_GetTick>
 80063fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006400:	e00e      	b.n	8006420 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006402:	f7fe fc8b 	bl	8004d1c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d907      	bls.n	8006420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e150      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
 8006414:	40023800 	.word	0x40023800
 8006418:	42470000 	.word	0x42470000
 800641c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006420:	4b88      	ldr	r3, [pc, #544]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1ea      	bne.n	8006402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8097 	beq.w	8006568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800643e:	4b81      	ldr	r3, [pc, #516]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	4b7d      	ldr	r3, [pc, #500]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	4a7c      	ldr	r2, [pc, #496]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006458:	6413      	str	r3, [r2, #64]	; 0x40
 800645a:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646a:	4b77      	ldr	r3, [pc, #476]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d118      	bne.n	80064a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006476:	4b74      	ldr	r3, [pc, #464]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a73      	ldr	r2, [pc, #460]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006482:	f7fe fc4b 	bl	8004d1c <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648a:	f7fe fc47 	bl	8004d1c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e10c      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649c:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d106      	bne.n	80064be <HAL_RCC_OscConfig+0x2ea>
 80064b0:	4b64      	ldr	r3, [pc, #400]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	4a63      	ldr	r2, [pc, #396]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6713      	str	r3, [r2, #112]	; 0x70
 80064bc:	e01c      	b.n	80064f8 <HAL_RCC_OscConfig+0x324>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCC_OscConfig+0x30c>
 80064c6:	4b5f      	ldr	r3, [pc, #380]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	4a5e      	ldr	r2, [pc, #376]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064cc:	f043 0304 	orr.w	r3, r3, #4
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70
 80064d2:	4b5c      	ldr	r3, [pc, #368]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a5b      	ldr	r2, [pc, #364]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6713      	str	r3, [r2, #112]	; 0x70
 80064de:	e00b      	b.n	80064f8 <HAL_RCC_OscConfig+0x324>
 80064e0:	4b58      	ldr	r3, [pc, #352]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	4a57      	ldr	r2, [pc, #348]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064e6:	f023 0301 	bic.w	r3, r3, #1
 80064ea:	6713      	str	r3, [r2, #112]	; 0x70
 80064ec:	4b55      	ldr	r3, [pc, #340]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f0:	4a54      	ldr	r2, [pc, #336]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064f2:	f023 0304 	bic.w	r3, r3, #4
 80064f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006500:	f7fe fc0c 	bl	8004d1c <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006506:	e00a      	b.n	800651e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006508:	f7fe fc08 	bl	8004d1c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	f241 3288 	movw	r2, #5000	; 0x1388
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e0cb      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651e:	4b49      	ldr	r3, [pc, #292]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0ee      	beq.n	8006508 <HAL_RCC_OscConfig+0x334>
 800652a:	e014      	b.n	8006556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652c:	f7fe fbf6 	bl	8004d1c <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fe fbf2 	bl	8004d1c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0b5      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654a:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1ee      	bne.n	8006534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655c:	4b39      	ldr	r3, [pc, #228]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	4a38      	ldr	r2, [pc, #224]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80a1 	beq.w	80066b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006572:	4b34      	ldr	r3, [pc, #208]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b08      	cmp	r3, #8
 800657c:	d05c      	beq.n	8006638 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d141      	bne.n	800660a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_OscConfig+0x478>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658c:	f7fe fbc6 	bl	8004d1c <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006594:	f7fe fbc2 	bl	8004d1c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e087      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a6:	4b27      	ldr	r3, [pc, #156]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69da      	ldr	r2, [r3, #28]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	019b      	lsls	r3, r3, #6
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	3b01      	subs	r3, #1
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	491b      	ldr	r1, [pc, #108]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <HAL_RCC_OscConfig+0x478>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e2:	f7fe fb9b 	bl	8004d1c <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ea:	f7fe fb97 	bl	8004d1c <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e05c      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fc:	4b11      	ldr	r3, [pc, #68]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x416>
 8006608:	e054      	b.n	80066b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <HAL_RCC_OscConfig+0x478>)
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006610:	f7fe fb84 	bl	8004d1c <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006618:	f7fe fb80 	bl	8004d1c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e045      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662a:	4b06      	ldr	r3, [pc, #24]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f0      	bne.n	8006618 <HAL_RCC_OscConfig+0x444>
 8006636:	e03d      	b.n	80066b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e038      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
 8006644:	40023800 	.word	0x40023800
 8006648:	40007000 	.word	0x40007000
 800664c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006650:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <HAL_RCC_OscConfig+0x4ec>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d028      	beq.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d121      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006676:	429a      	cmp	r2, r3
 8006678:	d11a      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006680:	4013      	ands	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006688:	4293      	cmp	r3, r2
 800668a:	d111      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	3b01      	subs	r3, #1
 800669a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d107      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d001      	beq.n	80066b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800

080066c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0cc      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066d8:	4b68      	ldr	r3, [pc, #416]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d90c      	bls.n	8006700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b65      	ldr	r3, [pc, #404]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b63      	ldr	r3, [pc, #396]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0b8      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d020      	beq.n	800674e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006718:	4b59      	ldr	r3, [pc, #356]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	4a58      	ldr	r2, [pc, #352]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006730:	4b53      	ldr	r3, [pc, #332]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	4a52      	ldr	r2, [pc, #328]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800673a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673c:	4b50      	ldr	r3, [pc, #320]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	494d      	ldr	r1, [pc, #308]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d044      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	4b47      	ldr	r3, [pc, #284]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d119      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e07f      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d003      	beq.n	8006782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677e:	2b03      	cmp	r3, #3
 8006780:	d107      	bne.n	8006792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006782:	4b3f      	ldr	r3, [pc, #252]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e06f      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006792:	4b3b      	ldr	r3, [pc, #236]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e067      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f023 0203 	bic.w	r2, r3, #3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4934      	ldr	r1, [pc, #208]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b4:	f7fe fab2 	bl	8004d1c <HAL_GetTick>
 80067b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	e00a      	b.n	80067d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067bc:	f7fe faae 	bl	8004d1c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e04f      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d2:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 020c 	and.w	r2, r3, #12
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d1eb      	bne.n	80067bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d20c      	bcs.n	800680c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f2:	4b22      	ldr	r3, [pc, #136]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d001      	beq.n	800680c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e032      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4916      	ldr	r1, [pc, #88]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	4313      	orrs	r3, r2
 8006828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	490e      	ldr	r1, [pc, #56]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800684a:	f000 f821 	bl	8006890 <HAL_RCC_GetSysClockFreq>
 800684e:	4602      	mov	r2, r0
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	091b      	lsrs	r3, r3, #4
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	490a      	ldr	r1, [pc, #40]	; (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 800685c:	5ccb      	ldrb	r3, [r1, r3]
 800685e:	fa22 f303 	lsr.w	r3, r2, r3
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <HAL_RCC_ClockConfig+0x1c8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fa12 	bl	8004c94 <HAL_InitTick>

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40023c00 	.word	0x40023c00
 8006880:	40023800 	.word	0x40023800
 8006884:	0800ce2c 	.word	0x0800ce2c
 8006888:	20000110 	.word	0x20000110
 800688c:	20000114 	.word	0x20000114

08006890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006894:	b094      	sub	sp, #80	; 0x50
 8006896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	647b      	str	r3, [r7, #68]	; 0x44
 800689c:	2300      	movs	r3, #0
 800689e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a0:	2300      	movs	r3, #0
 80068a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068a8:	4b79      	ldr	r3, [pc, #484]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d00d      	beq.n	80068d0 <HAL_RCC_GetSysClockFreq+0x40>
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	f200 80e1 	bhi.w	8006a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x34>
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d003      	beq.n	80068ca <HAL_RCC_GetSysClockFreq+0x3a>
 80068c2:	e0db      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068c4:	4b73      	ldr	r3, [pc, #460]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80068c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068c8:	e0db      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ca:	4b72      	ldr	r3, [pc, #456]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80068cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068ce:	e0d8      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d0:	4b6f      	ldr	r3, [pc, #444]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068da:	4b6d      	ldr	r3, [pc, #436]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d063      	beq.n	80069ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e6:	4b6a      	ldr	r3, [pc, #424]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	099b      	lsrs	r3, r3, #6
 80068ec:	2200      	movs	r2, #0
 80068ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f8:	633b      	str	r3, [r7, #48]	; 0x30
 80068fa:	2300      	movs	r3, #0
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
 80068fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f04f 0000 	mov.w	r0, #0
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	0159      	lsls	r1, r3, #5
 8006910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006914:	0150      	lsls	r0, r2, #5
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4621      	mov	r1, r4
 800691c:	1a51      	subs	r1, r2, r1
 800691e:	6139      	str	r1, [r7, #16]
 8006920:	4629      	mov	r1, r5
 8006922:	eb63 0301 	sbc.w	r3, r3, r1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006934:	4659      	mov	r1, fp
 8006936:	018b      	lsls	r3, r1, #6
 8006938:	4651      	mov	r1, sl
 800693a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800693e:	4651      	mov	r1, sl
 8006940:	018a      	lsls	r2, r1, #6
 8006942:	4651      	mov	r1, sl
 8006944:	ebb2 0801 	subs.w	r8, r2, r1
 8006948:	4659      	mov	r1, fp
 800694a:	eb63 0901 	sbc.w	r9, r3, r1
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	f04f 0300 	mov.w	r3, #0
 8006956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800695a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800695e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006962:	4690      	mov	r8, r2
 8006964:	4699      	mov	r9, r3
 8006966:	4623      	mov	r3, r4
 8006968:	eb18 0303 	adds.w	r3, r8, r3
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	462b      	mov	r3, r5
 8006970:	eb49 0303 	adc.w	r3, r9, r3
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006982:	4629      	mov	r1, r5
 8006984:	028b      	lsls	r3, r1, #10
 8006986:	4621      	mov	r1, r4
 8006988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800698c:	4621      	mov	r1, r4
 800698e:	028a      	lsls	r2, r1, #10
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006996:	2200      	movs	r2, #0
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
 800699a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800699c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069a0:	f7fa f982 	bl	8000ca8 <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4613      	mov	r3, r2
 80069aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ac:	e058      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ae:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	099b      	lsrs	r3, r3, #6
 80069b4:	2200      	movs	r2, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	4611      	mov	r1, r2
 80069ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069be:	623b      	str	r3, [r7, #32]
 80069c0:	2300      	movs	r3, #0
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
 80069c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	f04f 0000 	mov.w	r0, #0
 80069d0:	f04f 0100 	mov.w	r1, #0
 80069d4:	0159      	lsls	r1, r3, #5
 80069d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069da:	0150      	lsls	r0, r2, #5
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4641      	mov	r1, r8
 80069e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80069e6:	4649      	mov	r1, r9
 80069e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a00:	ebb2 040a 	subs.w	r4, r2, sl
 8006a04:	eb63 050b 	sbc.w	r5, r3, fp
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	00eb      	lsls	r3, r5, #3
 8006a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a16:	00e2      	lsls	r2, r4, #3
 8006a18:	4614      	mov	r4, r2
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	4643      	mov	r3, r8
 8006a1e:	18e3      	adds	r3, r4, r3
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	464b      	mov	r3, r9
 8006a24:	eb45 0303 	adc.w	r3, r5, r3
 8006a28:	607b      	str	r3, [r7, #4]
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a36:	4629      	mov	r1, r5
 8006a38:	028b      	lsls	r3, r1, #10
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a40:	4621      	mov	r1, r4
 8006a42:	028a      	lsls	r2, r1, #10
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	61fa      	str	r2, [r7, #28]
 8006a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a54:	f7fa f928 	bl	8000ca8 <__aeabi_uldivmod>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a7a:	e002      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3750      	adds	r7, #80	; 0x50
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a8e:	bf00      	nop
 8006a90:	40023800 	.word	0x40023800
 8006a94:	00f42400 	.word	0x00f42400

08006a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	; (8006aac <HAL_RCC_GetHCLKFreq+0x14>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	20000110 	.word	0x20000110

08006ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ab4:	f7ff fff0 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0a9b      	lsrs	r3, r3, #10
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4903      	ldr	r1, [pc, #12]	; (8006ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	0800ce3c 	.word	0x0800ce3c

08006ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006adc:	f7ff ffdc 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	0b5b      	lsrs	r3, r3, #13
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4903      	ldr	r1, [pc, #12]	; (8006afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40023800 	.word	0x40023800
 8006afc:	0800ce3c 	.word	0x0800ce3c

08006b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d075      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b34:	4b91      	ldr	r3, [pc, #580]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b3a:	f7fe f8ef 	bl	8004d1c <HAL_GetTick>
 8006b3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b42:	f7fe f8eb 	bl	8004d1c <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e189      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b54:	4b8a      	ldr	r3, [pc, #552]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f0      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d009      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	019a      	lsls	r2, r3, #6
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	071b      	lsls	r3, r3, #28
 8006b78:	4981      	ldr	r1, [pc, #516]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01f      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b8c:	4b7c      	ldr	r3, [pc, #496]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b92:	0f1b      	lsrs	r3, r3, #28
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	019a      	lsls	r2, r3, #6
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	071b      	lsls	r3, r3, #28
 8006bac:	4974      	ldr	r1, [pc, #464]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bb4:	4b72      	ldr	r3, [pc, #456]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bba:	f023 021f 	bic.w	r2, r3, #31
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	496e      	ldr	r1, [pc, #440]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00d      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	019a      	lsls	r2, r3, #6
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	061b      	lsls	r3, r3, #24
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	071b      	lsls	r3, r3, #28
 8006bec:	4964      	ldr	r1, [pc, #400]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bf4:	4b61      	ldr	r3, [pc, #388]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfa:	f7fe f88f 	bl	8004d1c <HAL_GetTick>
 8006bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c02:	f7fe f88b 	bl	8004d1c <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e129      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c14:	4b5a      	ldr	r3, [pc, #360]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d079      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c38:	4b52      	ldr	r3, [pc, #328]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c3e:	f7fe f86d 	bl	8004d1c <HAL_GetTick>
 8006c42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c44:	e008      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c46:	f7fe f869 	bl	8004d1c <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e107      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c58:	4b49      	ldr	r3, [pc, #292]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c64:	d0ef      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d020      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c72:	4b43      	ldr	r3, [pc, #268]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c78:	0f1b      	lsrs	r3, r3, #28
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	019a      	lsls	r2, r3, #6
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	071b      	lsls	r3, r3, #28
 8006c92:	493b      	ldr	r1, [pc, #236]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c9a:	4b39      	ldr	r3, [pc, #228]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	4934      	ldr	r1, [pc, #208]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01e      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cc0:	4b2f      	ldr	r3, [pc, #188]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	0e1b      	lsrs	r3, r3, #24
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	019a      	lsls	r2, r3, #6
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	061b      	lsls	r3, r3, #24
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	071b      	lsls	r3, r3, #28
 8006ce0:	4927      	ldr	r1, [pc, #156]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ce8:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	4922      	ldr	r1, [pc, #136]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cfe:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d04:	f7fe f80a 	bl	8004d1c <HAL_GetTick>
 8006d08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d0c:	f7fe f806 	bl	8004d1c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e0a4      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d1e:	4b18      	ldr	r3, [pc, #96]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d2a:	d1ef      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 808b 	beq.w	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d48:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d62:	f7fd ffdb 	bl	8004d1c <HAL_GetTick>
 8006d66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d68:	e010      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d6a:	f7fd ffd7 	bl	8004d1c <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d909      	bls.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e075      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006d7c:	42470068 	.word	0x42470068
 8006d80:	40023800 	.word	0x40023800
 8006d84:	42470070 	.word	0x42470070
 8006d88:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d8c:	4b38      	ldr	r3, [pc, #224]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0e8      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d98:	4b36      	ldr	r3, [pc, #216]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d02f      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d028      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dc0:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dc6:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006dcc:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dd2:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d114      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006dde:	f7fd ff9d 	bl	8004d1c <HAL_GetTick>
 8006de2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de4:	e00a      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de6:	f7fd ff99 	bl	8004d1c <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e035      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfc:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0ee      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e14:	d10d      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2a:	4912      	ldr	r1, [pc, #72]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	608b      	str	r3, [r1, #8]
 8006e30:	e005      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	4a0f      	ldr	r2, [pc, #60]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e3c:	6093      	str	r3, [r2, #8]
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e4a:	490a      	ldr	r1, [pc, #40]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006e64:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40007000 	.word	0x40007000
 8006e74:	40023800 	.word	0x40023800
 8006e78:	42470e40 	.word	0x42470e40
 8006e7c:	424711e0 	.word	0x424711e0

08006e80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e066      	b.n	8006f64 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7f5b      	ldrb	r3, [r3, #29]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d105      	bne.n	8006eac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fd fa3e 	bl	8004328 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	22ca      	movs	r2, #202	; 0xca
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2253      	movs	r2, #83	; 0x53
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa45 	bl	8007352 <RTC_EnterInitMode>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d12c      	bne.n	8006f2c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6899      	ldr	r1, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68d2      	ldr	r2, [r2, #12]
 8006f0c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6919      	ldr	r1, [r3, #16]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	041a      	lsls	r2, r3, #16
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa4c 	bl	80073c0 <RTC_ExitInitMode>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d113      	bne.n	8006f5a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	22ff      	movs	r2, #255	; 0xff
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f6c:	b590      	push	{r4, r7, lr}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	7f1b      	ldrb	r3, [r3, #28]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_RTC_SetTime+0x1c>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e087      	b.n	8007098 <HAL_RTC_SetTime+0x12c>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2202      	movs	r2, #2
 8006f92:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d126      	bne.n	8006fe8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d102      	bne.n	8006fae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fa29 	bl	800740a <RTC_ByteToBcd2>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fa22 	bl	800740a <RTC_ByteToBcd2>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	789b      	ldrb	r3, [r3, #2]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fa1a 	bl	800740a <RTC_ByteToBcd2>
 8006fd6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fd8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	78db      	ldrb	r3, [r3, #3]
 8006fe0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	e018      	b.n	800701a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007008:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800700e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	78db      	ldrb	r3, [r3, #3]
 8007014:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	22ca      	movs	r2, #202	; 0xca
 8007020:	625a      	str	r2, [r3, #36]	; 0x24
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2253      	movs	r2, #83	; 0x53
 8007028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f991 	bl	8007352 <RTC_EnterInitMode>
 8007030:	4603      	mov	r3, r0
 8007032:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007034:	7cfb      	ldrb	r3, [r7, #19]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d120      	bne.n	800707c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007044:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007048:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007058:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6899      	ldr	r1, [r3, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f9a4 	bl	80073c0 <RTC_ExitInitMode>
 8007078:	4603      	mov	r3, r0
 800707a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800707c:	7cfb      	ldrb	r3, [r7, #19]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d102      	bne.n	8007088 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	771a      	strb	r2, [r3, #28]

  return status;
 8007096:	7cfb      	ldrb	r3, [r7, #19]
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	bd90      	pop	{r4, r7, pc}

080070a0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80070d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80070d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	0c1b      	lsrs	r3, r3, #16
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007100:	b2da      	uxtb	r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	0d9b      	lsrs	r3, r3, #22
 800710a:	b2db      	uxtb	r3, r3
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11a      	bne.n	8007152 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f98f 	bl	8007444 <RTC_Bcd2ToByte>
 8007126:	4603      	mov	r3, r0
 8007128:	461a      	mov	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f986 	bl	8007444 <RTC_Bcd2ToByte>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	789b      	ldrb	r3, [r3, #2]
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f97d 	bl	8007444 <RTC_Bcd2ToByte>
 800714a:	4603      	mov	r3, r0
 800714c:	461a      	mov	r2, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7f1b      	ldrb	r3, [r3, #28]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_RTC_SetDate+0x1c>
 8007174:	2302      	movs	r3, #2
 8007176:	e071      	b.n	800725c <HAL_RTC_SetDate+0x100>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2202      	movs	r2, #2
 8007182:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10e      	bne.n	80071a8 <HAL_RTC_SetDate+0x4c>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	f003 0310 	and.w	r3, r3, #16
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	f023 0310 	bic.w	r3, r3, #16
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	330a      	adds	r3, #10
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d11c      	bne.n	80071e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	78db      	ldrb	r3, [r3, #3]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 f929 	bl	800740a <RTC_ByteToBcd2>
 80071b8:	4603      	mov	r3, r0
 80071ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 f922 	bl	800740a <RTC_ByteToBcd2>
 80071c6:	4603      	mov	r3, r0
 80071c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80071ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	789b      	ldrb	r3, [r3, #2]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f91a 	bl	800740a <RTC_ByteToBcd2>
 80071d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80071d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e00e      	b.n	8007206 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	78db      	ldrb	r3, [r3, #3]
 80071ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80071f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80071fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	22ca      	movs	r2, #202	; 0xca
 800720c:	625a      	str	r2, [r3, #36]	; 0x24
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2253      	movs	r2, #83	; 0x53
 8007214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f89b 	bl	8007352 <RTC_EnterInitMode>
 800721c:	4603      	mov	r3, r0
 800721e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10c      	bne.n	8007240 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007230:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007234:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 f8c2 	bl	80073c0 <RTC_ExitInitMode>
 800723c:	4603      	mov	r3, r0
 800723e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007240:	7cfb      	ldrb	r3, [r7, #19]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	22ff      	movs	r2, #255	; 0xff
 8007252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	771a      	strb	r2, [r3, #28]

  return status;
 800725a:	7cfb      	ldrb	r3, [r7, #19]
}
 800725c:	4618      	mov	r0, r3
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	bd90      	pop	{r4, r7, pc}

08007264 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800727e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007282:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	0a1b      	lsrs	r3, r3, #8
 8007292:	b2db      	uxtb	r3, r3
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	0b5b      	lsrs	r3, r3, #13
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d11a      	bne.n	80072f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	78db      	ldrb	r3, [r3, #3]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f8bc 	bl	8007444 <RTC_Bcd2ToByte>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 f8b3 	bl	8007444 <RTC_Bcd2ToByte>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	789b      	ldrb	r3, [r3, #2]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f8aa 	bl	8007444 <RTC_Bcd2ToByte>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800731c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800731e:	f7fd fcfd 	bl	8004d1c <HAL_GetTick>
 8007322:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007324:	e009      	b.n	800733a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007326:	f7fd fcf9 	bl	8004d1c <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007334:	d901      	bls.n	800733a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e007      	b.n	800734a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0ee      	beq.n	8007326 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d122      	bne.n	80073b6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800737e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007380:	f7fd fccc 	bl	8004d1c <HAL_GetTick>
 8007384:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007386:	e00c      	b.n	80073a2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007388:	f7fd fcc8 	bl	8004d1c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007396:	d904      	bls.n	80073a2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2204      	movs	r2, #4
 800739c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <RTC_EnterInitMode+0x64>
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d1e8      	bne.n	8007388 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ff89 	bl	8007302 <HAL_RTC_WaitForSynchro>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2204      	movs	r2, #4
 80073fa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	4603      	mov	r3, r0
 8007412:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007418:	e005      	b.n	8007426 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	3301      	adds	r3, #1
 800741e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	3b0a      	subs	r3, #10
 8007424:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	2b09      	cmp	r3, #9
 800742a:	d8f6      	bhi.n	800741a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	b2da      	uxtb	r2, r3
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	4313      	orrs	r3, r2
 8007436:	b2db      	uxtb	r3, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007452:	79fb      	ldrb	r3, [r7, #7]
 8007454:	091b      	lsrs	r3, r3, #4
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	0092      	lsls	r2, r2, #2
 800745c:	4413      	add	r3, r2
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	b2da      	uxtb	r2, r3
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	4413      	add	r3, r2
 800746e:	b2db      	uxtb	r3, r3
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e07b      	b.n	8007586 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d108      	bne.n	80074a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800749e:	d009      	beq.n	80074b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	61da      	str	r2, [r3, #28]
 80074a6:	e005      	b.n	80074b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fc ffc0 	bl	8004454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	ea42 0103 	orr.w	r1, r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	f003 0104 	and.w	r1, r3, #4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	f003 0210 	and.w	r2, r3, #16
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b088      	sub	sp, #32
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_SPI_Transmit+0x22>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e126      	b.n	80077fe <HAL_SPI_Transmit+0x270>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075b8:	f7fd fbb0 	bl	8004d1c <HAL_GetTick>
 80075bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
 80075d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075d2:	e10b      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_SPI_Transmit+0x52>
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075e4:	e102      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2203      	movs	r2, #3
 80075ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762c:	d10f      	bne.n	800764e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800763c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800764c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d007      	beq.n	800766c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800766a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007674:	d14b      	bne.n	800770e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_SPI_Transmit+0xf6>
 800767e:	8afb      	ldrh	r3, [r7, #22]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d13e      	bne.n	8007702 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	881a      	ldrh	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	1c9a      	adds	r2, r3, #2
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076a8:	e02b      	b.n	8007702 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d112      	bne.n	80076de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	881a      	ldrh	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	1c9a      	adds	r2, r3, #2
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	86da      	strh	r2, [r3, #54]	; 0x36
 80076dc:	e011      	b.n	8007702 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076de:	f7fd fb1d 	bl	8004d1c <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d803      	bhi.n	80076f6 <HAL_SPI_Transmit+0x168>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d102      	bne.n	80076fc <HAL_SPI_Transmit+0x16e>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007700:	e074      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1ce      	bne.n	80076aa <HAL_SPI_Transmit+0x11c>
 800770c:	e04c      	b.n	80077a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_SPI_Transmit+0x18e>
 8007716:	8afb      	ldrh	r3, [r7, #22]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d140      	bne.n	800779e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007742:	e02c      	b.n	800779e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d113      	bne.n	800777a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	330c      	adds	r3, #12
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	86da      	strh	r2, [r3, #54]	; 0x36
 8007778:	e011      	b.n	800779e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800777a:	f7fd facf 	bl	8004d1c <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d803      	bhi.n	8007792 <HAL_SPI_Transmit+0x204>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d102      	bne.n	8007798 <HAL_SPI_Transmit+0x20a>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800779c:	e026      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1cd      	bne.n	8007744 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fcf7 	bl	80081a0 <SPI_EndRxTxTransaction>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e000      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80077ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b088      	sub	sp, #32
 800780a:	af02      	add	r7, sp, #8
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007822:	d112      	bne.n	800784a <HAL_SPI_Receive+0x44>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10e      	bne.n	800784a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2204      	movs	r2, #4
 8007830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007834:	88fa      	ldrh	r2, [r7, #6]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	4613      	mov	r3, r2
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f8f1 	bl	8007a28 <HAL_SPI_TransmitReceive>
 8007846:	4603      	mov	r3, r0
 8007848:	e0ea      	b.n	8007a20 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_SPI_Receive+0x52>
 8007854:	2302      	movs	r3, #2
 8007856:	e0e3      	b.n	8007a20 <HAL_SPI_Receive+0x21a>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007860:	f7fd fa5c 	bl	8004d1c <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b01      	cmp	r3, #1
 8007870:	d002      	beq.n	8007878 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007872:	2302      	movs	r3, #2
 8007874:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007876:	e0ca      	b.n	8007a0e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_SPI_Receive+0x7e>
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007888:	e0c1      	b.n	8007a0e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2204      	movs	r2, #4
 800788e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	88fa      	ldrh	r2, [r7, #6]
 80078a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	d10f      	bne.n	80078f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	d007      	beq.n	8007910 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d162      	bne.n	80079de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007918:	e02e      	b.n	8007978 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b01      	cmp	r3, #1
 8007926:	d115      	bne.n	8007954 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f103 020c 	add.w	r2, r3, #12
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007952:	e011      	b.n	8007978 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007954:	f7fd f9e2 	bl	8004d1c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d803      	bhi.n	800796c <HAL_SPI_Receive+0x166>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Receive+0x16c>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007976:	e04a      	b.n	8007a0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1cb      	bne.n	800791a <HAL_SPI_Receive+0x114>
 8007982:	e031      	b.n	80079e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b01      	cmp	r3, #1
 8007990:	d113      	bne.n	80079ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	b292      	uxth	r2, r2
 800799e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	1c9a      	adds	r2, r3, #2
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079b8:	e011      	b.n	80079de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ba:	f7fd f9af 	bl	8004d1c <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d803      	bhi.n	80079d2 <HAL_SPI_Receive+0x1cc>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d102      	bne.n	80079d8 <HAL_SPI_Receive+0x1d2>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079dc:	e017      	b.n	8007a0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1cd      	bne.n	8007984 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fb71 	bl	80080d4 <SPI_EndRxTransaction>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2220      	movs	r2, #32
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
 8007a0a:	e000      	b.n	8007a0e <HAL_SPI_Receive+0x208>
  }

error :
 8007a0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08c      	sub	sp, #48	; 0x30
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a36:	2301      	movs	r3, #1
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x26>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e18a      	b.n	8007d64 <HAL_SPI_TransmitReceive+0x33c>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a56:	f7fd f961 	bl	8004d1c <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d00f      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x70>
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a7e:	d107      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d103      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x68>
 8007a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d003      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a96:	e15b      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x82>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x82>
 8007aa4:	887b      	ldrh	r3, [r7, #2]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ab0:	e14e      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d003      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	887a      	ldrh	r2, [r7, #2]
 8007ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	887a      	ldrh	r2, [r7, #2]
 8007adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	887a      	ldrh	r2, [r7, #2]
 8007aee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b40      	cmp	r3, #64	; 0x40
 8007b08:	d007      	beq.n	8007b1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b22:	d178      	bne.n	8007c16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x10a>
 8007b2c:	8b7b      	ldrh	r3, [r7, #26]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d166      	bne.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	881a      	ldrh	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b56:	e053      	b.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d11b      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x176>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d016      	beq.n	8007b9e <HAL_SPI_TransmitReceive+0x176>
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d113      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	881a      	ldrh	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d119      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x1b8>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d014      	beq.n	8007be0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	b292      	uxth	r2, r2
 8007bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	1c9a      	adds	r2, r3, #2
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007be0:	f7fd f89c 	bl	8004d1c <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d807      	bhi.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf6:	d003      	beq.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bfe:	e0a7      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1a6      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x130>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1a1      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x130>
 8007c14:	e07c      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_SPI_TransmitReceive+0x1fc>
 8007c1e:	8b7b      	ldrh	r3, [r7, #26]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d16b      	bne.n	8007cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c4a:	e057      	b.n	8007cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d11c      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x26c>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d017      	beq.n	8007c94 <HAL_SPI_TransmitReceive+0x26c>
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d114      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d119      	bne.n	8007cd6 <HAL_SPI_TransmitReceive+0x2ae>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d014      	beq.n	8007cd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cd6:	f7fd f821 	bl	8004d1c <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d803      	bhi.n	8007cee <HAL_SPI_TransmitReceive+0x2c6>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cec:	d102      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x2cc>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cfa:	e029      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1a2      	bne.n	8007c4c <HAL_SPI_TransmitReceive+0x224>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d19d      	bne.n	8007c4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fa43 	bl	80081a0 <SPI_EndRxTxTransaction>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d006      	beq.n	8007d2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d2c:	e010      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	e000      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3730      	adds	r7, #48	; 0x30
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	099b      	lsrs	r3, r3, #6
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10f      	bne.n	8007db0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	099b      	lsrs	r3, r3, #6
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
    return;
 8007dae:	e0d7      	b.n	8007f60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <HAL_SPI_IRQHandler+0x66>
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	09db      	lsrs	r3, r3, #7
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
    return;
 8007dd0:	e0c6      	b.n	8007f60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10c      	bne.n	8007df8 <HAL_SPI_IRQHandler+0x8c>
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	099b      	lsrs	r3, r3, #6
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	0a1b      	lsrs	r3, r3, #8
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80b4 	beq.w	8007f60 <HAL_SPI_IRQHandler+0x1f4>
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80ad 	beq.w	8007f60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	099b      	lsrs	r3, r3, #6
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d023      	beq.n	8007e5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d011      	beq.n	8007e42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e22:	f043 0204 	orr.w	r2, r3, #4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	e00b      	b.n	8007e5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	693b      	ldr	r3, [r7, #16]
        return;
 8007e58:	e082      	b.n	8007f60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d014      	beq.n	8007e90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6a:	f043 0201 	orr.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	0a1b      	lsrs	r3, r3, #8
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea0:	f043 0208 	orr.w	r2, r3, #8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60bb      	str	r3, [r7, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d04f      	beq.n	8007f5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ecc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d104      	bne.n	8007eea <HAL_SPI_IRQHandler+0x17e>
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d034      	beq.n	8007f54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0203 	bic.w	r2, r2, #3
 8007ef8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <HAL_SPI_IRQHandler+0x1fc>)
 8007f08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd fd0e 	bl	8005930 <HAL_DMA_Abort_IT>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d016      	beq.n	8007f5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f32:	4a0d      	ldr	r2, [pc, #52]	; (8007f68 <HAL_SPI_IRQHandler+0x1fc>)
 8007f34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fd fcf8 	bl	8005930 <HAL_DMA_Abort_IT>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007f52:	e003      	b.n	8007f5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f809 	bl	8007f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f5a:	e000      	b.n	8007f5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007f5c:	bf00      	nop
    return;
 8007f5e:	bf00      	nop
  }
}
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	08007f9d 	.word	0x08007f9d

08007f6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f8e:	b2db      	uxtb	r3, r3
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff ffd8 	bl	8007f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fd4:	f7fc fea2 	bl	8004d1c <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	1a9b      	subs	r3, r3, r2
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fe4:	f7fc fe9a 	bl	8004d1c <HAL_GetTick>
 8007fe8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fea:	4b39      	ldr	r3, [pc, #228]	; (80080d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	015b      	lsls	r3, r3, #5
 8007ff0:	0d1b      	lsrs	r3, r3, #20
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	fb02 f303 	mul.w	r3, r2, r3
 8007ff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ffa:	e054      	b.n	80080a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008002:	d050      	beq.n	80080a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008004:	f7fc fe8a 	bl	8004d1c <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	429a      	cmp	r2, r3
 8008012:	d902      	bls.n	800801a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d13d      	bne.n	8008096 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008032:	d111      	bne.n	8008058 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800803c:	d004      	beq.n	8008048 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008046:	d107      	bne.n	8008058 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008060:	d10f      	bne.n	8008082 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e017      	b.n	80080c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	4013      	ands	r3, r2
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	bf0c      	ite	eq
 80080b6:	2301      	moveq	r3, #1
 80080b8:	2300      	movne	r3, #0
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d19b      	bne.n	8007ffc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000110 	.word	0x20000110

080080d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080e8:	d111      	bne.n	800810e <SPI_EndRxTransaction+0x3a>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f2:	d004      	beq.n	80080fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fc:	d107      	bne.n	800810e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800810c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008116:	d12a      	bne.n	800816e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008120:	d012      	beq.n	8008148 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	2180      	movs	r1, #128	; 0x80
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff ff49 	bl	8007fc4 <SPI_WaitFlagStateUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d02d      	beq.n	8008194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813c:	f043 0220 	orr.w	r2, r3, #32
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e026      	b.n	8008196 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2200      	movs	r2, #0
 8008150:	2101      	movs	r1, #1
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff ff36 	bl	8007fc4 <SPI_WaitFlagStateUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008162:	f043 0220 	orr.w	r2, r3, #32
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e013      	b.n	8008196 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	2101      	movs	r1, #1
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f7ff ff23 	bl	8007fc4 <SPI_WaitFlagStateUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008188:	f043 0220 	orr.w	r2, r3, #32
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e000      	b.n	8008196 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081ac:	4b1b      	ldr	r3, [pc, #108]	; (800821c <SPI_EndRxTxTransaction+0x7c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1b      	ldr	r2, [pc, #108]	; (8008220 <SPI_EndRxTxTransaction+0x80>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	0d5b      	lsrs	r3, r3, #21
 80081b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081bc:	fb02 f303 	mul.w	r3, r2, r3
 80081c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ca:	d112      	bne.n	80081f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	2180      	movs	r1, #128	; 0x80
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7ff fef4 	bl	8007fc4 <SPI_WaitFlagStateUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d016      	beq.n	8008210 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e6:	f043 0220 	orr.w	r2, r3, #32
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e00f      	b.n	8008212 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00a      	beq.n	800820e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008208:	2b80      	cmp	r3, #128	; 0x80
 800820a:	d0f2      	beq.n	80081f2 <SPI_EndRxTxTransaction+0x52>
 800820c:	e000      	b.n	8008210 <SPI_EndRxTxTransaction+0x70>
        break;
 800820e:	bf00      	nop
  }

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000110 	.word	0x20000110
 8008220:	165e9f81 	.word	0x165e9f81

08008224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e03f      	b.n	80082b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7fc fb7e 	bl	800494c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2224      	movs	r2, #36	; 0x24
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 f881 	bl	8009370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800827c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695a      	ldr	r2, [r3, #20]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800828c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800829c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b08a      	sub	sp, #40	; 0x28
 80082c2:	af02      	add	r7, sp, #8
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d17c      	bne.n	80083d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <HAL_UART_Transmit+0x2c>
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e075      	b.n	80083da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_UART_Transmit+0x3e>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e06e      	b.n	80083da <HAL_UART_Transmit+0x11c>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2221      	movs	r2, #33	; 0x21
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008312:	f7fc fd03 	bl	8004d1c <HAL_GetTick>
 8008316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d108      	bne.n	8008340 <HAL_UART_Transmit+0x82>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e003      	b.n	8008348 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008350:	e02a      	b.n	80083a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2200      	movs	r2, #0
 800835a:	2180      	movs	r1, #128	; 0x80
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fd38 	bl	8008dd2 <UART_WaitOnFlagUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e036      	b.n	80083da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008380:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	3302      	adds	r3, #2
 8008386:	61bb      	str	r3, [r7, #24]
 8008388:	e007      	b.n	800839a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	3301      	adds	r3, #1
 8008398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1cf      	bne.n	8008352 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2200      	movs	r2, #0
 80083ba:	2140      	movs	r1, #64	; 0x40
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fd08 	bl	8008dd2 <UART_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e006      	b.n	80083da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e000      	b.n	80083da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
  }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08c      	sub	sp, #48	; 0x30
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d165      	bne.n	80084ca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <HAL_UART_Transmit_DMA+0x26>
 8008404:	88fb      	ldrh	r3, [r7, #6]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e05e      	b.n	80084cc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_UART_Transmit_DMA+0x38>
 8008418:	2302      	movs	r3, #2
 800841a:	e057      	b.n	80084cc <HAL_UART_Transmit_DMA+0xe8>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	88fa      	ldrh	r2, [r7, #6]
 8008434:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2221      	movs	r2, #33	; 0x21
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <HAL_UART_Transmit_DMA+0xf0>)
 800844a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008450:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <HAL_UART_Transmit_DMA+0xf4>)
 8008452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008458:	4a20      	ldr	r2, [pc, #128]	; (80084dc <HAL_UART_Transmit_DMA+0xf8>)
 800845a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008460:	2200      	movs	r2, #0
 8008462:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008464:	f107 0308 	add.w	r3, r7, #8
 8008468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3304      	adds	r3, #4
 8008478:	461a      	mov	r2, r3
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	f7fd f990 	bl	80057a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008488:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3314      	adds	r3, #20
 8008498:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	617b      	str	r3, [r7, #20]
   return(result);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3314      	adds	r3, #20
 80084b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b2:	627a      	str	r2, [r7, #36]	; 0x24
 80084b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6a39      	ldr	r1, [r7, #32]
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	61fb      	str	r3, [r7, #28]
   return(result);
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e5      	bne.n	8008492 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e000      	b.n	80084cc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80084ca:	2302      	movs	r3, #2
  }
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3730      	adds	r7, #48	; 0x30
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	08008b2d 	.word	0x08008b2d
 80084d8:	08008bc7 	.word	0x08008bc7
 80084dc:	08008d3f 	.word	0x08008d3f

080084e0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08c      	sub	sp, #48	; 0x30
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	4613      	mov	r3, r2
 80084ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d152      	bne.n	80085a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e04b      	b.n	80085a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008514:	2302      	movs	r3, #2
 8008516:	e044      	b.n	80085a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	461a      	mov	r2, r3
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 fcbf 	bl	8008eb0 <UART_Start_Receive_DMA>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800853c:	2b00      	cmp	r3, #0
 800853e:	d12c      	bne.n	800859a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	2b01      	cmp	r3, #1
 8008546:	d125      	bne.n	8008594 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008548:	2300      	movs	r3, #0
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	617b      	str	r3, [r7, #20]
   return(result);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f043 0310 	orr.w	r3, r3, #16
 8008574:	62bb      	str	r3, [r7, #40]	; 0x28
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	330c      	adds	r3, #12
 800857c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857e:	627a      	str	r2, [r7, #36]	; 0x24
 8008580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6a39      	ldr	r1, [r7, #32]
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	61fb      	str	r3, [r7, #28]
   return(result);
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e5      	bne.n	800855e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008592:	e002      	b.n	800859a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800859a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800859e:	e000      	b.n	80085a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80085a0:	2302      	movs	r3, #2
  }
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3730      	adds	r7, #48	; 0x30
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b0ba      	sub	sp, #232	; 0xe8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085d8:	2300      	movs	r3, #0
 80085da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80085ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10f      	bne.n	8008612 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <HAL_UART_IRQHandler+0x66>
 80085fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fdf5 	bl	80091fa <UART_Receive_IT>
      return;
 8008610:	e256      	b.n	8008ac0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80de 	beq.w	80087d8 <HAL_UART_IRQHandler+0x22c>
 800861c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80d1 	beq.w	80087d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00b      	beq.n	800865a <HAL_UART_IRQHandler+0xae>
 8008642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	f043 0201 	orr.w	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800865a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00b      	beq.n	800867e <HAL_UART_IRQHandler+0xd2>
 8008666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	f043 0202 	orr.w	r2, r3, #2
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00b      	beq.n	80086a2 <HAL_UART_IRQHandler+0xf6>
 800868a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f043 0204 	orr.w	r2, r3, #4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80086a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d011      	beq.n	80086d2 <HAL_UART_IRQHandler+0x126>
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d105      	bne.n	80086c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	f043 0208 	orr.w	r2, r3, #8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 81ed 	beq.w	8008ab6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_UART_IRQHandler+0x14e>
 80086e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fd80 	bl	80091fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008704:	2b40      	cmp	r3, #64	; 0x40
 8008706:	bf0c      	ite	eq
 8008708:	2301      	moveq	r3, #1
 800870a:	2300      	movne	r3, #0
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d103      	bne.n	8008726 <HAL_UART_IRQHandler+0x17a>
 800871e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d04f      	beq.n	80087c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fc88 	bl	800903c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008736:	2b40      	cmp	r3, #64	; 0x40
 8008738:	d141      	bne.n	80087be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3314      	adds	r3, #20
 8008740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3314      	adds	r3, #20
 8008762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800876a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800877e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1d9      	bne.n	800873a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878a:	2b00      	cmp	r3, #0
 800878c:	d013      	beq.n	80087b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	4a7d      	ldr	r2, [pc, #500]	; (8008988 <HAL_UART_IRQHandler+0x3dc>)
 8008794:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	4618      	mov	r0, r3
 800879c:	f7fd f8c8 	bl	8005930 <HAL_DMA_Abort_IT>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d016      	beq.n	80087d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b4:	e00e      	b.n	80087d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f9ae 	bl	8008b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087bc:	e00a      	b.n	80087d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f9aa 	bl	8008b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	e006      	b.n	80087d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f9a6 	bl	8008b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087d2:	e170      	b.n	8008ab6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d4:	bf00      	nop
    return;
 80087d6:	e16e      	b.n	8008ab6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	2b01      	cmp	r3, #1
 80087de:	f040 814a 	bne.w	8008a76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e6:	f003 0310 	and.w	r3, r3, #16
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 8143 	beq.w	8008a76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 813c 	beq.w	8008a76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087fe:	2300      	movs	r3, #0
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60bb      	str	r3, [r7, #8]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	60bb      	str	r3, [r7, #8]
 8008812:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881e:	2b40      	cmp	r3, #64	; 0x40
 8008820:	f040 80b4 	bne.w	800898c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008830:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 8140 	beq.w	8008aba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800883e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008842:	429a      	cmp	r2, r3
 8008844:	f080 8139 	bcs.w	8008aba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800884e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885a:	f000 8088 	beq.w	800896e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	330c      	adds	r3, #12
 8008864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800887c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800888a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800888e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1d9      	bne.n	800885e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3314      	adds	r3, #20
 80088b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3314      	adds	r3, #20
 80088ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e1      	bne.n	80088aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3314      	adds	r3, #20
 80088ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3314      	adds	r3, #20
 8008906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800890a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800890c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e3      	bne.n	80088e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	330c      	adds	r3, #12
 8008932:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800893c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800893e:	f023 0310 	bic.w	r3, r3, #16
 8008942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	330c      	adds	r3, #12
 800894c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008950:	65ba      	str	r2, [r7, #88]	; 0x58
 8008952:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800895e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e3      	bne.n	800892c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	4618      	mov	r0, r3
 800896a:	f7fc ff71 	bl	8005850 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008976:	b29b      	uxth	r3, r3
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fa ff4a 	bl	8003818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008984:	e099      	b.n	8008aba <HAL_UART_IRQHandler+0x50e>
 8008986:	bf00      	nop
 8008988:	08009103 	.word	0x08009103
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008994:	b29b      	uxth	r3, r3
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 808b 	beq.w	8008abe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80089a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8086 	beq.w	8008abe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089d6:	647a      	str	r2, [r7, #68]	; 0x44
 80089d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e3      	bne.n	80089b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3314      	adds	r3, #20
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	623b      	str	r3, [r7, #32]
   return(result);
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	f023 0301 	bic.w	r3, r3, #1
 8008a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3314      	adds	r3, #20
 8008a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e3      	bne.n	80089ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	e853 3f00 	ldrex	r3, [r3]
 8008a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0310 	bic.w	r3, r3, #16
 8008a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	330c      	adds	r3, #12
 8008a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a54:	61fa      	str	r2, [r7, #28]
 8008a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	69b9      	ldr	r1, [r7, #24]
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	617b      	str	r3, [r7, #20]
   return(result);
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e3      	bne.n	8008a30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7fa fed2 	bl	8003818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a74:	e023      	b.n	8008abe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <HAL_UART_IRQHandler+0x4ea>
 8008a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb4b 	bl	800912a <UART_Transmit_IT>
    return;
 8008a94:	e014      	b.n	8008ac0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00e      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x514>
 8008aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d008      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fb8b 	bl	80091ca <UART_EndTransmit_IT>
    return;
 8008ab4:	e004      	b.n	8008ac0 <HAL_UART_IRQHandler+0x514>
    return;
 8008ab6:	bf00      	nop
 8008ab8:	e002      	b.n	8008ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8008aba:	bf00      	nop
 8008abc:	e000      	b.n	8008ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8008abe:	bf00      	nop
  }
}
 8008ac0:	37e8      	adds	r7, #232	; 0xe8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop

08008ac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b090      	sub	sp, #64	; 0x40
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d137      	bne.n	8008bb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3314      	adds	r3, #20
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b6e:	633a      	str	r2, [r7, #48]	; 0x30
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e5      	bne.n	8008b4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	330c      	adds	r3, #12
 8008b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b98:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ba2:	61fa      	str	r2, [r7, #28]
 8008ba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	69b9      	ldr	r1, [r7, #24]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e5      	bne.n	8008b82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bb6:	e002      	b.n	8008bbe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008bb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bba:	f7ff ff85 	bl	8008ac8 <HAL_UART_TxCpltCallback>
}
 8008bbe:	bf00      	nop
 8008bc0:	3740      	adds	r7, #64	; 0x40
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff ff81 	bl	8008adc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b09c      	sub	sp, #112	; 0x70
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d172      	bne.n	8008ce4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c00:	2200      	movs	r2, #0
 8008c02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c24:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e5      	bne.n	8008c04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4a:	f023 0301 	bic.w	r3, r3, #1
 8008c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8008c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c58:	647a      	str	r2, [r7, #68]	; 0x44
 8008c5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e5      	bne.n	8008c38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3314      	adds	r3, #20
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c82:	663b      	str	r3, [r7, #96]	; 0x60
 8008c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c8c:	633a      	str	r2, [r7, #48]	; 0x30
 8008c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e5      	bne.n	8008c6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d119      	bne.n	8008ce4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	330c      	adds	r3, #12
 8008cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0310 	bic.w	r3, r3, #16
 8008cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	330c      	adds	r3, #12
 8008cce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cd0:	61fa      	str	r2, [r7, #28]
 8008cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	69b9      	ldr	r1, [r7, #24]
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e5      	bne.n	8008cb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d106      	bne.n	8008cfa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cf4:	f7fa fd90 	bl	8003818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cf8:	e002      	b.n	8008d00 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008cfa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cfc:	f7ff fef8 	bl	8008af0 <HAL_UART_RxCpltCallback>
}
 8008d00:	bf00      	nop
 8008d02:	3770      	adds	r7, #112	; 0x70
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d108      	bne.n	8008d30 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d22:	085b      	lsrs	r3, r3, #1
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4619      	mov	r1, r3
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7fa fd75 	bl	8003818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d2e:	e002      	b.n	8008d36 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f7ff fee7 	bl	8008b04 <HAL_UART_RxHalfCpltCallback>
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5a:	2b80      	cmp	r3, #128	; 0x80
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b21      	cmp	r3, #33	; 0x21
 8008d70:	d108      	bne.n	8008d84 <UART_DMAError+0x46>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d7e:	68b8      	ldr	r0, [r7, #8]
 8008d80:	f000 f934 	bl	8008fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	bf0c      	ite	eq
 8008d92:	2301      	moveq	r3, #1
 8008d94:	2300      	movne	r3, #0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b22      	cmp	r3, #34	; 0x22
 8008da4:	d108      	bne.n	8008db8 <UART_DMAError+0x7a>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008db2:	68b8      	ldr	r0, [r7, #8]
 8008db4:	f000 f942 	bl	800903c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	f043 0210 	orr.w	r2, r3, #16
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc4:	68b8      	ldr	r0, [r7, #8]
 8008dc6:	f7ff fea7 	bl	8008b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b090      	sub	sp, #64	; 0x40
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	603b      	str	r3, [r7, #0]
 8008dde:	4613      	mov	r3, r2
 8008de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de2:	e050      	b.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d04c      	beq.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df2:	f7fb ff93 	bl	8004d1c <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d241      	bcs.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	330c      	adds	r3, #12
 8008e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	330c      	adds	r3, #12
 8008e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e22:	637a      	str	r2, [r7, #52]	; 0x34
 8008e24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e5      	bne.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3314      	adds	r3, #20
 8008e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	613b      	str	r3, [r7, #16]
   return(result);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f023 0301 	bic.w	r3, r3, #1
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3314      	adds	r3, #20
 8008e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e56:	623a      	str	r2, [r7, #32]
 8008e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	69f9      	ldr	r1, [r7, #28]
 8008e5c:	6a3a      	ldr	r2, [r7, #32]
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e5      	bne.n	8008e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e00f      	b.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	bf0c      	ite	eq
 8008e96:	2301      	moveq	r3, #1
 8008e98:	2300      	movne	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d09f      	beq.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3740      	adds	r7, #64	; 0x40
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b098      	sub	sp, #96	; 0x60
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	88fa      	ldrh	r2, [r7, #6]
 8008ec8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2222      	movs	r2, #34	; 0x22
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	4a40      	ldr	r2, [pc, #256]	; (8008fe0 <UART_Start_Receive_DMA+0x130>)
 8008ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee4:	4a3f      	ldr	r2, [pc, #252]	; (8008fe4 <UART_Start_Receive_DMA+0x134>)
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	4a3e      	ldr	r2, [pc, #248]	; (8008fe8 <UART_Start_Receive_DMA+0x138>)
 8008eee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008ef8:	f107 0308 	add.w	r3, r7, #8
 8008efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	f7fc fc46 	bl	80057a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d019      	beq.n	8008f6e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	330c      	adds	r3, #12
 8008f58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e5      	bne.n	8008f3a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	657b      	str	r3, [r7, #84]	; 0x54
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3314      	adds	r3, #20
 8008f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e5      	bne.n	8008f6e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3314      	adds	r3, #20
 8008fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3314      	adds	r3, #20
 8008fc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6a39      	ldr	r1, [r7, #32]
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e5      	bne.n	8008fa2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3760      	adds	r7, #96	; 0x60
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	08008be3 	.word	0x08008be3
 8008fe4:	08008d09 	.word	0x08008d09
 8008fe8:	08008d3f 	.word	0x08008d3f

08008fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b089      	sub	sp, #36	; 0x24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	60bb      	str	r3, [r7, #8]
   return(result);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	330c      	adds	r3, #12
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	61ba      	str	r2, [r7, #24]
 8009016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6979      	ldr	r1, [r7, #20]
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	613b      	str	r3, [r7, #16]
   return(result);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e5      	bne.n	8008ff4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009030:	bf00      	nop
 8009032:	3724      	adds	r7, #36	; 0x24
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b095      	sub	sp, #84	; 0x54
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800905a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009064:	643a      	str	r2, [r7, #64]	; 0x40
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800906a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e5      	bne.n	8009044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3314      	adds	r3, #20
 800907e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	61fb      	str	r3, [r7, #28]
   return(result);
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f023 0301 	bic.w	r3, r3, #1
 800908e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3314      	adds	r3, #20
 8009096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800909e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e5      	bne.n	8009078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d119      	bne.n	80090e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0310 	bic.w	r3, r3, #16
 80090ca:	647b      	str	r3, [r7, #68]	; 0x44
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	330c      	adds	r3, #12
 80090d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090d4:	61ba      	str	r2, [r7, #24]
 80090d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6979      	ldr	r1, [r7, #20]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	613b      	str	r3, [r7, #16]
   return(result);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e5      	bne.n	80090b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090f6:	bf00      	nop
 80090f8:	3754      	adds	r7, #84	; 0x54
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fcfb 	bl	8008b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009122:	bf00      	nop
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800912a:	b480      	push	{r7}
 800912c:	b085      	sub	sp, #20
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b21      	cmp	r3, #33	; 0x21
 800913c:	d13e      	bne.n	80091bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009146:	d114      	bne.n	8009172 <UART_Transmit_IT+0x48>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d110      	bne.n	8009172 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009164:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	1c9a      	adds	r2, r3, #2
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	621a      	str	r2, [r3, #32]
 8009170:	e008      	b.n	8009184 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	1c59      	adds	r1, r3, #1
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	6211      	str	r1, [r2, #32]
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29b      	uxth	r3, r3
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	4619      	mov	r1, r3
 8009192:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10f      	bne.n	80091b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e000      	b.n	80091be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091bc:	2302      	movs	r3, #2
  }
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff fc6c 	bl	8008ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b08c      	sub	sp, #48	; 0x30
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b22      	cmp	r3, #34	; 0x22
 800920c:	f040 80ab 	bne.w	8009366 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009218:	d117      	bne.n	800924a <UART_Receive_IT+0x50>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d113      	bne.n	800924a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	b29b      	uxth	r3, r3
 8009234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009238:	b29a      	uxth	r2, r3
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	1c9a      	adds	r2, r3, #2
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	629a      	str	r2, [r3, #40]	; 0x28
 8009248:	e026      	b.n	8009298 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925c:	d007      	beq.n	800926e <UART_Receive_IT+0x74>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <UART_Receive_IT+0x82>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d106      	bne.n	800927c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	e008      	b.n	800928e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009288:	b2da      	uxtb	r2, r3
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800929c:	b29b      	uxth	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	4619      	mov	r1, r3
 80092a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d15a      	bne.n	8009362 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0220 	bic.w	r2, r2, #32
 80092ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695a      	ldr	r2, [r3, #20]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 0201 	bic.w	r2, r2, #1
 80092da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d135      	bne.n	8009358 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	613b      	str	r3, [r7, #16]
   return(result);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f023 0310 	bic.w	r3, r3, #16
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009312:	623a      	str	r2, [r7, #32]
 8009314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	69f9      	ldr	r1, [r7, #28]
 8009318:	6a3a      	ldr	r2, [r7, #32]
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e5      	bne.n	80092f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b10      	cmp	r3, #16
 8009332:	d10a      	bne.n	800934a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009334:	2300      	movs	r3, #0
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7fa fa61 	bl	8003818 <HAL_UARTEx_RxEventCallback>
 8009356:	e002      	b.n	800935e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff fbc9 	bl	8008af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	e002      	b.n	8009368 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	e000      	b.n	8009368 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009366:	2302      	movs	r3, #2
  }
}
 8009368:	4618      	mov	r0, r3
 800936a:	3730      	adds	r7, #48	; 0x30
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009374:	b0c0      	sub	sp, #256	; 0x100
 8009376:	af00      	add	r7, sp, #0
 8009378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938c:	68d9      	ldr	r1, [r3, #12]
 800938e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	ea40 0301 	orr.w	r3, r0, r1
 8009398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800939a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093c8:	f021 010c 	bic.w	r1, r1, #12
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093d6:	430b      	orrs	r3, r1
 80093d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ea:	6999      	ldr	r1, [r3, #24]
 80093ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	ea40 0301 	orr.w	r3, r0, r1
 80093f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	4b8f      	ldr	r3, [pc, #572]	; (800963c <UART_SetConfig+0x2cc>)
 8009400:	429a      	cmp	r2, r3
 8009402:	d005      	beq.n	8009410 <UART_SetConfig+0xa0>
 8009404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4b8d      	ldr	r3, [pc, #564]	; (8009640 <UART_SetConfig+0x2d0>)
 800940c:	429a      	cmp	r2, r3
 800940e:	d104      	bne.n	800941a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009410:	f7fd fb62 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 8009414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009418:	e003      	b.n	8009422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800941a:	f7fd fb49 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 800941e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800942c:	f040 810c 	bne.w	8009648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009434:	2200      	movs	r2, #0
 8009436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800943a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800943e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009442:	4622      	mov	r2, r4
 8009444:	462b      	mov	r3, r5
 8009446:	1891      	adds	r1, r2, r2
 8009448:	65b9      	str	r1, [r7, #88]	; 0x58
 800944a:	415b      	adcs	r3, r3
 800944c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800944e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009452:	4621      	mov	r1, r4
 8009454:	eb12 0801 	adds.w	r8, r2, r1
 8009458:	4629      	mov	r1, r5
 800945a:	eb43 0901 	adc.w	r9, r3, r1
 800945e:	f04f 0200 	mov.w	r2, #0
 8009462:	f04f 0300 	mov.w	r3, #0
 8009466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800946a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800946e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009472:	4690      	mov	r8, r2
 8009474:	4699      	mov	r9, r3
 8009476:	4623      	mov	r3, r4
 8009478:	eb18 0303 	adds.w	r3, r8, r3
 800947c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009480:	462b      	mov	r3, r5
 8009482:	eb49 0303 	adc.w	r3, r9, r3
 8009486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800948a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800949a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800949e:	460b      	mov	r3, r1
 80094a0:	18db      	adds	r3, r3, r3
 80094a2:	653b      	str	r3, [r7, #80]	; 0x50
 80094a4:	4613      	mov	r3, r2
 80094a6:	eb42 0303 	adc.w	r3, r2, r3
 80094aa:	657b      	str	r3, [r7, #84]	; 0x54
 80094ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80094b4:	f7f7 fbf8 	bl	8000ca8 <__aeabi_uldivmod>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	4b61      	ldr	r3, [pc, #388]	; (8009644 <UART_SetConfig+0x2d4>)
 80094be:	fba3 2302 	umull	r2, r3, r3, r2
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	011c      	lsls	r4, r3, #4
 80094c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80094d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	1891      	adds	r1, r2, r2
 80094de:	64b9      	str	r1, [r7, #72]	; 0x48
 80094e0:	415b      	adcs	r3, r3
 80094e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094e8:	4641      	mov	r1, r8
 80094ea:	eb12 0a01 	adds.w	sl, r2, r1
 80094ee:	4649      	mov	r1, r9
 80094f0:	eb43 0b01 	adc.w	fp, r3, r1
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009508:	4692      	mov	sl, r2
 800950a:	469b      	mov	fp, r3
 800950c:	4643      	mov	r3, r8
 800950e:	eb1a 0303 	adds.w	r3, sl, r3
 8009512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009516:	464b      	mov	r3, r9
 8009518:	eb4b 0303 	adc.w	r3, fp, r3
 800951c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800952c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009534:	460b      	mov	r3, r1
 8009536:	18db      	adds	r3, r3, r3
 8009538:	643b      	str	r3, [r7, #64]	; 0x40
 800953a:	4613      	mov	r3, r2
 800953c:	eb42 0303 	adc.w	r3, r2, r3
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
 8009542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800954a:	f7f7 fbad 	bl	8000ca8 <__aeabi_uldivmod>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4611      	mov	r1, r2
 8009554:	4b3b      	ldr	r3, [pc, #236]	; (8009644 <UART_SetConfig+0x2d4>)
 8009556:	fba3 2301 	umull	r2, r3, r3, r1
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	2264      	movs	r2, #100	; 0x64
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	1acb      	subs	r3, r1, r3
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800956a:	4b36      	ldr	r3, [pc, #216]	; (8009644 <UART_SetConfig+0x2d4>)
 800956c:	fba3 2302 	umull	r2, r3, r3, r2
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009578:	441c      	add	r4, r3
 800957a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957e:	2200      	movs	r2, #0
 8009580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800958c:	4642      	mov	r2, r8
 800958e:	464b      	mov	r3, r9
 8009590:	1891      	adds	r1, r2, r2
 8009592:	63b9      	str	r1, [r7, #56]	; 0x38
 8009594:	415b      	adcs	r3, r3
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800959c:	4641      	mov	r1, r8
 800959e:	1851      	adds	r1, r2, r1
 80095a0:	6339      	str	r1, [r7, #48]	; 0x30
 80095a2:	4649      	mov	r1, r9
 80095a4:	414b      	adcs	r3, r1
 80095a6:	637b      	str	r3, [r7, #52]	; 0x34
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80095b4:	4659      	mov	r1, fp
 80095b6:	00cb      	lsls	r3, r1, #3
 80095b8:	4651      	mov	r1, sl
 80095ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095be:	4651      	mov	r1, sl
 80095c0:	00ca      	lsls	r2, r1, #3
 80095c2:	4610      	mov	r0, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	4642      	mov	r2, r8
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095d0:	464b      	mov	r3, r9
 80095d2:	460a      	mov	r2, r1
 80095d4:	eb42 0303 	adc.w	r3, r2, r3
 80095d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80095ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80095f0:	460b      	mov	r3, r1
 80095f2:	18db      	adds	r3, r3, r3
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f6:	4613      	mov	r3, r2
 80095f8:	eb42 0303 	adc.w	r3, r2, r3
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009606:	f7f7 fb4f 	bl	8000ca8 <__aeabi_uldivmod>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <UART_SetConfig+0x2d4>)
 8009610:	fba3 1302 	umull	r1, r3, r3, r2
 8009614:	095b      	lsrs	r3, r3, #5
 8009616:	2164      	movs	r1, #100	; 0x64
 8009618:	fb01 f303 	mul.w	r3, r1, r3
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	3332      	adds	r3, #50	; 0x32
 8009622:	4a08      	ldr	r2, [pc, #32]	; (8009644 <UART_SetConfig+0x2d4>)
 8009624:	fba2 2303 	umull	r2, r3, r2, r3
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	f003 0207 	and.w	r2, r3, #7
 800962e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4422      	add	r2, r4
 8009636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009638:	e105      	b.n	8009846 <UART_SetConfig+0x4d6>
 800963a:	bf00      	nop
 800963c:	40011000 	.word	0x40011000
 8009640:	40011400 	.word	0x40011400
 8009644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800964c:	2200      	movs	r2, #0
 800964e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800965a:	4642      	mov	r2, r8
 800965c:	464b      	mov	r3, r9
 800965e:	1891      	adds	r1, r2, r2
 8009660:	6239      	str	r1, [r7, #32]
 8009662:	415b      	adcs	r3, r3
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
 8009666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800966a:	4641      	mov	r1, r8
 800966c:	1854      	adds	r4, r2, r1
 800966e:	4649      	mov	r1, r9
 8009670:	eb43 0501 	adc.w	r5, r3, r1
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	00eb      	lsls	r3, r5, #3
 800967e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009682:	00e2      	lsls	r2, r4, #3
 8009684:	4614      	mov	r4, r2
 8009686:	461d      	mov	r5, r3
 8009688:	4643      	mov	r3, r8
 800968a:	18e3      	adds	r3, r4, r3
 800968c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009690:	464b      	mov	r3, r9
 8009692:	eb45 0303 	adc.w	r3, r5, r3
 8009696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800969a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80096b6:	4629      	mov	r1, r5
 80096b8:	008b      	lsls	r3, r1, #2
 80096ba:	4621      	mov	r1, r4
 80096bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096c0:	4621      	mov	r1, r4
 80096c2:	008a      	lsls	r2, r1, #2
 80096c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096c8:	f7f7 faee 	bl	8000ca8 <__aeabi_uldivmod>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4b60      	ldr	r3, [pc, #384]	; (8009854 <UART_SetConfig+0x4e4>)
 80096d2:	fba3 2302 	umull	r2, r3, r3, r2
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	011c      	lsls	r4, r3, #4
 80096da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80096ec:	4642      	mov	r2, r8
 80096ee:	464b      	mov	r3, r9
 80096f0:	1891      	adds	r1, r2, r2
 80096f2:	61b9      	str	r1, [r7, #24]
 80096f4:	415b      	adcs	r3, r3
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096fc:	4641      	mov	r1, r8
 80096fe:	1851      	adds	r1, r2, r1
 8009700:	6139      	str	r1, [r7, #16]
 8009702:	4649      	mov	r1, r9
 8009704:	414b      	adcs	r3, r1
 8009706:	617b      	str	r3, [r7, #20]
 8009708:	f04f 0200 	mov.w	r2, #0
 800970c:	f04f 0300 	mov.w	r3, #0
 8009710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009714:	4659      	mov	r1, fp
 8009716:	00cb      	lsls	r3, r1, #3
 8009718:	4651      	mov	r1, sl
 800971a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800971e:	4651      	mov	r1, sl
 8009720:	00ca      	lsls	r2, r1, #3
 8009722:	4610      	mov	r0, r2
 8009724:	4619      	mov	r1, r3
 8009726:	4603      	mov	r3, r0
 8009728:	4642      	mov	r2, r8
 800972a:	189b      	adds	r3, r3, r2
 800972c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009730:	464b      	mov	r3, r9
 8009732:	460a      	mov	r2, r1
 8009734:	eb42 0303 	adc.w	r3, r2, r3
 8009738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800973c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	67bb      	str	r3, [r7, #120]	; 0x78
 8009746:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009754:	4649      	mov	r1, r9
 8009756:	008b      	lsls	r3, r1, #2
 8009758:	4641      	mov	r1, r8
 800975a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800975e:	4641      	mov	r1, r8
 8009760:	008a      	lsls	r2, r1, #2
 8009762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009766:	f7f7 fa9f 	bl	8000ca8 <__aeabi_uldivmod>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4b39      	ldr	r3, [pc, #228]	; (8009854 <UART_SetConfig+0x4e4>)
 8009770:	fba3 1302 	umull	r1, r3, r3, r2
 8009774:	095b      	lsrs	r3, r3, #5
 8009776:	2164      	movs	r1, #100	; 0x64
 8009778:	fb01 f303 	mul.w	r3, r1, r3
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	3332      	adds	r3, #50	; 0x32
 8009782:	4a34      	ldr	r2, [pc, #208]	; (8009854 <UART_SetConfig+0x4e4>)
 8009784:	fba2 2303 	umull	r2, r3, r2, r3
 8009788:	095b      	lsrs	r3, r3, #5
 800978a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800978e:	441c      	add	r4, r3
 8009790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009794:	2200      	movs	r2, #0
 8009796:	673b      	str	r3, [r7, #112]	; 0x70
 8009798:	677a      	str	r2, [r7, #116]	; 0x74
 800979a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800979e:	4642      	mov	r2, r8
 80097a0:	464b      	mov	r3, r9
 80097a2:	1891      	adds	r1, r2, r2
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	415b      	adcs	r3, r3
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097ae:	4641      	mov	r1, r8
 80097b0:	1851      	adds	r1, r2, r1
 80097b2:	6039      	str	r1, [r7, #0]
 80097b4:	4649      	mov	r1, r9
 80097b6:	414b      	adcs	r3, r1
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	f04f 0200 	mov.w	r2, #0
 80097be:	f04f 0300 	mov.w	r3, #0
 80097c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097c6:	4659      	mov	r1, fp
 80097c8:	00cb      	lsls	r3, r1, #3
 80097ca:	4651      	mov	r1, sl
 80097cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097d0:	4651      	mov	r1, sl
 80097d2:	00ca      	lsls	r2, r1, #3
 80097d4:	4610      	mov	r0, r2
 80097d6:	4619      	mov	r1, r3
 80097d8:	4603      	mov	r3, r0
 80097da:	4642      	mov	r2, r8
 80097dc:	189b      	adds	r3, r3, r2
 80097de:	66bb      	str	r3, [r7, #104]	; 0x68
 80097e0:	464b      	mov	r3, r9
 80097e2:	460a      	mov	r2, r1
 80097e4:	eb42 0303 	adc.w	r3, r2, r3
 80097e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	663b      	str	r3, [r7, #96]	; 0x60
 80097f4:	667a      	str	r2, [r7, #100]	; 0x64
 80097f6:	f04f 0200 	mov.w	r2, #0
 80097fa:	f04f 0300 	mov.w	r3, #0
 80097fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009802:	4649      	mov	r1, r9
 8009804:	008b      	lsls	r3, r1, #2
 8009806:	4641      	mov	r1, r8
 8009808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800980c:	4641      	mov	r1, r8
 800980e:	008a      	lsls	r2, r1, #2
 8009810:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009814:	f7f7 fa48 	bl	8000ca8 <__aeabi_uldivmod>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <UART_SetConfig+0x4e4>)
 800981e:	fba3 1302 	umull	r1, r3, r3, r2
 8009822:	095b      	lsrs	r3, r3, #5
 8009824:	2164      	movs	r1, #100	; 0x64
 8009826:	fb01 f303 	mul.w	r3, r1, r3
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	011b      	lsls	r3, r3, #4
 800982e:	3332      	adds	r3, #50	; 0x32
 8009830:	4a08      	ldr	r2, [pc, #32]	; (8009854 <UART_SetConfig+0x4e4>)
 8009832:	fba2 2303 	umull	r2, r3, r2, r3
 8009836:	095b      	lsrs	r3, r3, #5
 8009838:	f003 020f 	and.w	r2, r3, #15
 800983c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4422      	add	r2, r4
 8009844:	609a      	str	r2, [r3, #8]
}
 8009846:	bf00      	nop
 8009848:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800984c:	46bd      	mov	sp, r7
 800984e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009852:	bf00      	nop
 8009854:	51eb851f 	.word	0x51eb851f

08009858 <__errno>:
 8009858:	4b01      	ldr	r3, [pc, #4]	; (8009860 <__errno+0x8>)
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	2000011c 	.word	0x2000011c

08009864 <__libc_init_array>:
 8009864:	b570      	push	{r4, r5, r6, lr}
 8009866:	4d0d      	ldr	r5, [pc, #52]	; (800989c <__libc_init_array+0x38>)
 8009868:	4c0d      	ldr	r4, [pc, #52]	; (80098a0 <__libc_init_array+0x3c>)
 800986a:	1b64      	subs	r4, r4, r5
 800986c:	10a4      	asrs	r4, r4, #2
 800986e:	2600      	movs	r6, #0
 8009870:	42a6      	cmp	r6, r4
 8009872:	d109      	bne.n	8009888 <__libc_init_array+0x24>
 8009874:	4d0b      	ldr	r5, [pc, #44]	; (80098a4 <__libc_init_array+0x40>)
 8009876:	4c0c      	ldr	r4, [pc, #48]	; (80098a8 <__libc_init_array+0x44>)
 8009878:	f002 fdc2 	bl	800c400 <_init>
 800987c:	1b64      	subs	r4, r4, r5
 800987e:	10a4      	asrs	r4, r4, #2
 8009880:	2600      	movs	r6, #0
 8009882:	42a6      	cmp	r6, r4
 8009884:	d105      	bne.n	8009892 <__libc_init_array+0x2e>
 8009886:	bd70      	pop	{r4, r5, r6, pc}
 8009888:	f855 3b04 	ldr.w	r3, [r5], #4
 800988c:	4798      	blx	r3
 800988e:	3601      	adds	r6, #1
 8009890:	e7ee      	b.n	8009870 <__libc_init_array+0xc>
 8009892:	f855 3b04 	ldr.w	r3, [r5], #4
 8009896:	4798      	blx	r3
 8009898:	3601      	adds	r6, #1
 800989a:	e7f2      	b.n	8009882 <__libc_init_array+0x1e>
 800989c:	0800d22c 	.word	0x0800d22c
 80098a0:	0800d22c 	.word	0x0800d22c
 80098a4:	0800d22c 	.word	0x0800d22c
 80098a8:	0800d230 	.word	0x0800d230

080098ac <memcpy>:
 80098ac:	440a      	add	r2, r1
 80098ae:	4291      	cmp	r1, r2
 80098b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098b4:	d100      	bne.n	80098b8 <memcpy+0xc>
 80098b6:	4770      	bx	lr
 80098b8:	b510      	push	{r4, lr}
 80098ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c2:	4291      	cmp	r1, r2
 80098c4:	d1f9      	bne.n	80098ba <memcpy+0xe>
 80098c6:	bd10      	pop	{r4, pc}

080098c8 <memset>:
 80098c8:	4402      	add	r2, r0
 80098ca:	4603      	mov	r3, r0
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d100      	bne.n	80098d2 <memset+0xa>
 80098d0:	4770      	bx	lr
 80098d2:	f803 1b01 	strb.w	r1, [r3], #1
 80098d6:	e7f9      	b.n	80098cc <memset+0x4>

080098d8 <__cvt>:
 80098d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	ec55 4b10 	vmov	r4, r5, d0
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	460e      	mov	r6, r1
 80098e4:	4619      	mov	r1, r3
 80098e6:	462b      	mov	r3, r5
 80098e8:	bfbb      	ittet	lt
 80098ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098ee:	461d      	movlt	r5, r3
 80098f0:	2300      	movge	r3, #0
 80098f2:	232d      	movlt	r3, #45	; 0x2d
 80098f4:	700b      	strb	r3, [r1, #0]
 80098f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098fc:	4691      	mov	r9, r2
 80098fe:	f023 0820 	bic.w	r8, r3, #32
 8009902:	bfbc      	itt	lt
 8009904:	4622      	movlt	r2, r4
 8009906:	4614      	movlt	r4, r2
 8009908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800990c:	d005      	beq.n	800991a <__cvt+0x42>
 800990e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009912:	d100      	bne.n	8009916 <__cvt+0x3e>
 8009914:	3601      	adds	r6, #1
 8009916:	2102      	movs	r1, #2
 8009918:	e000      	b.n	800991c <__cvt+0x44>
 800991a:	2103      	movs	r1, #3
 800991c:	ab03      	add	r3, sp, #12
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	ab02      	add	r3, sp, #8
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	ec45 4b10 	vmov	d0, r4, r5
 8009928:	4653      	mov	r3, sl
 800992a:	4632      	mov	r2, r6
 800992c:	f000 fe18 	bl	800a560 <_dtoa_r>
 8009930:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009934:	4607      	mov	r7, r0
 8009936:	d102      	bne.n	800993e <__cvt+0x66>
 8009938:	f019 0f01 	tst.w	r9, #1
 800993c:	d022      	beq.n	8009984 <__cvt+0xac>
 800993e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009942:	eb07 0906 	add.w	r9, r7, r6
 8009946:	d110      	bne.n	800996a <__cvt+0x92>
 8009948:	783b      	ldrb	r3, [r7, #0]
 800994a:	2b30      	cmp	r3, #48	; 0x30
 800994c:	d10a      	bne.n	8009964 <__cvt+0x8c>
 800994e:	2200      	movs	r2, #0
 8009950:	2300      	movs	r3, #0
 8009952:	4620      	mov	r0, r4
 8009954:	4629      	mov	r1, r5
 8009956:	f7f7 f8c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800995a:	b918      	cbnz	r0, 8009964 <__cvt+0x8c>
 800995c:	f1c6 0601 	rsb	r6, r6, #1
 8009960:	f8ca 6000 	str.w	r6, [sl]
 8009964:	f8da 3000 	ldr.w	r3, [sl]
 8009968:	4499      	add	r9, r3
 800996a:	2200      	movs	r2, #0
 800996c:	2300      	movs	r3, #0
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f7 f8b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009976:	b108      	cbz	r0, 800997c <__cvt+0xa4>
 8009978:	f8cd 900c 	str.w	r9, [sp, #12]
 800997c:	2230      	movs	r2, #48	; 0x30
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	454b      	cmp	r3, r9
 8009982:	d307      	bcc.n	8009994 <__cvt+0xbc>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009988:	1bdb      	subs	r3, r3, r7
 800998a:	4638      	mov	r0, r7
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	b004      	add	sp, #16
 8009990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009994:	1c59      	adds	r1, r3, #1
 8009996:	9103      	str	r1, [sp, #12]
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	e7f0      	b.n	800997e <__cvt+0xa6>

0800999c <__exponent>:
 800999c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800999e:	4603      	mov	r3, r0
 80099a0:	2900      	cmp	r1, #0
 80099a2:	bfb8      	it	lt
 80099a4:	4249      	neglt	r1, r1
 80099a6:	f803 2b02 	strb.w	r2, [r3], #2
 80099aa:	bfb4      	ite	lt
 80099ac:	222d      	movlt	r2, #45	; 0x2d
 80099ae:	222b      	movge	r2, #43	; 0x2b
 80099b0:	2909      	cmp	r1, #9
 80099b2:	7042      	strb	r2, [r0, #1]
 80099b4:	dd2a      	ble.n	8009a0c <__exponent+0x70>
 80099b6:	f10d 0407 	add.w	r4, sp, #7
 80099ba:	46a4      	mov	ip, r4
 80099bc:	270a      	movs	r7, #10
 80099be:	46a6      	mov	lr, r4
 80099c0:	460a      	mov	r2, r1
 80099c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80099c6:	fb07 1516 	mls	r5, r7, r6, r1
 80099ca:	3530      	adds	r5, #48	; 0x30
 80099cc:	2a63      	cmp	r2, #99	; 0x63
 80099ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80099d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80099d6:	4631      	mov	r1, r6
 80099d8:	dcf1      	bgt.n	80099be <__exponent+0x22>
 80099da:	3130      	adds	r1, #48	; 0x30
 80099dc:	f1ae 0502 	sub.w	r5, lr, #2
 80099e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80099e4:	1c44      	adds	r4, r0, #1
 80099e6:	4629      	mov	r1, r5
 80099e8:	4561      	cmp	r1, ip
 80099ea:	d30a      	bcc.n	8009a02 <__exponent+0x66>
 80099ec:	f10d 0209 	add.w	r2, sp, #9
 80099f0:	eba2 020e 	sub.w	r2, r2, lr
 80099f4:	4565      	cmp	r5, ip
 80099f6:	bf88      	it	hi
 80099f8:	2200      	movhi	r2, #0
 80099fa:	4413      	add	r3, r2
 80099fc:	1a18      	subs	r0, r3, r0
 80099fe:	b003      	add	sp, #12
 8009a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a0a:	e7ed      	b.n	80099e8 <__exponent+0x4c>
 8009a0c:	2330      	movs	r3, #48	; 0x30
 8009a0e:	3130      	adds	r1, #48	; 0x30
 8009a10:	7083      	strb	r3, [r0, #2]
 8009a12:	70c1      	strb	r1, [r0, #3]
 8009a14:	1d03      	adds	r3, r0, #4
 8009a16:	e7f1      	b.n	80099fc <__exponent+0x60>

08009a18 <_printf_float>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	ed2d 8b02 	vpush	{d8}
 8009a20:	b08d      	sub	sp, #52	; 0x34
 8009a22:	460c      	mov	r4, r1
 8009a24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a28:	4616      	mov	r6, r2
 8009a2a:	461f      	mov	r7, r3
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	f001 fd3d 	bl	800b4ac <_localeconv_r>
 8009a32:	f8d0 a000 	ldr.w	sl, [r0]
 8009a36:	4650      	mov	r0, sl
 8009a38:	f7f6 fbda 	bl	80001f0 <strlen>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	9305      	str	r3, [sp, #20]
 8009a44:	f8d8 3000 	ldr.w	r3, [r8]
 8009a48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a4c:	3307      	adds	r3, #7
 8009a4e:	f023 0307 	bic.w	r3, r3, #7
 8009a52:	f103 0208 	add.w	r2, r3, #8
 8009a56:	f8c8 2000 	str.w	r2, [r8]
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a6a:	9307      	str	r3, [sp, #28]
 8009a6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a70:	ee08 0a10 	vmov	s16, r0
 8009a74:	4b9f      	ldr	r3, [pc, #636]	; (8009cf4 <_printf_float+0x2dc>)
 8009a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7e:	f7f7 f865 	bl	8000b4c <__aeabi_dcmpun>
 8009a82:	bb88      	cbnz	r0, 8009ae8 <_printf_float+0xd0>
 8009a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a88:	4b9a      	ldr	r3, [pc, #616]	; (8009cf4 <_printf_float+0x2dc>)
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8e:	f7f7 f83f 	bl	8000b10 <__aeabi_dcmple>
 8009a92:	bb48      	cbnz	r0, 8009ae8 <_printf_float+0xd0>
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	4640      	mov	r0, r8
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	f7f7 f82e 	bl	8000afc <__aeabi_dcmplt>
 8009aa0:	b110      	cbz	r0, 8009aa8 <_printf_float+0x90>
 8009aa2:	232d      	movs	r3, #45	; 0x2d
 8009aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa8:	4b93      	ldr	r3, [pc, #588]	; (8009cf8 <_printf_float+0x2e0>)
 8009aaa:	4894      	ldr	r0, [pc, #592]	; (8009cfc <_printf_float+0x2e4>)
 8009aac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ab0:	bf94      	ite	ls
 8009ab2:	4698      	movls	r8, r3
 8009ab4:	4680      	movhi	r8, r0
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	9b05      	ldr	r3, [sp, #20]
 8009abc:	f023 0204 	bic.w	r2, r3, #4
 8009ac0:	6022      	str	r2, [r4, #0]
 8009ac2:	f04f 0900 	mov.w	r9, #0
 8009ac6:	9700      	str	r7, [sp, #0]
 8009ac8:	4633      	mov	r3, r6
 8009aca:	aa0b      	add	r2, sp, #44	; 0x2c
 8009acc:	4621      	mov	r1, r4
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f000 f9d8 	bl	8009e84 <_printf_common>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f040 8090 	bne.w	8009bfa <_printf_float+0x1e2>
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	b00d      	add	sp, #52	; 0x34
 8009ae0:	ecbd 8b02 	vpop	{d8}
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	4642      	mov	r2, r8
 8009aea:	464b      	mov	r3, r9
 8009aec:	4640      	mov	r0, r8
 8009aee:	4649      	mov	r1, r9
 8009af0:	f7f7 f82c 	bl	8000b4c <__aeabi_dcmpun>
 8009af4:	b140      	cbz	r0, 8009b08 <_printf_float+0xf0>
 8009af6:	464b      	mov	r3, r9
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bfbc      	itt	lt
 8009afc:	232d      	movlt	r3, #45	; 0x2d
 8009afe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b02:	487f      	ldr	r0, [pc, #508]	; (8009d00 <_printf_float+0x2e8>)
 8009b04:	4b7f      	ldr	r3, [pc, #508]	; (8009d04 <_printf_float+0x2ec>)
 8009b06:	e7d1      	b.n	8009aac <_printf_float+0x94>
 8009b08:	6863      	ldr	r3, [r4, #4]
 8009b0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b0e:	9206      	str	r2, [sp, #24]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	d13f      	bne.n	8009b94 <_printf_float+0x17c>
 8009b14:	2306      	movs	r3, #6
 8009b16:	6063      	str	r3, [r4, #4]
 8009b18:	9b05      	ldr	r3, [sp, #20]
 8009b1a:	6861      	ldr	r1, [r4, #4]
 8009b1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b20:	2300      	movs	r3, #0
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	ab0a      	add	r3, sp, #40	; 0x28
 8009b26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b2a:	ab09      	add	r3, sp, #36	; 0x24
 8009b2c:	ec49 8b10 	vmov	d0, r8, r9
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f7ff fecd 	bl	80098d8 <__cvt>
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b42:	2b47      	cmp	r3, #71	; 0x47
 8009b44:	4680      	mov	r8, r0
 8009b46:	d108      	bne.n	8009b5a <_printf_float+0x142>
 8009b48:	1cc8      	adds	r0, r1, #3
 8009b4a:	db02      	blt.n	8009b52 <_printf_float+0x13a>
 8009b4c:	6863      	ldr	r3, [r4, #4]
 8009b4e:	4299      	cmp	r1, r3
 8009b50:	dd41      	ble.n	8009bd6 <_printf_float+0x1be>
 8009b52:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b56:	fa5f fb8b 	uxtb.w	fp, fp
 8009b5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b5e:	d820      	bhi.n	8009ba2 <_printf_float+0x18a>
 8009b60:	3901      	subs	r1, #1
 8009b62:	465a      	mov	r2, fp
 8009b64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b68:	9109      	str	r1, [sp, #36]	; 0x24
 8009b6a:	f7ff ff17 	bl	800999c <__exponent>
 8009b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b70:	1813      	adds	r3, r2, r0
 8009b72:	2a01      	cmp	r2, #1
 8009b74:	4681      	mov	r9, r0
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	dc02      	bgt.n	8009b80 <_printf_float+0x168>
 8009b7a:	6822      	ldr	r2, [r4, #0]
 8009b7c:	07d2      	lsls	r2, r2, #31
 8009b7e:	d501      	bpl.n	8009b84 <_printf_float+0x16c>
 8009b80:	3301      	adds	r3, #1
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d09c      	beq.n	8009ac6 <_printf_float+0xae>
 8009b8c:	232d      	movs	r3, #45	; 0x2d
 8009b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b92:	e798      	b.n	8009ac6 <_printf_float+0xae>
 8009b94:	9a06      	ldr	r2, [sp, #24]
 8009b96:	2a47      	cmp	r2, #71	; 0x47
 8009b98:	d1be      	bne.n	8009b18 <_printf_float+0x100>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1bc      	bne.n	8009b18 <_printf_float+0x100>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e7b9      	b.n	8009b16 <_printf_float+0xfe>
 8009ba2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ba6:	d118      	bne.n	8009bda <_printf_float+0x1c2>
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	6863      	ldr	r3, [r4, #4]
 8009bac:	dd0b      	ble.n	8009bc6 <_printf_float+0x1ae>
 8009bae:	6121      	str	r1, [r4, #16]
 8009bb0:	b913      	cbnz	r3, 8009bb8 <_printf_float+0x1a0>
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	07d0      	lsls	r0, r2, #31
 8009bb6:	d502      	bpl.n	8009bbe <_printf_float+0x1a6>
 8009bb8:	3301      	adds	r3, #1
 8009bba:	440b      	add	r3, r1
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009bc0:	f04f 0900 	mov.w	r9, #0
 8009bc4:	e7de      	b.n	8009b84 <_printf_float+0x16c>
 8009bc6:	b913      	cbnz	r3, 8009bce <_printf_float+0x1b6>
 8009bc8:	6822      	ldr	r2, [r4, #0]
 8009bca:	07d2      	lsls	r2, r2, #31
 8009bcc:	d501      	bpl.n	8009bd2 <_printf_float+0x1ba>
 8009bce:	3302      	adds	r3, #2
 8009bd0:	e7f4      	b.n	8009bbc <_printf_float+0x1a4>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e7f2      	b.n	8009bbc <_printf_float+0x1a4>
 8009bd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bdc:	4299      	cmp	r1, r3
 8009bde:	db05      	blt.n	8009bec <_printf_float+0x1d4>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	6121      	str	r1, [r4, #16]
 8009be4:	07d8      	lsls	r0, r3, #31
 8009be6:	d5ea      	bpl.n	8009bbe <_printf_float+0x1a6>
 8009be8:	1c4b      	adds	r3, r1, #1
 8009bea:	e7e7      	b.n	8009bbc <_printf_float+0x1a4>
 8009bec:	2900      	cmp	r1, #0
 8009bee:	bfd4      	ite	le
 8009bf0:	f1c1 0202 	rsble	r2, r1, #2
 8009bf4:	2201      	movgt	r2, #1
 8009bf6:	4413      	add	r3, r2
 8009bf8:	e7e0      	b.n	8009bbc <_printf_float+0x1a4>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	055a      	lsls	r2, r3, #21
 8009bfe:	d407      	bmi.n	8009c10 <_printf_float+0x1f8>
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	4642      	mov	r2, r8
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	47b8      	blx	r7
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d12c      	bne.n	8009c68 <_printf_float+0x250>
 8009c0e:	e764      	b.n	8009ada <_printf_float+0xc2>
 8009c10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c14:	f240 80e0 	bls.w	8009dd8 <_printf_float+0x3c0>
 8009c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f7f6 ff62 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d034      	beq.n	8009c92 <_printf_float+0x27a>
 8009c28:	4a37      	ldr	r2, [pc, #220]	; (8009d08 <_printf_float+0x2f0>)
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	f43f af51 	beq.w	8009ada <_printf_float+0xc2>
 8009c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	db02      	blt.n	8009c46 <_printf_float+0x22e>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	07d8      	lsls	r0, r3, #31
 8009c44:	d510      	bpl.n	8009c68 <_printf_float+0x250>
 8009c46:	ee18 3a10 	vmov	r3, s16
 8009c4a:	4652      	mov	r2, sl
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f af41 	beq.w	8009ada <_printf_float+0xc2>
 8009c58:	f04f 0800 	mov.w	r8, #0
 8009c5c:	f104 091a 	add.w	r9, r4, #26
 8009c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c62:	3b01      	subs	r3, #1
 8009c64:	4543      	cmp	r3, r8
 8009c66:	dc09      	bgt.n	8009c7c <_printf_float+0x264>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	079b      	lsls	r3, r3, #30
 8009c6c:	f100 8105 	bmi.w	8009e7a <_printf_float+0x462>
 8009c70:	68e0      	ldr	r0, [r4, #12]
 8009c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c74:	4298      	cmp	r0, r3
 8009c76:	bfb8      	it	lt
 8009c78:	4618      	movlt	r0, r3
 8009c7a:	e730      	b.n	8009ade <_printf_float+0xc6>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	464a      	mov	r2, r9
 8009c80:	4631      	mov	r1, r6
 8009c82:	4628      	mov	r0, r5
 8009c84:	47b8      	blx	r7
 8009c86:	3001      	adds	r0, #1
 8009c88:	f43f af27 	beq.w	8009ada <_printf_float+0xc2>
 8009c8c:	f108 0801 	add.w	r8, r8, #1
 8009c90:	e7e6      	b.n	8009c60 <_printf_float+0x248>
 8009c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dc39      	bgt.n	8009d0c <_printf_float+0x2f4>
 8009c98:	4a1b      	ldr	r2, [pc, #108]	; (8009d08 <_printf_float+0x2f0>)
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	f43f af19 	beq.w	8009ada <_printf_float+0xc2>
 8009ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cac:	4313      	orrs	r3, r2
 8009cae:	d102      	bne.n	8009cb6 <_printf_float+0x29e>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	07d9      	lsls	r1, r3, #31
 8009cb4:	d5d8      	bpl.n	8009c68 <_printf_float+0x250>
 8009cb6:	ee18 3a10 	vmov	r3, s16
 8009cba:	4652      	mov	r2, sl
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	47b8      	blx	r7
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	f43f af09 	beq.w	8009ada <_printf_float+0xc2>
 8009cc8:	f04f 0900 	mov.w	r9, #0
 8009ccc:	f104 0a1a 	add.w	sl, r4, #26
 8009cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd2:	425b      	negs	r3, r3
 8009cd4:	454b      	cmp	r3, r9
 8009cd6:	dc01      	bgt.n	8009cdc <_printf_float+0x2c4>
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cda:	e792      	b.n	8009c02 <_printf_float+0x1ea>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	4652      	mov	r2, sl
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	f43f aef7 	beq.w	8009ada <_printf_float+0xc2>
 8009cec:	f109 0901 	add.w	r9, r9, #1
 8009cf0:	e7ee      	b.n	8009cd0 <_printf_float+0x2b8>
 8009cf2:	bf00      	nop
 8009cf4:	7fefffff 	.word	0x7fefffff
 8009cf8:	0800ce50 	.word	0x0800ce50
 8009cfc:	0800ce54 	.word	0x0800ce54
 8009d00:	0800ce5c 	.word	0x0800ce5c
 8009d04:	0800ce58 	.word	0x0800ce58
 8009d08:	0800ce60 	.word	0x0800ce60
 8009d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d10:	429a      	cmp	r2, r3
 8009d12:	bfa8      	it	ge
 8009d14:	461a      	movge	r2, r3
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	4691      	mov	r9, r2
 8009d1a:	dc37      	bgt.n	8009d8c <_printf_float+0x374>
 8009d1c:	f04f 0b00 	mov.w	fp, #0
 8009d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d24:	f104 021a 	add.w	r2, r4, #26
 8009d28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d2a:	9305      	str	r3, [sp, #20]
 8009d2c:	eba3 0309 	sub.w	r3, r3, r9
 8009d30:	455b      	cmp	r3, fp
 8009d32:	dc33      	bgt.n	8009d9c <_printf_float+0x384>
 8009d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	db3b      	blt.n	8009db4 <_printf_float+0x39c>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	07da      	lsls	r2, r3, #31
 8009d40:	d438      	bmi.n	8009db4 <_printf_float+0x39c>
 8009d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d44:	9a05      	ldr	r2, [sp, #20]
 8009d46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d48:	1a9a      	subs	r2, r3, r2
 8009d4a:	eba3 0901 	sub.w	r9, r3, r1
 8009d4e:	4591      	cmp	r9, r2
 8009d50:	bfa8      	it	ge
 8009d52:	4691      	movge	r9, r2
 8009d54:	f1b9 0f00 	cmp.w	r9, #0
 8009d58:	dc35      	bgt.n	8009dc6 <_printf_float+0x3ae>
 8009d5a:	f04f 0800 	mov.w	r8, #0
 8009d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d62:	f104 0a1a 	add.w	sl, r4, #26
 8009d66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	eba3 0309 	sub.w	r3, r3, r9
 8009d70:	4543      	cmp	r3, r8
 8009d72:	f77f af79 	ble.w	8009c68 <_printf_float+0x250>
 8009d76:	2301      	movs	r3, #1
 8009d78:	4652      	mov	r2, sl
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b8      	blx	r7
 8009d80:	3001      	adds	r0, #1
 8009d82:	f43f aeaa 	beq.w	8009ada <_printf_float+0xc2>
 8009d86:	f108 0801 	add.w	r8, r8, #1
 8009d8a:	e7ec      	b.n	8009d66 <_printf_float+0x34e>
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4642      	mov	r2, r8
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b8      	blx	r7
 8009d96:	3001      	adds	r0, #1
 8009d98:	d1c0      	bne.n	8009d1c <_printf_float+0x304>
 8009d9a:	e69e      	b.n	8009ada <_printf_float+0xc2>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	9205      	str	r2, [sp, #20]
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f ae97 	beq.w	8009ada <_printf_float+0xc2>
 8009dac:	9a05      	ldr	r2, [sp, #20]
 8009dae:	f10b 0b01 	add.w	fp, fp, #1
 8009db2:	e7b9      	b.n	8009d28 <_printf_float+0x310>
 8009db4:	ee18 3a10 	vmov	r3, s16
 8009db8:	4652      	mov	r2, sl
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d1be      	bne.n	8009d42 <_printf_float+0x32a>
 8009dc4:	e689      	b.n	8009ada <_printf_float+0xc2>
 8009dc6:	9a05      	ldr	r2, [sp, #20]
 8009dc8:	464b      	mov	r3, r9
 8009dca:	4442      	add	r2, r8
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d1c1      	bne.n	8009d5a <_printf_float+0x342>
 8009dd6:	e680      	b.n	8009ada <_printf_float+0xc2>
 8009dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dda:	2a01      	cmp	r2, #1
 8009ddc:	dc01      	bgt.n	8009de2 <_printf_float+0x3ca>
 8009dde:	07db      	lsls	r3, r3, #31
 8009de0:	d538      	bpl.n	8009e54 <_printf_float+0x43c>
 8009de2:	2301      	movs	r3, #1
 8009de4:	4642      	mov	r2, r8
 8009de6:	4631      	mov	r1, r6
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b8      	blx	r7
 8009dec:	3001      	adds	r0, #1
 8009dee:	f43f ae74 	beq.w	8009ada <_printf_float+0xc2>
 8009df2:	ee18 3a10 	vmov	r3, s16
 8009df6:	4652      	mov	r2, sl
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f ae6b 	beq.w	8009ada <_printf_float+0xc2>
 8009e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f7f6 fe6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e10:	b9d8      	cbnz	r0, 8009e4a <_printf_float+0x432>
 8009e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e14:	f108 0201 	add.w	r2, r8, #1
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b8      	blx	r7
 8009e20:	3001      	adds	r0, #1
 8009e22:	d10e      	bne.n	8009e42 <_printf_float+0x42a>
 8009e24:	e659      	b.n	8009ada <_printf_float+0xc2>
 8009e26:	2301      	movs	r3, #1
 8009e28:	4652      	mov	r2, sl
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	f43f ae52 	beq.w	8009ada <_printf_float+0xc2>
 8009e36:	f108 0801 	add.w	r8, r8, #1
 8009e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	4543      	cmp	r3, r8
 8009e40:	dcf1      	bgt.n	8009e26 <_printf_float+0x40e>
 8009e42:	464b      	mov	r3, r9
 8009e44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e48:	e6dc      	b.n	8009c04 <_printf_float+0x1ec>
 8009e4a:	f04f 0800 	mov.w	r8, #0
 8009e4e:	f104 0a1a 	add.w	sl, r4, #26
 8009e52:	e7f2      	b.n	8009e3a <_printf_float+0x422>
 8009e54:	2301      	movs	r3, #1
 8009e56:	4642      	mov	r2, r8
 8009e58:	e7df      	b.n	8009e1a <_printf_float+0x402>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	464a      	mov	r2, r9
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	f43f ae38 	beq.w	8009ada <_printf_float+0xc2>
 8009e6a:	f108 0801 	add.w	r8, r8, #1
 8009e6e:	68e3      	ldr	r3, [r4, #12]
 8009e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e72:	1a5b      	subs	r3, r3, r1
 8009e74:	4543      	cmp	r3, r8
 8009e76:	dcf0      	bgt.n	8009e5a <_printf_float+0x442>
 8009e78:	e6fa      	b.n	8009c70 <_printf_float+0x258>
 8009e7a:	f04f 0800 	mov.w	r8, #0
 8009e7e:	f104 0919 	add.w	r9, r4, #25
 8009e82:	e7f4      	b.n	8009e6e <_printf_float+0x456>

08009e84 <_printf_common>:
 8009e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	4616      	mov	r6, r2
 8009e8a:	4699      	mov	r9, r3
 8009e8c:	688a      	ldr	r2, [r1, #8]
 8009e8e:	690b      	ldr	r3, [r1, #16]
 8009e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e94:	4293      	cmp	r3, r2
 8009e96:	bfb8      	it	lt
 8009e98:	4613      	movlt	r3, r2
 8009e9a:	6033      	str	r3, [r6, #0]
 8009e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	b10a      	cbz	r2, 8009eaa <_printf_common+0x26>
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	0699      	lsls	r1, r3, #26
 8009eae:	bf42      	ittt	mi
 8009eb0:	6833      	ldrmi	r3, [r6, #0]
 8009eb2:	3302      	addmi	r3, #2
 8009eb4:	6033      	strmi	r3, [r6, #0]
 8009eb6:	6825      	ldr	r5, [r4, #0]
 8009eb8:	f015 0506 	ands.w	r5, r5, #6
 8009ebc:	d106      	bne.n	8009ecc <_printf_common+0x48>
 8009ebe:	f104 0a19 	add.w	sl, r4, #25
 8009ec2:	68e3      	ldr	r3, [r4, #12]
 8009ec4:	6832      	ldr	r2, [r6, #0]
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	42ab      	cmp	r3, r5
 8009eca:	dc26      	bgt.n	8009f1a <_printf_common+0x96>
 8009ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ed0:	1e13      	subs	r3, r2, #0
 8009ed2:	6822      	ldr	r2, [r4, #0]
 8009ed4:	bf18      	it	ne
 8009ed6:	2301      	movne	r3, #1
 8009ed8:	0692      	lsls	r2, r2, #26
 8009eda:	d42b      	bmi.n	8009f34 <_printf_common+0xb0>
 8009edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c0      	blx	r8
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d01e      	beq.n	8009f28 <_printf_common+0xa4>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	68e5      	ldr	r5, [r4, #12]
 8009eee:	6832      	ldr	r2, [r6, #0]
 8009ef0:	f003 0306 	and.w	r3, r3, #6
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	bf08      	it	eq
 8009ef8:	1aad      	subeq	r5, r5, r2
 8009efa:	68a3      	ldr	r3, [r4, #8]
 8009efc:	6922      	ldr	r2, [r4, #16]
 8009efe:	bf0c      	ite	eq
 8009f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f04:	2500      	movne	r5, #0
 8009f06:	4293      	cmp	r3, r2
 8009f08:	bfc4      	itt	gt
 8009f0a:	1a9b      	subgt	r3, r3, r2
 8009f0c:	18ed      	addgt	r5, r5, r3
 8009f0e:	2600      	movs	r6, #0
 8009f10:	341a      	adds	r4, #26
 8009f12:	42b5      	cmp	r5, r6
 8009f14:	d11a      	bne.n	8009f4c <_printf_common+0xc8>
 8009f16:	2000      	movs	r0, #0
 8009f18:	e008      	b.n	8009f2c <_printf_common+0xa8>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4652      	mov	r2, sl
 8009f1e:	4649      	mov	r1, r9
 8009f20:	4638      	mov	r0, r7
 8009f22:	47c0      	blx	r8
 8009f24:	3001      	adds	r0, #1
 8009f26:	d103      	bne.n	8009f30 <_printf_common+0xac>
 8009f28:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f30:	3501      	adds	r5, #1
 8009f32:	e7c6      	b.n	8009ec2 <_printf_common+0x3e>
 8009f34:	18e1      	adds	r1, r4, r3
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	2030      	movs	r0, #48	; 0x30
 8009f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f3e:	4422      	add	r2, r4
 8009f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f48:	3302      	adds	r3, #2
 8009f4a:	e7c7      	b.n	8009edc <_printf_common+0x58>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4622      	mov	r2, r4
 8009f50:	4649      	mov	r1, r9
 8009f52:	4638      	mov	r0, r7
 8009f54:	47c0      	blx	r8
 8009f56:	3001      	adds	r0, #1
 8009f58:	d0e6      	beq.n	8009f28 <_printf_common+0xa4>
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	e7d9      	b.n	8009f12 <_printf_common+0x8e>
	...

08009f60 <_printf_i>:
 8009f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	7e0f      	ldrb	r7, [r1, #24]
 8009f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f68:	2f78      	cmp	r7, #120	; 0x78
 8009f6a:	4691      	mov	r9, r2
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	469a      	mov	sl, r3
 8009f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f76:	d807      	bhi.n	8009f88 <_printf_i+0x28>
 8009f78:	2f62      	cmp	r7, #98	; 0x62
 8009f7a:	d80a      	bhi.n	8009f92 <_printf_i+0x32>
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	f000 80d8 	beq.w	800a132 <_printf_i+0x1d2>
 8009f82:	2f58      	cmp	r7, #88	; 0x58
 8009f84:	f000 80a3 	beq.w	800a0ce <_printf_i+0x16e>
 8009f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f90:	e03a      	b.n	800a008 <_printf_i+0xa8>
 8009f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f96:	2b15      	cmp	r3, #21
 8009f98:	d8f6      	bhi.n	8009f88 <_printf_i+0x28>
 8009f9a:	a101      	add	r1, pc, #4	; (adr r1, 8009fa0 <_printf_i+0x40>)
 8009f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fa0:	08009ff9 	.word	0x08009ff9
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	08009f89 	.word	0x08009f89
 8009fac:	08009f89 	.word	0x08009f89
 8009fb0:	08009f89 	.word	0x08009f89
 8009fb4:	08009f89 	.word	0x08009f89
 8009fb8:	0800a00d 	.word	0x0800a00d
 8009fbc:	08009f89 	.word	0x08009f89
 8009fc0:	08009f89 	.word	0x08009f89
 8009fc4:	08009f89 	.word	0x08009f89
 8009fc8:	08009f89 	.word	0x08009f89
 8009fcc:	0800a119 	.word	0x0800a119
 8009fd0:	0800a03d 	.word	0x0800a03d
 8009fd4:	0800a0fb 	.word	0x0800a0fb
 8009fd8:	08009f89 	.word	0x08009f89
 8009fdc:	08009f89 	.word	0x08009f89
 8009fe0:	0800a13b 	.word	0x0800a13b
 8009fe4:	08009f89 	.word	0x08009f89
 8009fe8:	0800a03d 	.word	0x0800a03d
 8009fec:	08009f89 	.word	0x08009f89
 8009ff0:	08009f89 	.word	0x08009f89
 8009ff4:	0800a103 	.word	0x0800a103
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	602a      	str	r2, [r5, #0]
 800a000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a008:	2301      	movs	r3, #1
 800a00a:	e0a3      	b.n	800a154 <_printf_i+0x1f4>
 800a00c:	6820      	ldr	r0, [r4, #0]
 800a00e:	6829      	ldr	r1, [r5, #0]
 800a010:	0606      	lsls	r6, r0, #24
 800a012:	f101 0304 	add.w	r3, r1, #4
 800a016:	d50a      	bpl.n	800a02e <_printf_i+0xce>
 800a018:	680e      	ldr	r6, [r1, #0]
 800a01a:	602b      	str	r3, [r5, #0]
 800a01c:	2e00      	cmp	r6, #0
 800a01e:	da03      	bge.n	800a028 <_printf_i+0xc8>
 800a020:	232d      	movs	r3, #45	; 0x2d
 800a022:	4276      	negs	r6, r6
 800a024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a028:	485e      	ldr	r0, [pc, #376]	; (800a1a4 <_printf_i+0x244>)
 800a02a:	230a      	movs	r3, #10
 800a02c:	e019      	b.n	800a062 <_printf_i+0x102>
 800a02e:	680e      	ldr	r6, [r1, #0]
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a036:	bf18      	it	ne
 800a038:	b236      	sxthne	r6, r6
 800a03a:	e7ef      	b.n	800a01c <_printf_i+0xbc>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	6820      	ldr	r0, [r4, #0]
 800a040:	1d19      	adds	r1, r3, #4
 800a042:	6029      	str	r1, [r5, #0]
 800a044:	0601      	lsls	r1, r0, #24
 800a046:	d501      	bpl.n	800a04c <_printf_i+0xec>
 800a048:	681e      	ldr	r6, [r3, #0]
 800a04a:	e002      	b.n	800a052 <_printf_i+0xf2>
 800a04c:	0646      	lsls	r6, r0, #25
 800a04e:	d5fb      	bpl.n	800a048 <_printf_i+0xe8>
 800a050:	881e      	ldrh	r6, [r3, #0]
 800a052:	4854      	ldr	r0, [pc, #336]	; (800a1a4 <_printf_i+0x244>)
 800a054:	2f6f      	cmp	r7, #111	; 0x6f
 800a056:	bf0c      	ite	eq
 800a058:	2308      	moveq	r3, #8
 800a05a:	230a      	movne	r3, #10
 800a05c:	2100      	movs	r1, #0
 800a05e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a062:	6865      	ldr	r5, [r4, #4]
 800a064:	60a5      	str	r5, [r4, #8]
 800a066:	2d00      	cmp	r5, #0
 800a068:	bfa2      	ittt	ge
 800a06a:	6821      	ldrge	r1, [r4, #0]
 800a06c:	f021 0104 	bicge.w	r1, r1, #4
 800a070:	6021      	strge	r1, [r4, #0]
 800a072:	b90e      	cbnz	r6, 800a078 <_printf_i+0x118>
 800a074:	2d00      	cmp	r5, #0
 800a076:	d04d      	beq.n	800a114 <_printf_i+0x1b4>
 800a078:	4615      	mov	r5, r2
 800a07a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a07e:	fb03 6711 	mls	r7, r3, r1, r6
 800a082:	5dc7      	ldrb	r7, [r0, r7]
 800a084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a088:	4637      	mov	r7, r6
 800a08a:	42bb      	cmp	r3, r7
 800a08c:	460e      	mov	r6, r1
 800a08e:	d9f4      	bls.n	800a07a <_printf_i+0x11a>
 800a090:	2b08      	cmp	r3, #8
 800a092:	d10b      	bne.n	800a0ac <_printf_i+0x14c>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	07de      	lsls	r6, r3, #31
 800a098:	d508      	bpl.n	800a0ac <_printf_i+0x14c>
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	6861      	ldr	r1, [r4, #4]
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	bfde      	ittt	le
 800a0a2:	2330      	movle	r3, #48	; 0x30
 800a0a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0ac:	1b52      	subs	r2, r2, r5
 800a0ae:	6122      	str	r2, [r4, #16]
 800a0b0:	f8cd a000 	str.w	sl, [sp]
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	aa03      	add	r2, sp, #12
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f7ff fee2 	bl	8009e84 <_printf_common>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d14c      	bne.n	800a15e <_printf_i+0x1fe>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	b004      	add	sp, #16
 800a0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ce:	4835      	ldr	r0, [pc, #212]	; (800a1a4 <_printf_i+0x244>)
 800a0d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0d4:	6829      	ldr	r1, [r5, #0]
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0dc:	6029      	str	r1, [r5, #0]
 800a0de:	061d      	lsls	r5, r3, #24
 800a0e0:	d514      	bpl.n	800a10c <_printf_i+0x1ac>
 800a0e2:	07df      	lsls	r7, r3, #31
 800a0e4:	bf44      	itt	mi
 800a0e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0ea:	6023      	strmi	r3, [r4, #0]
 800a0ec:	b91e      	cbnz	r6, 800a0f6 <_printf_i+0x196>
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	f023 0320 	bic.w	r3, r3, #32
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	2310      	movs	r3, #16
 800a0f8:	e7b0      	b.n	800a05c <_printf_i+0xfc>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	f043 0320 	orr.w	r3, r3, #32
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	2378      	movs	r3, #120	; 0x78
 800a104:	4828      	ldr	r0, [pc, #160]	; (800a1a8 <_printf_i+0x248>)
 800a106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a10a:	e7e3      	b.n	800a0d4 <_printf_i+0x174>
 800a10c:	0659      	lsls	r1, r3, #25
 800a10e:	bf48      	it	mi
 800a110:	b2b6      	uxthmi	r6, r6
 800a112:	e7e6      	b.n	800a0e2 <_printf_i+0x182>
 800a114:	4615      	mov	r5, r2
 800a116:	e7bb      	b.n	800a090 <_printf_i+0x130>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	6826      	ldr	r6, [r4, #0]
 800a11c:	6961      	ldr	r1, [r4, #20]
 800a11e:	1d18      	adds	r0, r3, #4
 800a120:	6028      	str	r0, [r5, #0]
 800a122:	0635      	lsls	r5, r6, #24
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	d501      	bpl.n	800a12c <_printf_i+0x1cc>
 800a128:	6019      	str	r1, [r3, #0]
 800a12a:	e002      	b.n	800a132 <_printf_i+0x1d2>
 800a12c:	0670      	lsls	r0, r6, #25
 800a12e:	d5fb      	bpl.n	800a128 <_printf_i+0x1c8>
 800a130:	8019      	strh	r1, [r3, #0]
 800a132:	2300      	movs	r3, #0
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	4615      	mov	r5, r2
 800a138:	e7ba      	b.n	800a0b0 <_printf_i+0x150>
 800a13a:	682b      	ldr	r3, [r5, #0]
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	602a      	str	r2, [r5, #0]
 800a140:	681d      	ldr	r5, [r3, #0]
 800a142:	6862      	ldr	r2, [r4, #4]
 800a144:	2100      	movs	r1, #0
 800a146:	4628      	mov	r0, r5
 800a148:	f7f6 f85a 	bl	8000200 <memchr>
 800a14c:	b108      	cbz	r0, 800a152 <_printf_i+0x1f2>
 800a14e:	1b40      	subs	r0, r0, r5
 800a150:	6060      	str	r0, [r4, #4]
 800a152:	6863      	ldr	r3, [r4, #4]
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	2300      	movs	r3, #0
 800a158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a15c:	e7a8      	b.n	800a0b0 <_printf_i+0x150>
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	462a      	mov	r2, r5
 800a162:	4649      	mov	r1, r9
 800a164:	4640      	mov	r0, r8
 800a166:	47d0      	blx	sl
 800a168:	3001      	adds	r0, #1
 800a16a:	d0ab      	beq.n	800a0c4 <_printf_i+0x164>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	079b      	lsls	r3, r3, #30
 800a170:	d413      	bmi.n	800a19a <_printf_i+0x23a>
 800a172:	68e0      	ldr	r0, [r4, #12]
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	4298      	cmp	r0, r3
 800a178:	bfb8      	it	lt
 800a17a:	4618      	movlt	r0, r3
 800a17c:	e7a4      	b.n	800a0c8 <_printf_i+0x168>
 800a17e:	2301      	movs	r3, #1
 800a180:	4632      	mov	r2, r6
 800a182:	4649      	mov	r1, r9
 800a184:	4640      	mov	r0, r8
 800a186:	47d0      	blx	sl
 800a188:	3001      	adds	r0, #1
 800a18a:	d09b      	beq.n	800a0c4 <_printf_i+0x164>
 800a18c:	3501      	adds	r5, #1
 800a18e:	68e3      	ldr	r3, [r4, #12]
 800a190:	9903      	ldr	r1, [sp, #12]
 800a192:	1a5b      	subs	r3, r3, r1
 800a194:	42ab      	cmp	r3, r5
 800a196:	dcf2      	bgt.n	800a17e <_printf_i+0x21e>
 800a198:	e7eb      	b.n	800a172 <_printf_i+0x212>
 800a19a:	2500      	movs	r5, #0
 800a19c:	f104 0619 	add.w	r6, r4, #25
 800a1a0:	e7f5      	b.n	800a18e <_printf_i+0x22e>
 800a1a2:	bf00      	nop
 800a1a4:	0800ce62 	.word	0x0800ce62
 800a1a8:	0800ce73 	.word	0x0800ce73

0800a1ac <iprintf>:
 800a1ac:	b40f      	push	{r0, r1, r2, r3}
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <iprintf+0x2c>)
 800a1b0:	b513      	push	{r0, r1, r4, lr}
 800a1b2:	681c      	ldr	r4, [r3, #0]
 800a1b4:	b124      	cbz	r4, 800a1c0 <iprintf+0x14>
 800a1b6:	69a3      	ldr	r3, [r4, #24]
 800a1b8:	b913      	cbnz	r3, 800a1c0 <iprintf+0x14>
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f001 f8d8 	bl	800b370 <__sinit>
 800a1c0:	ab05      	add	r3, sp, #20
 800a1c2:	9a04      	ldr	r2, [sp, #16]
 800a1c4:	68a1      	ldr	r1, [r4, #8]
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f001 fe87 	bl	800bedc <_vfiprintf_r>
 800a1ce:	b002      	add	sp, #8
 800a1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d4:	b004      	add	sp, #16
 800a1d6:	4770      	bx	lr
 800a1d8:	2000011c 	.word	0x2000011c

0800a1dc <_puts_r>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	460e      	mov	r6, r1
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	b118      	cbz	r0, 800a1ec <_puts_r+0x10>
 800a1e4:	6983      	ldr	r3, [r0, #24]
 800a1e6:	b90b      	cbnz	r3, 800a1ec <_puts_r+0x10>
 800a1e8:	f001 f8c2 	bl	800b370 <__sinit>
 800a1ec:	69ab      	ldr	r3, [r5, #24]
 800a1ee:	68ac      	ldr	r4, [r5, #8]
 800a1f0:	b913      	cbnz	r3, 800a1f8 <_puts_r+0x1c>
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f001 f8bc 	bl	800b370 <__sinit>
 800a1f8:	4b2c      	ldr	r3, [pc, #176]	; (800a2ac <_puts_r+0xd0>)
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d120      	bne.n	800a240 <_puts_r+0x64>
 800a1fe:	686c      	ldr	r4, [r5, #4]
 800a200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a202:	07db      	lsls	r3, r3, #31
 800a204:	d405      	bmi.n	800a212 <_puts_r+0x36>
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	0598      	lsls	r0, r3, #22
 800a20a:	d402      	bmi.n	800a212 <_puts_r+0x36>
 800a20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a20e:	f001 f952 	bl	800b4b6 <__retarget_lock_acquire_recursive>
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	0719      	lsls	r1, r3, #28
 800a216:	d51d      	bpl.n	800a254 <_puts_r+0x78>
 800a218:	6923      	ldr	r3, [r4, #16]
 800a21a:	b1db      	cbz	r3, 800a254 <_puts_r+0x78>
 800a21c:	3e01      	subs	r6, #1
 800a21e:	68a3      	ldr	r3, [r4, #8]
 800a220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a224:	3b01      	subs	r3, #1
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	bb39      	cbnz	r1, 800a27a <_puts_r+0x9e>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	da38      	bge.n	800a2a0 <_puts_r+0xc4>
 800a22e:	4622      	mov	r2, r4
 800a230:	210a      	movs	r1, #10
 800a232:	4628      	mov	r0, r5
 800a234:	f000 f848 	bl	800a2c8 <__swbuf_r>
 800a238:	3001      	adds	r0, #1
 800a23a:	d011      	beq.n	800a260 <_puts_r+0x84>
 800a23c:	250a      	movs	r5, #10
 800a23e:	e011      	b.n	800a264 <_puts_r+0x88>
 800a240:	4b1b      	ldr	r3, [pc, #108]	; (800a2b0 <_puts_r+0xd4>)
 800a242:	429c      	cmp	r4, r3
 800a244:	d101      	bne.n	800a24a <_puts_r+0x6e>
 800a246:	68ac      	ldr	r4, [r5, #8]
 800a248:	e7da      	b.n	800a200 <_puts_r+0x24>
 800a24a:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <_puts_r+0xd8>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	bf08      	it	eq
 800a250:	68ec      	ldreq	r4, [r5, #12]
 800a252:	e7d5      	b.n	800a200 <_puts_r+0x24>
 800a254:	4621      	mov	r1, r4
 800a256:	4628      	mov	r0, r5
 800a258:	f000 f888 	bl	800a36c <__swsetup_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d0dd      	beq.n	800a21c <_puts_r+0x40>
 800a260:	f04f 35ff 	mov.w	r5, #4294967295
 800a264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a266:	07da      	lsls	r2, r3, #31
 800a268:	d405      	bmi.n	800a276 <_puts_r+0x9a>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	059b      	lsls	r3, r3, #22
 800a26e:	d402      	bmi.n	800a276 <_puts_r+0x9a>
 800a270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a272:	f001 f921 	bl	800b4b8 <__retarget_lock_release_recursive>
 800a276:	4628      	mov	r0, r5
 800a278:	bd70      	pop	{r4, r5, r6, pc}
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da04      	bge.n	800a288 <_puts_r+0xac>
 800a27e:	69a2      	ldr	r2, [r4, #24]
 800a280:	429a      	cmp	r2, r3
 800a282:	dc06      	bgt.n	800a292 <_puts_r+0xb6>
 800a284:	290a      	cmp	r1, #10
 800a286:	d004      	beq.n	800a292 <_puts_r+0xb6>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	6022      	str	r2, [r4, #0]
 800a28e:	7019      	strb	r1, [r3, #0]
 800a290:	e7c5      	b.n	800a21e <_puts_r+0x42>
 800a292:	4622      	mov	r2, r4
 800a294:	4628      	mov	r0, r5
 800a296:	f000 f817 	bl	800a2c8 <__swbuf_r>
 800a29a:	3001      	adds	r0, #1
 800a29c:	d1bf      	bne.n	800a21e <_puts_r+0x42>
 800a29e:	e7df      	b.n	800a260 <_puts_r+0x84>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	250a      	movs	r5, #10
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	701d      	strb	r5, [r3, #0]
 800a2aa:	e7db      	b.n	800a264 <_puts_r+0x88>
 800a2ac:	0800cf34 	.word	0x0800cf34
 800a2b0:	0800cf54 	.word	0x0800cf54
 800a2b4:	0800cf14 	.word	0x0800cf14

0800a2b8 <puts>:
 800a2b8:	4b02      	ldr	r3, [pc, #8]	; (800a2c4 <puts+0xc>)
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	f7ff bf8d 	b.w	800a1dc <_puts_r>
 800a2c2:	bf00      	nop
 800a2c4:	2000011c 	.word	0x2000011c

0800a2c8 <__swbuf_r>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	460e      	mov	r6, r1
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	b118      	cbz	r0, 800a2da <__swbuf_r+0x12>
 800a2d2:	6983      	ldr	r3, [r0, #24]
 800a2d4:	b90b      	cbnz	r3, 800a2da <__swbuf_r+0x12>
 800a2d6:	f001 f84b 	bl	800b370 <__sinit>
 800a2da:	4b21      	ldr	r3, [pc, #132]	; (800a360 <__swbuf_r+0x98>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d12b      	bne.n	800a338 <__swbuf_r+0x70>
 800a2e0:	686c      	ldr	r4, [r5, #4]
 800a2e2:	69a3      	ldr	r3, [r4, #24]
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	071a      	lsls	r2, r3, #28
 800a2ea:	d52f      	bpl.n	800a34c <__swbuf_r+0x84>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	b36b      	cbz	r3, 800a34c <__swbuf_r+0x84>
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	6820      	ldr	r0, [r4, #0]
 800a2f4:	1ac0      	subs	r0, r0, r3
 800a2f6:	6963      	ldr	r3, [r4, #20]
 800a2f8:	b2f6      	uxtb	r6, r6
 800a2fa:	4283      	cmp	r3, r0
 800a2fc:	4637      	mov	r7, r6
 800a2fe:	dc04      	bgt.n	800a30a <__swbuf_r+0x42>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 ffa0 	bl	800b248 <_fflush_r>
 800a308:	bb30      	cbnz	r0, 800a358 <__swbuf_r+0x90>
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	60a3      	str	r3, [r4, #8]
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	6022      	str	r2, [r4, #0]
 800a316:	701e      	strb	r6, [r3, #0]
 800a318:	6963      	ldr	r3, [r4, #20]
 800a31a:	3001      	adds	r0, #1
 800a31c:	4283      	cmp	r3, r0
 800a31e:	d004      	beq.n	800a32a <__swbuf_r+0x62>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	07db      	lsls	r3, r3, #31
 800a324:	d506      	bpl.n	800a334 <__swbuf_r+0x6c>
 800a326:	2e0a      	cmp	r6, #10
 800a328:	d104      	bne.n	800a334 <__swbuf_r+0x6c>
 800a32a:	4621      	mov	r1, r4
 800a32c:	4628      	mov	r0, r5
 800a32e:	f000 ff8b 	bl	800b248 <_fflush_r>
 800a332:	b988      	cbnz	r0, 800a358 <__swbuf_r+0x90>
 800a334:	4638      	mov	r0, r7
 800a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a338:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <__swbuf_r+0x9c>)
 800a33a:	429c      	cmp	r4, r3
 800a33c:	d101      	bne.n	800a342 <__swbuf_r+0x7a>
 800a33e:	68ac      	ldr	r4, [r5, #8]
 800a340:	e7cf      	b.n	800a2e2 <__swbuf_r+0x1a>
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <__swbuf_r+0xa0>)
 800a344:	429c      	cmp	r4, r3
 800a346:	bf08      	it	eq
 800a348:	68ec      	ldreq	r4, [r5, #12]
 800a34a:	e7ca      	b.n	800a2e2 <__swbuf_r+0x1a>
 800a34c:	4621      	mov	r1, r4
 800a34e:	4628      	mov	r0, r5
 800a350:	f000 f80c 	bl	800a36c <__swsetup_r>
 800a354:	2800      	cmp	r0, #0
 800a356:	d0cb      	beq.n	800a2f0 <__swbuf_r+0x28>
 800a358:	f04f 37ff 	mov.w	r7, #4294967295
 800a35c:	e7ea      	b.n	800a334 <__swbuf_r+0x6c>
 800a35e:	bf00      	nop
 800a360:	0800cf34 	.word	0x0800cf34
 800a364:	0800cf54 	.word	0x0800cf54
 800a368:	0800cf14 	.word	0x0800cf14

0800a36c <__swsetup_r>:
 800a36c:	4b32      	ldr	r3, [pc, #200]	; (800a438 <__swsetup_r+0xcc>)
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	681d      	ldr	r5, [r3, #0]
 800a372:	4606      	mov	r6, r0
 800a374:	460c      	mov	r4, r1
 800a376:	b125      	cbz	r5, 800a382 <__swsetup_r+0x16>
 800a378:	69ab      	ldr	r3, [r5, #24]
 800a37a:	b913      	cbnz	r3, 800a382 <__swsetup_r+0x16>
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 fff7 	bl	800b370 <__sinit>
 800a382:	4b2e      	ldr	r3, [pc, #184]	; (800a43c <__swsetup_r+0xd0>)
 800a384:	429c      	cmp	r4, r3
 800a386:	d10f      	bne.n	800a3a8 <__swsetup_r+0x3c>
 800a388:	686c      	ldr	r4, [r5, #4]
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a390:	0719      	lsls	r1, r3, #28
 800a392:	d42c      	bmi.n	800a3ee <__swsetup_r+0x82>
 800a394:	06dd      	lsls	r5, r3, #27
 800a396:	d411      	bmi.n	800a3bc <__swsetup_r+0x50>
 800a398:	2309      	movs	r3, #9
 800a39a:	6033      	str	r3, [r6, #0]
 800a39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	e03e      	b.n	800a426 <__swsetup_r+0xba>
 800a3a8:	4b25      	ldr	r3, [pc, #148]	; (800a440 <__swsetup_r+0xd4>)
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	d101      	bne.n	800a3b2 <__swsetup_r+0x46>
 800a3ae:	68ac      	ldr	r4, [r5, #8]
 800a3b0:	e7eb      	b.n	800a38a <__swsetup_r+0x1e>
 800a3b2:	4b24      	ldr	r3, [pc, #144]	; (800a444 <__swsetup_r+0xd8>)
 800a3b4:	429c      	cmp	r4, r3
 800a3b6:	bf08      	it	eq
 800a3b8:	68ec      	ldreq	r4, [r5, #12]
 800a3ba:	e7e6      	b.n	800a38a <__swsetup_r+0x1e>
 800a3bc:	0758      	lsls	r0, r3, #29
 800a3be:	d512      	bpl.n	800a3e6 <__swsetup_r+0x7a>
 800a3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3c2:	b141      	cbz	r1, 800a3d6 <__swsetup_r+0x6a>
 800a3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3c8:	4299      	cmp	r1, r3
 800a3ca:	d002      	beq.n	800a3d2 <__swsetup_r+0x66>
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f001 fc7b 	bl	800bcc8 <_free_r>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3dc:	81a3      	strh	r3, [r4, #12]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	6063      	str	r3, [r4, #4]
 800a3e2:	6923      	ldr	r3, [r4, #16]
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f043 0308 	orr.w	r3, r3, #8
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	b94b      	cbnz	r3, 800a406 <__swsetup_r+0x9a>
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3fc:	d003      	beq.n	800a406 <__swsetup_r+0x9a>
 800a3fe:	4621      	mov	r1, r4
 800a400:	4630      	mov	r0, r6
 800a402:	f001 f87f 	bl	800b504 <__smakebuf_r>
 800a406:	89a0      	ldrh	r0, [r4, #12]
 800a408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a40c:	f010 0301 	ands.w	r3, r0, #1
 800a410:	d00a      	beq.n	800a428 <__swsetup_r+0xbc>
 800a412:	2300      	movs	r3, #0
 800a414:	60a3      	str	r3, [r4, #8]
 800a416:	6963      	ldr	r3, [r4, #20]
 800a418:	425b      	negs	r3, r3
 800a41a:	61a3      	str	r3, [r4, #24]
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	b943      	cbnz	r3, 800a432 <__swsetup_r+0xc6>
 800a420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a424:	d1ba      	bne.n	800a39c <__swsetup_r+0x30>
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	0781      	lsls	r1, r0, #30
 800a42a:	bf58      	it	pl
 800a42c:	6963      	ldrpl	r3, [r4, #20]
 800a42e:	60a3      	str	r3, [r4, #8]
 800a430:	e7f4      	b.n	800a41c <__swsetup_r+0xb0>
 800a432:	2000      	movs	r0, #0
 800a434:	e7f7      	b.n	800a426 <__swsetup_r+0xba>
 800a436:	bf00      	nop
 800a438:	2000011c 	.word	0x2000011c
 800a43c:	0800cf34 	.word	0x0800cf34
 800a440:	0800cf54 	.word	0x0800cf54
 800a444:	0800cf14 	.word	0x0800cf14

0800a448 <quorem>:
 800a448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	6903      	ldr	r3, [r0, #16]
 800a44e:	690c      	ldr	r4, [r1, #16]
 800a450:	42a3      	cmp	r3, r4
 800a452:	4607      	mov	r7, r0
 800a454:	f2c0 8081 	blt.w	800a55a <quorem+0x112>
 800a458:	3c01      	subs	r4, #1
 800a45a:	f101 0814 	add.w	r8, r1, #20
 800a45e:	f100 0514 	add.w	r5, r0, #20
 800a462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a46c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a470:	3301      	adds	r3, #1
 800a472:	429a      	cmp	r2, r3
 800a474:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a478:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a47c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a480:	d331      	bcc.n	800a4e6 <quorem+0x9e>
 800a482:	f04f 0e00 	mov.w	lr, #0
 800a486:	4640      	mov	r0, r8
 800a488:	46ac      	mov	ip, r5
 800a48a:	46f2      	mov	sl, lr
 800a48c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a490:	b293      	uxth	r3, r2
 800a492:	fb06 e303 	mla	r3, r6, r3, lr
 800a496:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	ebaa 0303 	sub.w	r3, sl, r3
 800a4a0:	f8dc a000 	ldr.w	sl, [ip]
 800a4a4:	0c12      	lsrs	r2, r2, #16
 800a4a6:	fa13 f38a 	uxtah	r3, r3, sl
 800a4aa:	fb06 e202 	mla	r2, r6, r2, lr
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	9b00      	ldr	r3, [sp, #0]
 800a4b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4c4:	4581      	cmp	r9, r0
 800a4c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ca:	f84c 3b04 	str.w	r3, [ip], #4
 800a4ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4d2:	d2db      	bcs.n	800a48c <quorem+0x44>
 800a4d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4d8:	b92b      	cbnz	r3, 800a4e6 <quorem+0x9e>
 800a4da:	9b01      	ldr	r3, [sp, #4]
 800a4dc:	3b04      	subs	r3, #4
 800a4de:	429d      	cmp	r5, r3
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	d32e      	bcc.n	800a542 <quorem+0xfa>
 800a4e4:	613c      	str	r4, [r7, #16]
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f001 fad6 	bl	800ba98 <__mcmp>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	db24      	blt.n	800a53a <quorem+0xf2>
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f04f 0c00 	mov.w	ip, #0
 800a4f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4fc:	f8d0 e000 	ldr.w	lr, [r0]
 800a500:	b293      	uxth	r3, r2
 800a502:	ebac 0303 	sub.w	r3, ip, r3
 800a506:	0c12      	lsrs	r2, r2, #16
 800a508:	fa13 f38e 	uxtah	r3, r3, lr
 800a50c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a514:	b29b      	uxth	r3, r3
 800a516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a51a:	45c1      	cmp	r9, r8
 800a51c:	f840 3b04 	str.w	r3, [r0], #4
 800a520:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a524:	d2e8      	bcs.n	800a4f8 <quorem+0xb0>
 800a526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a52a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a52e:	b922      	cbnz	r2, 800a53a <quorem+0xf2>
 800a530:	3b04      	subs	r3, #4
 800a532:	429d      	cmp	r5, r3
 800a534:	461a      	mov	r2, r3
 800a536:	d30a      	bcc.n	800a54e <quorem+0x106>
 800a538:	613c      	str	r4, [r7, #16]
 800a53a:	4630      	mov	r0, r6
 800a53c:	b003      	add	sp, #12
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	6812      	ldr	r2, [r2, #0]
 800a544:	3b04      	subs	r3, #4
 800a546:	2a00      	cmp	r2, #0
 800a548:	d1cc      	bne.n	800a4e4 <quorem+0x9c>
 800a54a:	3c01      	subs	r4, #1
 800a54c:	e7c7      	b.n	800a4de <quorem+0x96>
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	3b04      	subs	r3, #4
 800a552:	2a00      	cmp	r2, #0
 800a554:	d1f0      	bne.n	800a538 <quorem+0xf0>
 800a556:	3c01      	subs	r4, #1
 800a558:	e7eb      	b.n	800a532 <quorem+0xea>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e7ee      	b.n	800a53c <quorem+0xf4>
	...

0800a560 <_dtoa_r>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	ed2d 8b04 	vpush	{d8-d9}
 800a568:	ec57 6b10 	vmov	r6, r7, d0
 800a56c:	b093      	sub	sp, #76	; 0x4c
 800a56e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a574:	9106      	str	r1, [sp, #24]
 800a576:	ee10 aa10 	vmov	sl, s0
 800a57a:	4604      	mov	r4, r0
 800a57c:	9209      	str	r2, [sp, #36]	; 0x24
 800a57e:	930c      	str	r3, [sp, #48]	; 0x30
 800a580:	46bb      	mov	fp, r7
 800a582:	b975      	cbnz	r5, 800a5a2 <_dtoa_r+0x42>
 800a584:	2010      	movs	r0, #16
 800a586:	f000 fffd 	bl	800b584 <malloc>
 800a58a:	4602      	mov	r2, r0
 800a58c:	6260      	str	r0, [r4, #36]	; 0x24
 800a58e:	b920      	cbnz	r0, 800a59a <_dtoa_r+0x3a>
 800a590:	4ba7      	ldr	r3, [pc, #668]	; (800a830 <_dtoa_r+0x2d0>)
 800a592:	21ea      	movs	r1, #234	; 0xea
 800a594:	48a7      	ldr	r0, [pc, #668]	; (800a834 <_dtoa_r+0x2d4>)
 800a596:	f001 fe37 	bl	800c208 <__assert_func>
 800a59a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a59e:	6005      	str	r5, [r0, #0]
 800a5a0:	60c5      	str	r5, [r0, #12]
 800a5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a4:	6819      	ldr	r1, [r3, #0]
 800a5a6:	b151      	cbz	r1, 800a5be <_dtoa_r+0x5e>
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	604a      	str	r2, [r1, #4]
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4093      	lsls	r3, r2
 800a5b0:	608b      	str	r3, [r1, #8]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f001 f82e 	bl	800b614 <_Bfree>
 800a5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	1e3b      	subs	r3, r7, #0
 800a5c0:	bfaa      	itet	ge
 800a5c2:	2300      	movge	r3, #0
 800a5c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a5c8:	f8c8 3000 	strge.w	r3, [r8]
 800a5cc:	4b9a      	ldr	r3, [pc, #616]	; (800a838 <_dtoa_r+0x2d8>)
 800a5ce:	bfbc      	itt	lt
 800a5d0:	2201      	movlt	r2, #1
 800a5d2:	f8c8 2000 	strlt.w	r2, [r8]
 800a5d6:	ea33 030b 	bics.w	r3, r3, fp
 800a5da:	d11b      	bne.n	800a614 <_dtoa_r+0xb4>
 800a5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5e8:	4333      	orrs	r3, r6
 800a5ea:	f000 8592 	beq.w	800b112 <_dtoa_r+0xbb2>
 800a5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f0:	b963      	cbnz	r3, 800a60c <_dtoa_r+0xac>
 800a5f2:	4b92      	ldr	r3, [pc, #584]	; (800a83c <_dtoa_r+0x2dc>)
 800a5f4:	e022      	b.n	800a63c <_dtoa_r+0xdc>
 800a5f6:	4b92      	ldr	r3, [pc, #584]	; (800a840 <_dtoa_r+0x2e0>)
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	9801      	ldr	r0, [sp, #4]
 800a602:	b013      	add	sp, #76	; 0x4c
 800a604:	ecbd 8b04 	vpop	{d8-d9}
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	4b8b      	ldr	r3, [pc, #556]	; (800a83c <_dtoa_r+0x2dc>)
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	3303      	adds	r3, #3
 800a612:	e7f3      	b.n	800a5fc <_dtoa_r+0x9c>
 800a614:	2200      	movs	r2, #0
 800a616:	2300      	movs	r3, #0
 800a618:	4650      	mov	r0, sl
 800a61a:	4659      	mov	r1, fp
 800a61c:	f7f6 fa64 	bl	8000ae8 <__aeabi_dcmpeq>
 800a620:	ec4b ab19 	vmov	d9, sl, fp
 800a624:	4680      	mov	r8, r0
 800a626:	b158      	cbz	r0, 800a640 <_dtoa_r+0xe0>
 800a628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a62a:	2301      	movs	r3, #1
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 856b 	beq.w	800b10c <_dtoa_r+0xbac>
 800a636:	4883      	ldr	r0, [pc, #524]	; (800a844 <_dtoa_r+0x2e4>)
 800a638:	6018      	str	r0, [r3, #0]
 800a63a:	1e43      	subs	r3, r0, #1
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	e7df      	b.n	800a600 <_dtoa_r+0xa0>
 800a640:	ec4b ab10 	vmov	d0, sl, fp
 800a644:	aa10      	add	r2, sp, #64	; 0x40
 800a646:	a911      	add	r1, sp, #68	; 0x44
 800a648:	4620      	mov	r0, r4
 800a64a:	f001 facb 	bl	800bbe4 <__d2b>
 800a64e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a652:	ee08 0a10 	vmov	s16, r0
 800a656:	2d00      	cmp	r5, #0
 800a658:	f000 8084 	beq.w	800a764 <_dtoa_r+0x204>
 800a65c:	ee19 3a90 	vmov	r3, s19
 800a660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a664:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a668:	4656      	mov	r6, sl
 800a66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a672:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a676:	4b74      	ldr	r3, [pc, #464]	; (800a848 <_dtoa_r+0x2e8>)
 800a678:	2200      	movs	r2, #0
 800a67a:	4630      	mov	r0, r6
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f5 fe13 	bl	80002a8 <__aeabi_dsub>
 800a682:	a365      	add	r3, pc, #404	; (adr r3, 800a818 <_dtoa_r+0x2b8>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 ffc6 	bl	8000618 <__aeabi_dmul>
 800a68c:	a364      	add	r3, pc, #400	; (adr r3, 800a820 <_dtoa_r+0x2c0>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 fe0b 	bl	80002ac <__adddf3>
 800a696:	4606      	mov	r6, r0
 800a698:	4628      	mov	r0, r5
 800a69a:	460f      	mov	r7, r1
 800a69c:	f7f5 ff52 	bl	8000544 <__aeabi_i2d>
 800a6a0:	a361      	add	r3, pc, #388	; (adr r3, 800a828 <_dtoa_r+0x2c8>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 ffb7 	bl	8000618 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	f7f5 fdfb 	bl	80002ac <__adddf3>
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	f7f6 fa5d 	bl	8000b78 <__aeabi_d2iz>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	9000      	str	r0, [sp, #0]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f6 fa18 	bl	8000afc <__aeabi_dcmplt>
 800a6cc:	b150      	cbz	r0, 800a6e4 <_dtoa_r+0x184>
 800a6ce:	9800      	ldr	r0, [sp, #0]
 800a6d0:	f7f5 ff38 	bl	8000544 <__aeabi_i2d>
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	f7f6 fa06 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6dc:	b910      	cbnz	r0, 800a6e4 <_dtoa_r+0x184>
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	9b00      	ldr	r3, [sp, #0]
 800a6e6:	2b16      	cmp	r3, #22
 800a6e8:	d85a      	bhi.n	800a7a0 <_dtoa_r+0x240>
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	4b57      	ldr	r3, [pc, #348]	; (800a84c <_dtoa_r+0x2ec>)
 800a6ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	ec51 0b19 	vmov	r0, r1, d9
 800a6fa:	f7f6 f9ff 	bl	8000afc <__aeabi_dcmplt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d050      	beq.n	800a7a4 <_dtoa_r+0x244>
 800a702:	9b00      	ldr	r3, [sp, #0]
 800a704:	3b01      	subs	r3, #1
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	2300      	movs	r3, #0
 800a70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a70e:	1b5d      	subs	r5, r3, r5
 800a710:	1e6b      	subs	r3, r5, #1
 800a712:	9305      	str	r3, [sp, #20]
 800a714:	bf45      	ittet	mi
 800a716:	f1c5 0301 	rsbmi	r3, r5, #1
 800a71a:	9304      	strmi	r3, [sp, #16]
 800a71c:	2300      	movpl	r3, #0
 800a71e:	2300      	movmi	r3, #0
 800a720:	bf4c      	ite	mi
 800a722:	9305      	strmi	r3, [sp, #20]
 800a724:	9304      	strpl	r3, [sp, #16]
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	db3d      	blt.n	800a7a8 <_dtoa_r+0x248>
 800a72c:	9b05      	ldr	r3, [sp, #20]
 800a72e:	9a00      	ldr	r2, [sp, #0]
 800a730:	920a      	str	r2, [sp, #40]	; 0x28
 800a732:	4413      	add	r3, r2
 800a734:	9305      	str	r3, [sp, #20]
 800a736:	2300      	movs	r3, #0
 800a738:	9307      	str	r3, [sp, #28]
 800a73a:	9b06      	ldr	r3, [sp, #24]
 800a73c:	2b09      	cmp	r3, #9
 800a73e:	f200 8089 	bhi.w	800a854 <_dtoa_r+0x2f4>
 800a742:	2b05      	cmp	r3, #5
 800a744:	bfc4      	itt	gt
 800a746:	3b04      	subgt	r3, #4
 800a748:	9306      	strgt	r3, [sp, #24]
 800a74a:	9b06      	ldr	r3, [sp, #24]
 800a74c:	f1a3 0302 	sub.w	r3, r3, #2
 800a750:	bfcc      	ite	gt
 800a752:	2500      	movgt	r5, #0
 800a754:	2501      	movle	r5, #1
 800a756:	2b03      	cmp	r3, #3
 800a758:	f200 8087 	bhi.w	800a86a <_dtoa_r+0x30a>
 800a75c:	e8df f003 	tbb	[pc, r3]
 800a760:	59383a2d 	.word	0x59383a2d
 800a764:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a768:	441d      	add	r5, r3
 800a76a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a76e:	2b20      	cmp	r3, #32
 800a770:	bfc1      	itttt	gt
 800a772:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a776:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a77a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a77e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a782:	bfda      	itte	le
 800a784:	f1c3 0320 	rsble	r3, r3, #32
 800a788:	fa06 f003 	lslle.w	r0, r6, r3
 800a78c:	4318      	orrgt	r0, r3
 800a78e:	f7f5 fec9 	bl	8000524 <__aeabi_ui2d>
 800a792:	2301      	movs	r3, #1
 800a794:	4606      	mov	r6, r0
 800a796:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a79a:	3d01      	subs	r5, #1
 800a79c:	930e      	str	r3, [sp, #56]	; 0x38
 800a79e:	e76a      	b.n	800a676 <_dtoa_r+0x116>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e7b2      	b.n	800a70a <_dtoa_r+0x1aa>
 800a7a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7a6:	e7b1      	b.n	800a70c <_dtoa_r+0x1ac>
 800a7a8:	9b04      	ldr	r3, [sp, #16]
 800a7aa:	9a00      	ldr	r2, [sp, #0]
 800a7ac:	1a9b      	subs	r3, r3, r2
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	4253      	negs	r3, r2
 800a7b2:	9307      	str	r3, [sp, #28]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b8:	e7bf      	b.n	800a73a <_dtoa_r+0x1da>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9308      	str	r3, [sp, #32]
 800a7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc55      	bgt.n	800a870 <_dtoa_r+0x310>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ce:	e00c      	b.n	800a7ea <_dtoa_r+0x28a>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e7f3      	b.n	800a7bc <_dtoa_r+0x25c>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d8:	9308      	str	r3, [sp, #32]
 800a7da:	9b00      	ldr	r3, [sp, #0]
 800a7dc:	4413      	add	r3, r2
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	bfb8      	it	lt
 800a7e8:	2301      	movlt	r3, #1
 800a7ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	6042      	str	r2, [r0, #4]
 800a7f0:	2204      	movs	r2, #4
 800a7f2:	f102 0614 	add.w	r6, r2, #20
 800a7f6:	429e      	cmp	r6, r3
 800a7f8:	6841      	ldr	r1, [r0, #4]
 800a7fa:	d93d      	bls.n	800a878 <_dtoa_r+0x318>
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fec9 	bl	800b594 <_Balloc>
 800a802:	9001      	str	r0, [sp, #4]
 800a804:	2800      	cmp	r0, #0
 800a806:	d13b      	bne.n	800a880 <_dtoa_r+0x320>
 800a808:	4b11      	ldr	r3, [pc, #68]	; (800a850 <_dtoa_r+0x2f0>)
 800a80a:	4602      	mov	r2, r0
 800a80c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a810:	e6c0      	b.n	800a594 <_dtoa_r+0x34>
 800a812:	2301      	movs	r3, #1
 800a814:	e7df      	b.n	800a7d6 <_dtoa_r+0x276>
 800a816:	bf00      	nop
 800a818:	636f4361 	.word	0x636f4361
 800a81c:	3fd287a7 	.word	0x3fd287a7
 800a820:	8b60c8b3 	.word	0x8b60c8b3
 800a824:	3fc68a28 	.word	0x3fc68a28
 800a828:	509f79fb 	.word	0x509f79fb
 800a82c:	3fd34413 	.word	0x3fd34413
 800a830:	0800ce91 	.word	0x0800ce91
 800a834:	0800cea8 	.word	0x0800cea8
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	0800ce8d 	.word	0x0800ce8d
 800a840:	0800ce84 	.word	0x0800ce84
 800a844:	0800ce61 	.word	0x0800ce61
 800a848:	3ff80000 	.word	0x3ff80000
 800a84c:	0800cff8 	.word	0x0800cff8
 800a850:	0800cf03 	.word	0x0800cf03
 800a854:	2501      	movs	r5, #1
 800a856:	2300      	movs	r3, #0
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	9508      	str	r5, [sp, #32]
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295
 800a860:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a864:	2200      	movs	r2, #0
 800a866:	2312      	movs	r3, #18
 800a868:	e7b0      	b.n	800a7cc <_dtoa_r+0x26c>
 800a86a:	2301      	movs	r3, #1
 800a86c:	9308      	str	r3, [sp, #32]
 800a86e:	e7f5      	b.n	800a85c <_dtoa_r+0x2fc>
 800a870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a872:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a876:	e7b8      	b.n	800a7ea <_dtoa_r+0x28a>
 800a878:	3101      	adds	r1, #1
 800a87a:	6041      	str	r1, [r0, #4]
 800a87c:	0052      	lsls	r2, r2, #1
 800a87e:	e7b8      	b.n	800a7f2 <_dtoa_r+0x292>
 800a880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a882:	9a01      	ldr	r2, [sp, #4]
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	2b0e      	cmp	r3, #14
 800a88a:	f200 809d 	bhi.w	800a9c8 <_dtoa_r+0x468>
 800a88e:	2d00      	cmp	r5, #0
 800a890:	f000 809a 	beq.w	800a9c8 <_dtoa_r+0x468>
 800a894:	9b00      	ldr	r3, [sp, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dd32      	ble.n	800a900 <_dtoa_r+0x3a0>
 800a89a:	4ab7      	ldr	r2, [pc, #732]	; (800ab78 <_dtoa_r+0x618>)
 800a89c:	f003 030f 	and.w	r3, r3, #15
 800a8a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8a8:	9b00      	ldr	r3, [sp, #0]
 800a8aa:	05d8      	lsls	r0, r3, #23
 800a8ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8b0:	d516      	bpl.n	800a8e0 <_dtoa_r+0x380>
 800a8b2:	4bb2      	ldr	r3, [pc, #712]	; (800ab7c <_dtoa_r+0x61c>)
 800a8b4:	ec51 0b19 	vmov	r0, r1, d9
 800a8b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8bc:	f7f5 ffd6 	bl	800086c <__aeabi_ddiv>
 800a8c0:	f007 070f 	and.w	r7, r7, #15
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	468b      	mov	fp, r1
 800a8c8:	2503      	movs	r5, #3
 800a8ca:	4eac      	ldr	r6, [pc, #688]	; (800ab7c <_dtoa_r+0x61c>)
 800a8cc:	b957      	cbnz	r7, 800a8e4 <_dtoa_r+0x384>
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 ffc9 	bl	800086c <__aeabi_ddiv>
 800a8da:	4682      	mov	sl, r0
 800a8dc:	468b      	mov	fp, r1
 800a8de:	e028      	b.n	800a932 <_dtoa_r+0x3d2>
 800a8e0:	2502      	movs	r5, #2
 800a8e2:	e7f2      	b.n	800a8ca <_dtoa_r+0x36a>
 800a8e4:	07f9      	lsls	r1, r7, #31
 800a8e6:	d508      	bpl.n	800a8fa <_dtoa_r+0x39a>
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8f0:	f7f5 fe92 	bl	8000618 <__aeabi_dmul>
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	4689      	mov	r9, r1
 800a8fa:	107f      	asrs	r7, r7, #1
 800a8fc:	3608      	adds	r6, #8
 800a8fe:	e7e5      	b.n	800a8cc <_dtoa_r+0x36c>
 800a900:	f000 809b 	beq.w	800aa3a <_dtoa_r+0x4da>
 800a904:	9b00      	ldr	r3, [sp, #0]
 800a906:	4f9d      	ldr	r7, [pc, #628]	; (800ab7c <_dtoa_r+0x61c>)
 800a908:	425e      	negs	r6, r3
 800a90a:	4b9b      	ldr	r3, [pc, #620]	; (800ab78 <_dtoa_r+0x618>)
 800a90c:	f006 020f 	and.w	r2, r6, #15
 800a910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	ec51 0b19 	vmov	r0, r1, d9
 800a91c:	f7f5 fe7c 	bl	8000618 <__aeabi_dmul>
 800a920:	1136      	asrs	r6, r6, #4
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	2300      	movs	r3, #0
 800a928:	2502      	movs	r5, #2
 800a92a:	2e00      	cmp	r6, #0
 800a92c:	d17a      	bne.n	800aa24 <_dtoa_r+0x4c4>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1d3      	bne.n	800a8da <_dtoa_r+0x37a>
 800a932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 8082 	beq.w	800aa3e <_dtoa_r+0x4de>
 800a93a:	4b91      	ldr	r3, [pc, #580]	; (800ab80 <_dtoa_r+0x620>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	4650      	mov	r0, sl
 800a940:	4659      	mov	r1, fp
 800a942:	f7f6 f8db 	bl	8000afc <__aeabi_dcmplt>
 800a946:	2800      	cmp	r0, #0
 800a948:	d079      	beq.n	800aa3e <_dtoa_r+0x4de>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d076      	beq.n	800aa3e <_dtoa_r+0x4de>
 800a950:	9b02      	ldr	r3, [sp, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	dd36      	ble.n	800a9c4 <_dtoa_r+0x464>
 800a956:	9b00      	ldr	r3, [sp, #0]
 800a958:	4650      	mov	r0, sl
 800a95a:	4659      	mov	r1, fp
 800a95c:	1e5f      	subs	r7, r3, #1
 800a95e:	2200      	movs	r2, #0
 800a960:	4b88      	ldr	r3, [pc, #544]	; (800ab84 <_dtoa_r+0x624>)
 800a962:	f7f5 fe59 	bl	8000618 <__aeabi_dmul>
 800a966:	9e02      	ldr	r6, [sp, #8]
 800a968:	4682      	mov	sl, r0
 800a96a:	468b      	mov	fp, r1
 800a96c:	3501      	adds	r5, #1
 800a96e:	4628      	mov	r0, r5
 800a970:	f7f5 fde8 	bl	8000544 <__aeabi_i2d>
 800a974:	4652      	mov	r2, sl
 800a976:	465b      	mov	r3, fp
 800a978:	f7f5 fe4e 	bl	8000618 <__aeabi_dmul>
 800a97c:	4b82      	ldr	r3, [pc, #520]	; (800ab88 <_dtoa_r+0x628>)
 800a97e:	2200      	movs	r2, #0
 800a980:	f7f5 fc94 	bl	80002ac <__adddf3>
 800a984:	46d0      	mov	r8, sl
 800a986:	46d9      	mov	r9, fp
 800a988:	4682      	mov	sl, r0
 800a98a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d158      	bne.n	800aa44 <_dtoa_r+0x4e4>
 800a992:	4b7e      	ldr	r3, [pc, #504]	; (800ab8c <_dtoa_r+0x62c>)
 800a994:	2200      	movs	r2, #0
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	f7f5 fc85 	bl	80002a8 <__aeabi_dsub>
 800a99e:	4652      	mov	r2, sl
 800a9a0:	465b      	mov	r3, fp
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	f7f6 f8c7 	bl	8000b38 <__aeabi_dcmpgt>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f040 8295 	bne.w	800aeda <_dtoa_r+0x97a>
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f6 f89f 	bl	8000afc <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	f040 8289 	bne.w	800aed6 <_dtoa_r+0x976>
 800a9c4:	ec5b ab19 	vmov	sl, fp, d9
 800a9c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f2c0 8148 	blt.w	800ac60 <_dtoa_r+0x700>
 800a9d0:	9a00      	ldr	r2, [sp, #0]
 800a9d2:	2a0e      	cmp	r2, #14
 800a9d4:	f300 8144 	bgt.w	800ac60 <_dtoa_r+0x700>
 800a9d8:	4b67      	ldr	r3, [pc, #412]	; (800ab78 <_dtoa_r+0x618>)
 800a9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f280 80d5 	bge.w	800ab94 <_dtoa_r+0x634>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f300 80d1 	bgt.w	800ab94 <_dtoa_r+0x634>
 800a9f2:	f040 826f 	bne.w	800aed4 <_dtoa_r+0x974>
 800a9f6:	4b65      	ldr	r3, [pc, #404]	; (800ab8c <_dtoa_r+0x62c>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	f7f5 fe0b 	bl	8000618 <__aeabi_dmul>
 800aa02:	4652      	mov	r2, sl
 800aa04:	465b      	mov	r3, fp
 800aa06:	f7f6 f88d 	bl	8000b24 <__aeabi_dcmpge>
 800aa0a:	9e03      	ldr	r6, [sp, #12]
 800aa0c:	4637      	mov	r7, r6
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f040 8245 	bne.w	800ae9e <_dtoa_r+0x93e>
 800aa14:	9d01      	ldr	r5, [sp, #4]
 800aa16:	2331      	movs	r3, #49	; 0x31
 800aa18:	f805 3b01 	strb.w	r3, [r5], #1
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	e240      	b.n	800aea6 <_dtoa_r+0x946>
 800aa24:	07f2      	lsls	r2, r6, #31
 800aa26:	d505      	bpl.n	800aa34 <_dtoa_r+0x4d4>
 800aa28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa2c:	f7f5 fdf4 	bl	8000618 <__aeabi_dmul>
 800aa30:	3501      	adds	r5, #1
 800aa32:	2301      	movs	r3, #1
 800aa34:	1076      	asrs	r6, r6, #1
 800aa36:	3708      	adds	r7, #8
 800aa38:	e777      	b.n	800a92a <_dtoa_r+0x3ca>
 800aa3a:	2502      	movs	r5, #2
 800aa3c:	e779      	b.n	800a932 <_dtoa_r+0x3d2>
 800aa3e:	9f00      	ldr	r7, [sp, #0]
 800aa40:	9e03      	ldr	r6, [sp, #12]
 800aa42:	e794      	b.n	800a96e <_dtoa_r+0x40e>
 800aa44:	9901      	ldr	r1, [sp, #4]
 800aa46:	4b4c      	ldr	r3, [pc, #304]	; (800ab78 <_dtoa_r+0x618>)
 800aa48:	4431      	add	r1, r6
 800aa4a:	910d      	str	r1, [sp, #52]	; 0x34
 800aa4c:	9908      	ldr	r1, [sp, #32]
 800aa4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa56:	2900      	cmp	r1, #0
 800aa58:	d043      	beq.n	800aae2 <_dtoa_r+0x582>
 800aa5a:	494d      	ldr	r1, [pc, #308]	; (800ab90 <_dtoa_r+0x630>)
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	f7f5 ff05 	bl	800086c <__aeabi_ddiv>
 800aa62:	4652      	mov	r2, sl
 800aa64:	465b      	mov	r3, fp
 800aa66:	f7f5 fc1f 	bl	80002a8 <__aeabi_dsub>
 800aa6a:	9d01      	ldr	r5, [sp, #4]
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	468b      	mov	fp, r1
 800aa70:	4649      	mov	r1, r9
 800aa72:	4640      	mov	r0, r8
 800aa74:	f7f6 f880 	bl	8000b78 <__aeabi_d2iz>
 800aa78:	4606      	mov	r6, r0
 800aa7a:	f7f5 fd63 	bl	8000544 <__aeabi_i2d>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4640      	mov	r0, r8
 800aa84:	4649      	mov	r1, r9
 800aa86:	f7f5 fc0f 	bl	80002a8 <__aeabi_dsub>
 800aa8a:	3630      	adds	r6, #48	; 0x30
 800aa8c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa90:	4652      	mov	r2, sl
 800aa92:	465b      	mov	r3, fp
 800aa94:	4680      	mov	r8, r0
 800aa96:	4689      	mov	r9, r1
 800aa98:	f7f6 f830 	bl	8000afc <__aeabi_dcmplt>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d163      	bne.n	800ab68 <_dtoa_r+0x608>
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	464b      	mov	r3, r9
 800aaa4:	4936      	ldr	r1, [pc, #216]	; (800ab80 <_dtoa_r+0x620>)
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	f7f5 fbfe 	bl	80002a8 <__aeabi_dsub>
 800aaac:	4652      	mov	r2, sl
 800aaae:	465b      	mov	r3, fp
 800aab0:	f7f6 f824 	bl	8000afc <__aeabi_dcmplt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f040 80b5 	bne.w	800ac24 <_dtoa_r+0x6c4>
 800aaba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aabc:	429d      	cmp	r5, r3
 800aabe:	d081      	beq.n	800a9c4 <_dtoa_r+0x464>
 800aac0:	4b30      	ldr	r3, [pc, #192]	; (800ab84 <_dtoa_r+0x624>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	4650      	mov	r0, sl
 800aac6:	4659      	mov	r1, fp
 800aac8:	f7f5 fda6 	bl	8000618 <__aeabi_dmul>
 800aacc:	4b2d      	ldr	r3, [pc, #180]	; (800ab84 <_dtoa_r+0x624>)
 800aace:	4682      	mov	sl, r0
 800aad0:	468b      	mov	fp, r1
 800aad2:	4640      	mov	r0, r8
 800aad4:	4649      	mov	r1, r9
 800aad6:	2200      	movs	r2, #0
 800aad8:	f7f5 fd9e 	bl	8000618 <__aeabi_dmul>
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	e7c6      	b.n	800aa70 <_dtoa_r+0x510>
 800aae2:	4650      	mov	r0, sl
 800aae4:	4659      	mov	r1, fp
 800aae6:	f7f5 fd97 	bl	8000618 <__aeabi_dmul>
 800aaea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaec:	9d01      	ldr	r5, [sp, #4]
 800aaee:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaf0:	4682      	mov	sl, r0
 800aaf2:	468b      	mov	fp, r1
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f7f6 f83e 	bl	8000b78 <__aeabi_d2iz>
 800aafc:	4606      	mov	r6, r0
 800aafe:	f7f5 fd21 	bl	8000544 <__aeabi_i2d>
 800ab02:	3630      	adds	r6, #48	; 0x30
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 fbcc 	bl	80002a8 <__aeabi_dsub>
 800ab10:	f805 6b01 	strb.w	r6, [r5], #1
 800ab14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab16:	429d      	cmp	r5, r3
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4689      	mov	r9, r1
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	d124      	bne.n	800ab6c <_dtoa_r+0x60c>
 800ab22:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <_dtoa_r+0x630>)
 800ab24:	4650      	mov	r0, sl
 800ab26:	4659      	mov	r1, fp
 800ab28:	f7f5 fbc0 	bl	80002ac <__adddf3>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4640      	mov	r0, r8
 800ab32:	4649      	mov	r1, r9
 800ab34:	f7f6 f800 	bl	8000b38 <__aeabi_dcmpgt>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d173      	bne.n	800ac24 <_dtoa_r+0x6c4>
 800ab3c:	4652      	mov	r2, sl
 800ab3e:	465b      	mov	r3, fp
 800ab40:	4913      	ldr	r1, [pc, #76]	; (800ab90 <_dtoa_r+0x630>)
 800ab42:	2000      	movs	r0, #0
 800ab44:	f7f5 fbb0 	bl	80002a8 <__aeabi_dsub>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4640      	mov	r0, r8
 800ab4e:	4649      	mov	r1, r9
 800ab50:	f7f5 ffd4 	bl	8000afc <__aeabi_dcmplt>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f43f af35 	beq.w	800a9c4 <_dtoa_r+0x464>
 800ab5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab5c:	1e6b      	subs	r3, r5, #1
 800ab5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab64:	2b30      	cmp	r3, #48	; 0x30
 800ab66:	d0f8      	beq.n	800ab5a <_dtoa_r+0x5fa>
 800ab68:	9700      	str	r7, [sp, #0]
 800ab6a:	e049      	b.n	800ac00 <_dtoa_r+0x6a0>
 800ab6c:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <_dtoa_r+0x624>)
 800ab6e:	f7f5 fd53 	bl	8000618 <__aeabi_dmul>
 800ab72:	4680      	mov	r8, r0
 800ab74:	4689      	mov	r9, r1
 800ab76:	e7bd      	b.n	800aaf4 <_dtoa_r+0x594>
 800ab78:	0800cff8 	.word	0x0800cff8
 800ab7c:	0800cfd0 	.word	0x0800cfd0
 800ab80:	3ff00000 	.word	0x3ff00000
 800ab84:	40240000 	.word	0x40240000
 800ab88:	401c0000 	.word	0x401c0000
 800ab8c:	40140000 	.word	0x40140000
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	9d01      	ldr	r5, [sp, #4]
 800ab96:	4656      	mov	r6, sl
 800ab98:	465f      	mov	r7, fp
 800ab9a:	4642      	mov	r2, r8
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	4630      	mov	r0, r6
 800aba0:	4639      	mov	r1, r7
 800aba2:	f7f5 fe63 	bl	800086c <__aeabi_ddiv>
 800aba6:	f7f5 ffe7 	bl	8000b78 <__aeabi_d2iz>
 800abaa:	4682      	mov	sl, r0
 800abac:	f7f5 fcca 	bl	8000544 <__aeabi_i2d>
 800abb0:	4642      	mov	r2, r8
 800abb2:	464b      	mov	r3, r9
 800abb4:	f7f5 fd30 	bl	8000618 <__aeabi_dmul>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800abc4:	f7f5 fb70 	bl	80002a8 <__aeabi_dsub>
 800abc8:	f805 6b01 	strb.w	r6, [r5], #1
 800abcc:	9e01      	ldr	r6, [sp, #4]
 800abce:	9f03      	ldr	r7, [sp, #12]
 800abd0:	1bae      	subs	r6, r5, r6
 800abd2:	42b7      	cmp	r7, r6
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	d135      	bne.n	800ac46 <_dtoa_r+0x6e6>
 800abda:	f7f5 fb67 	bl	80002ac <__adddf3>
 800abde:	4642      	mov	r2, r8
 800abe0:	464b      	mov	r3, r9
 800abe2:	4606      	mov	r6, r0
 800abe4:	460f      	mov	r7, r1
 800abe6:	f7f5 ffa7 	bl	8000b38 <__aeabi_dcmpgt>
 800abea:	b9d0      	cbnz	r0, 800ac22 <_dtoa_r+0x6c2>
 800abec:	4642      	mov	r2, r8
 800abee:	464b      	mov	r3, r9
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ff78 	bl	8000ae8 <__aeabi_dcmpeq>
 800abf8:	b110      	cbz	r0, 800ac00 <_dtoa_r+0x6a0>
 800abfa:	f01a 0f01 	tst.w	sl, #1
 800abfe:	d110      	bne.n	800ac22 <_dtoa_r+0x6c2>
 800ac00:	4620      	mov	r0, r4
 800ac02:	ee18 1a10 	vmov	r1, s16
 800ac06:	f000 fd05 	bl	800b614 <_Bfree>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9800      	ldr	r0, [sp, #0]
 800ac0e:	702b      	strb	r3, [r5, #0]
 800ac10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac12:	3001      	adds	r0, #1
 800ac14:	6018      	str	r0, [r3, #0]
 800ac16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f43f acf1 	beq.w	800a600 <_dtoa_r+0xa0>
 800ac1e:	601d      	str	r5, [r3, #0]
 800ac20:	e4ee      	b.n	800a600 <_dtoa_r+0xa0>
 800ac22:	9f00      	ldr	r7, [sp, #0]
 800ac24:	462b      	mov	r3, r5
 800ac26:	461d      	mov	r5, r3
 800ac28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac2c:	2a39      	cmp	r2, #57	; 0x39
 800ac2e:	d106      	bne.n	800ac3e <_dtoa_r+0x6de>
 800ac30:	9a01      	ldr	r2, [sp, #4]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d1f7      	bne.n	800ac26 <_dtoa_r+0x6c6>
 800ac36:	9901      	ldr	r1, [sp, #4]
 800ac38:	2230      	movs	r2, #48	; 0x30
 800ac3a:	3701      	adds	r7, #1
 800ac3c:	700a      	strb	r2, [r1, #0]
 800ac3e:	781a      	ldrb	r2, [r3, #0]
 800ac40:	3201      	adds	r2, #1
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	e790      	b.n	800ab68 <_dtoa_r+0x608>
 800ac46:	4ba6      	ldr	r3, [pc, #664]	; (800aee0 <_dtoa_r+0x980>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f7f5 fce5 	bl	8000618 <__aeabi_dmul>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2300      	movs	r3, #0
 800ac52:	4606      	mov	r6, r0
 800ac54:	460f      	mov	r7, r1
 800ac56:	f7f5 ff47 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d09d      	beq.n	800ab9a <_dtoa_r+0x63a>
 800ac5e:	e7cf      	b.n	800ac00 <_dtoa_r+0x6a0>
 800ac60:	9a08      	ldr	r2, [sp, #32]
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	f000 80d7 	beq.w	800ae16 <_dtoa_r+0x8b6>
 800ac68:	9a06      	ldr	r2, [sp, #24]
 800ac6a:	2a01      	cmp	r2, #1
 800ac6c:	f300 80ba 	bgt.w	800ade4 <_dtoa_r+0x884>
 800ac70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	f000 80b2 	beq.w	800addc <_dtoa_r+0x87c>
 800ac78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac7c:	9e07      	ldr	r6, [sp, #28]
 800ac7e:	9d04      	ldr	r5, [sp, #16]
 800ac80:	9a04      	ldr	r2, [sp, #16]
 800ac82:	441a      	add	r2, r3
 800ac84:	9204      	str	r2, [sp, #16]
 800ac86:	9a05      	ldr	r2, [sp, #20]
 800ac88:	2101      	movs	r1, #1
 800ac8a:	441a      	add	r2, r3
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	9205      	str	r2, [sp, #20]
 800ac90:	f000 fd78 	bl	800b784 <__i2b>
 800ac94:	4607      	mov	r7, r0
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	dd0c      	ble.n	800acb4 <_dtoa_r+0x754>
 800ac9a:	9b05      	ldr	r3, [sp, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dd09      	ble.n	800acb4 <_dtoa_r+0x754>
 800aca0:	42ab      	cmp	r3, r5
 800aca2:	9a04      	ldr	r2, [sp, #16]
 800aca4:	bfa8      	it	ge
 800aca6:	462b      	movge	r3, r5
 800aca8:	1ad2      	subs	r2, r2, r3
 800acaa:	9204      	str	r2, [sp, #16]
 800acac:	9a05      	ldr	r2, [sp, #20]
 800acae:	1aed      	subs	r5, r5, r3
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	9b07      	ldr	r3, [sp, #28]
 800acb6:	b31b      	cbz	r3, 800ad00 <_dtoa_r+0x7a0>
 800acb8:	9b08      	ldr	r3, [sp, #32]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 80af 	beq.w	800ae1e <_dtoa_r+0x8be>
 800acc0:	2e00      	cmp	r6, #0
 800acc2:	dd13      	ble.n	800acec <_dtoa_r+0x78c>
 800acc4:	4639      	mov	r1, r7
 800acc6:	4632      	mov	r2, r6
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fe1b 	bl	800b904 <__pow5mult>
 800acce:	ee18 2a10 	vmov	r2, s16
 800acd2:	4601      	mov	r1, r0
 800acd4:	4607      	mov	r7, r0
 800acd6:	4620      	mov	r0, r4
 800acd8:	f000 fd6a 	bl	800b7b0 <__multiply>
 800acdc:	ee18 1a10 	vmov	r1, s16
 800ace0:	4680      	mov	r8, r0
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 fc96 	bl	800b614 <_Bfree>
 800ace8:	ee08 8a10 	vmov	s16, r8
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	1b9a      	subs	r2, r3, r6
 800acf0:	d006      	beq.n	800ad00 <_dtoa_r+0x7a0>
 800acf2:	ee18 1a10 	vmov	r1, s16
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 fe04 	bl	800b904 <__pow5mult>
 800acfc:	ee08 0a10 	vmov	s16, r0
 800ad00:	2101      	movs	r1, #1
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fd3e 	bl	800b784 <__i2b>
 800ad08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	f340 8088 	ble.w	800ae22 <_dtoa_r+0x8c2>
 800ad12:	461a      	mov	r2, r3
 800ad14:	4601      	mov	r1, r0
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 fdf4 	bl	800b904 <__pow5mult>
 800ad1c:	9b06      	ldr	r3, [sp, #24]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	4606      	mov	r6, r0
 800ad22:	f340 8081 	ble.w	800ae28 <_dtoa_r+0x8c8>
 800ad26:	f04f 0800 	mov.w	r8, #0
 800ad2a:	6933      	ldr	r3, [r6, #16]
 800ad2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad30:	6918      	ldr	r0, [r3, #16]
 800ad32:	f000 fcd7 	bl	800b6e4 <__hi0bits>
 800ad36:	f1c0 0020 	rsb	r0, r0, #32
 800ad3a:	9b05      	ldr	r3, [sp, #20]
 800ad3c:	4418      	add	r0, r3
 800ad3e:	f010 001f 	ands.w	r0, r0, #31
 800ad42:	f000 8092 	beq.w	800ae6a <_dtoa_r+0x90a>
 800ad46:	f1c0 0320 	rsb	r3, r0, #32
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	f340 808a 	ble.w	800ae64 <_dtoa_r+0x904>
 800ad50:	f1c0 001c 	rsb	r0, r0, #28
 800ad54:	9b04      	ldr	r3, [sp, #16]
 800ad56:	4403      	add	r3, r0
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	4403      	add	r3, r0
 800ad5e:	4405      	add	r5, r0
 800ad60:	9305      	str	r3, [sp, #20]
 800ad62:	9b04      	ldr	r3, [sp, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	dd07      	ble.n	800ad78 <_dtoa_r+0x818>
 800ad68:	ee18 1a10 	vmov	r1, s16
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fe22 	bl	800b9b8 <__lshift>
 800ad74:	ee08 0a10 	vmov	s16, r0
 800ad78:	9b05      	ldr	r3, [sp, #20]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	dd05      	ble.n	800ad8a <_dtoa_r+0x82a>
 800ad7e:	4631      	mov	r1, r6
 800ad80:	461a      	mov	r2, r3
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 fe18 	bl	800b9b8 <__lshift>
 800ad88:	4606      	mov	r6, r0
 800ad8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d06e      	beq.n	800ae6e <_dtoa_r+0x90e>
 800ad90:	ee18 0a10 	vmov	r0, s16
 800ad94:	4631      	mov	r1, r6
 800ad96:	f000 fe7f 	bl	800ba98 <__mcmp>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	da67      	bge.n	800ae6e <_dtoa_r+0x90e>
 800ad9e:	9b00      	ldr	r3, [sp, #0]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	ee18 1a10 	vmov	r1, s16
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	220a      	movs	r2, #10
 800adaa:	2300      	movs	r3, #0
 800adac:	4620      	mov	r0, r4
 800adae:	f000 fc53 	bl	800b658 <__multadd>
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	ee08 0a10 	vmov	s16, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 81b1 	beq.w	800b120 <_dtoa_r+0xbc0>
 800adbe:	2300      	movs	r3, #0
 800adc0:	4639      	mov	r1, r7
 800adc2:	220a      	movs	r2, #10
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 fc47 	bl	800b658 <__multadd>
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	4607      	mov	r7, r0
 800add0:	f300 808e 	bgt.w	800aef0 <_dtoa_r+0x990>
 800add4:	9b06      	ldr	r3, [sp, #24]
 800add6:	2b02      	cmp	r3, #2
 800add8:	dc51      	bgt.n	800ae7e <_dtoa_r+0x91e>
 800adda:	e089      	b.n	800aef0 <_dtoa_r+0x990>
 800addc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ade2:	e74b      	b.n	800ac7c <_dtoa_r+0x71c>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	1e5e      	subs	r6, r3, #1
 800ade8:	9b07      	ldr	r3, [sp, #28]
 800adea:	42b3      	cmp	r3, r6
 800adec:	bfbf      	itttt	lt
 800adee:	9b07      	ldrlt	r3, [sp, #28]
 800adf0:	9607      	strlt	r6, [sp, #28]
 800adf2:	1af2      	sublt	r2, r6, r3
 800adf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800adf6:	bfb6      	itet	lt
 800adf8:	189b      	addlt	r3, r3, r2
 800adfa:	1b9e      	subge	r6, r3, r6
 800adfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	bfb8      	it	lt
 800ae02:	2600      	movlt	r6, #0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bfb7      	itett	lt
 800ae08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae10:	1a9d      	sublt	r5, r3, r2
 800ae12:	2300      	movlt	r3, #0
 800ae14:	e734      	b.n	800ac80 <_dtoa_r+0x720>
 800ae16:	9e07      	ldr	r6, [sp, #28]
 800ae18:	9d04      	ldr	r5, [sp, #16]
 800ae1a:	9f08      	ldr	r7, [sp, #32]
 800ae1c:	e73b      	b.n	800ac96 <_dtoa_r+0x736>
 800ae1e:	9a07      	ldr	r2, [sp, #28]
 800ae20:	e767      	b.n	800acf2 <_dtoa_r+0x792>
 800ae22:	9b06      	ldr	r3, [sp, #24]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	dc18      	bgt.n	800ae5a <_dtoa_r+0x8fa>
 800ae28:	f1ba 0f00 	cmp.w	sl, #0
 800ae2c:	d115      	bne.n	800ae5a <_dtoa_r+0x8fa>
 800ae2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae32:	b993      	cbnz	r3, 800ae5a <_dtoa_r+0x8fa>
 800ae34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae38:	0d1b      	lsrs	r3, r3, #20
 800ae3a:	051b      	lsls	r3, r3, #20
 800ae3c:	b183      	cbz	r3, 800ae60 <_dtoa_r+0x900>
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	3301      	adds	r3, #1
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	9b05      	ldr	r3, [sp, #20]
 800ae46:	3301      	adds	r3, #1
 800ae48:	9305      	str	r3, [sp, #20]
 800ae4a:	f04f 0801 	mov.w	r8, #1
 800ae4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f47f af6a 	bne.w	800ad2a <_dtoa_r+0x7ca>
 800ae56:	2001      	movs	r0, #1
 800ae58:	e76f      	b.n	800ad3a <_dtoa_r+0x7da>
 800ae5a:	f04f 0800 	mov.w	r8, #0
 800ae5e:	e7f6      	b.n	800ae4e <_dtoa_r+0x8ee>
 800ae60:	4698      	mov	r8, r3
 800ae62:	e7f4      	b.n	800ae4e <_dtoa_r+0x8ee>
 800ae64:	f43f af7d 	beq.w	800ad62 <_dtoa_r+0x802>
 800ae68:	4618      	mov	r0, r3
 800ae6a:	301c      	adds	r0, #28
 800ae6c:	e772      	b.n	800ad54 <_dtoa_r+0x7f4>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	dc37      	bgt.n	800aee4 <_dtoa_r+0x984>
 800ae74:	9b06      	ldr	r3, [sp, #24]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	dd34      	ble.n	800aee4 <_dtoa_r+0x984>
 800ae7a:	9b03      	ldr	r3, [sp, #12]
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	9b02      	ldr	r3, [sp, #8]
 800ae80:	b96b      	cbnz	r3, 800ae9e <_dtoa_r+0x93e>
 800ae82:	4631      	mov	r1, r6
 800ae84:	2205      	movs	r2, #5
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 fbe6 	bl	800b658 <__multadd>
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	4606      	mov	r6, r0
 800ae90:	ee18 0a10 	vmov	r0, s16
 800ae94:	f000 fe00 	bl	800ba98 <__mcmp>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f73f adbb 	bgt.w	800aa14 <_dtoa_r+0x4b4>
 800ae9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea0:	9d01      	ldr	r5, [sp, #4]
 800aea2:	43db      	mvns	r3, r3
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	f04f 0800 	mov.w	r8, #0
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fbb1 	bl	800b614 <_Bfree>
 800aeb2:	2f00      	cmp	r7, #0
 800aeb4:	f43f aea4 	beq.w	800ac00 <_dtoa_r+0x6a0>
 800aeb8:	f1b8 0f00 	cmp.w	r8, #0
 800aebc:	d005      	beq.n	800aeca <_dtoa_r+0x96a>
 800aebe:	45b8      	cmp	r8, r7
 800aec0:	d003      	beq.n	800aeca <_dtoa_r+0x96a>
 800aec2:	4641      	mov	r1, r8
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fba5 	bl	800b614 <_Bfree>
 800aeca:	4639      	mov	r1, r7
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fba1 	bl	800b614 <_Bfree>
 800aed2:	e695      	b.n	800ac00 <_dtoa_r+0x6a0>
 800aed4:	2600      	movs	r6, #0
 800aed6:	4637      	mov	r7, r6
 800aed8:	e7e1      	b.n	800ae9e <_dtoa_r+0x93e>
 800aeda:	9700      	str	r7, [sp, #0]
 800aedc:	4637      	mov	r7, r6
 800aede:	e599      	b.n	800aa14 <_dtoa_r+0x4b4>
 800aee0:	40240000 	.word	0x40240000
 800aee4:	9b08      	ldr	r3, [sp, #32]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 80ca 	beq.w	800b080 <_dtoa_r+0xb20>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	9302      	str	r3, [sp, #8]
 800aef0:	2d00      	cmp	r5, #0
 800aef2:	dd05      	ble.n	800af00 <_dtoa_r+0x9a0>
 800aef4:	4639      	mov	r1, r7
 800aef6:	462a      	mov	r2, r5
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 fd5d 	bl	800b9b8 <__lshift>
 800aefe:	4607      	mov	r7, r0
 800af00:	f1b8 0f00 	cmp.w	r8, #0
 800af04:	d05b      	beq.n	800afbe <_dtoa_r+0xa5e>
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	4620      	mov	r0, r4
 800af0a:	f000 fb43 	bl	800b594 <_Balloc>
 800af0e:	4605      	mov	r5, r0
 800af10:	b928      	cbnz	r0, 800af1e <_dtoa_r+0x9be>
 800af12:	4b87      	ldr	r3, [pc, #540]	; (800b130 <_dtoa_r+0xbd0>)
 800af14:	4602      	mov	r2, r0
 800af16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af1a:	f7ff bb3b 	b.w	800a594 <_dtoa_r+0x34>
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	3202      	adds	r2, #2
 800af22:	0092      	lsls	r2, r2, #2
 800af24:	f107 010c 	add.w	r1, r7, #12
 800af28:	300c      	adds	r0, #12
 800af2a:	f7fe fcbf 	bl	80098ac <memcpy>
 800af2e:	2201      	movs	r2, #1
 800af30:	4629      	mov	r1, r5
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fd40 	bl	800b9b8 <__lshift>
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	f103 0901 	add.w	r9, r3, #1
 800af3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af42:	4413      	add	r3, r2
 800af44:	9305      	str	r3, [sp, #20]
 800af46:	f00a 0301 	and.w	r3, sl, #1
 800af4a:	46b8      	mov	r8, r7
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	4607      	mov	r7, r0
 800af50:	4631      	mov	r1, r6
 800af52:	ee18 0a10 	vmov	r0, s16
 800af56:	f7ff fa77 	bl	800a448 <quorem>
 800af5a:	4641      	mov	r1, r8
 800af5c:	9002      	str	r0, [sp, #8]
 800af5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af62:	ee18 0a10 	vmov	r0, s16
 800af66:	f000 fd97 	bl	800ba98 <__mcmp>
 800af6a:	463a      	mov	r2, r7
 800af6c:	9003      	str	r0, [sp, #12]
 800af6e:	4631      	mov	r1, r6
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fdad 	bl	800bad0 <__mdiff>
 800af76:	68c2      	ldr	r2, [r0, #12]
 800af78:	f109 3bff 	add.w	fp, r9, #4294967295
 800af7c:	4605      	mov	r5, r0
 800af7e:	bb02      	cbnz	r2, 800afc2 <_dtoa_r+0xa62>
 800af80:	4601      	mov	r1, r0
 800af82:	ee18 0a10 	vmov	r0, s16
 800af86:	f000 fd87 	bl	800ba98 <__mcmp>
 800af8a:	4602      	mov	r2, r0
 800af8c:	4629      	mov	r1, r5
 800af8e:	4620      	mov	r0, r4
 800af90:	9207      	str	r2, [sp, #28]
 800af92:	f000 fb3f 	bl	800b614 <_Bfree>
 800af96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800af9a:	ea43 0102 	orr.w	r1, r3, r2
 800af9e:	9b04      	ldr	r3, [sp, #16]
 800afa0:	430b      	orrs	r3, r1
 800afa2:	464d      	mov	r5, r9
 800afa4:	d10f      	bne.n	800afc6 <_dtoa_r+0xa66>
 800afa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afaa:	d02a      	beq.n	800b002 <_dtoa_r+0xaa2>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dd02      	ble.n	800afb8 <_dtoa_r+0xa58>
 800afb2:	9b02      	ldr	r3, [sp, #8]
 800afb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800afb8:	f88b a000 	strb.w	sl, [fp]
 800afbc:	e775      	b.n	800aeaa <_dtoa_r+0x94a>
 800afbe:	4638      	mov	r0, r7
 800afc0:	e7ba      	b.n	800af38 <_dtoa_r+0x9d8>
 800afc2:	2201      	movs	r2, #1
 800afc4:	e7e2      	b.n	800af8c <_dtoa_r+0xa2c>
 800afc6:	9b03      	ldr	r3, [sp, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	db04      	blt.n	800afd6 <_dtoa_r+0xa76>
 800afcc:	9906      	ldr	r1, [sp, #24]
 800afce:	430b      	orrs	r3, r1
 800afd0:	9904      	ldr	r1, [sp, #16]
 800afd2:	430b      	orrs	r3, r1
 800afd4:	d122      	bne.n	800b01c <_dtoa_r+0xabc>
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	ddee      	ble.n	800afb8 <_dtoa_r+0xa58>
 800afda:	ee18 1a10 	vmov	r1, s16
 800afde:	2201      	movs	r2, #1
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 fce9 	bl	800b9b8 <__lshift>
 800afe6:	4631      	mov	r1, r6
 800afe8:	ee08 0a10 	vmov	s16, r0
 800afec:	f000 fd54 	bl	800ba98 <__mcmp>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	dc03      	bgt.n	800affc <_dtoa_r+0xa9c>
 800aff4:	d1e0      	bne.n	800afb8 <_dtoa_r+0xa58>
 800aff6:	f01a 0f01 	tst.w	sl, #1
 800affa:	d0dd      	beq.n	800afb8 <_dtoa_r+0xa58>
 800affc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b000:	d1d7      	bne.n	800afb2 <_dtoa_r+0xa52>
 800b002:	2339      	movs	r3, #57	; 0x39
 800b004:	f88b 3000 	strb.w	r3, [fp]
 800b008:	462b      	mov	r3, r5
 800b00a:	461d      	mov	r5, r3
 800b00c:	3b01      	subs	r3, #1
 800b00e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b012:	2a39      	cmp	r2, #57	; 0x39
 800b014:	d071      	beq.n	800b0fa <_dtoa_r+0xb9a>
 800b016:	3201      	adds	r2, #1
 800b018:	701a      	strb	r2, [r3, #0]
 800b01a:	e746      	b.n	800aeaa <_dtoa_r+0x94a>
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	dd07      	ble.n	800b030 <_dtoa_r+0xad0>
 800b020:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b024:	d0ed      	beq.n	800b002 <_dtoa_r+0xaa2>
 800b026:	f10a 0301 	add.w	r3, sl, #1
 800b02a:	f88b 3000 	strb.w	r3, [fp]
 800b02e:	e73c      	b.n	800aeaa <_dtoa_r+0x94a>
 800b030:	9b05      	ldr	r3, [sp, #20]
 800b032:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b036:	4599      	cmp	r9, r3
 800b038:	d047      	beq.n	800b0ca <_dtoa_r+0xb6a>
 800b03a:	ee18 1a10 	vmov	r1, s16
 800b03e:	2300      	movs	r3, #0
 800b040:	220a      	movs	r2, #10
 800b042:	4620      	mov	r0, r4
 800b044:	f000 fb08 	bl	800b658 <__multadd>
 800b048:	45b8      	cmp	r8, r7
 800b04a:	ee08 0a10 	vmov	s16, r0
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	f04f 020a 	mov.w	r2, #10
 800b056:	4641      	mov	r1, r8
 800b058:	4620      	mov	r0, r4
 800b05a:	d106      	bne.n	800b06a <_dtoa_r+0xb0a>
 800b05c:	f000 fafc 	bl	800b658 <__multadd>
 800b060:	4680      	mov	r8, r0
 800b062:	4607      	mov	r7, r0
 800b064:	f109 0901 	add.w	r9, r9, #1
 800b068:	e772      	b.n	800af50 <_dtoa_r+0x9f0>
 800b06a:	f000 faf5 	bl	800b658 <__multadd>
 800b06e:	4639      	mov	r1, r7
 800b070:	4680      	mov	r8, r0
 800b072:	2300      	movs	r3, #0
 800b074:	220a      	movs	r2, #10
 800b076:	4620      	mov	r0, r4
 800b078:	f000 faee 	bl	800b658 <__multadd>
 800b07c:	4607      	mov	r7, r0
 800b07e:	e7f1      	b.n	800b064 <_dtoa_r+0xb04>
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	9302      	str	r3, [sp, #8]
 800b084:	9d01      	ldr	r5, [sp, #4]
 800b086:	ee18 0a10 	vmov	r0, s16
 800b08a:	4631      	mov	r1, r6
 800b08c:	f7ff f9dc 	bl	800a448 <quorem>
 800b090:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b094:	9b01      	ldr	r3, [sp, #4]
 800b096:	f805 ab01 	strb.w	sl, [r5], #1
 800b09a:	1aea      	subs	r2, r5, r3
 800b09c:	9b02      	ldr	r3, [sp, #8]
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	dd09      	ble.n	800b0b6 <_dtoa_r+0xb56>
 800b0a2:	ee18 1a10 	vmov	r1, s16
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 fad4 	bl	800b658 <__multadd>
 800b0b0:	ee08 0a10 	vmov	s16, r0
 800b0b4:	e7e7      	b.n	800b086 <_dtoa_r+0xb26>
 800b0b6:	9b02      	ldr	r3, [sp, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bfc8      	it	gt
 800b0bc:	461d      	movgt	r5, r3
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	bfd8      	it	le
 800b0c2:	2501      	movle	r5, #1
 800b0c4:	441d      	add	r5, r3
 800b0c6:	f04f 0800 	mov.w	r8, #0
 800b0ca:	ee18 1a10 	vmov	r1, s16
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fc71 	bl	800b9b8 <__lshift>
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	ee08 0a10 	vmov	s16, r0
 800b0dc:	f000 fcdc 	bl	800ba98 <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dc91      	bgt.n	800b008 <_dtoa_r+0xaa8>
 800b0e4:	d102      	bne.n	800b0ec <_dtoa_r+0xb8c>
 800b0e6:	f01a 0f01 	tst.w	sl, #1
 800b0ea:	d18d      	bne.n	800b008 <_dtoa_r+0xaa8>
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	461d      	mov	r5, r3
 800b0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f4:	2a30      	cmp	r2, #48	; 0x30
 800b0f6:	d0fa      	beq.n	800b0ee <_dtoa_r+0xb8e>
 800b0f8:	e6d7      	b.n	800aeaa <_dtoa_r+0x94a>
 800b0fa:	9a01      	ldr	r2, [sp, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d184      	bne.n	800b00a <_dtoa_r+0xaaa>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	2331      	movs	r3, #49	; 0x31
 800b108:	7013      	strb	r3, [r2, #0]
 800b10a:	e6ce      	b.n	800aeaa <_dtoa_r+0x94a>
 800b10c:	4b09      	ldr	r3, [pc, #36]	; (800b134 <_dtoa_r+0xbd4>)
 800b10e:	f7ff ba95 	b.w	800a63c <_dtoa_r+0xdc>
 800b112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b114:	2b00      	cmp	r3, #0
 800b116:	f47f aa6e 	bne.w	800a5f6 <_dtoa_r+0x96>
 800b11a:	4b07      	ldr	r3, [pc, #28]	; (800b138 <_dtoa_r+0xbd8>)
 800b11c:	f7ff ba8e 	b.w	800a63c <_dtoa_r+0xdc>
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	dcae      	bgt.n	800b084 <_dtoa_r+0xb24>
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	f73f aea8 	bgt.w	800ae7e <_dtoa_r+0x91e>
 800b12e:	e7a9      	b.n	800b084 <_dtoa_r+0xb24>
 800b130:	0800cf03 	.word	0x0800cf03
 800b134:	0800ce60 	.word	0x0800ce60
 800b138:	0800ce84 	.word	0x0800ce84

0800b13c <__sflush_r>:
 800b13c:	898a      	ldrh	r2, [r1, #12]
 800b13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b142:	4605      	mov	r5, r0
 800b144:	0710      	lsls	r0, r2, #28
 800b146:	460c      	mov	r4, r1
 800b148:	d458      	bmi.n	800b1fc <__sflush_r+0xc0>
 800b14a:	684b      	ldr	r3, [r1, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dc05      	bgt.n	800b15c <__sflush_r+0x20>
 800b150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b152:	2b00      	cmp	r3, #0
 800b154:	dc02      	bgt.n	800b15c <__sflush_r+0x20>
 800b156:	2000      	movs	r0, #0
 800b158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b15e:	2e00      	cmp	r6, #0
 800b160:	d0f9      	beq.n	800b156 <__sflush_r+0x1a>
 800b162:	2300      	movs	r3, #0
 800b164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b168:	682f      	ldr	r7, [r5, #0]
 800b16a:	602b      	str	r3, [r5, #0]
 800b16c:	d032      	beq.n	800b1d4 <__sflush_r+0x98>
 800b16e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	075a      	lsls	r2, r3, #29
 800b174:	d505      	bpl.n	800b182 <__sflush_r+0x46>
 800b176:	6863      	ldr	r3, [r4, #4]
 800b178:	1ac0      	subs	r0, r0, r3
 800b17a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b17c:	b10b      	cbz	r3, 800b182 <__sflush_r+0x46>
 800b17e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b180:	1ac0      	subs	r0, r0, r3
 800b182:	2300      	movs	r3, #0
 800b184:	4602      	mov	r2, r0
 800b186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b188:	6a21      	ldr	r1, [r4, #32]
 800b18a:	4628      	mov	r0, r5
 800b18c:	47b0      	blx	r6
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	d106      	bne.n	800b1a2 <__sflush_r+0x66>
 800b194:	6829      	ldr	r1, [r5, #0]
 800b196:	291d      	cmp	r1, #29
 800b198:	d82c      	bhi.n	800b1f4 <__sflush_r+0xb8>
 800b19a:	4a2a      	ldr	r2, [pc, #168]	; (800b244 <__sflush_r+0x108>)
 800b19c:	40ca      	lsrs	r2, r1
 800b19e:	07d6      	lsls	r6, r2, #31
 800b1a0:	d528      	bpl.n	800b1f4 <__sflush_r+0xb8>
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	6062      	str	r2, [r4, #4]
 800b1a6:	04d9      	lsls	r1, r3, #19
 800b1a8:	6922      	ldr	r2, [r4, #16]
 800b1aa:	6022      	str	r2, [r4, #0]
 800b1ac:	d504      	bpl.n	800b1b8 <__sflush_r+0x7c>
 800b1ae:	1c42      	adds	r2, r0, #1
 800b1b0:	d101      	bne.n	800b1b6 <__sflush_r+0x7a>
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	b903      	cbnz	r3, 800b1b8 <__sflush_r+0x7c>
 800b1b6:	6560      	str	r0, [r4, #84]	; 0x54
 800b1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ba:	602f      	str	r7, [r5, #0]
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	d0ca      	beq.n	800b156 <__sflush_r+0x1a>
 800b1c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1c4:	4299      	cmp	r1, r3
 800b1c6:	d002      	beq.n	800b1ce <__sflush_r+0x92>
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f000 fd7d 	bl	800bcc8 <_free_r>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b1d2:	e7c1      	b.n	800b158 <__sflush_r+0x1c>
 800b1d4:	6a21      	ldr	r1, [r4, #32]
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b0      	blx	r6
 800b1dc:	1c41      	adds	r1, r0, #1
 800b1de:	d1c7      	bne.n	800b170 <__sflush_r+0x34>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0c4      	beq.n	800b170 <__sflush_r+0x34>
 800b1e6:	2b1d      	cmp	r3, #29
 800b1e8:	d001      	beq.n	800b1ee <__sflush_r+0xb2>
 800b1ea:	2b16      	cmp	r3, #22
 800b1ec:	d101      	bne.n	800b1f2 <__sflush_r+0xb6>
 800b1ee:	602f      	str	r7, [r5, #0]
 800b1f0:	e7b1      	b.n	800b156 <__sflush_r+0x1a>
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f8:	81a3      	strh	r3, [r4, #12]
 800b1fa:	e7ad      	b.n	800b158 <__sflush_r+0x1c>
 800b1fc:	690f      	ldr	r7, [r1, #16]
 800b1fe:	2f00      	cmp	r7, #0
 800b200:	d0a9      	beq.n	800b156 <__sflush_r+0x1a>
 800b202:	0793      	lsls	r3, r2, #30
 800b204:	680e      	ldr	r6, [r1, #0]
 800b206:	bf08      	it	eq
 800b208:	694b      	ldreq	r3, [r1, #20]
 800b20a:	600f      	str	r7, [r1, #0]
 800b20c:	bf18      	it	ne
 800b20e:	2300      	movne	r3, #0
 800b210:	eba6 0807 	sub.w	r8, r6, r7
 800b214:	608b      	str	r3, [r1, #8]
 800b216:	f1b8 0f00 	cmp.w	r8, #0
 800b21a:	dd9c      	ble.n	800b156 <__sflush_r+0x1a>
 800b21c:	6a21      	ldr	r1, [r4, #32]
 800b21e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b220:	4643      	mov	r3, r8
 800b222:	463a      	mov	r2, r7
 800b224:	4628      	mov	r0, r5
 800b226:	47b0      	blx	r6
 800b228:	2800      	cmp	r0, #0
 800b22a:	dc06      	bgt.n	800b23a <__sflush_r+0xfe>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b232:	81a3      	strh	r3, [r4, #12]
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	e78e      	b.n	800b158 <__sflush_r+0x1c>
 800b23a:	4407      	add	r7, r0
 800b23c:	eba8 0800 	sub.w	r8, r8, r0
 800b240:	e7e9      	b.n	800b216 <__sflush_r+0xda>
 800b242:	bf00      	nop
 800b244:	20400001 	.word	0x20400001

0800b248 <_fflush_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	690b      	ldr	r3, [r1, #16]
 800b24c:	4605      	mov	r5, r0
 800b24e:	460c      	mov	r4, r1
 800b250:	b913      	cbnz	r3, 800b258 <_fflush_r+0x10>
 800b252:	2500      	movs	r5, #0
 800b254:	4628      	mov	r0, r5
 800b256:	bd38      	pop	{r3, r4, r5, pc}
 800b258:	b118      	cbz	r0, 800b262 <_fflush_r+0x1a>
 800b25a:	6983      	ldr	r3, [r0, #24]
 800b25c:	b90b      	cbnz	r3, 800b262 <_fflush_r+0x1a>
 800b25e:	f000 f887 	bl	800b370 <__sinit>
 800b262:	4b14      	ldr	r3, [pc, #80]	; (800b2b4 <_fflush_r+0x6c>)
 800b264:	429c      	cmp	r4, r3
 800b266:	d11b      	bne.n	800b2a0 <_fflush_r+0x58>
 800b268:	686c      	ldr	r4, [r5, #4]
 800b26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d0ef      	beq.n	800b252 <_fflush_r+0xa>
 800b272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b274:	07d0      	lsls	r0, r2, #31
 800b276:	d404      	bmi.n	800b282 <_fflush_r+0x3a>
 800b278:	0599      	lsls	r1, r3, #22
 800b27a:	d402      	bmi.n	800b282 <_fflush_r+0x3a>
 800b27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b27e:	f000 f91a 	bl	800b4b6 <__retarget_lock_acquire_recursive>
 800b282:	4628      	mov	r0, r5
 800b284:	4621      	mov	r1, r4
 800b286:	f7ff ff59 	bl	800b13c <__sflush_r>
 800b28a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b28c:	07da      	lsls	r2, r3, #31
 800b28e:	4605      	mov	r5, r0
 800b290:	d4e0      	bmi.n	800b254 <_fflush_r+0xc>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	059b      	lsls	r3, r3, #22
 800b296:	d4dd      	bmi.n	800b254 <_fflush_r+0xc>
 800b298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b29a:	f000 f90d 	bl	800b4b8 <__retarget_lock_release_recursive>
 800b29e:	e7d9      	b.n	800b254 <_fflush_r+0xc>
 800b2a0:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <_fflush_r+0x70>)
 800b2a2:	429c      	cmp	r4, r3
 800b2a4:	d101      	bne.n	800b2aa <_fflush_r+0x62>
 800b2a6:	68ac      	ldr	r4, [r5, #8]
 800b2a8:	e7df      	b.n	800b26a <_fflush_r+0x22>
 800b2aa:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <_fflush_r+0x74>)
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	bf08      	it	eq
 800b2b0:	68ec      	ldreq	r4, [r5, #12]
 800b2b2:	e7da      	b.n	800b26a <_fflush_r+0x22>
 800b2b4:	0800cf34 	.word	0x0800cf34
 800b2b8:	0800cf54 	.word	0x0800cf54
 800b2bc:	0800cf14 	.word	0x0800cf14

0800b2c0 <std>:
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	b510      	push	{r4, lr}
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2ce:	6083      	str	r3, [r0, #8]
 800b2d0:	8181      	strh	r1, [r0, #12]
 800b2d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2d4:	81c2      	strh	r2, [r0, #14]
 800b2d6:	6183      	str	r3, [r0, #24]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	2208      	movs	r2, #8
 800b2dc:	305c      	adds	r0, #92	; 0x5c
 800b2de:	f7fe faf3 	bl	80098c8 <memset>
 800b2e2:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <std+0x38>)
 800b2e4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <std+0x3c>)
 800b2e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ea:	4b05      	ldr	r3, [pc, #20]	; (800b300 <std+0x40>)
 800b2ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2ee:	4b05      	ldr	r3, [pc, #20]	; (800b304 <std+0x44>)
 800b2f0:	6224      	str	r4, [r4, #32]
 800b2f2:	6323      	str	r3, [r4, #48]	; 0x30
 800b2f4:	bd10      	pop	{r4, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800c15d 	.word	0x0800c15d
 800b2fc:	0800c17f 	.word	0x0800c17f
 800b300:	0800c1b7 	.word	0x0800c1b7
 800b304:	0800c1db 	.word	0x0800c1db

0800b308 <_cleanup_r>:
 800b308:	4901      	ldr	r1, [pc, #4]	; (800b310 <_cleanup_r+0x8>)
 800b30a:	f000 b8af 	b.w	800b46c <_fwalk_reent>
 800b30e:	bf00      	nop
 800b310:	0800b249 	.word	0x0800b249

0800b314 <__sfmoreglue>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	2268      	movs	r2, #104	; 0x68
 800b318:	1e4d      	subs	r5, r1, #1
 800b31a:	4355      	muls	r5, r2
 800b31c:	460e      	mov	r6, r1
 800b31e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b322:	f000 fd3d 	bl	800bda0 <_malloc_r>
 800b326:	4604      	mov	r4, r0
 800b328:	b140      	cbz	r0, 800b33c <__sfmoreglue+0x28>
 800b32a:	2100      	movs	r1, #0
 800b32c:	e9c0 1600 	strd	r1, r6, [r0]
 800b330:	300c      	adds	r0, #12
 800b332:	60a0      	str	r0, [r4, #8]
 800b334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b338:	f7fe fac6 	bl	80098c8 <memset>
 800b33c:	4620      	mov	r0, r4
 800b33e:	bd70      	pop	{r4, r5, r6, pc}

0800b340 <__sfp_lock_acquire>:
 800b340:	4801      	ldr	r0, [pc, #4]	; (800b348 <__sfp_lock_acquire+0x8>)
 800b342:	f000 b8b8 	b.w	800b4b6 <__retarget_lock_acquire_recursive>
 800b346:	bf00      	nop
 800b348:	20001b81 	.word	0x20001b81

0800b34c <__sfp_lock_release>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__sfp_lock_release+0x8>)
 800b34e:	f000 b8b3 	b.w	800b4b8 <__retarget_lock_release_recursive>
 800b352:	bf00      	nop
 800b354:	20001b81 	.word	0x20001b81

0800b358 <__sinit_lock_acquire>:
 800b358:	4801      	ldr	r0, [pc, #4]	; (800b360 <__sinit_lock_acquire+0x8>)
 800b35a:	f000 b8ac 	b.w	800b4b6 <__retarget_lock_acquire_recursive>
 800b35e:	bf00      	nop
 800b360:	20001b82 	.word	0x20001b82

0800b364 <__sinit_lock_release>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__sinit_lock_release+0x8>)
 800b366:	f000 b8a7 	b.w	800b4b8 <__retarget_lock_release_recursive>
 800b36a:	bf00      	nop
 800b36c:	20001b82 	.word	0x20001b82

0800b370 <__sinit>:
 800b370:	b510      	push	{r4, lr}
 800b372:	4604      	mov	r4, r0
 800b374:	f7ff fff0 	bl	800b358 <__sinit_lock_acquire>
 800b378:	69a3      	ldr	r3, [r4, #24]
 800b37a:	b11b      	cbz	r3, 800b384 <__sinit+0x14>
 800b37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b380:	f7ff bff0 	b.w	800b364 <__sinit_lock_release>
 800b384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b388:	6523      	str	r3, [r4, #80]	; 0x50
 800b38a:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <__sinit+0x68>)
 800b38c:	4a13      	ldr	r2, [pc, #76]	; (800b3dc <__sinit+0x6c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	62a2      	str	r2, [r4, #40]	; 0x28
 800b392:	42a3      	cmp	r3, r4
 800b394:	bf04      	itt	eq
 800b396:	2301      	moveq	r3, #1
 800b398:	61a3      	streq	r3, [r4, #24]
 800b39a:	4620      	mov	r0, r4
 800b39c:	f000 f820 	bl	800b3e0 <__sfp>
 800b3a0:	6060      	str	r0, [r4, #4]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f000 f81c 	bl	800b3e0 <__sfp>
 800b3a8:	60a0      	str	r0, [r4, #8]
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 f818 	bl	800b3e0 <__sfp>
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	60e0      	str	r0, [r4, #12]
 800b3b4:	2104      	movs	r1, #4
 800b3b6:	6860      	ldr	r0, [r4, #4]
 800b3b8:	f7ff ff82 	bl	800b2c0 <std>
 800b3bc:	68a0      	ldr	r0, [r4, #8]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	2109      	movs	r1, #9
 800b3c2:	f7ff ff7d 	bl	800b2c0 <std>
 800b3c6:	68e0      	ldr	r0, [r4, #12]
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	2112      	movs	r1, #18
 800b3cc:	f7ff ff78 	bl	800b2c0 <std>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	61a3      	str	r3, [r4, #24]
 800b3d4:	e7d2      	b.n	800b37c <__sinit+0xc>
 800b3d6:	bf00      	nop
 800b3d8:	0800ce4c 	.word	0x0800ce4c
 800b3dc:	0800b309 	.word	0x0800b309

0800b3e0 <__sfp>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	f7ff ffac 	bl	800b340 <__sfp_lock_acquire>
 800b3e8:	4b1e      	ldr	r3, [pc, #120]	; (800b464 <__sfp+0x84>)
 800b3ea:	681e      	ldr	r6, [r3, #0]
 800b3ec:	69b3      	ldr	r3, [r6, #24]
 800b3ee:	b913      	cbnz	r3, 800b3f6 <__sfp+0x16>
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f7ff ffbd 	bl	800b370 <__sinit>
 800b3f6:	3648      	adds	r6, #72	; 0x48
 800b3f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	d503      	bpl.n	800b408 <__sfp+0x28>
 800b400:	6833      	ldr	r3, [r6, #0]
 800b402:	b30b      	cbz	r3, 800b448 <__sfp+0x68>
 800b404:	6836      	ldr	r6, [r6, #0]
 800b406:	e7f7      	b.n	800b3f8 <__sfp+0x18>
 800b408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b40c:	b9d5      	cbnz	r5, 800b444 <__sfp+0x64>
 800b40e:	4b16      	ldr	r3, [pc, #88]	; (800b468 <__sfp+0x88>)
 800b410:	60e3      	str	r3, [r4, #12]
 800b412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b416:	6665      	str	r5, [r4, #100]	; 0x64
 800b418:	f000 f84c 	bl	800b4b4 <__retarget_lock_init_recursive>
 800b41c:	f7ff ff96 	bl	800b34c <__sfp_lock_release>
 800b420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b428:	6025      	str	r5, [r4, #0]
 800b42a:	61a5      	str	r5, [r4, #24]
 800b42c:	2208      	movs	r2, #8
 800b42e:	4629      	mov	r1, r5
 800b430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b434:	f7fe fa48 	bl	80098c8 <memset>
 800b438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b43c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b440:	4620      	mov	r0, r4
 800b442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b444:	3468      	adds	r4, #104	; 0x68
 800b446:	e7d9      	b.n	800b3fc <__sfp+0x1c>
 800b448:	2104      	movs	r1, #4
 800b44a:	4638      	mov	r0, r7
 800b44c:	f7ff ff62 	bl	800b314 <__sfmoreglue>
 800b450:	4604      	mov	r4, r0
 800b452:	6030      	str	r0, [r6, #0]
 800b454:	2800      	cmp	r0, #0
 800b456:	d1d5      	bne.n	800b404 <__sfp+0x24>
 800b458:	f7ff ff78 	bl	800b34c <__sfp_lock_release>
 800b45c:	230c      	movs	r3, #12
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	e7ee      	b.n	800b440 <__sfp+0x60>
 800b462:	bf00      	nop
 800b464:	0800ce4c 	.word	0x0800ce4c
 800b468:	ffff0001 	.word	0xffff0001

0800b46c <_fwalk_reent>:
 800b46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b470:	4606      	mov	r6, r0
 800b472:	4688      	mov	r8, r1
 800b474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b478:	2700      	movs	r7, #0
 800b47a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b47e:	f1b9 0901 	subs.w	r9, r9, #1
 800b482:	d505      	bpl.n	800b490 <_fwalk_reent+0x24>
 800b484:	6824      	ldr	r4, [r4, #0]
 800b486:	2c00      	cmp	r4, #0
 800b488:	d1f7      	bne.n	800b47a <_fwalk_reent+0xe>
 800b48a:	4638      	mov	r0, r7
 800b48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b490:	89ab      	ldrh	r3, [r5, #12]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d907      	bls.n	800b4a6 <_fwalk_reent+0x3a>
 800b496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b49a:	3301      	adds	r3, #1
 800b49c:	d003      	beq.n	800b4a6 <_fwalk_reent+0x3a>
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	47c0      	blx	r8
 800b4a4:	4307      	orrs	r7, r0
 800b4a6:	3568      	adds	r5, #104	; 0x68
 800b4a8:	e7e9      	b.n	800b47e <_fwalk_reent+0x12>
	...

0800b4ac <_localeconv_r>:
 800b4ac:	4800      	ldr	r0, [pc, #0]	; (800b4b0 <_localeconv_r+0x4>)
 800b4ae:	4770      	bx	lr
 800b4b0:	20000270 	.word	0x20000270

0800b4b4 <__retarget_lock_init_recursive>:
 800b4b4:	4770      	bx	lr

0800b4b6 <__retarget_lock_acquire_recursive>:
 800b4b6:	4770      	bx	lr

0800b4b8 <__retarget_lock_release_recursive>:
 800b4b8:	4770      	bx	lr

0800b4ba <__swhatbuf_r>:
 800b4ba:	b570      	push	{r4, r5, r6, lr}
 800b4bc:	460e      	mov	r6, r1
 800b4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c2:	2900      	cmp	r1, #0
 800b4c4:	b096      	sub	sp, #88	; 0x58
 800b4c6:	4614      	mov	r4, r2
 800b4c8:	461d      	mov	r5, r3
 800b4ca:	da08      	bge.n	800b4de <__swhatbuf_r+0x24>
 800b4cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	602a      	str	r2, [r5, #0]
 800b4d4:	061a      	lsls	r2, r3, #24
 800b4d6:	d410      	bmi.n	800b4fa <__swhatbuf_r+0x40>
 800b4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4dc:	e00e      	b.n	800b4fc <__swhatbuf_r+0x42>
 800b4de:	466a      	mov	r2, sp
 800b4e0:	f000 fed2 	bl	800c288 <_fstat_r>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	dbf1      	blt.n	800b4cc <__swhatbuf_r+0x12>
 800b4e8:	9a01      	ldr	r2, [sp, #4]
 800b4ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4f2:	425a      	negs	r2, r3
 800b4f4:	415a      	adcs	r2, r3
 800b4f6:	602a      	str	r2, [r5, #0]
 800b4f8:	e7ee      	b.n	800b4d8 <__swhatbuf_r+0x1e>
 800b4fa:	2340      	movs	r3, #64	; 0x40
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	b016      	add	sp, #88	; 0x58
 800b502:	bd70      	pop	{r4, r5, r6, pc}

0800b504 <__smakebuf_r>:
 800b504:	898b      	ldrh	r3, [r1, #12]
 800b506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b508:	079d      	lsls	r5, r3, #30
 800b50a:	4606      	mov	r6, r0
 800b50c:	460c      	mov	r4, r1
 800b50e:	d507      	bpl.n	800b520 <__smakebuf_r+0x1c>
 800b510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	6123      	str	r3, [r4, #16]
 800b518:	2301      	movs	r3, #1
 800b51a:	6163      	str	r3, [r4, #20]
 800b51c:	b002      	add	sp, #8
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	ab01      	add	r3, sp, #4
 800b522:	466a      	mov	r2, sp
 800b524:	f7ff ffc9 	bl	800b4ba <__swhatbuf_r>
 800b528:	9900      	ldr	r1, [sp, #0]
 800b52a:	4605      	mov	r5, r0
 800b52c:	4630      	mov	r0, r6
 800b52e:	f000 fc37 	bl	800bda0 <_malloc_r>
 800b532:	b948      	cbnz	r0, 800b548 <__smakebuf_r+0x44>
 800b534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b538:	059a      	lsls	r2, r3, #22
 800b53a:	d4ef      	bmi.n	800b51c <__smakebuf_r+0x18>
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	f043 0302 	orr.w	r3, r3, #2
 800b544:	81a3      	strh	r3, [r4, #12]
 800b546:	e7e3      	b.n	800b510 <__smakebuf_r+0xc>
 800b548:	4b0d      	ldr	r3, [pc, #52]	; (800b580 <__smakebuf_r+0x7c>)
 800b54a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	6020      	str	r0, [r4, #0]
 800b550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	6163      	str	r3, [r4, #20]
 800b55a:	9b01      	ldr	r3, [sp, #4]
 800b55c:	6120      	str	r0, [r4, #16]
 800b55e:	b15b      	cbz	r3, 800b578 <__smakebuf_r+0x74>
 800b560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b564:	4630      	mov	r0, r6
 800b566:	f000 fea1 	bl	800c2ac <_isatty_r>
 800b56a:	b128      	cbz	r0, 800b578 <__smakebuf_r+0x74>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	f023 0303 	bic.w	r3, r3, #3
 800b572:	f043 0301 	orr.w	r3, r3, #1
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	89a0      	ldrh	r0, [r4, #12]
 800b57a:	4305      	orrs	r5, r0
 800b57c:	81a5      	strh	r5, [r4, #12]
 800b57e:	e7cd      	b.n	800b51c <__smakebuf_r+0x18>
 800b580:	0800b309 	.word	0x0800b309

0800b584 <malloc>:
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <malloc+0xc>)
 800b586:	4601      	mov	r1, r0
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f000 bc09 	b.w	800bda0 <_malloc_r>
 800b58e:	bf00      	nop
 800b590:	2000011c 	.word	0x2000011c

0800b594 <_Balloc>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b598:	4604      	mov	r4, r0
 800b59a:	460d      	mov	r5, r1
 800b59c:	b976      	cbnz	r6, 800b5bc <_Balloc+0x28>
 800b59e:	2010      	movs	r0, #16
 800b5a0:	f7ff fff0 	bl	800b584 <malloc>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	6260      	str	r0, [r4, #36]	; 0x24
 800b5a8:	b920      	cbnz	r0, 800b5b4 <_Balloc+0x20>
 800b5aa:	4b18      	ldr	r3, [pc, #96]	; (800b60c <_Balloc+0x78>)
 800b5ac:	4818      	ldr	r0, [pc, #96]	; (800b610 <_Balloc+0x7c>)
 800b5ae:	2166      	movs	r1, #102	; 0x66
 800b5b0:	f000 fe2a 	bl	800c208 <__assert_func>
 800b5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b8:	6006      	str	r6, [r0, #0]
 800b5ba:	60c6      	str	r6, [r0, #12]
 800b5bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5be:	68f3      	ldr	r3, [r6, #12]
 800b5c0:	b183      	cbz	r3, 800b5e4 <_Balloc+0x50>
 800b5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ca:	b9b8      	cbnz	r0, 800b5fc <_Balloc+0x68>
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b5d2:	1d72      	adds	r2, r6, #5
 800b5d4:	0092      	lsls	r2, r2, #2
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 fb60 	bl	800bc9c <_calloc_r>
 800b5dc:	b160      	cbz	r0, 800b5f8 <_Balloc+0x64>
 800b5de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5e2:	e00e      	b.n	800b602 <_Balloc+0x6e>
 800b5e4:	2221      	movs	r2, #33	; 0x21
 800b5e6:	2104      	movs	r1, #4
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 fb57 	bl	800bc9c <_calloc_r>
 800b5ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f0:	60f0      	str	r0, [r6, #12]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e4      	bne.n	800b5c2 <_Balloc+0x2e>
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	6802      	ldr	r2, [r0, #0]
 800b5fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b602:	2300      	movs	r3, #0
 800b604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b608:	e7f7      	b.n	800b5fa <_Balloc+0x66>
 800b60a:	bf00      	nop
 800b60c:	0800ce91 	.word	0x0800ce91
 800b610:	0800cf74 	.word	0x0800cf74

0800b614 <_Bfree>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b618:	4605      	mov	r5, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	b976      	cbnz	r6, 800b63c <_Bfree+0x28>
 800b61e:	2010      	movs	r0, #16
 800b620:	f7ff ffb0 	bl	800b584 <malloc>
 800b624:	4602      	mov	r2, r0
 800b626:	6268      	str	r0, [r5, #36]	; 0x24
 800b628:	b920      	cbnz	r0, 800b634 <_Bfree+0x20>
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <_Bfree+0x3c>)
 800b62c:	4809      	ldr	r0, [pc, #36]	; (800b654 <_Bfree+0x40>)
 800b62e:	218a      	movs	r1, #138	; 0x8a
 800b630:	f000 fdea 	bl	800c208 <__assert_func>
 800b634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b638:	6006      	str	r6, [r0, #0]
 800b63a:	60c6      	str	r6, [r0, #12]
 800b63c:	b13c      	cbz	r4, 800b64e <_Bfree+0x3a>
 800b63e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b640:	6862      	ldr	r2, [r4, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b648:	6021      	str	r1, [r4, #0]
 800b64a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	0800ce91 	.word	0x0800ce91
 800b654:	0800cf74 	.word	0x0800cf74

0800b658 <__multadd>:
 800b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65c:	690d      	ldr	r5, [r1, #16]
 800b65e:	4607      	mov	r7, r0
 800b660:	460c      	mov	r4, r1
 800b662:	461e      	mov	r6, r3
 800b664:	f101 0c14 	add.w	ip, r1, #20
 800b668:	2000      	movs	r0, #0
 800b66a:	f8dc 3000 	ldr.w	r3, [ip]
 800b66e:	b299      	uxth	r1, r3
 800b670:	fb02 6101 	mla	r1, r2, r1, r6
 800b674:	0c1e      	lsrs	r6, r3, #16
 800b676:	0c0b      	lsrs	r3, r1, #16
 800b678:	fb02 3306 	mla	r3, r2, r6, r3
 800b67c:	b289      	uxth	r1, r1
 800b67e:	3001      	adds	r0, #1
 800b680:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b684:	4285      	cmp	r5, r0
 800b686:	f84c 1b04 	str.w	r1, [ip], #4
 800b68a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b68e:	dcec      	bgt.n	800b66a <__multadd+0x12>
 800b690:	b30e      	cbz	r6, 800b6d6 <__multadd+0x7e>
 800b692:	68a3      	ldr	r3, [r4, #8]
 800b694:	42ab      	cmp	r3, r5
 800b696:	dc19      	bgt.n	800b6cc <__multadd+0x74>
 800b698:	6861      	ldr	r1, [r4, #4]
 800b69a:	4638      	mov	r0, r7
 800b69c:	3101      	adds	r1, #1
 800b69e:	f7ff ff79 	bl	800b594 <_Balloc>
 800b6a2:	4680      	mov	r8, r0
 800b6a4:	b928      	cbnz	r0, 800b6b2 <__multadd+0x5a>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	4b0c      	ldr	r3, [pc, #48]	; (800b6dc <__multadd+0x84>)
 800b6aa:	480d      	ldr	r0, [pc, #52]	; (800b6e0 <__multadd+0x88>)
 800b6ac:	21b5      	movs	r1, #181	; 0xb5
 800b6ae:	f000 fdab 	bl	800c208 <__assert_func>
 800b6b2:	6922      	ldr	r2, [r4, #16]
 800b6b4:	3202      	adds	r2, #2
 800b6b6:	f104 010c 	add.w	r1, r4, #12
 800b6ba:	0092      	lsls	r2, r2, #2
 800b6bc:	300c      	adds	r0, #12
 800b6be:	f7fe f8f5 	bl	80098ac <memcpy>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7ff ffa5 	bl	800b614 <_Bfree>
 800b6ca:	4644      	mov	r4, r8
 800b6cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6d0:	3501      	adds	r5, #1
 800b6d2:	615e      	str	r6, [r3, #20]
 800b6d4:	6125      	str	r5, [r4, #16]
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6dc:	0800cf03 	.word	0x0800cf03
 800b6e0:	0800cf74 	.word	0x0800cf74

0800b6e4 <__hi0bits>:
 800b6e4:	0c03      	lsrs	r3, r0, #16
 800b6e6:	041b      	lsls	r3, r3, #16
 800b6e8:	b9d3      	cbnz	r3, 800b720 <__hi0bits+0x3c>
 800b6ea:	0400      	lsls	r0, r0, #16
 800b6ec:	2310      	movs	r3, #16
 800b6ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6f2:	bf04      	itt	eq
 800b6f4:	0200      	lsleq	r0, r0, #8
 800b6f6:	3308      	addeq	r3, #8
 800b6f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6fc:	bf04      	itt	eq
 800b6fe:	0100      	lsleq	r0, r0, #4
 800b700:	3304      	addeq	r3, #4
 800b702:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b706:	bf04      	itt	eq
 800b708:	0080      	lsleq	r0, r0, #2
 800b70a:	3302      	addeq	r3, #2
 800b70c:	2800      	cmp	r0, #0
 800b70e:	db05      	blt.n	800b71c <__hi0bits+0x38>
 800b710:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b714:	f103 0301 	add.w	r3, r3, #1
 800b718:	bf08      	it	eq
 800b71a:	2320      	moveq	r3, #32
 800b71c:	4618      	mov	r0, r3
 800b71e:	4770      	bx	lr
 800b720:	2300      	movs	r3, #0
 800b722:	e7e4      	b.n	800b6ee <__hi0bits+0xa>

0800b724 <__lo0bits>:
 800b724:	6803      	ldr	r3, [r0, #0]
 800b726:	f013 0207 	ands.w	r2, r3, #7
 800b72a:	4601      	mov	r1, r0
 800b72c:	d00b      	beq.n	800b746 <__lo0bits+0x22>
 800b72e:	07da      	lsls	r2, r3, #31
 800b730:	d423      	bmi.n	800b77a <__lo0bits+0x56>
 800b732:	0798      	lsls	r0, r3, #30
 800b734:	bf49      	itett	mi
 800b736:	085b      	lsrmi	r3, r3, #1
 800b738:	089b      	lsrpl	r3, r3, #2
 800b73a:	2001      	movmi	r0, #1
 800b73c:	600b      	strmi	r3, [r1, #0]
 800b73e:	bf5c      	itt	pl
 800b740:	600b      	strpl	r3, [r1, #0]
 800b742:	2002      	movpl	r0, #2
 800b744:	4770      	bx	lr
 800b746:	b298      	uxth	r0, r3
 800b748:	b9a8      	cbnz	r0, 800b776 <__lo0bits+0x52>
 800b74a:	0c1b      	lsrs	r3, r3, #16
 800b74c:	2010      	movs	r0, #16
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	b90a      	cbnz	r2, 800b756 <__lo0bits+0x32>
 800b752:	3008      	adds	r0, #8
 800b754:	0a1b      	lsrs	r3, r3, #8
 800b756:	071a      	lsls	r2, r3, #28
 800b758:	bf04      	itt	eq
 800b75a:	091b      	lsreq	r3, r3, #4
 800b75c:	3004      	addeq	r0, #4
 800b75e:	079a      	lsls	r2, r3, #30
 800b760:	bf04      	itt	eq
 800b762:	089b      	lsreq	r3, r3, #2
 800b764:	3002      	addeq	r0, #2
 800b766:	07da      	lsls	r2, r3, #31
 800b768:	d403      	bmi.n	800b772 <__lo0bits+0x4e>
 800b76a:	085b      	lsrs	r3, r3, #1
 800b76c:	f100 0001 	add.w	r0, r0, #1
 800b770:	d005      	beq.n	800b77e <__lo0bits+0x5a>
 800b772:	600b      	str	r3, [r1, #0]
 800b774:	4770      	bx	lr
 800b776:	4610      	mov	r0, r2
 800b778:	e7e9      	b.n	800b74e <__lo0bits+0x2a>
 800b77a:	2000      	movs	r0, #0
 800b77c:	4770      	bx	lr
 800b77e:	2020      	movs	r0, #32
 800b780:	4770      	bx	lr
	...

0800b784 <__i2b>:
 800b784:	b510      	push	{r4, lr}
 800b786:	460c      	mov	r4, r1
 800b788:	2101      	movs	r1, #1
 800b78a:	f7ff ff03 	bl	800b594 <_Balloc>
 800b78e:	4602      	mov	r2, r0
 800b790:	b928      	cbnz	r0, 800b79e <__i2b+0x1a>
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <__i2b+0x24>)
 800b794:	4805      	ldr	r0, [pc, #20]	; (800b7ac <__i2b+0x28>)
 800b796:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b79a:	f000 fd35 	bl	800c208 <__assert_func>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	6144      	str	r4, [r0, #20]
 800b7a2:	6103      	str	r3, [r0, #16]
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	bf00      	nop
 800b7a8:	0800cf03 	.word	0x0800cf03
 800b7ac:	0800cf74 	.word	0x0800cf74

0800b7b0 <__multiply>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	4691      	mov	r9, r2
 800b7b6:	690a      	ldr	r2, [r1, #16]
 800b7b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	bfb8      	it	lt
 800b7c0:	460b      	movlt	r3, r1
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	bfbc      	itt	lt
 800b7c6:	464c      	movlt	r4, r9
 800b7c8:	4699      	movlt	r9, r3
 800b7ca:	6927      	ldr	r7, [r4, #16]
 800b7cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7d0:	68a3      	ldr	r3, [r4, #8]
 800b7d2:	6861      	ldr	r1, [r4, #4]
 800b7d4:	eb07 060a 	add.w	r6, r7, sl
 800b7d8:	42b3      	cmp	r3, r6
 800b7da:	b085      	sub	sp, #20
 800b7dc:	bfb8      	it	lt
 800b7de:	3101      	addlt	r1, #1
 800b7e0:	f7ff fed8 	bl	800b594 <_Balloc>
 800b7e4:	b930      	cbnz	r0, 800b7f4 <__multiply+0x44>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	4b44      	ldr	r3, [pc, #272]	; (800b8fc <__multiply+0x14c>)
 800b7ea:	4845      	ldr	r0, [pc, #276]	; (800b900 <__multiply+0x150>)
 800b7ec:	f240 115d 	movw	r1, #349	; 0x15d
 800b7f0:	f000 fd0a 	bl	800c208 <__assert_func>
 800b7f4:	f100 0514 	add.w	r5, r0, #20
 800b7f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7fc:	462b      	mov	r3, r5
 800b7fe:	2200      	movs	r2, #0
 800b800:	4543      	cmp	r3, r8
 800b802:	d321      	bcc.n	800b848 <__multiply+0x98>
 800b804:	f104 0314 	add.w	r3, r4, #20
 800b808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b80c:	f109 0314 	add.w	r3, r9, #20
 800b810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b814:	9202      	str	r2, [sp, #8]
 800b816:	1b3a      	subs	r2, r7, r4
 800b818:	3a15      	subs	r2, #21
 800b81a:	f022 0203 	bic.w	r2, r2, #3
 800b81e:	3204      	adds	r2, #4
 800b820:	f104 0115 	add.w	r1, r4, #21
 800b824:	428f      	cmp	r7, r1
 800b826:	bf38      	it	cc
 800b828:	2204      	movcc	r2, #4
 800b82a:	9201      	str	r2, [sp, #4]
 800b82c:	9a02      	ldr	r2, [sp, #8]
 800b82e:	9303      	str	r3, [sp, #12]
 800b830:	429a      	cmp	r2, r3
 800b832:	d80c      	bhi.n	800b84e <__multiply+0x9e>
 800b834:	2e00      	cmp	r6, #0
 800b836:	dd03      	ble.n	800b840 <__multiply+0x90>
 800b838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d05a      	beq.n	800b8f6 <__multiply+0x146>
 800b840:	6106      	str	r6, [r0, #16]
 800b842:	b005      	add	sp, #20
 800b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b848:	f843 2b04 	str.w	r2, [r3], #4
 800b84c:	e7d8      	b.n	800b800 <__multiply+0x50>
 800b84e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b852:	f1ba 0f00 	cmp.w	sl, #0
 800b856:	d024      	beq.n	800b8a2 <__multiply+0xf2>
 800b858:	f104 0e14 	add.w	lr, r4, #20
 800b85c:	46a9      	mov	r9, r5
 800b85e:	f04f 0c00 	mov.w	ip, #0
 800b862:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b866:	f8d9 1000 	ldr.w	r1, [r9]
 800b86a:	fa1f fb82 	uxth.w	fp, r2
 800b86e:	b289      	uxth	r1, r1
 800b870:	fb0a 110b 	mla	r1, sl, fp, r1
 800b874:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b878:	f8d9 2000 	ldr.w	r2, [r9]
 800b87c:	4461      	add	r1, ip
 800b87e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b882:	fb0a c20b 	mla	r2, sl, fp, ip
 800b886:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b88a:	b289      	uxth	r1, r1
 800b88c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b890:	4577      	cmp	r7, lr
 800b892:	f849 1b04 	str.w	r1, [r9], #4
 800b896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b89a:	d8e2      	bhi.n	800b862 <__multiply+0xb2>
 800b89c:	9a01      	ldr	r2, [sp, #4]
 800b89e:	f845 c002 	str.w	ip, [r5, r2]
 800b8a2:	9a03      	ldr	r2, [sp, #12]
 800b8a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	f1b9 0f00 	cmp.w	r9, #0
 800b8ae:	d020      	beq.n	800b8f2 <__multiply+0x142>
 800b8b0:	6829      	ldr	r1, [r5, #0]
 800b8b2:	f104 0c14 	add.w	ip, r4, #20
 800b8b6:	46ae      	mov	lr, r5
 800b8b8:	f04f 0a00 	mov.w	sl, #0
 800b8bc:	f8bc b000 	ldrh.w	fp, [ip]
 800b8c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8c4:	fb09 220b 	mla	r2, r9, fp, r2
 800b8c8:	4492      	add	sl, r2
 800b8ca:	b289      	uxth	r1, r1
 800b8cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b8d0:	f84e 1b04 	str.w	r1, [lr], #4
 800b8d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b8d8:	f8be 1000 	ldrh.w	r1, [lr]
 800b8dc:	0c12      	lsrs	r2, r2, #16
 800b8de:	fb09 1102 	mla	r1, r9, r2, r1
 800b8e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b8e6:	4567      	cmp	r7, ip
 800b8e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8ec:	d8e6      	bhi.n	800b8bc <__multiply+0x10c>
 800b8ee:	9a01      	ldr	r2, [sp, #4]
 800b8f0:	50a9      	str	r1, [r5, r2]
 800b8f2:	3504      	adds	r5, #4
 800b8f4:	e79a      	b.n	800b82c <__multiply+0x7c>
 800b8f6:	3e01      	subs	r6, #1
 800b8f8:	e79c      	b.n	800b834 <__multiply+0x84>
 800b8fa:	bf00      	nop
 800b8fc:	0800cf03 	.word	0x0800cf03
 800b900:	0800cf74 	.word	0x0800cf74

0800b904 <__pow5mult>:
 800b904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b908:	4615      	mov	r5, r2
 800b90a:	f012 0203 	ands.w	r2, r2, #3
 800b90e:	4606      	mov	r6, r0
 800b910:	460f      	mov	r7, r1
 800b912:	d007      	beq.n	800b924 <__pow5mult+0x20>
 800b914:	4c25      	ldr	r4, [pc, #148]	; (800b9ac <__pow5mult+0xa8>)
 800b916:	3a01      	subs	r2, #1
 800b918:	2300      	movs	r3, #0
 800b91a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b91e:	f7ff fe9b 	bl	800b658 <__multadd>
 800b922:	4607      	mov	r7, r0
 800b924:	10ad      	asrs	r5, r5, #2
 800b926:	d03d      	beq.n	800b9a4 <__pow5mult+0xa0>
 800b928:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b92a:	b97c      	cbnz	r4, 800b94c <__pow5mult+0x48>
 800b92c:	2010      	movs	r0, #16
 800b92e:	f7ff fe29 	bl	800b584 <malloc>
 800b932:	4602      	mov	r2, r0
 800b934:	6270      	str	r0, [r6, #36]	; 0x24
 800b936:	b928      	cbnz	r0, 800b944 <__pow5mult+0x40>
 800b938:	4b1d      	ldr	r3, [pc, #116]	; (800b9b0 <__pow5mult+0xac>)
 800b93a:	481e      	ldr	r0, [pc, #120]	; (800b9b4 <__pow5mult+0xb0>)
 800b93c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b940:	f000 fc62 	bl	800c208 <__assert_func>
 800b944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b948:	6004      	str	r4, [r0, #0]
 800b94a:	60c4      	str	r4, [r0, #12]
 800b94c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b950:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b954:	b94c      	cbnz	r4, 800b96a <__pow5mult+0x66>
 800b956:	f240 2171 	movw	r1, #625	; 0x271
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff ff12 	bl	800b784 <__i2b>
 800b960:	2300      	movs	r3, #0
 800b962:	f8c8 0008 	str.w	r0, [r8, #8]
 800b966:	4604      	mov	r4, r0
 800b968:	6003      	str	r3, [r0, #0]
 800b96a:	f04f 0900 	mov.w	r9, #0
 800b96e:	07eb      	lsls	r3, r5, #31
 800b970:	d50a      	bpl.n	800b988 <__pow5mult+0x84>
 800b972:	4639      	mov	r1, r7
 800b974:	4622      	mov	r2, r4
 800b976:	4630      	mov	r0, r6
 800b978:	f7ff ff1a 	bl	800b7b0 <__multiply>
 800b97c:	4639      	mov	r1, r7
 800b97e:	4680      	mov	r8, r0
 800b980:	4630      	mov	r0, r6
 800b982:	f7ff fe47 	bl	800b614 <_Bfree>
 800b986:	4647      	mov	r7, r8
 800b988:	106d      	asrs	r5, r5, #1
 800b98a:	d00b      	beq.n	800b9a4 <__pow5mult+0xa0>
 800b98c:	6820      	ldr	r0, [r4, #0]
 800b98e:	b938      	cbnz	r0, 800b9a0 <__pow5mult+0x9c>
 800b990:	4622      	mov	r2, r4
 800b992:	4621      	mov	r1, r4
 800b994:	4630      	mov	r0, r6
 800b996:	f7ff ff0b 	bl	800b7b0 <__multiply>
 800b99a:	6020      	str	r0, [r4, #0]
 800b99c:	f8c0 9000 	str.w	r9, [r0]
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	e7e4      	b.n	800b96e <__pow5mult+0x6a>
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800d0c0 	.word	0x0800d0c0
 800b9b0:	0800ce91 	.word	0x0800ce91
 800b9b4:	0800cf74 	.word	0x0800cf74

0800b9b8 <__lshift>:
 800b9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9bc:	460c      	mov	r4, r1
 800b9be:	6849      	ldr	r1, [r1, #4]
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	4691      	mov	r9, r2
 800b9cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9d0:	f108 0601 	add.w	r6, r8, #1
 800b9d4:	42b3      	cmp	r3, r6
 800b9d6:	db0b      	blt.n	800b9f0 <__lshift+0x38>
 800b9d8:	4638      	mov	r0, r7
 800b9da:	f7ff fddb 	bl	800b594 <_Balloc>
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b948      	cbnz	r0, 800b9f6 <__lshift+0x3e>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ba90 <__lshift+0xd8>)
 800b9e6:	482b      	ldr	r0, [pc, #172]	; (800ba94 <__lshift+0xdc>)
 800b9e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b9ec:	f000 fc0c 	bl	800c208 <__assert_func>
 800b9f0:	3101      	adds	r1, #1
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	e7ee      	b.n	800b9d4 <__lshift+0x1c>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f100 0114 	add.w	r1, r0, #20
 800b9fc:	f100 0210 	add.w	r2, r0, #16
 800ba00:	4618      	mov	r0, r3
 800ba02:	4553      	cmp	r3, sl
 800ba04:	db37      	blt.n	800ba76 <__lshift+0xbe>
 800ba06:	6920      	ldr	r0, [r4, #16]
 800ba08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba0c:	f104 0314 	add.w	r3, r4, #20
 800ba10:	f019 091f 	ands.w	r9, r9, #31
 800ba14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba1c:	d02f      	beq.n	800ba7e <__lshift+0xc6>
 800ba1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba22:	468a      	mov	sl, r1
 800ba24:	f04f 0c00 	mov.w	ip, #0
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	fa02 f209 	lsl.w	r2, r2, r9
 800ba2e:	ea42 020c 	orr.w	r2, r2, ip
 800ba32:	f84a 2b04 	str.w	r2, [sl], #4
 800ba36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3a:	4298      	cmp	r0, r3
 800ba3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba40:	d8f2      	bhi.n	800ba28 <__lshift+0x70>
 800ba42:	1b03      	subs	r3, r0, r4
 800ba44:	3b15      	subs	r3, #21
 800ba46:	f023 0303 	bic.w	r3, r3, #3
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	f104 0215 	add.w	r2, r4, #21
 800ba50:	4290      	cmp	r0, r2
 800ba52:	bf38      	it	cc
 800ba54:	2304      	movcc	r3, #4
 800ba56:	f841 c003 	str.w	ip, [r1, r3]
 800ba5a:	f1bc 0f00 	cmp.w	ip, #0
 800ba5e:	d001      	beq.n	800ba64 <__lshift+0xac>
 800ba60:	f108 0602 	add.w	r6, r8, #2
 800ba64:	3e01      	subs	r6, #1
 800ba66:	4638      	mov	r0, r7
 800ba68:	612e      	str	r6, [r5, #16]
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	f7ff fdd2 	bl	800b614 <_Bfree>
 800ba70:	4628      	mov	r0, r5
 800ba72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba76:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	e7c1      	b.n	800ba02 <__lshift+0x4a>
 800ba7e:	3904      	subs	r1, #4
 800ba80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba84:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba88:	4298      	cmp	r0, r3
 800ba8a:	d8f9      	bhi.n	800ba80 <__lshift+0xc8>
 800ba8c:	e7ea      	b.n	800ba64 <__lshift+0xac>
 800ba8e:	bf00      	nop
 800ba90:	0800cf03 	.word	0x0800cf03
 800ba94:	0800cf74 	.word	0x0800cf74

0800ba98 <__mcmp>:
 800ba98:	b530      	push	{r4, r5, lr}
 800ba9a:	6902      	ldr	r2, [r0, #16]
 800ba9c:	690c      	ldr	r4, [r1, #16]
 800ba9e:	1b12      	subs	r2, r2, r4
 800baa0:	d10e      	bne.n	800bac0 <__mcmp+0x28>
 800baa2:	f100 0314 	add.w	r3, r0, #20
 800baa6:	3114      	adds	r1, #20
 800baa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800baac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bab0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bab4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bab8:	42a5      	cmp	r5, r4
 800baba:	d003      	beq.n	800bac4 <__mcmp+0x2c>
 800babc:	d305      	bcc.n	800baca <__mcmp+0x32>
 800babe:	2201      	movs	r2, #1
 800bac0:	4610      	mov	r0, r2
 800bac2:	bd30      	pop	{r4, r5, pc}
 800bac4:	4283      	cmp	r3, r0
 800bac6:	d3f3      	bcc.n	800bab0 <__mcmp+0x18>
 800bac8:	e7fa      	b.n	800bac0 <__mcmp+0x28>
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	e7f7      	b.n	800bac0 <__mcmp+0x28>

0800bad0 <__mdiff>:
 800bad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	460c      	mov	r4, r1
 800bad6:	4606      	mov	r6, r0
 800bad8:	4611      	mov	r1, r2
 800bada:	4620      	mov	r0, r4
 800badc:	4690      	mov	r8, r2
 800bade:	f7ff ffdb 	bl	800ba98 <__mcmp>
 800bae2:	1e05      	subs	r5, r0, #0
 800bae4:	d110      	bne.n	800bb08 <__mdiff+0x38>
 800bae6:	4629      	mov	r1, r5
 800bae8:	4630      	mov	r0, r6
 800baea:	f7ff fd53 	bl	800b594 <_Balloc>
 800baee:	b930      	cbnz	r0, 800bafe <__mdiff+0x2e>
 800baf0:	4b3a      	ldr	r3, [pc, #232]	; (800bbdc <__mdiff+0x10c>)
 800baf2:	4602      	mov	r2, r0
 800baf4:	f240 2132 	movw	r1, #562	; 0x232
 800baf8:	4839      	ldr	r0, [pc, #228]	; (800bbe0 <__mdiff+0x110>)
 800bafa:	f000 fb85 	bl	800c208 <__assert_func>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb08:	bfa4      	itt	ge
 800bb0a:	4643      	movge	r3, r8
 800bb0c:	46a0      	movge	r8, r4
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb14:	bfa6      	itte	ge
 800bb16:	461c      	movge	r4, r3
 800bb18:	2500      	movge	r5, #0
 800bb1a:	2501      	movlt	r5, #1
 800bb1c:	f7ff fd3a 	bl	800b594 <_Balloc>
 800bb20:	b920      	cbnz	r0, 800bb2c <__mdiff+0x5c>
 800bb22:	4b2e      	ldr	r3, [pc, #184]	; (800bbdc <__mdiff+0x10c>)
 800bb24:	4602      	mov	r2, r0
 800bb26:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb2a:	e7e5      	b.n	800baf8 <__mdiff+0x28>
 800bb2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb30:	6926      	ldr	r6, [r4, #16]
 800bb32:	60c5      	str	r5, [r0, #12]
 800bb34:	f104 0914 	add.w	r9, r4, #20
 800bb38:	f108 0514 	add.w	r5, r8, #20
 800bb3c:	f100 0e14 	add.w	lr, r0, #20
 800bb40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb48:	f108 0210 	add.w	r2, r8, #16
 800bb4c:	46f2      	mov	sl, lr
 800bb4e:	2100      	movs	r1, #0
 800bb50:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb58:	fa1f f883 	uxth.w	r8, r3
 800bb5c:	fa11 f18b 	uxtah	r1, r1, fp
 800bb60:	0c1b      	lsrs	r3, r3, #16
 800bb62:	eba1 0808 	sub.w	r8, r1, r8
 800bb66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb6e:	fa1f f888 	uxth.w	r8, r8
 800bb72:	1419      	asrs	r1, r3, #16
 800bb74:	454e      	cmp	r6, r9
 800bb76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb7a:	f84a 3b04 	str.w	r3, [sl], #4
 800bb7e:	d8e7      	bhi.n	800bb50 <__mdiff+0x80>
 800bb80:	1b33      	subs	r3, r6, r4
 800bb82:	3b15      	subs	r3, #21
 800bb84:	f023 0303 	bic.w	r3, r3, #3
 800bb88:	3304      	adds	r3, #4
 800bb8a:	3415      	adds	r4, #21
 800bb8c:	42a6      	cmp	r6, r4
 800bb8e:	bf38      	it	cc
 800bb90:	2304      	movcc	r3, #4
 800bb92:	441d      	add	r5, r3
 800bb94:	4473      	add	r3, lr
 800bb96:	469e      	mov	lr, r3
 800bb98:	462e      	mov	r6, r5
 800bb9a:	4566      	cmp	r6, ip
 800bb9c:	d30e      	bcc.n	800bbbc <__mdiff+0xec>
 800bb9e:	f10c 0203 	add.w	r2, ip, #3
 800bba2:	1b52      	subs	r2, r2, r5
 800bba4:	f022 0203 	bic.w	r2, r2, #3
 800bba8:	3d03      	subs	r5, #3
 800bbaa:	45ac      	cmp	ip, r5
 800bbac:	bf38      	it	cc
 800bbae:	2200      	movcc	r2, #0
 800bbb0:	441a      	add	r2, r3
 800bbb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbb6:	b17b      	cbz	r3, 800bbd8 <__mdiff+0x108>
 800bbb8:	6107      	str	r7, [r0, #16]
 800bbba:	e7a3      	b.n	800bb04 <__mdiff+0x34>
 800bbbc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bbc0:	fa11 f288 	uxtah	r2, r1, r8
 800bbc4:	1414      	asrs	r4, r2, #16
 800bbc6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbca:	b292      	uxth	r2, r2
 800bbcc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bbd0:	f84e 2b04 	str.w	r2, [lr], #4
 800bbd4:	1421      	asrs	r1, r4, #16
 800bbd6:	e7e0      	b.n	800bb9a <__mdiff+0xca>
 800bbd8:	3f01      	subs	r7, #1
 800bbda:	e7ea      	b.n	800bbb2 <__mdiff+0xe2>
 800bbdc:	0800cf03 	.word	0x0800cf03
 800bbe0:	0800cf74 	.word	0x0800cf74

0800bbe4 <__d2b>:
 800bbe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbe8:	4689      	mov	r9, r1
 800bbea:	2101      	movs	r1, #1
 800bbec:	ec57 6b10 	vmov	r6, r7, d0
 800bbf0:	4690      	mov	r8, r2
 800bbf2:	f7ff fccf 	bl	800b594 <_Balloc>
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	b930      	cbnz	r0, 800bc08 <__d2b+0x24>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	4b25      	ldr	r3, [pc, #148]	; (800bc94 <__d2b+0xb0>)
 800bbfe:	4826      	ldr	r0, [pc, #152]	; (800bc98 <__d2b+0xb4>)
 800bc00:	f240 310a 	movw	r1, #778	; 0x30a
 800bc04:	f000 fb00 	bl	800c208 <__assert_func>
 800bc08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc10:	bb35      	cbnz	r5, 800bc60 <__d2b+0x7c>
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	d028      	beq.n	800bc6a <__d2b+0x86>
 800bc18:	4668      	mov	r0, sp
 800bc1a:	9600      	str	r6, [sp, #0]
 800bc1c:	f7ff fd82 	bl	800b724 <__lo0bits>
 800bc20:	9900      	ldr	r1, [sp, #0]
 800bc22:	b300      	cbz	r0, 800bc66 <__d2b+0x82>
 800bc24:	9a01      	ldr	r2, [sp, #4]
 800bc26:	f1c0 0320 	rsb	r3, r0, #32
 800bc2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc2e:	430b      	orrs	r3, r1
 800bc30:	40c2      	lsrs	r2, r0
 800bc32:	6163      	str	r3, [r4, #20]
 800bc34:	9201      	str	r2, [sp, #4]
 800bc36:	9b01      	ldr	r3, [sp, #4]
 800bc38:	61a3      	str	r3, [r4, #24]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bf14      	ite	ne
 800bc3e:	2202      	movne	r2, #2
 800bc40:	2201      	moveq	r2, #1
 800bc42:	6122      	str	r2, [r4, #16]
 800bc44:	b1d5      	cbz	r5, 800bc7c <__d2b+0x98>
 800bc46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc4a:	4405      	add	r5, r0
 800bc4c:	f8c9 5000 	str.w	r5, [r9]
 800bc50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc54:	f8c8 0000 	str.w	r0, [r8]
 800bc58:	4620      	mov	r0, r4
 800bc5a:	b003      	add	sp, #12
 800bc5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc64:	e7d5      	b.n	800bc12 <__d2b+0x2e>
 800bc66:	6161      	str	r1, [r4, #20]
 800bc68:	e7e5      	b.n	800bc36 <__d2b+0x52>
 800bc6a:	a801      	add	r0, sp, #4
 800bc6c:	f7ff fd5a 	bl	800b724 <__lo0bits>
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	6163      	str	r3, [r4, #20]
 800bc74:	2201      	movs	r2, #1
 800bc76:	6122      	str	r2, [r4, #16]
 800bc78:	3020      	adds	r0, #32
 800bc7a:	e7e3      	b.n	800bc44 <__d2b+0x60>
 800bc7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc84:	f8c9 0000 	str.w	r0, [r9]
 800bc88:	6918      	ldr	r0, [r3, #16]
 800bc8a:	f7ff fd2b 	bl	800b6e4 <__hi0bits>
 800bc8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc92:	e7df      	b.n	800bc54 <__d2b+0x70>
 800bc94:	0800cf03 	.word	0x0800cf03
 800bc98:	0800cf74 	.word	0x0800cf74

0800bc9c <_calloc_r>:
 800bc9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc9e:	fba1 2402 	umull	r2, r4, r1, r2
 800bca2:	b94c      	cbnz	r4, 800bcb8 <_calloc_r+0x1c>
 800bca4:	4611      	mov	r1, r2
 800bca6:	9201      	str	r2, [sp, #4]
 800bca8:	f000 f87a 	bl	800bda0 <_malloc_r>
 800bcac:	9a01      	ldr	r2, [sp, #4]
 800bcae:	4605      	mov	r5, r0
 800bcb0:	b930      	cbnz	r0, 800bcc0 <_calloc_r+0x24>
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	b003      	add	sp, #12
 800bcb6:	bd30      	pop	{r4, r5, pc}
 800bcb8:	220c      	movs	r2, #12
 800bcba:	6002      	str	r2, [r0, #0]
 800bcbc:	2500      	movs	r5, #0
 800bcbe:	e7f8      	b.n	800bcb2 <_calloc_r+0x16>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f7fd fe01 	bl	80098c8 <memset>
 800bcc6:	e7f4      	b.n	800bcb2 <_calloc_r+0x16>

0800bcc8 <_free_r>:
 800bcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcca:	2900      	cmp	r1, #0
 800bccc:	d044      	beq.n	800bd58 <_free_r+0x90>
 800bcce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd2:	9001      	str	r0, [sp, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f1a1 0404 	sub.w	r4, r1, #4
 800bcda:	bfb8      	it	lt
 800bcdc:	18e4      	addlt	r4, r4, r3
 800bcde:	f000 fb19 	bl	800c314 <__malloc_lock>
 800bce2:	4a1e      	ldr	r2, [pc, #120]	; (800bd5c <_free_r+0x94>)
 800bce4:	9801      	ldr	r0, [sp, #4]
 800bce6:	6813      	ldr	r3, [r2, #0]
 800bce8:	b933      	cbnz	r3, 800bcf8 <_free_r+0x30>
 800bcea:	6063      	str	r3, [r4, #4]
 800bcec:	6014      	str	r4, [r2, #0]
 800bcee:	b003      	add	sp, #12
 800bcf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcf4:	f000 bb14 	b.w	800c320 <__malloc_unlock>
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	d908      	bls.n	800bd0e <_free_r+0x46>
 800bcfc:	6825      	ldr	r5, [r4, #0]
 800bcfe:	1961      	adds	r1, r4, r5
 800bd00:	428b      	cmp	r3, r1
 800bd02:	bf01      	itttt	eq
 800bd04:	6819      	ldreq	r1, [r3, #0]
 800bd06:	685b      	ldreq	r3, [r3, #4]
 800bd08:	1949      	addeq	r1, r1, r5
 800bd0a:	6021      	streq	r1, [r4, #0]
 800bd0c:	e7ed      	b.n	800bcea <_free_r+0x22>
 800bd0e:	461a      	mov	r2, r3
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	b10b      	cbz	r3, 800bd18 <_free_r+0x50>
 800bd14:	42a3      	cmp	r3, r4
 800bd16:	d9fa      	bls.n	800bd0e <_free_r+0x46>
 800bd18:	6811      	ldr	r1, [r2, #0]
 800bd1a:	1855      	adds	r5, r2, r1
 800bd1c:	42a5      	cmp	r5, r4
 800bd1e:	d10b      	bne.n	800bd38 <_free_r+0x70>
 800bd20:	6824      	ldr	r4, [r4, #0]
 800bd22:	4421      	add	r1, r4
 800bd24:	1854      	adds	r4, r2, r1
 800bd26:	42a3      	cmp	r3, r4
 800bd28:	6011      	str	r1, [r2, #0]
 800bd2a:	d1e0      	bne.n	800bcee <_free_r+0x26>
 800bd2c:	681c      	ldr	r4, [r3, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	6053      	str	r3, [r2, #4]
 800bd32:	4421      	add	r1, r4
 800bd34:	6011      	str	r1, [r2, #0]
 800bd36:	e7da      	b.n	800bcee <_free_r+0x26>
 800bd38:	d902      	bls.n	800bd40 <_free_r+0x78>
 800bd3a:	230c      	movs	r3, #12
 800bd3c:	6003      	str	r3, [r0, #0]
 800bd3e:	e7d6      	b.n	800bcee <_free_r+0x26>
 800bd40:	6825      	ldr	r5, [r4, #0]
 800bd42:	1961      	adds	r1, r4, r5
 800bd44:	428b      	cmp	r3, r1
 800bd46:	bf04      	itt	eq
 800bd48:	6819      	ldreq	r1, [r3, #0]
 800bd4a:	685b      	ldreq	r3, [r3, #4]
 800bd4c:	6063      	str	r3, [r4, #4]
 800bd4e:	bf04      	itt	eq
 800bd50:	1949      	addeq	r1, r1, r5
 800bd52:	6021      	streq	r1, [r4, #0]
 800bd54:	6054      	str	r4, [r2, #4]
 800bd56:	e7ca      	b.n	800bcee <_free_r+0x26>
 800bd58:	b003      	add	sp, #12
 800bd5a:	bd30      	pop	{r4, r5, pc}
 800bd5c:	20001b84 	.word	0x20001b84

0800bd60 <sbrk_aligned>:
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	4e0e      	ldr	r6, [pc, #56]	; (800bd9c <sbrk_aligned+0x3c>)
 800bd64:	460c      	mov	r4, r1
 800bd66:	6831      	ldr	r1, [r6, #0]
 800bd68:	4605      	mov	r5, r0
 800bd6a:	b911      	cbnz	r1, 800bd72 <sbrk_aligned+0x12>
 800bd6c:	f000 f9e6 	bl	800c13c <_sbrk_r>
 800bd70:	6030      	str	r0, [r6, #0]
 800bd72:	4621      	mov	r1, r4
 800bd74:	4628      	mov	r0, r5
 800bd76:	f000 f9e1 	bl	800c13c <_sbrk_r>
 800bd7a:	1c43      	adds	r3, r0, #1
 800bd7c:	d00a      	beq.n	800bd94 <sbrk_aligned+0x34>
 800bd7e:	1cc4      	adds	r4, r0, #3
 800bd80:	f024 0403 	bic.w	r4, r4, #3
 800bd84:	42a0      	cmp	r0, r4
 800bd86:	d007      	beq.n	800bd98 <sbrk_aligned+0x38>
 800bd88:	1a21      	subs	r1, r4, r0
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 f9d6 	bl	800c13c <_sbrk_r>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d101      	bne.n	800bd98 <sbrk_aligned+0x38>
 800bd94:	f04f 34ff 	mov.w	r4, #4294967295
 800bd98:	4620      	mov	r0, r4
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	20001b88 	.word	0x20001b88

0800bda0 <_malloc_r>:
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	1ccd      	adds	r5, r1, #3
 800bda6:	f025 0503 	bic.w	r5, r5, #3
 800bdaa:	3508      	adds	r5, #8
 800bdac:	2d0c      	cmp	r5, #12
 800bdae:	bf38      	it	cc
 800bdb0:	250c      	movcc	r5, #12
 800bdb2:	2d00      	cmp	r5, #0
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	db01      	blt.n	800bdbc <_malloc_r+0x1c>
 800bdb8:	42a9      	cmp	r1, r5
 800bdba:	d905      	bls.n	800bdc8 <_malloc_r+0x28>
 800bdbc:	230c      	movs	r3, #12
 800bdbe:	603b      	str	r3, [r7, #0]
 800bdc0:	2600      	movs	r6, #0
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc8:	4e2e      	ldr	r6, [pc, #184]	; (800be84 <_malloc_r+0xe4>)
 800bdca:	f000 faa3 	bl	800c314 <__malloc_lock>
 800bdce:	6833      	ldr	r3, [r6, #0]
 800bdd0:	461c      	mov	r4, r3
 800bdd2:	bb34      	cbnz	r4, 800be22 <_malloc_r+0x82>
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f7ff ffc2 	bl	800bd60 <sbrk_aligned>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	4604      	mov	r4, r0
 800bde0:	d14d      	bne.n	800be7e <_malloc_r+0xde>
 800bde2:	6834      	ldr	r4, [r6, #0]
 800bde4:	4626      	mov	r6, r4
 800bde6:	2e00      	cmp	r6, #0
 800bde8:	d140      	bne.n	800be6c <_malloc_r+0xcc>
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	4631      	mov	r1, r6
 800bdee:	4638      	mov	r0, r7
 800bdf0:	eb04 0803 	add.w	r8, r4, r3
 800bdf4:	f000 f9a2 	bl	800c13c <_sbrk_r>
 800bdf8:	4580      	cmp	r8, r0
 800bdfa:	d13a      	bne.n	800be72 <_malloc_r+0xd2>
 800bdfc:	6821      	ldr	r1, [r4, #0]
 800bdfe:	3503      	adds	r5, #3
 800be00:	1a6d      	subs	r5, r5, r1
 800be02:	f025 0503 	bic.w	r5, r5, #3
 800be06:	3508      	adds	r5, #8
 800be08:	2d0c      	cmp	r5, #12
 800be0a:	bf38      	it	cc
 800be0c:	250c      	movcc	r5, #12
 800be0e:	4629      	mov	r1, r5
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff ffa5 	bl	800bd60 <sbrk_aligned>
 800be16:	3001      	adds	r0, #1
 800be18:	d02b      	beq.n	800be72 <_malloc_r+0xd2>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	442b      	add	r3, r5
 800be1e:	6023      	str	r3, [r4, #0]
 800be20:	e00e      	b.n	800be40 <_malloc_r+0xa0>
 800be22:	6822      	ldr	r2, [r4, #0]
 800be24:	1b52      	subs	r2, r2, r5
 800be26:	d41e      	bmi.n	800be66 <_malloc_r+0xc6>
 800be28:	2a0b      	cmp	r2, #11
 800be2a:	d916      	bls.n	800be5a <_malloc_r+0xba>
 800be2c:	1961      	adds	r1, r4, r5
 800be2e:	42a3      	cmp	r3, r4
 800be30:	6025      	str	r5, [r4, #0]
 800be32:	bf18      	it	ne
 800be34:	6059      	strne	r1, [r3, #4]
 800be36:	6863      	ldr	r3, [r4, #4]
 800be38:	bf08      	it	eq
 800be3a:	6031      	streq	r1, [r6, #0]
 800be3c:	5162      	str	r2, [r4, r5]
 800be3e:	604b      	str	r3, [r1, #4]
 800be40:	4638      	mov	r0, r7
 800be42:	f104 060b 	add.w	r6, r4, #11
 800be46:	f000 fa6b 	bl	800c320 <__malloc_unlock>
 800be4a:	f026 0607 	bic.w	r6, r6, #7
 800be4e:	1d23      	adds	r3, r4, #4
 800be50:	1af2      	subs	r2, r6, r3
 800be52:	d0b6      	beq.n	800bdc2 <_malloc_r+0x22>
 800be54:	1b9b      	subs	r3, r3, r6
 800be56:	50a3      	str	r3, [r4, r2]
 800be58:	e7b3      	b.n	800bdc2 <_malloc_r+0x22>
 800be5a:	6862      	ldr	r2, [r4, #4]
 800be5c:	42a3      	cmp	r3, r4
 800be5e:	bf0c      	ite	eq
 800be60:	6032      	streq	r2, [r6, #0]
 800be62:	605a      	strne	r2, [r3, #4]
 800be64:	e7ec      	b.n	800be40 <_malloc_r+0xa0>
 800be66:	4623      	mov	r3, r4
 800be68:	6864      	ldr	r4, [r4, #4]
 800be6a:	e7b2      	b.n	800bdd2 <_malloc_r+0x32>
 800be6c:	4634      	mov	r4, r6
 800be6e:	6876      	ldr	r6, [r6, #4]
 800be70:	e7b9      	b.n	800bde6 <_malloc_r+0x46>
 800be72:	230c      	movs	r3, #12
 800be74:	603b      	str	r3, [r7, #0]
 800be76:	4638      	mov	r0, r7
 800be78:	f000 fa52 	bl	800c320 <__malloc_unlock>
 800be7c:	e7a1      	b.n	800bdc2 <_malloc_r+0x22>
 800be7e:	6025      	str	r5, [r4, #0]
 800be80:	e7de      	b.n	800be40 <_malloc_r+0xa0>
 800be82:	bf00      	nop
 800be84:	20001b84 	.word	0x20001b84

0800be88 <__sfputc_r>:
 800be88:	6893      	ldr	r3, [r2, #8]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	b410      	push	{r4}
 800be90:	6093      	str	r3, [r2, #8]
 800be92:	da08      	bge.n	800bea6 <__sfputc_r+0x1e>
 800be94:	6994      	ldr	r4, [r2, #24]
 800be96:	42a3      	cmp	r3, r4
 800be98:	db01      	blt.n	800be9e <__sfputc_r+0x16>
 800be9a:	290a      	cmp	r1, #10
 800be9c:	d103      	bne.n	800bea6 <__sfputc_r+0x1e>
 800be9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bea2:	f7fe ba11 	b.w	800a2c8 <__swbuf_r>
 800bea6:	6813      	ldr	r3, [r2, #0]
 800bea8:	1c58      	adds	r0, r3, #1
 800beaa:	6010      	str	r0, [r2, #0]
 800beac:	7019      	strb	r1, [r3, #0]
 800beae:	4608      	mov	r0, r1
 800beb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <__sfputs_r>:
 800beb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb8:	4606      	mov	r6, r0
 800beba:	460f      	mov	r7, r1
 800bebc:	4614      	mov	r4, r2
 800bebe:	18d5      	adds	r5, r2, r3
 800bec0:	42ac      	cmp	r4, r5
 800bec2:	d101      	bne.n	800bec8 <__sfputs_r+0x12>
 800bec4:	2000      	movs	r0, #0
 800bec6:	e007      	b.n	800bed8 <__sfputs_r+0x22>
 800bec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800becc:	463a      	mov	r2, r7
 800bece:	4630      	mov	r0, r6
 800bed0:	f7ff ffda 	bl	800be88 <__sfputc_r>
 800bed4:	1c43      	adds	r3, r0, #1
 800bed6:	d1f3      	bne.n	800bec0 <__sfputs_r+0xa>
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bedc <_vfiprintf_r>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	460d      	mov	r5, r1
 800bee2:	b09d      	sub	sp, #116	; 0x74
 800bee4:	4614      	mov	r4, r2
 800bee6:	4698      	mov	r8, r3
 800bee8:	4606      	mov	r6, r0
 800beea:	b118      	cbz	r0, 800bef4 <_vfiprintf_r+0x18>
 800beec:	6983      	ldr	r3, [r0, #24]
 800beee:	b90b      	cbnz	r3, 800bef4 <_vfiprintf_r+0x18>
 800bef0:	f7ff fa3e 	bl	800b370 <__sinit>
 800bef4:	4b89      	ldr	r3, [pc, #548]	; (800c11c <_vfiprintf_r+0x240>)
 800bef6:	429d      	cmp	r5, r3
 800bef8:	d11b      	bne.n	800bf32 <_vfiprintf_r+0x56>
 800befa:	6875      	ldr	r5, [r6, #4]
 800befc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800befe:	07d9      	lsls	r1, r3, #31
 800bf00:	d405      	bmi.n	800bf0e <_vfiprintf_r+0x32>
 800bf02:	89ab      	ldrh	r3, [r5, #12]
 800bf04:	059a      	lsls	r2, r3, #22
 800bf06:	d402      	bmi.n	800bf0e <_vfiprintf_r+0x32>
 800bf08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0a:	f7ff fad4 	bl	800b4b6 <__retarget_lock_acquire_recursive>
 800bf0e:	89ab      	ldrh	r3, [r5, #12]
 800bf10:	071b      	lsls	r3, r3, #28
 800bf12:	d501      	bpl.n	800bf18 <_vfiprintf_r+0x3c>
 800bf14:	692b      	ldr	r3, [r5, #16]
 800bf16:	b9eb      	cbnz	r3, 800bf54 <_vfiprintf_r+0x78>
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f7fe fa26 	bl	800a36c <__swsetup_r>
 800bf20:	b1c0      	cbz	r0, 800bf54 <_vfiprintf_r+0x78>
 800bf22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf24:	07dc      	lsls	r4, r3, #31
 800bf26:	d50e      	bpl.n	800bf46 <_vfiprintf_r+0x6a>
 800bf28:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2c:	b01d      	add	sp, #116	; 0x74
 800bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf32:	4b7b      	ldr	r3, [pc, #492]	; (800c120 <_vfiprintf_r+0x244>)
 800bf34:	429d      	cmp	r5, r3
 800bf36:	d101      	bne.n	800bf3c <_vfiprintf_r+0x60>
 800bf38:	68b5      	ldr	r5, [r6, #8]
 800bf3a:	e7df      	b.n	800befc <_vfiprintf_r+0x20>
 800bf3c:	4b79      	ldr	r3, [pc, #484]	; (800c124 <_vfiprintf_r+0x248>)
 800bf3e:	429d      	cmp	r5, r3
 800bf40:	bf08      	it	eq
 800bf42:	68f5      	ldreq	r5, [r6, #12]
 800bf44:	e7da      	b.n	800befc <_vfiprintf_r+0x20>
 800bf46:	89ab      	ldrh	r3, [r5, #12]
 800bf48:	0598      	lsls	r0, r3, #22
 800bf4a:	d4ed      	bmi.n	800bf28 <_vfiprintf_r+0x4c>
 800bf4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf4e:	f7ff fab3 	bl	800b4b8 <__retarget_lock_release_recursive>
 800bf52:	e7e9      	b.n	800bf28 <_vfiprintf_r+0x4c>
 800bf54:	2300      	movs	r3, #0
 800bf56:	9309      	str	r3, [sp, #36]	; 0x24
 800bf58:	2320      	movs	r3, #32
 800bf5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf62:	2330      	movs	r3, #48	; 0x30
 800bf64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c128 <_vfiprintf_r+0x24c>
 800bf68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf6c:	f04f 0901 	mov.w	r9, #1
 800bf70:	4623      	mov	r3, r4
 800bf72:	469a      	mov	sl, r3
 800bf74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf78:	b10a      	cbz	r2, 800bf7e <_vfiprintf_r+0xa2>
 800bf7a:	2a25      	cmp	r2, #37	; 0x25
 800bf7c:	d1f9      	bne.n	800bf72 <_vfiprintf_r+0x96>
 800bf7e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf82:	d00b      	beq.n	800bf9c <_vfiprintf_r+0xc0>
 800bf84:	465b      	mov	r3, fp
 800bf86:	4622      	mov	r2, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7ff ff93 	bl	800beb6 <__sfputs_r>
 800bf90:	3001      	adds	r0, #1
 800bf92:	f000 80aa 	beq.w	800c0ea <_vfiprintf_r+0x20e>
 800bf96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf98:	445a      	add	r2, fp
 800bf9a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 80a2 	beq.w	800c0ea <_vfiprintf_r+0x20e>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb0:	f10a 0a01 	add.w	sl, sl, #1
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	9307      	str	r3, [sp, #28]
 800bfb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfbc:	931a      	str	r3, [sp, #104]	; 0x68
 800bfbe:	4654      	mov	r4, sl
 800bfc0:	2205      	movs	r2, #5
 800bfc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc6:	4858      	ldr	r0, [pc, #352]	; (800c128 <_vfiprintf_r+0x24c>)
 800bfc8:	f7f4 f91a 	bl	8000200 <memchr>
 800bfcc:	9a04      	ldr	r2, [sp, #16]
 800bfce:	b9d8      	cbnz	r0, 800c008 <_vfiprintf_r+0x12c>
 800bfd0:	06d1      	lsls	r1, r2, #27
 800bfd2:	bf44      	itt	mi
 800bfd4:	2320      	movmi	r3, #32
 800bfd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfda:	0713      	lsls	r3, r2, #28
 800bfdc:	bf44      	itt	mi
 800bfde:	232b      	movmi	r3, #43	; 0x2b
 800bfe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfea:	d015      	beq.n	800c018 <_vfiprintf_r+0x13c>
 800bfec:	9a07      	ldr	r2, [sp, #28]
 800bfee:	4654      	mov	r4, sl
 800bff0:	2000      	movs	r0, #0
 800bff2:	f04f 0c0a 	mov.w	ip, #10
 800bff6:	4621      	mov	r1, r4
 800bff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bffc:	3b30      	subs	r3, #48	; 0x30
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d94e      	bls.n	800c0a0 <_vfiprintf_r+0x1c4>
 800c002:	b1b0      	cbz	r0, 800c032 <_vfiprintf_r+0x156>
 800c004:	9207      	str	r2, [sp, #28]
 800c006:	e014      	b.n	800c032 <_vfiprintf_r+0x156>
 800c008:	eba0 0308 	sub.w	r3, r0, r8
 800c00c:	fa09 f303 	lsl.w	r3, r9, r3
 800c010:	4313      	orrs	r3, r2
 800c012:	9304      	str	r3, [sp, #16]
 800c014:	46a2      	mov	sl, r4
 800c016:	e7d2      	b.n	800bfbe <_vfiprintf_r+0xe2>
 800c018:	9b03      	ldr	r3, [sp, #12]
 800c01a:	1d19      	adds	r1, r3, #4
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	9103      	str	r1, [sp, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	bfbb      	ittet	lt
 800c024:	425b      	neglt	r3, r3
 800c026:	f042 0202 	orrlt.w	r2, r2, #2
 800c02a:	9307      	strge	r3, [sp, #28]
 800c02c:	9307      	strlt	r3, [sp, #28]
 800c02e:	bfb8      	it	lt
 800c030:	9204      	strlt	r2, [sp, #16]
 800c032:	7823      	ldrb	r3, [r4, #0]
 800c034:	2b2e      	cmp	r3, #46	; 0x2e
 800c036:	d10c      	bne.n	800c052 <_vfiprintf_r+0x176>
 800c038:	7863      	ldrb	r3, [r4, #1]
 800c03a:	2b2a      	cmp	r3, #42	; 0x2a
 800c03c:	d135      	bne.n	800c0aa <_vfiprintf_r+0x1ce>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	1d1a      	adds	r2, r3, #4
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	9203      	str	r2, [sp, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	bfb8      	it	lt
 800c04a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c04e:	3402      	adds	r4, #2
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c138 <_vfiprintf_r+0x25c>
 800c056:	7821      	ldrb	r1, [r4, #0]
 800c058:	2203      	movs	r2, #3
 800c05a:	4650      	mov	r0, sl
 800c05c:	f7f4 f8d0 	bl	8000200 <memchr>
 800c060:	b140      	cbz	r0, 800c074 <_vfiprintf_r+0x198>
 800c062:	2340      	movs	r3, #64	; 0x40
 800c064:	eba0 000a 	sub.w	r0, r0, sl
 800c068:	fa03 f000 	lsl.w	r0, r3, r0
 800c06c:	9b04      	ldr	r3, [sp, #16]
 800c06e:	4303      	orrs	r3, r0
 800c070:	3401      	adds	r4, #1
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c078:	482c      	ldr	r0, [pc, #176]	; (800c12c <_vfiprintf_r+0x250>)
 800c07a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c07e:	2206      	movs	r2, #6
 800c080:	f7f4 f8be 	bl	8000200 <memchr>
 800c084:	2800      	cmp	r0, #0
 800c086:	d03f      	beq.n	800c108 <_vfiprintf_r+0x22c>
 800c088:	4b29      	ldr	r3, [pc, #164]	; (800c130 <_vfiprintf_r+0x254>)
 800c08a:	bb1b      	cbnz	r3, 800c0d4 <_vfiprintf_r+0x1f8>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	3307      	adds	r3, #7
 800c090:	f023 0307 	bic.w	r3, r3, #7
 800c094:	3308      	adds	r3, #8
 800c096:	9303      	str	r3, [sp, #12]
 800c098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c09a:	443b      	add	r3, r7
 800c09c:	9309      	str	r3, [sp, #36]	; 0x24
 800c09e:	e767      	b.n	800bf70 <_vfiprintf_r+0x94>
 800c0a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	e7a5      	b.n	800bff6 <_vfiprintf_r+0x11a>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	3401      	adds	r4, #1
 800c0ae:	9305      	str	r3, [sp, #20]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f04f 0c0a 	mov.w	ip, #10
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0bc:	3a30      	subs	r2, #48	; 0x30
 800c0be:	2a09      	cmp	r2, #9
 800c0c0:	d903      	bls.n	800c0ca <_vfiprintf_r+0x1ee>
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0c5      	beq.n	800c052 <_vfiprintf_r+0x176>
 800c0c6:	9105      	str	r1, [sp, #20]
 800c0c8:	e7c3      	b.n	800c052 <_vfiprintf_r+0x176>
 800c0ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e7f0      	b.n	800c0b6 <_vfiprintf_r+0x1da>
 800c0d4:	ab03      	add	r3, sp, #12
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	462a      	mov	r2, r5
 800c0da:	4b16      	ldr	r3, [pc, #88]	; (800c134 <_vfiprintf_r+0x258>)
 800c0dc:	a904      	add	r1, sp, #16
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f7fd fc9a 	bl	8009a18 <_printf_float>
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	1c78      	adds	r0, r7, #1
 800c0e8:	d1d6      	bne.n	800c098 <_vfiprintf_r+0x1bc>
 800c0ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0ec:	07d9      	lsls	r1, r3, #31
 800c0ee:	d405      	bmi.n	800c0fc <_vfiprintf_r+0x220>
 800c0f0:	89ab      	ldrh	r3, [r5, #12]
 800c0f2:	059a      	lsls	r2, r3, #22
 800c0f4:	d402      	bmi.n	800c0fc <_vfiprintf_r+0x220>
 800c0f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0f8:	f7ff f9de 	bl	800b4b8 <__retarget_lock_release_recursive>
 800c0fc:	89ab      	ldrh	r3, [r5, #12]
 800c0fe:	065b      	lsls	r3, r3, #25
 800c100:	f53f af12 	bmi.w	800bf28 <_vfiprintf_r+0x4c>
 800c104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c106:	e711      	b.n	800bf2c <_vfiprintf_r+0x50>
 800c108:	ab03      	add	r3, sp, #12
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	462a      	mov	r2, r5
 800c10e:	4b09      	ldr	r3, [pc, #36]	; (800c134 <_vfiprintf_r+0x258>)
 800c110:	a904      	add	r1, sp, #16
 800c112:	4630      	mov	r0, r6
 800c114:	f7fd ff24 	bl	8009f60 <_printf_i>
 800c118:	e7e4      	b.n	800c0e4 <_vfiprintf_r+0x208>
 800c11a:	bf00      	nop
 800c11c:	0800cf34 	.word	0x0800cf34
 800c120:	0800cf54 	.word	0x0800cf54
 800c124:	0800cf14 	.word	0x0800cf14
 800c128:	0800d0cc 	.word	0x0800d0cc
 800c12c:	0800d0d6 	.word	0x0800d0d6
 800c130:	08009a19 	.word	0x08009a19
 800c134:	0800beb7 	.word	0x0800beb7
 800c138:	0800d0d2 	.word	0x0800d0d2

0800c13c <_sbrk_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d06      	ldr	r5, [pc, #24]	; (800c158 <_sbrk_r+0x1c>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	602b      	str	r3, [r5, #0]
 800c148:	f7f8 fb64 	bl	8004814 <_sbrk>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_sbrk_r+0x1a>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_sbrk_r+0x1a>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	20001b8c 	.word	0x20001b8c

0800c15c <__sread>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	460c      	mov	r4, r1
 800c160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c164:	f000 f8e2 	bl	800c32c <_read_r>
 800c168:	2800      	cmp	r0, #0
 800c16a:	bfab      	itete	ge
 800c16c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c16e:	89a3      	ldrhlt	r3, [r4, #12]
 800c170:	181b      	addge	r3, r3, r0
 800c172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c176:	bfac      	ite	ge
 800c178:	6563      	strge	r3, [r4, #84]	; 0x54
 800c17a:	81a3      	strhlt	r3, [r4, #12]
 800c17c:	bd10      	pop	{r4, pc}

0800c17e <__swrite>:
 800c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	461f      	mov	r7, r3
 800c184:	898b      	ldrh	r3, [r1, #12]
 800c186:	05db      	lsls	r3, r3, #23
 800c188:	4605      	mov	r5, r0
 800c18a:	460c      	mov	r4, r1
 800c18c:	4616      	mov	r6, r2
 800c18e:	d505      	bpl.n	800c19c <__swrite+0x1e>
 800c190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c194:	2302      	movs	r3, #2
 800c196:	2200      	movs	r2, #0
 800c198:	f000 f898 	bl	800c2cc <_lseek_r>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	4632      	mov	r2, r6
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b2:	f000 b817 	b.w	800c1e4 <_write_r>

0800c1b6 <__sseek>:
 800c1b6:	b510      	push	{r4, lr}
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1be:	f000 f885 	bl	800c2cc <_lseek_r>
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	bf15      	itete	ne
 800c1c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1d2:	81a3      	strheq	r3, [r4, #12]
 800c1d4:	bf18      	it	ne
 800c1d6:	81a3      	strhne	r3, [r4, #12]
 800c1d8:	bd10      	pop	{r4, pc}

0800c1da <__sclose>:
 800c1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1de:	f000 b831 	b.w	800c244 <_close_r>
	...

0800c1e4 <_write_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4d07      	ldr	r5, [pc, #28]	; (800c204 <_write_r+0x20>)
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	4608      	mov	r0, r1
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	602a      	str	r2, [r5, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f7f8 fabd 	bl	8004772 <_write>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_write_r+0x1e>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_write_r+0x1e>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	20001b8c 	.word	0x20001b8c

0800c208 <__assert_func>:
 800c208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c20a:	4614      	mov	r4, r2
 800c20c:	461a      	mov	r2, r3
 800c20e:	4b09      	ldr	r3, [pc, #36]	; (800c234 <__assert_func+0x2c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4605      	mov	r5, r0
 800c214:	68d8      	ldr	r0, [r3, #12]
 800c216:	b14c      	cbz	r4, 800c22c <__assert_func+0x24>
 800c218:	4b07      	ldr	r3, [pc, #28]	; (800c238 <__assert_func+0x30>)
 800c21a:	9100      	str	r1, [sp, #0]
 800c21c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c220:	4906      	ldr	r1, [pc, #24]	; (800c23c <__assert_func+0x34>)
 800c222:	462b      	mov	r3, r5
 800c224:	f000 f81e 	bl	800c264 <fiprintf>
 800c228:	f000 f89f 	bl	800c36a <abort>
 800c22c:	4b04      	ldr	r3, [pc, #16]	; (800c240 <__assert_func+0x38>)
 800c22e:	461c      	mov	r4, r3
 800c230:	e7f3      	b.n	800c21a <__assert_func+0x12>
 800c232:	bf00      	nop
 800c234:	2000011c 	.word	0x2000011c
 800c238:	0800d0dd 	.word	0x0800d0dd
 800c23c:	0800d0ea 	.word	0x0800d0ea
 800c240:	0800d118 	.word	0x0800d118

0800c244 <_close_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d06      	ldr	r5, [pc, #24]	; (800c260 <_close_r+0x1c>)
 800c248:	2300      	movs	r3, #0
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	602b      	str	r3, [r5, #0]
 800c250:	f7f8 faab 	bl	80047aa <_close>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_close_r+0x1a>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_close_r+0x1a>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	20001b8c 	.word	0x20001b8c

0800c264 <fiprintf>:
 800c264:	b40e      	push	{r1, r2, r3}
 800c266:	b503      	push	{r0, r1, lr}
 800c268:	4601      	mov	r1, r0
 800c26a:	ab03      	add	r3, sp, #12
 800c26c:	4805      	ldr	r0, [pc, #20]	; (800c284 <fiprintf+0x20>)
 800c26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c272:	6800      	ldr	r0, [r0, #0]
 800c274:	9301      	str	r3, [sp, #4]
 800c276:	f7ff fe31 	bl	800bedc <_vfiprintf_r>
 800c27a:	b002      	add	sp, #8
 800c27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c280:	b003      	add	sp, #12
 800c282:	4770      	bx	lr
 800c284:	2000011c 	.word	0x2000011c

0800c288 <_fstat_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	; (800c2a8 <_fstat_r+0x20>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	4611      	mov	r1, r2
 800c294:	602b      	str	r3, [r5, #0]
 800c296:	f7f8 fa94 	bl	80047c2 <_fstat>
 800c29a:	1c43      	adds	r3, r0, #1
 800c29c:	d102      	bne.n	800c2a4 <_fstat_r+0x1c>
 800c29e:	682b      	ldr	r3, [r5, #0]
 800c2a0:	b103      	cbz	r3, 800c2a4 <_fstat_r+0x1c>
 800c2a2:	6023      	str	r3, [r4, #0]
 800c2a4:	bd38      	pop	{r3, r4, r5, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20001b8c 	.word	0x20001b8c

0800c2ac <_isatty_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d06      	ldr	r5, [pc, #24]	; (800c2c8 <_isatty_r+0x1c>)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	f7f8 fa93 	bl	80047e2 <_isatty>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_isatty_r+0x1a>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_isatty_r+0x1a>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20001b8c 	.word	0x20001b8c

0800c2cc <_lseek_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	; (800c2ec <_lseek_r+0x20>)
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	602a      	str	r2, [r5, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f7f8 fa8c 	bl	80047f8 <_lseek>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_lseek_r+0x1e>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_lseek_r+0x1e>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	20001b8c 	.word	0x20001b8c

0800c2f0 <__ascii_mbtowc>:
 800c2f0:	b082      	sub	sp, #8
 800c2f2:	b901      	cbnz	r1, 800c2f6 <__ascii_mbtowc+0x6>
 800c2f4:	a901      	add	r1, sp, #4
 800c2f6:	b142      	cbz	r2, 800c30a <__ascii_mbtowc+0x1a>
 800c2f8:	b14b      	cbz	r3, 800c30e <__ascii_mbtowc+0x1e>
 800c2fa:	7813      	ldrb	r3, [r2, #0]
 800c2fc:	600b      	str	r3, [r1, #0]
 800c2fe:	7812      	ldrb	r2, [r2, #0]
 800c300:	1e10      	subs	r0, r2, #0
 800c302:	bf18      	it	ne
 800c304:	2001      	movne	r0, #1
 800c306:	b002      	add	sp, #8
 800c308:	4770      	bx	lr
 800c30a:	4610      	mov	r0, r2
 800c30c:	e7fb      	b.n	800c306 <__ascii_mbtowc+0x16>
 800c30e:	f06f 0001 	mvn.w	r0, #1
 800c312:	e7f8      	b.n	800c306 <__ascii_mbtowc+0x16>

0800c314 <__malloc_lock>:
 800c314:	4801      	ldr	r0, [pc, #4]	; (800c31c <__malloc_lock+0x8>)
 800c316:	f7ff b8ce 	b.w	800b4b6 <__retarget_lock_acquire_recursive>
 800c31a:	bf00      	nop
 800c31c:	20001b80 	.word	0x20001b80

0800c320 <__malloc_unlock>:
 800c320:	4801      	ldr	r0, [pc, #4]	; (800c328 <__malloc_unlock+0x8>)
 800c322:	f7ff b8c9 	b.w	800b4b8 <__retarget_lock_release_recursive>
 800c326:	bf00      	nop
 800c328:	20001b80 	.word	0x20001b80

0800c32c <_read_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d07      	ldr	r5, [pc, #28]	; (800c34c <_read_r+0x20>)
 800c330:	4604      	mov	r4, r0
 800c332:	4608      	mov	r0, r1
 800c334:	4611      	mov	r1, r2
 800c336:	2200      	movs	r2, #0
 800c338:	602a      	str	r2, [r5, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7f8 f9fc 	bl	8004738 <_read>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_read_r+0x1e>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_read_r+0x1e>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	20001b8c 	.word	0x20001b8c

0800c350 <__ascii_wctomb>:
 800c350:	b149      	cbz	r1, 800c366 <__ascii_wctomb+0x16>
 800c352:	2aff      	cmp	r2, #255	; 0xff
 800c354:	bf85      	ittet	hi
 800c356:	238a      	movhi	r3, #138	; 0x8a
 800c358:	6003      	strhi	r3, [r0, #0]
 800c35a:	700a      	strbls	r2, [r1, #0]
 800c35c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c360:	bf98      	it	ls
 800c362:	2001      	movls	r0, #1
 800c364:	4770      	bx	lr
 800c366:	4608      	mov	r0, r1
 800c368:	4770      	bx	lr

0800c36a <abort>:
 800c36a:	b508      	push	{r3, lr}
 800c36c:	2006      	movs	r0, #6
 800c36e:	f000 f82b 	bl	800c3c8 <raise>
 800c372:	2001      	movs	r0, #1
 800c374:	f7f8 f9d6 	bl	8004724 <_exit>

0800c378 <_raise_r>:
 800c378:	291f      	cmp	r1, #31
 800c37a:	b538      	push	{r3, r4, r5, lr}
 800c37c:	4604      	mov	r4, r0
 800c37e:	460d      	mov	r5, r1
 800c380:	d904      	bls.n	800c38c <_raise_r+0x14>
 800c382:	2316      	movs	r3, #22
 800c384:	6003      	str	r3, [r0, #0]
 800c386:	f04f 30ff 	mov.w	r0, #4294967295
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c38e:	b112      	cbz	r2, 800c396 <_raise_r+0x1e>
 800c390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c394:	b94b      	cbnz	r3, 800c3aa <_raise_r+0x32>
 800c396:	4620      	mov	r0, r4
 800c398:	f000 f830 	bl	800c3fc <_getpid_r>
 800c39c:	462a      	mov	r2, r5
 800c39e:	4601      	mov	r1, r0
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3a6:	f000 b817 	b.w	800c3d8 <_kill_r>
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d00a      	beq.n	800c3c4 <_raise_r+0x4c>
 800c3ae:	1c59      	adds	r1, r3, #1
 800c3b0:	d103      	bne.n	800c3ba <_raise_r+0x42>
 800c3b2:	2316      	movs	r3, #22
 800c3b4:	6003      	str	r3, [r0, #0]
 800c3b6:	2001      	movs	r0, #1
 800c3b8:	e7e7      	b.n	800c38a <_raise_r+0x12>
 800c3ba:	2400      	movs	r4, #0
 800c3bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	4798      	blx	r3
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e7e0      	b.n	800c38a <_raise_r+0x12>

0800c3c8 <raise>:
 800c3c8:	4b02      	ldr	r3, [pc, #8]	; (800c3d4 <raise+0xc>)
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	f7ff bfd3 	b.w	800c378 <_raise_r>
 800c3d2:	bf00      	nop
 800c3d4:	2000011c 	.word	0x2000011c

0800c3d8 <_kill_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4d07      	ldr	r5, [pc, #28]	; (800c3f8 <_kill_r+0x20>)
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4604      	mov	r4, r0
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	602b      	str	r3, [r5, #0]
 800c3e6:	f7f8 f98d 	bl	8004704 <_kill>
 800c3ea:	1c43      	adds	r3, r0, #1
 800c3ec:	d102      	bne.n	800c3f4 <_kill_r+0x1c>
 800c3ee:	682b      	ldr	r3, [r5, #0]
 800c3f0:	b103      	cbz	r3, 800c3f4 <_kill_r+0x1c>
 800c3f2:	6023      	str	r3, [r4, #0]
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
 800c3f6:	bf00      	nop
 800c3f8:	20001b8c 	.word	0x20001b8c

0800c3fc <_getpid_r>:
 800c3fc:	f7f8 b97a 	b.w	80046f4 <_getpid>

0800c400 <_init>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	bf00      	nop
 800c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c406:	bc08      	pop	{r3}
 800c408:	469e      	mov	lr, r3
 800c40a:	4770      	bx	lr

0800c40c <_fini>:
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40e:	bf00      	nop
 800c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c412:	bc08      	pop	{r3}
 800c414:	469e      	mov	lr, r3
 800c416:	4770      	bx	lr
