
FC_SPI_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e80  0800d9a0  0800d9a0  0001d9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e820  0800e820  00020310  2**0
                  CONTENTS
  4 .ARM          00000008  0800e820  0800e820  0001e820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e828  0800e828  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e828  0800e828  0001e828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e82c  0800e82c  0001e82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800e830  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020310  2**0
                  CONTENTS
 10 .bss          00001abc  20000310  20000310  00020310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dcc  20001dcc  00020310  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015681  00000000  00000000  00020383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b0e  00000000  00000000  00035a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  00039518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c0e  00000000  00000000  0003a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028d01  00000000  00000000  0003b11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017e30  00000000  00000000  00063e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb026  00000000  00000000  0007bc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005260  00000000  00000000  00166c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0016bed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000310 	.word	0x20000310
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d988 	.word	0x0800d988

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000314 	.word	0x20000314
 80001ec:	0800d988 	.word	0x0800d988

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <IMU_UART_CB>:
#define IMU_DMA_TX hdma_usart3_tx


IMU imu;

void IMU_UART_CB(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <IMU_UART_CB+0x90>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d11b      	bne.n	8000ff2 <IMU_UART_CB+0x4e>
		imu.IMU_got_data = true;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <IMU_UART_CB+0x94>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		imu.IMU_data_Size = Size;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <IMU_UART_CB+0x94>)
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	f8a2 3802 	strh.w	r3, [r2, #2050]	; 0x802
		imu.no_stuck=true;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <IMU_UART_CB+0x94>)
 8000fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 8000fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fda:	4917      	ldr	r1, [pc, #92]	; (8001038 <IMU_UART_CB+0x94>)
 8000fdc:	4817      	ldr	r0, [pc, #92]	; (800103c <IMU_UART_CB+0x98>)
 8000fde:	f007 fec7 	bl	8008d70 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <IMU_UART_CB+0x9c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <IMU_UART_CB+0x9c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0208 	bic.w	r2, r2, #8
 8000ff0:	601a      	str	r2, [r3, #0]
//		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, IMU_dma_buffer, IMU_BUFFER_SIZE);
//		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);

	}
	//for uart data overflow safety
	if (Size >= 1024) {
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d317      	bcc.n	800102a <IMU_UART_CB+0x86>
		memset(imu.IMU_buffer, 0, IMU_BUFFER_SIZE);
 8000ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ffe:	2100      	movs	r1, #0
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <IMU_UART_CB+0x94>)
 8001002:	f009 fecd 	bl	800ada0 <memset>
		imu.IMU_data_Size=0;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <IMU_UART_CB+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 800100e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <IMU_UART_CB+0x94>)
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <IMU_UART_CB+0x98>)
 8001016:	f007 feab 	bl	8008d70 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <IMU_UART_CB+0x9c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <IMU_UART_CB+0x9c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0208 	bic.w	r2, r2, #8
 8001028:	601a      	str	r2, [r3, #0]

	}
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40004800 	.word	0x40004800
 8001038:	2000032c 	.word	0x2000032c
 800103c:	20001ab8 	.word	0x20001ab8
 8001040:	20001bbc 	.word	0x20001bbc

08001044 <IMU_Init>:
void imu_callback( XsensEventFlag_t event, XsensEventData_t *mtdata );
void IMU_Init() {
 8001044:	b580      	push	{r7, lr}
 8001046:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 800104a:	af00      	add	r7, sp, #0
	printf("IMU initializing......\n");
 800104c:	482c      	ldr	r0, [pc, #176]	; (8001100 <IMU_Init+0xbc>)
 800104e:	f009 fdc7 	bl	800abe0 <puts>
	//setup DMA
	HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 8001052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001056:	492b      	ldr	r1, [pc, #172]	; (8001104 <IMU_Init+0xc0>)
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <IMU_Init+0xc4>)
 800105a:	f007 fe89 	bl	8008d70 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <IMU_Init+0xc8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <IMU_Init+0xc8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0208 	bic.w	r2, r2, #8
 800106c:	601a      	str	r2, [r3, #0]

	// Setup custom handler callbacks to catch acknowledgements from IMU
	xsens_mti_override_id_handler(MT_ACK_GOTOCONFIG, 					&handle_ack_gotoconfig);
 800106e:	4928      	ldr	r1, [pc, #160]	; (8001110 <IMU_Init+0xcc>)
 8001070:	2031      	movs	r0, #49	; 0x31
 8001072:	f001 fac3 	bl	80025fc <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_GOTOMEASUREMENT,			&handle_ack_gotomeasurement);
 8001076:	4927      	ldr	r1, [pc, #156]	; (8001114 <IMU_Init+0xd0>)
 8001078:	2011      	movs	r0, #17
 800107a:	f001 fabf 	bl	80025fc <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_OUTPUTCONFIGURATION, &handle_ack_outputconfiguration);
 800107e:	4926      	ldr	r1, [pc, #152]	; (8001118 <IMU_Init+0xd4>)
 8001080:	20c1      	movs	r0, #193	; 0xc1
 8001082:	f001 fabb 	bl	80025fc <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_RESET, 							&myHandle_WAKEUP_cb);
 8001086:	4925      	ldr	r1, [pc, #148]	; (800111c <IMU_Init+0xd8>)
 8001088:	2041      	movs	r0, #65	; 0x41
 800108a:	f001 fab7 	bl	80025fc <xsens_mti_override_id_handler>

	xsens_interface_t imu_interface_S = XSENS_INTERFACE_RX_TX( &imu_callback, &imu_send_data );
 800108e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001092:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001096:	4a22      	ldr	r2, [pc, #136]	; (8001120 <IMU_Init+0xdc>)
 8001098:	4618      	mov	r0, r3
 800109a:	4611      	mov	r1, r2
 800109c:	f640 0314 	movw	r3, #2068	; 0x814
 80010a0:	461a      	mov	r2, r3
 80010a2:	f009 fefb 	bl	800ae9c <memcpy>
	imu.imu_interface = imu_interface_S;
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <IMU_Init+0xc0>)
 80010a8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80010ac:	f6a3 0114 	subw	r1, r3, #2068	; 0x814
 80010b0:	f602 0308 	addw	r3, r2, #2056	; 0x808
 80010b4:	f640 0214 	movw	r2, #2068	; 0x814
 80010b8:	4618      	mov	r0, r3
 80010ba:	f009 feef 	bl	800ae9c <memcpy>

	imu.ack_flag = ACK_NONE;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <IMU_Init+0xc0>)
 80010c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]

	imu.output_Hz = 100;   // Hz acceleration message rate
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <IMU_Init+0xc0>)
 80010ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ce:	2264      	movs	r2, #100	; 0x64
 80010d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	imu.imu_state = STATE_STARTUP;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <IMU_Init+0xc0>)
 80010d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010da:	2200      	movs	r2, #0
 80010dc:	775a      	strb	r2, [r3, #29]
	imu.calided = false;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <IMU_Init+0xc0>)
 80010e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	IMU_State_mechine();
 80010ea:	f000 f857 	bl	800119c <IMU_State_mechine>
	printf("IMU:initialization finish.\n");
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <IMU_Init+0xe0>)
 80010f0:	f009 fd76 	bl	800abe0 <puts>
}
 80010f4:	bf00      	nop
 80010f6:	f607 0718 	addw	r7, r7, #2072	; 0x818
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800d9a0 	.word	0x0800d9a0
 8001104:	2000032c 	.word	0x2000032c
 8001108:	20001ab8 	.word	0x20001ab8
 800110c:	20001bbc 	.word	0x20001bbc
 8001110:	08001755 	.word	0x08001755
 8001114:	08001779 	.word	0x08001779
 8001118:	0800179d 	.word	0x0800179d
 800111c:	080017c1 	.word	0x080017c1
 8001120:	0800d9d4 	.word	0x0800d9d4
 8001124:	0800d9b8 	.word	0x0800d9b8

08001128 <IMU_process_data>:

void IMU_process_data() {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	if (imu.IMU_got_data) {
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <IMU_process_data+0x6c>)
 8001130:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8001134:	2b00      	cmp	r3, #0
 8001136:	d029      	beq.n	800118c <IMU_process_data+0x64>
		for (int i = 0; i < imu.IMU_data_Size; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	e00a      	b.n	8001154 <IMU_process_data+0x2c>
			xsens_mti_parse(&imu.imu_interface, imu.IMU_buffer[i]);
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <IMU_process_data+0x6c>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <IMU_process_data+0x70>)
 800114a:	f001 f979 	bl	8002440 <xsens_mti_parse>
		for (int i = 0; i < imu.IMU_data_Size; i++) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <IMU_process_data+0x6c>)
 8001156:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4293      	cmp	r3, r2
 8001160:	dbed      	blt.n	800113e <IMU_process_data+0x16>
		}
		//set
		memset(imu.IMU_buffer, imu.IMU_data_Size, IMU_BUFFER_SIZE);
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <IMU_process_data+0x6c>)
 8001164:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8001168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116c:	4619      	mov	r1, r3
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <IMU_process_data+0x6c>)
 8001170:	f009 fe16 	bl	800ada0 <memset>
		imu.IMU_got_data = false;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <IMU_process_data+0x6c>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		imu.IMU_data_Size = 0;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <IMU_process_data+0x6c>)
 800117e:	2200      	movs	r2, #0
 8001180:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		imu.IMU_prc_data = true;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <IMU_process_data+0x6c>)
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
	}
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000032c 	.word	0x2000032c
 8001198:	20000b34 	.word	0x20000b34

0800119c <IMU_State_mechine>:

void IMU_State_mechine(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

	switch (imu.imu_state) {
 80011a0:	4ba8      	ldr	r3, [pc, #672]	; (8001444 <IMU_State_mechine+0x2a8>)
 80011a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a6:	7f5b      	ldrb	r3, [r3, #29]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	f200 8139 	bhi.w	8001420 <IMU_State_mechine+0x284>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <IMU_State_mechine+0x18>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011d9 	.word	0x080011d9
 80011b8:	08001207 	.word	0x08001207
 80011bc:	08001231 	.word	0x08001231
 80011c0:	08001259 	.word	0x08001259
 80011c4:	080012b9 	.word	0x080012b9
 80011c8:	080012ed 	.word	0x080012ed
 80011cc:	08001317 	.word	0x08001317
 80011d0:	08001331 	.word	0x08001331
 80011d4:	08001373 	.word	0x08001373
	case STATE_STARTUP:
		printf("IMU:Start up...\n");
 80011d8:	489b      	ldr	r0, [pc, #620]	; (8001448 <IMU_State_mechine+0x2ac>)
 80011da:	f009 fd01 	bl	800abe0 <puts>
//		xsens_mti_request(&imu.imu_interface, MT_RESET);
		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 80011de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e2:	4998      	ldr	r1, [pc, #608]	; (8001444 <IMU_State_mechine+0x2a8>)
 80011e4:	4899      	ldr	r0, [pc, #612]	; (800144c <IMU_State_mechine+0x2b0>)
 80011e6:	f007 fdc3 	bl	8008d70 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 80011ea:	4b99      	ldr	r3, [pc, #612]	; (8001450 <IMU_State_mechine+0x2b4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b97      	ldr	r3, [pc, #604]	; (8001450 <IMU_State_mechine+0x2b4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0208 	bic.w	r2, r2, #8
 80011f8:	601a      	str	r2, [r3, #0]

		imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 80011fa:	4b92      	ldr	r3, [pc, #584]	; (8001444 <IMU_State_mechine+0x2a8>)
 80011fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001200:	2202      	movs	r2, #2
 8001202:	775a      	strb	r2, [r3, #29]
//			imu.imu_state = STATE_ACK_WAKEUP;
	break;
 8001204:	e11b      	b.n	800143e <IMU_State_mechine+0x2a2>

	case STATE_ACK_WAKEUP:
		// Read configuration packet response
		// TODO: MDATA2 odd input handling?

		if (imu.ack_flag == ACK_WAKEUP) {
 8001206:	4b8f      	ldr	r3, [pc, #572]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120c:	7f1b      	ldrb	r3, [r3, #28]
 800120e:	2b04      	cmp	r3, #4
 8001210:	f040 810c 	bne.w	800142c <IMU_State_mechine+0x290>
			printf("IMU:IMU is wake...\n");
 8001214:	488f      	ldr	r0, [pc, #572]	; (8001454 <IMU_State_mechine+0x2b8>)
 8001216:	f009 fce3 	bl	800abe0 <puts>
			imu.ack_flag = ACK_NONE;
 800121a:	4b8a      	ldr	r3, [pc, #552]	; (8001444 <IMU_State_mechine+0x2a8>)
 800121c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001220:	2200      	movs	r2, #0
 8001222:	771a      	strb	r2, [r3, #28]
			imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 8001224:	4b87      	ldr	r3, [pc, #540]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800122a:	2202      	movs	r2, #2
 800122c:	775a      	strb	r2, [r3, #29]
		}
	break;
 800122e:	e0fd      	b.n	800142c <IMU_State_mechine+0x290>

	case STATE_REQUEST_CONFIG_MODE:
		printf("IMU:Requesting config mode...\n");
 8001230:	4889      	ldr	r0, [pc, #548]	; (8001458 <IMU_State_mechine+0x2bc>)
 8001232:	f009 fcd5 	bl	800abe0 <puts>
		xsens_mti_request(&imu.imu_interface, MT_GOTOCONFIG);
 8001236:	2130      	movs	r1, #48	; 0x30
 8001238:	4888      	ldr	r0, [pc, #544]	; (800145c <IMU_State_mechine+0x2c0>)
 800123a:	f001 fb44 	bl	80028c6 <xsens_mti_request>
		imu.imu_state = STATE_ACK_CONFIG_MODE;
 800123e:	4b81      	ldr	r3, [pc, #516]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001244:	2203      	movs	r2, #3
 8001246:	775a      	strb	r2, [r3, #29]
//		HAL_Delay(100);
		imu.timer_timeOut = HAL_GetTick();
 8001248:	f004 f9a4 	bl	8005594 <HAL_GetTick>
 800124c:	4603      	mov	r3, r0
 800124e:	4a7d      	ldr	r2, [pc, #500]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001250:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001254:	6213      	str	r3, [r2, #32]
	break;
 8001256:	e0f2      	b.n	800143e <IMU_State_mechine+0x2a2>

	case STATE_ACK_CONFIG_MODE:
		// Wait for GoToConfigAck to return
		// handle_gotoconfigack will fire when it does, and set our flag
		if (imu.ack_flag == ACK_CONFIG) {
 8001258:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <IMU_State_mechine+0x2a8>)
 800125a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125e:	7f1b      	ldrb	r3, [r3, #28]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10d      	bne.n	8001280 <IMU_State_mechine+0xe4>
			printf("IMU:IMU in config mode\n");
 8001264:	487e      	ldr	r0, [pc, #504]	; (8001460 <IMU_State_mechine+0x2c4>)
 8001266:	f009 fcbb 	bl	800abe0 <puts>
			imu.ack_flag = ACK_NONE;
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <IMU_State_mechine+0x2a8>)
 800126c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001270:	2200      	movs	r2, #0
 8001272:	771a      	strb	r2, [r3, #28]
			imu.imu_state = STATE_SET_OUTPUT_CONFIG;
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127a:	2204      	movs	r2, #4
 800127c:	775a      	strb	r2, [r3, #29]
		} else if (HAL_GetTick() - imu.timer_timeOut > 2000) {
			imu.timer_timeOut = HAL_GetTick();
			imu.imu_state = STATE_STARTUP;
			printf("IMU:again: ");
		}
	break;
 800127e:	e0d7      	b.n	8001430 <IMU_State_mechine+0x294>
		} else if (HAL_GetTick() - imu.timer_timeOut > 2000) {
 8001280:	f004 f988 	bl	8005594 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001294:	f240 80cc 	bls.w	8001430 <IMU_State_mechine+0x294>
			imu.timer_timeOut = HAL_GetTick();
 8001298:	f004 f97c 	bl	8005594 <HAL_GetTick>
 800129c:	4603      	mov	r3, r0
 800129e:	4a69      	ldr	r2, [pc, #420]	; (8001444 <IMU_State_mechine+0x2a8>)
 80012a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012a4:	6213      	str	r3, [r2, #32]
			imu.imu_state = STATE_STARTUP;
 80012a6:	4b67      	ldr	r3, [pc, #412]	; (8001444 <IMU_State_mechine+0x2a8>)
 80012a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ac:	2200      	movs	r2, #0
 80012ae:	775a      	strb	r2, [r3, #29]
			printf("IMU:again: ");
 80012b0:	486c      	ldr	r0, [pc, #432]	; (8001464 <IMU_State_mechine+0x2c8>)
 80012b2:	f009 fc2f 	bl	800ab14 <iprintf>
	break;
 80012b6:	e0bb      	b.n	8001430 <IMU_State_mechine+0x294>

	case STATE_SET_OUTPUT_CONFIG:
		printf("IMU:change Rot Setting\n");
 80012b8:	486b      	ldr	r0, [pc, #428]	; (8001468 <IMU_State_mechine+0x2cc>)
 80012ba:	f009 fc91 	bl	800abe0 <puts>
//			changeRotMatrix(imu, bool Frame, float x, float y, float z);
//		changeRotMatrix(1, 0, 0, 0);
		}
//		changeRotMatrix(0, 0, 1.570795, 0);

		printf("IMU:Setting output rate to %d Hz\n", imu.output_Hz);
 80012be:	4b61      	ldr	r3, [pc, #388]	; (8001444 <IMU_State_mechine+0x2a8>)
 80012c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80012c8:	4619      	mov	r1, r3
 80012ca:	4868      	ldr	r0, [pc, #416]	; (800146c <IMU_State_mechine+0x2d0>)
 80012cc:	f009 fc22 	bl	800ab14 <iprintf>
		changeOutputRate(imu.output_Hz);
 80012d0:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <IMU_State_mechine+0x2a8>)
 80012d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fa96 	bl	800180c <changeOutputRate>



		imu.imu_state = STATE_ACK_OUTPUT_CONFIG;
 80012e0:	4b58      	ldr	r3, [pc, #352]	; (8001444 <IMU_State_mechine+0x2a8>)
 80012e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e6:	2205      	movs	r2, #5
 80012e8:	775a      	strb	r2, [r3, #29]
	break;
 80012ea:	e0a8      	b.n	800143e <IMU_State_mechine+0x2a2>

	case STATE_ACK_OUTPUT_CONFIG:
		// Read configuration packet response
		// TODO: MDATA2 odd input handling?

		if (imu.ack_flag == ACK_CONFIGURED) {
 80012ec:	4b55      	ldr	r3, [pc, #340]	; (8001444 <IMU_State_mechine+0x2a8>)
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	7f1b      	ldrb	r3, [r3, #28]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	f040 809d 	bne.w	8001434 <IMU_State_mechine+0x298>
			printf("IMU:IMU confirmed config...\n");
 80012fa:	485d      	ldr	r0, [pc, #372]	; (8001470 <IMU_State_mechine+0x2d4>)
 80012fc:	f009 fc70 	bl	800abe0 <puts>
			imu.imu_state = STATE_REQUEST_MEASUREMENT_MODE;
 8001300:	4b50      	ldr	r3, [pc, #320]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001306:	2206      	movs	r2, #6
 8001308:	775a      	strb	r2, [r3, #29]
			imu.ack_flag = ACK_NONE;
 800130a:	4b4e      	ldr	r3, [pc, #312]	; (8001444 <IMU_State_mechine+0x2a8>)
 800130c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001310:	2200      	movs	r2, #0
 8001312:	771a      	strb	r2, [r3, #28]
		}
	break;
 8001314:	e08e      	b.n	8001434 <IMU_State_mechine+0x298>

	case STATE_REQUEST_MEASUREMENT_MODE:
		printf("IMU:Requesting measurement mode...\n");
 8001316:	4857      	ldr	r0, [pc, #348]	; (8001474 <IMU_State_mechine+0x2d8>)
 8001318:	f009 fc62 	bl	800abe0 <puts>
		xsens_mti_request(&imu.imu_interface, MT_GOTOMEASUREMENT);
 800131c:	2110      	movs	r1, #16
 800131e:	484f      	ldr	r0, [pc, #316]	; (800145c <IMU_State_mechine+0x2c0>)
 8001320:	f001 fad1 	bl	80028c6 <xsens_mti_request>
		imu.imu_state = STATE_ACK_MEASUREMENT_MODE;
 8001324:	4b47      	ldr	r3, [pc, #284]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132a:	2207      	movs	r2, #7
 800132c:	775a      	strb	r2, [r3, #29]
		break;
 800132e:	e086      	b.n	800143e <IMU_State_mechine+0x2a2>

	case STATE_ACK_MEASUREMENT_MODE:
		// Wait x in this mode before attempting to configure different settings

		if (imu.ack_flag == ACK_MEASUREMENT) {
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001336:	7f1b      	ldrb	r3, [r3, #28]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d17d      	bne.n	8001438 <IMU_State_mechine+0x29c>
			// Go back to the start of the settings flow
			imu.imu_state = STATE_RUNNING;
 800133c:	4b41      	ldr	r3, [pc, #260]	; (8001444 <IMU_State_mechine+0x2a8>)
 800133e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001342:	2208      	movs	r2, #8
 8001344:	775a      	strb	r2, [r3, #29]
			imu.ack_flag = ACK_NONE;
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134c:	2200      	movs	r2, #0
 800134e:	771a      	strb	r2, [r3, #28]
			printf("start running\n");
 8001350:	4849      	ldr	r0, [pc, #292]	; (8001478 <IMU_State_mechine+0x2dc>)
 8001352:	f009 fc45 	bl	800abe0 <puts>
			imu.timer_timeOut = HAL_GetTick();
 8001356:	f004 f91d 	bl	8005594 <HAL_GetTick>
 800135a:	4603      	mov	r3, r0
 800135c:	4a39      	ldr	r2, [pc, #228]	; (8001444 <IMU_State_mechine+0x2a8>)
 800135e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001362:	6213      	str	r3, [r2, #32]
			imu.no_stuck=true;
 8001364:	4b37      	ldr	r3, [pc, #220]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
	break;
 8001370:	e062      	b.n	8001438 <IMU_State_mechine+0x29c>

	case STATE_RUNNING:
		if(imu.IMU_prc_data == true){
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001374:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8001378:	2b00      	cmp	r3, #0
 800137a:	d011      	beq.n	80013a0 <IMU_State_mechine+0x204>
			imu.timer_timeOut = HAL_GetTick();
 800137c:	f004 f90a 	bl	8005594 <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001384:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001388:	6213      	str	r3, [r2, #32]
			imu.no_stuck=true;
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <IMU_State_mechine+0x2a8>)
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			imu.IMU_prc_data = false;
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 800139e:	e02a      	b.n	80013f6 <IMU_State_mechine+0x25a>
		}else if((imu.no_stuck == false) && (HAL_GetTick() - imu.timer_timeOut > 2000)){
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <IMU_State_mechine+0x2a8>)
 80013a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013aa:	f083 0301 	eor.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d01a      	beq.n	80013ea <IMU_State_mechine+0x24e>
 80013b4:	f004 f8ee 	bl	8005594 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <IMU_State_mechine+0x2a8>)
 80013bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013c8:	d90f      	bls.n	80013ea <IMU_State_mechine+0x24e>

			printf("recieve error\n");
 80013ca:	482c      	ldr	r0, [pc, #176]	; (800147c <IMU_State_mechine+0x2e0>)
 80013cc:	f009 fc08 	bl	800abe0 <puts>
			imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <IMU_State_mechine+0x2a8>)
 80013d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d6:	2202      	movs	r2, #2
 80013d8:	775a      	strb	r2, [r3, #29]
			imu.timer_timeOut = HAL_GetTick();
 80013da:	f004 f8db 	bl	8005594 <HAL_GetTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a18      	ldr	r2, [pc, #96]	; (8001444 <IMU_State_mechine+0x2a8>)
 80013e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	e005      	b.n	80013f6 <IMU_State_mechine+0x25a>

		}else{
			imu.no_stuck=false;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <IMU_State_mechine+0x2a8>)
 80013ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}

		if(imu.calided == false){
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <IMU_State_mechine+0x2a8>)
 80013f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001400:	f083 0301 	eor.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d018      	beq.n	800143c <IMU_State_mechine+0x2a0>
			xsens_mti_reset_orientation(&imu.imu_interface, XSENS_ORIENTATION_ALIGNMENT_RESET);
 800140a:	2104      	movs	r1, #4
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <IMU_State_mechine+0x2c0>)
 800140e:	f001 fa99 	bl	8002944 <xsens_mti_reset_orientation>
			imu.calided = true;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
//				imu.changeRotSetting = true;
//				imu.imu_state = STATE_REQUEST_CONFIG_MODE;
//			}
//
//		}
	break;
 800141e:	e00d      	b.n	800143c <IMU_State_mechine+0x2a0>
	default:
		// Oops!
		imu.imu_state = STATE_STARTUP;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <IMU_State_mechine+0x2a8>)
 8001422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001426:	2200      	movs	r2, #0
 8001428:	775a      	strb	r2, [r3, #29]
		break;
 800142a:	e008      	b.n	800143e <IMU_State_mechine+0x2a2>
	break;
 800142c:	bf00      	nop
 800142e:	e006      	b.n	800143e <IMU_State_mechine+0x2a2>
	break;
 8001430:	bf00      	nop
 8001432:	e004      	b.n	800143e <IMU_State_mechine+0x2a2>
	break;
 8001434:	bf00      	nop
 8001436:	e002      	b.n	800143e <IMU_State_mechine+0x2a2>
	break;
 8001438:	bf00      	nop
 800143a:	e000      	b.n	800143e <IMU_State_mechine+0x2a2>
	break;
 800143c:	bf00      	nop
	}
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000032c 	.word	0x2000032c
 8001448:	0800e1e8 	.word	0x0800e1e8
 800144c:	20001ab8 	.word	0x20001ab8
 8001450:	20001bbc 	.word	0x20001bbc
 8001454:	0800e1f8 	.word	0x0800e1f8
 8001458:	0800e20c 	.word	0x0800e20c
 800145c:	20000b34 	.word	0x20000b34
 8001460:	0800e22c 	.word	0x0800e22c
 8001464:	0800e244 	.word	0x0800e244
 8001468:	0800e250 	.word	0x0800e250
 800146c:	0800e268 	.word	0x0800e268
 8001470:	0800e28c 	.word	0x0800e28c
 8001474:	0800e2a8 	.word	0x0800e2a8
 8001478:	0800e2cc 	.word	0x0800e2cc
 800147c:	0800e2dc 	.word	0x0800e2dc

08001480 <imu_callback>:

void imu_callback(XsensEventFlag_t event, XsensEventData_t *mtdata) {
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b09b      	sub	sp, #108	; 0x6c
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6639      	str	r1, [r7, #96]	; 0x60
 800148a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	switch (event) {
 800148e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001492:	2b1c      	cmp	r3, #28
 8001494:	f200 8158 	bhi.w	8001748 <imu_callback+0x2c8>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <imu_callback+0x20>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	08001515 	.word	0x08001515
 80014a4:	08001749 	.word	0x08001749
 80014a8:	08001749 	.word	0x08001749
 80014ac:	08001749 	.word	0x08001749
 80014b0:	08001749 	.word	0x08001749
 80014b4:	0800152d 	.word	0x0800152d
 80014b8:	08001749 	.word	0x08001749
 80014bc:	08001749 	.word	0x08001749
 80014c0:	08001749 	.word	0x08001749
 80014c4:	08001635 	.word	0x08001635
 80014c8:	080015f9 	.word	0x080015f9
 80014cc:	080015c9 	.word	0x080015c9
 80014d0:	08001599 	.word	0x08001599
 80014d4:	08001749 	.word	0x08001749
 80014d8:	08001569 	.word	0x08001569
 80014dc:	08001749 	.word	0x08001749
 80014e0:	08001749 	.word	0x08001749
 80014e4:	08001749 	.word	0x08001749
 80014e8:	08001749 	.word	0x08001749
 80014ec:	08001749 	.word	0x08001749
 80014f0:	08001749 	.word	0x08001749
 80014f4:	08001691 	.word	0x08001691
 80014f8:	08001749 	.word	0x08001749
 80014fc:	08001749 	.word	0x08001749
 8001500:	08001749 	.word	0x08001749
 8001504:	080016a9 	.word	0x080016a9
 8001508:	080016cf 	.word	0x080016cf
 800150c:	080016e7 	.word	0x080016e7
 8001510:	08001663 	.word	0x08001663
	case XSENS_EVT_TEMPERATURE:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT) {
 8001514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b0a      	cmp	r3, #10
 800151a:	f040 80fe 	bne.w	800171a <imu_callback+0x29a>
			imu.temp = mtdata->data.f4;
 800151e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001522:	4a8b      	ldr	r2, [pc, #556]	; (8001750 <imu_callback+0x2d0>)
 8001524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001528:	6293      	str	r3, [r2, #40]	; 0x28
//			printf("get Temp\n");
		}
	break;
 800152a:	e0f6      	b.n	800171a <imu_callback+0x29a>

	case XSENS_EVT_QUATERNION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT4) {
 800152c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0d      	cmp	r3, #13
 8001532:	f040 80f4 	bne.w	800171e <imu_callback+0x29e>
			imu.quaternionWXYZ[0] = mtdata->data.f4x4[0];
 8001536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800153a:	4a85      	ldr	r2, [pc, #532]	; (8001750 <imu_callback+0x2d0>)
 800153c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001540:	62d3      	str	r3, [r2, #44]	; 0x2c
			imu.quaternionWXYZ[1] = mtdata->data.f4x4[1];
 8001542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001546:	4a82      	ldr	r2, [pc, #520]	; (8001750 <imu_callback+0x2d0>)
 8001548:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
			imu.quaternionWXYZ[2] = mtdata->data.f4x4[2];
 800154e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a7f      	ldr	r2, [pc, #508]	; (8001750 <imu_callback+0x2d0>)
 8001554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001558:	6353      	str	r3, [r2, #52]	; 0x34
			imu.quaternionWXYZ[3] = mtdata->data.f4x4[3];
 800155a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800155c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155e:	4a7c      	ldr	r2, [pc, #496]	; (8001750 <imu_callback+0x2d0>)
 8001560:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001564:	6393      	str	r3, [r2, #56]	; 0x38
//			printf("get Quat\n");
		}
	break;
 8001566:	e0da      	b.n	800171e <imu_callback+0x29e>

	case XSENS_EVT_RATE_OF_TURN:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	f040 80d8 	bne.w	8001722 <imu_callback+0x2a2>
			imu.rateOfTurnXYZ[0] = mtdata->data.f4x3[0];
 8001572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001576:	4a76      	ldr	r2, [pc, #472]	; (8001750 <imu_callback+0x2d0>)
 8001578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800157c:	63d3      	str	r3, [r2, #60]	; 0x3c
			imu.rateOfTurnXYZ[1] = mtdata->data.f4x3[1];
 800157e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001582:	4a73      	ldr	r2, [pc, #460]	; (8001750 <imu_callback+0x2d0>)
 8001584:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
			imu.rateOfTurnXYZ[2] = mtdata->data.f4x3[2];
 800158a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a70      	ldr	r2, [pc, #448]	; (8001750 <imu_callback+0x2d0>)
 8001590:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
//      printf("get Rot\n");
		}
	break;
 8001596:	e0c4      	b.n	8001722 <imu_callback+0x2a2>

	case XSENS_EVT_FREE_ACCELERATION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	f040 80c2 	bne.w	8001726 <imu_callback+0x2a6>
			imu.freeAccelerationXYZ[0] = mtdata->data.f4x3[0];
 80015a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015a6:	4a6a      	ldr	r2, [pc, #424]	; (8001750 <imu_callback+0x2d0>)
 80015a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ac:	6493      	str	r3, [r2, #72]	; 0x48
			imu.freeAccelerationXYZ[1] = mtdata->data.f4x3[1];
 80015ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015b2:	4a67      	ldr	r2, [pc, #412]	; (8001750 <imu_callback+0x2d0>)
 80015b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
			imu.freeAccelerationXYZ[2] = mtdata->data.f4x3[2];
 80015ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a64      	ldr	r2, [pc, #400]	; (8001750 <imu_callback+0x2d0>)
 80015c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015c4:	6513      	str	r3, [r2, #80]	; 0x50
//      printf("get Facc\n");
		}
	break;
 80015c6:	e0ae      	b.n	8001726 <imu_callback+0x2a6>

	case XSENS_EVT_ACCELERATION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 80015c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	f040 80ac 	bne.w	800172a <imu_callback+0x2aa>
			imu.accelerationXYZ[0] = mtdata->data.f4x3[0];
 80015d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015d6:	4a5e      	ldr	r2, [pc, #376]	; (8001750 <imu_callback+0x2d0>)
 80015d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015dc:	6553      	str	r3, [r2, #84]	; 0x54
			imu.accelerationXYZ[1] = mtdata->data.f4x3[1];
 80015de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015e2:	4a5b      	ldr	r2, [pc, #364]	; (8001750 <imu_callback+0x2d0>)
 80015e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
			imu.accelerationXYZ[2] = mtdata->data.f4x3[2];
 80015ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a58      	ldr	r2, [pc, #352]	; (8001750 <imu_callback+0x2d0>)
 80015f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015f4:	65d3      	str	r3, [r2, #92]	; 0x5c
//       printf("get Facc\n");
		}
	break;
 80015f6:	e098      	b.n	800172a <imu_callback+0x2aa>

	case XSENS_EVT_DELTA_Q:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT4) {
 80015f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b0d      	cmp	r3, #13
 80015fe:	f040 8096 	bne.w	800172e <imu_callback+0x2ae>
			imu.deltaQ[0] = mtdata->data.f4x4[0];
 8001602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <imu_callback+0x2d0>)
 8001608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800160c:	6613      	str	r3, [r2, #96]	; 0x60
			imu.deltaQ[1] = mtdata->data.f4x4[1];
 800160e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001612:	4a4f      	ldr	r2, [pc, #316]	; (8001750 <imu_callback+0x2d0>)
 8001614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001618:	6653      	str	r3, [r2, #100]	; 0x64
			imu.deltaQ[2] = mtdata->data.f4x4[2];
 800161a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <imu_callback+0x2d0>)
 8001620:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001624:	6693      	str	r3, [r2, #104]	; 0x68
			imu.deltaQ[3] = mtdata->data.f4x4[3];
 8001626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162a:	4a49      	ldr	r2, [pc, #292]	; (8001750 <imu_callback+0x2d0>)
 800162c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001630:	66d3      	str	r3, [r2, #108]	; 0x6c
//			printf("get deltaQ\n");
		}
	break;
 8001632:	e07c      	b.n	800172e <imu_callback+0x2ae>

	case XSENS_EVT_DELTA_V:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d17a      	bne.n	8001732 <imu_callback+0x2b2>
			imu.deltaV[0] = mtdata->data.f4x3[0];
 800163c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800163e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001640:	4a43      	ldr	r2, [pc, #268]	; (8001750 <imu_callback+0x2d0>)
 8001642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
			imu.deltaV[1] = mtdata->data.f4x3[1];
 8001648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800164a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800164c:	4a40      	ldr	r2, [pc, #256]	; (8001750 <imu_callback+0x2d0>)
 800164e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001652:	6753      	str	r3, [r2, #116]	; 0x74
			imu.deltaV[2] = mtdata->data.f4x3[2];
 8001654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <imu_callback+0x2d0>)
 800165a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800165e:	6793      	str	r3, [r2, #120]	; 0x78
//       printf("get deltaV\n");
		}
	break;
 8001660:	e067      	b.n	8001732 <imu_callback+0x2b2>

	case XSENS_EVT_GNSS_PVT_DATA:
		if (mtdata->type == XSENS_EVT_TYPE_GNSS_DATA) {
 8001662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b2d      	cmp	r3, #45	; 0x2d
 8001668:	d165      	bne.n	8001736 <imu_callback+0x2b6>
			imu.myGnssData = gnssPvt_parse(mtdata->gnssPvtData);
 800166a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800166c:	1c9a      	adds	r2, r3, #2
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <imu_callback+0x2d0>)
 8001670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001674:	461c      	mov	r4, r3
 8001676:	463b      	mov	r3, r7
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f9a1 	bl	80019c2 <gnssPvt_parse>
 8001680:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 8001684:	4639      	mov	r1, r7
 8001686:	2260      	movs	r2, #96	; 0x60
 8001688:	4618      	mov	r0, r3
 800168a:	f009 fc07 	bl	800ae9c <memcpy>
//       printf("get Gnss data\n");
		}
	break;
 800168e:	e052      	b.n	8001736 <imu_callback+0x2b6>

	case XSENS_EVT_STATUS_WORD:
		if (mtdata->type == XSENS_EVT_TYPE_U32) {
 8001690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d150      	bne.n	800173a <imu_callback+0x2ba>
			imu.status = mtdata->data.u4;
 8001698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800169a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800169c:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <imu_callback+0x2d0>)
 800169e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
//			printf("get Sword\n");
		}
	break;
 80016a6:	e048      	b.n	800173a <imu_callback+0x2ba>
//      printf("get Facc\n");
		}
	break;

	case XSENS_EVT_LAT_LON:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT2) {
 80016a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b0b      	cmp	r3, #11
 80016ae:	d146      	bne.n	800173e <imu_callback+0x2be>
			imu.latitude = mtdata->data.f4x2[0];
 80016b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016b4:	4a26      	ldr	r2, [pc, #152]	; (8001750 <imu_callback+0x2d0>)
 80016b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ba:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
			imu.longitude = mtdata->data.f4x2[1];
 80016be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <imu_callback+0x2d0>)
 80016c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
//			printf("get LatLon\n");
		}
	break;
 80016cc:	e037      	b.n	800173e <imu_callback+0x2be>

	case XSENS_EVT_ALTITUDE_ELLIPSOID:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT) {
 80016ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	d135      	bne.n	8001742 <imu_callback+0x2c2>
			imu.altitudeEllip = mtdata->data.f4;
 80016d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <imu_callback+0x2d0>)
 80016dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
//			printf("get Alt\n");
		}
	break;
 80016e4:	e02d      	b.n	8001742 <imu_callback+0x2c2>

	case XSENS_EVT_VELOCITY_XYZ:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 80016e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d12b      	bne.n	8001746 <imu_callback+0x2c6>
			imu.velocityXYZ[0] = mtdata->data.f4x3[0];
 80016ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <imu_callback+0x2d0>)
 80016f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
			imu.velocityXYZ[1] = mtdata->data.f4x3[1];
 80016fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001700:	4a13      	ldr	r2, [pc, #76]	; (8001750 <imu_callback+0x2d0>)
 8001702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001706:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
			imu.velocityXYZ[2] = mtdata->data.f4x3[2];
 800170a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <imu_callback+0x2d0>)
 8001710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001714:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
//			printf("get Vel\n");
		}
	break;
 8001718:	e015      	b.n	8001746 <imu_callback+0x2c6>
	break;
 800171a:	bf00      	nop
 800171c:	e014      	b.n	8001748 <imu_callback+0x2c8>
	break;
 800171e:	bf00      	nop
 8001720:	e012      	b.n	8001748 <imu_callback+0x2c8>
	break;
 8001722:	bf00      	nop
 8001724:	e010      	b.n	8001748 <imu_callback+0x2c8>
	break;
 8001726:	bf00      	nop
 8001728:	e00e      	b.n	8001748 <imu_callback+0x2c8>
	break;
 800172a:	bf00      	nop
 800172c:	e00c      	b.n	8001748 <imu_callback+0x2c8>
	break;
 800172e:	bf00      	nop
 8001730:	e00a      	b.n	8001748 <imu_callback+0x2c8>
	break;
 8001732:	bf00      	nop
 8001734:	e008      	b.n	8001748 <imu_callback+0x2c8>
	break;
 8001736:	bf00      	nop
 8001738:	e006      	b.n	8001748 <imu_callback+0x2c8>
	break;
 800173a:	bf00      	nop
 800173c:	e004      	b.n	8001748 <imu_callback+0x2c8>
	break;
 800173e:	bf00      	nop
 8001740:	e002      	b.n	8001748 <imu_callback+0x2c8>
	break;
 8001742:	bf00      	nop
 8001744:	e000      	b.n	8001748 <imu_callback+0x2c8>
	break;
 8001746:	bf00      	nop

	}
}
 8001748:	bf00      	nop
 800174a:	376c      	adds	r7, #108	; 0x6c
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}
 8001750:	2000032c 	.word	0x2000032c

08001754 <handle_ack_gotoconfig>:

// Command ACK callback functions
void handle_ack_gotoconfig(xsens_packet_buffer_t *packet) {
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_CONFIG;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <handle_ack_gotoconfig+0x20>)
 800175e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001762:	2201      	movs	r2, #1
 8001764:	771a      	strb	r2, [r3, #28]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000032c 	.word	0x2000032c

08001778 <handle_ack_gotomeasurement>:

void handle_ack_gotomeasurement(xsens_packet_buffer_t *packet) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_MEASUREMENT;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <handle_ack_gotomeasurement+0x20>)
 8001782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001786:	2202      	movs	r2, #2
 8001788:	771a      	strb	r2, [r3, #28]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000032c 	.word	0x2000032c

0800179c <handle_ack_outputconfiguration>:

void handle_ack_outputconfiguration(xsens_packet_buffer_t *packet) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_CONFIGURED;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <handle_ack_outputconfiguration+0x20>)
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	2203      	movs	r2, #3
 80017ac:	771a      	strb	r2, [r3, #28]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000032c 	.word	0x2000032c

080017c0 <myHandle_WAKEUP_cb>:

void myHandle_WAKEUP_cb(xsens_packet_buffer_t *packet) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_WAKEUP;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <myHandle_WAKEUP_cb+0x20>)
 80017ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ce:	2204      	movs	r2, #4
 80017d0:	771a      	strb	r2, [r3, #28]
	printf("get Wake up\n");
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <myHandle_WAKEUP_cb+0x24>)
 80017d4:	f009 fa04 	bl	800abe0 <puts>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000032c 	.word	0x2000032c
 80017e4:	0800e2ec 	.word	0x0800e2ec

080017e8 <imu_send_data>:

// The library calls this function to send packets to the IMU
void imu_send_data( uint8_t *data, uint16_t length ) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&IMU_uart, data, length);
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	461a      	mov	r2, r3
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <imu_send_data+0x20>)
 80017fc:	f007 fa3a 	bl	8008c74 <HAL_UART_Transmit_DMA>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20001ab8 	.word	0x20001ab8

0800180c <changeOutputRate>:
		rotPacket.payload[i + 3] = rotData.data.u4;
	}
	xsens_mti_send(&imu.imu_interface, &rotPacket);
}

void changeOutputRate(int output_rate){
 800180c:	b580      	push	{r7, lr}
 800180e:	b090      	sub	sp, #64	; 0x40
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	XsensFrequencyConfig_t settings[] = {
 8001814:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001818:	81bb      	strh	r3, [r7, #12]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	b29b      	uxth	r3, r3
 800181e:	81fb      	strh	r3, [r7, #14]
 8001820:	f242 0310 	movw	r3, #8208	; 0x2010
 8001824:	823b      	strh	r3, [r7, #16]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	b29b      	uxth	r3, r3
 800182a:	827b      	strh	r3, [r7, #18]
 800182c:	f248 0320 	movw	r3, #32800	; 0x8020
 8001830:	82bb      	strh	r3, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	b29b      	uxth	r3, r3
 8001836:	82fb      	strh	r3, [r7, #22]
 8001838:	f244 0330 	movw	r3, #16432	; 0x4030
 800183c:	833b      	strh	r3, [r7, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	b29b      	uxth	r3, r3
 8001842:	837b      	strh	r3, [r7, #26]
 8001844:	f244 0320 	movw	r3, #16416	; 0x4020
 8001848:	83bb      	strh	r3, [r7, #28]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	b29b      	uxth	r3, r3
 800184e:	83fb      	strh	r3, [r7, #30]
 8001850:	f248 0330 	movw	r3, #32816	; 0x8030
 8001854:	843b      	strh	r3, [r7, #32]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	b29b      	uxth	r3, r3
 800185a:	847b      	strh	r3, [r7, #34]	; 0x22
 800185c:	f244 0310 	movw	r3, #16400	; 0x4010
 8001860:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	b29b      	uxth	r3, r3
 8001866:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001868:	f247 0310 	movw	r3, #28688	; 0x7010
 800186c:	853b      	strh	r3, [r7, #40]	; 0x28
 800186e:	2304      	movs	r3, #4
 8001870:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001872:	f24e 0320 	movw	r3, #57376	; 0xe020
 8001876:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	b29b      	uxth	r3, r3
 800187c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800187e:	f245 0330 	movw	r3, #20528	; 0x5030
 8001882:	863b      	strh	r3, [r7, #48]	; 0x30
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	b29b      	uxth	r3, r3
 8001888:	867b      	strh	r3, [r7, #50]	; 0x32
 800188a:	f245 0340 	movw	r3, #20544	; 0x5040
 800188e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001890:	2304      	movs	r3, #4
 8001892:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001894:	f245 0320 	movw	r3, #20512	; 0x5020
 8001898:	873b      	strh	r3, [r7, #56]	; 0x38
 800189a:	2304      	movs	r3, #4
 800189c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800189e:	f24d 0310 	movw	r3, #53264	; 0xd010
 80018a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
		{ .id = XDI_ALTITUDE_ELLIPSOID, 	.frequency = 4 },
		{ .id =	XDI_VELOCITY_XYZ, 			.frequency = output_rate },
//		  { .id = XSENS_IDENTIFIER_FORMAT(XDI_QUATERNION, XSENS_FLOAT_FIXED1220, XSENS_COORD_ENU), .frequency = 100 },
	};

	xsens_mti_set_configuration(&imu.imu_interface, settings, XSENS_ARR_ELEM(settings));
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	220d      	movs	r2, #13
 80018b0:	4619      	mov	r1, r3
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <changeOutputRate+0xb4>)
 80018b4:	f001 f88b 	bl	80029ce <xsens_mti_set_configuration>

}
 80018b8:	bf00      	nop
 80018ba:	3740      	adds	r7, #64	; 0x40
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000b34 	.word	0x20000b34

080018c4 <f32_to_f16>:
 *      Author: liu willy
 */

#include "IMU_rel/float16Tool.h"

void f32_to_f16(f32_t *fIn, f16_t *u){
 80018c4:	b480      	push	{r7}
 80018c6:	b08b      	sub	sp, #44	; 0x2c
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    f32_t f32inf = { 255UL << 23 };
 80018ce:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80018d2:	617b      	str	r3, [r7, #20]
    f32_t f16inf = { 31UL << 23 };
 80018d4:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 80018d8:	613b      	str	r3, [r7, #16]
    f32_t magic = { 15UL << 23 };
 80018da:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 80018de:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000U;
 80018e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018e4:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = ~0xFFFU;
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <f32_to_f16+0xb0>)
 80018e8:	61fb      	str	r3, [r7, #28]

    f32_t in;
    in.f = fIn->f;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u32 & sign_mask;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	6a3a      	ldr	r2, [r7, #32]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
    in.u32 ^= sign;
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4053      	eors	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (in.u32 >= f32inf.u32)
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	d30a      	bcc.n	8001922 <f32_to_f16+0x5e>
    {
        out = (in.u32 > f32inf.u32) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	d902      	bls.n	800191a <f32_to_f16+0x56>
 8001914:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001918:	e001      	b.n	800191e <f32_to_f16+0x5a>
 800191a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800191e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001920:	e018      	b.n	8001954 <f32_to_f16+0x90>
    }
    else
    {
        in.u32 &= round_mask;
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4013      	ands	r3, r2
 8001928:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 800192a:	ed97 7a02 	vldr	s14, [r7, #8]
 800192e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u32 -= round_mask;
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	60bb      	str	r3, [r7, #8]
        if (in.u32 > f16inf.u32)
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	429a      	cmp	r2, r3
 8001948:	d901      	bls.n	800194e <f32_to_f16+0x8a>
        {
            in.u32 = f16inf.u32;
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u32 >> 13);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0b5b      	lsrs	r3, r3, #13
 8001952:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    out |= (uint16_t)(sign >> 16);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	b29a      	uxth	r2, r3
 800195a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800195c:	4313      	orrs	r3, r2
 800195e:	84fb      	strh	r3, [r7, #38]	; 0x26
    u->u16 = out;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001964:	801a      	strh	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	372c      	adds	r7, #44	; 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	fffff000 	.word	0xfffff000

08001978 <makeNum>:
 *      Author: liu willy
 */

#include "IMU_rel/gnssPvtDataParser.h"

uint32_t makeNum(const uint8_t pvtDataStr[], uint8_t num, uint8_t offset){
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
 8001984:	4613      	mov	r3, r2
 8001986:	70bb      	strb	r3, [r7, #2]
    uint32_t result=0;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < num; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	e00c      	b.n	80019ac <makeNum+0x34>
    {
        result = (result<<8) | pvtDataStr[i+offset];
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	78b9      	ldrb	r1, [r7, #2]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	440a      	add	r2, r1
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	440a      	add	r2, r1
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < num; i++)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3ee      	bcc.n	8001992 <makeNum+0x1a>
    }
    return result;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <gnssPvt_parse>:

GnssPvtData_t gnssPvt_parse(const uint8_t pvtDataStr[]){
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b09a      	sub	sp, #104	; 0x68
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
    GnssPvtData_t pvtDataOut={0};
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	2260      	movs	r2, #96	; 0x60
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f009 f9e3 	bl	800ada0 <memset>
    pvtDataOut.itow         = (makeNum(pvtDataStr, 4, 0));
 80019da:	2200      	movs	r2, #0
 80019dc:	2104      	movs	r1, #4
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	f7ff ffca 	bl	8001978 <makeNum>
 80019e4:	4603      	mov	r3, r0
 80019e6:	60bb      	str	r3, [r7, #8]
    pvtDataOut.year         = (makeNum(pvtDataStr, 2, 4));
 80019e8:	2204      	movs	r2, #4
 80019ea:	2102      	movs	r1, #2
 80019ec:	6838      	ldr	r0, [r7, #0]
 80019ee:	f7ff ffc3 	bl	8001978 <makeNum>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	81bb      	strh	r3, [r7, #12]
    pvtDataOut.month        = (makeNum(pvtDataStr, 1, 6));
 80019f8:	2206      	movs	r2, #6
 80019fa:	2101      	movs	r1, #1
 80019fc:	6838      	ldr	r0, [r7, #0]
 80019fe:	f7ff ffbb 	bl	8001978 <makeNum>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	73bb      	strb	r3, [r7, #14]
    pvtDataOut.day          = (makeNum(pvtDataStr, 1, 7));
 8001a08:	2207      	movs	r2, #7
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	6838      	ldr	r0, [r7, #0]
 8001a0e:	f7ff ffb3 	bl	8001978 <makeNum>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	73fb      	strb	r3, [r7, #15]
    pvtDataOut.hour         = (makeNum(pvtDataStr, 1, 8));
 8001a18:	2208      	movs	r2, #8
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	6838      	ldr	r0, [r7, #0]
 8001a1e:	f7ff ffab 	bl	8001978 <makeNum>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	743b      	strb	r3, [r7, #16]
    pvtDataOut.minute       = (makeNum(pvtDataStr, 1, 9));
 8001a28:	2209      	movs	r2, #9
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	6838      	ldr	r0, [r7, #0]
 8001a2e:	f7ff ffa3 	bl	8001978 <makeNum>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	747b      	strb	r3, [r7, #17]
    pvtDataOut.second       = (makeNum(pvtDataStr, 1, 10));
 8001a38:	220a      	movs	r2, #10
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f7ff ff9b 	bl	8001978 <makeNum>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	74bb      	strb	r3, [r7, #18]
    pvtDataOut.valid        = (makeNum(pvtDataStr, 1, 11));
 8001a48:	220b      	movs	r2, #11
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	f7ff ff93 	bl	8001978 <makeNum>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	74fb      	strb	r3, [r7, #19]
    pvtDataOut.tAcc         = (makeNum(pvtDataStr, 4, 12));
 8001a58:	220c      	movs	r2, #12
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f7ff ff8b 	bl	8001978 <makeNum>
 8001a62:	4603      	mov	r3, r0
 8001a64:	617b      	str	r3, [r7, #20]
    pvtDataOut.nano         = (makeNum(pvtDataStr, 4, 16));
 8001a66:	2210      	movs	r2, #16
 8001a68:	2104      	movs	r1, #4
 8001a6a:	6838      	ldr	r0, [r7, #0]
 8001a6c:	f7ff ff84 	bl	8001978 <makeNum>
 8001a70:	4603      	mov	r3, r0
 8001a72:	61bb      	str	r3, [r7, #24]
    pvtDataOut.fixtype      = (makeNum(pvtDataStr, 1, 20));
 8001a74:	2214      	movs	r2, #20
 8001a76:	2101      	movs	r1, #1
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f7ff ff7d 	bl	8001978 <makeNum>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	773b      	strb	r3, [r7, #28]
    pvtDataOut.flags        = (makeNum(pvtDataStr, 1, 21));
 8001a84:	2215      	movs	r2, #21
 8001a86:	2101      	movs	r1, #1
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f7ff ff75 	bl	8001978 <makeNum>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	777b      	strb	r3, [r7, #29]
    pvtDataOut.numSV        = (makeNum(pvtDataStr, 1, 22));
 8001a94:	2216      	movs	r2, #22
 8001a96:	2101      	movs	r1, #1
 8001a98:	6838      	ldr	r0, [r7, #0]
 8001a9a:	f7ff ff6d 	bl	8001978 <makeNum>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	77bb      	strb	r3, [r7, #30]
    pvtDataOut.Reserved1    = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	77fb      	strb	r3, [r7, #31]
    pvtDataOut.longitude    = (makeNum(pvtDataStr, 4, 24));
 8001aa8:	2218      	movs	r2, #24
 8001aaa:	2104      	movs	r1, #4
 8001aac:	6838      	ldr	r0, [r7, #0]
 8001aae:	f7ff ff63 	bl	8001978 <makeNum>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	623b      	str	r3, [r7, #32]
    pvtDataOut.latitude     = (makeNum(pvtDataStr, 4, 28));
 8001ab6:	221c      	movs	r2, #28
 8001ab8:	2104      	movs	r1, #4
 8001aba:	6838      	ldr	r0, [r7, #0]
 8001abc:	f7ff ff5c 	bl	8001978 <makeNum>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    pvtDataOut.height       = (makeNum(pvtDataStr, 4, 32));
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	6838      	ldr	r0, [r7, #0]
 8001aca:	f7ff ff55 	bl	8001978 <makeNum>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    pvtDataOut.hMSL         = (makeNum(pvtDataStr, 4, 36));
 8001ad2:	2224      	movs	r2, #36	; 0x24
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	6838      	ldr	r0, [r7, #0]
 8001ad8:	f7ff ff4e 	bl	8001978 <makeNum>
 8001adc:	4603      	mov	r3, r0
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    pvtDataOut.hAcc         = (makeNum(pvtDataStr, 4, 40));
 8001ae0:	2228      	movs	r2, #40	; 0x28
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f7ff ff47 	bl	8001978 <makeNum>
 8001aea:	4603      	mov	r3, r0
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
    pvtDataOut.vAcc         = (makeNum(pvtDataStr, 4, 44));
 8001aee:	222c      	movs	r2, #44	; 0x2c
 8001af0:	2104      	movs	r1, #4
 8001af2:	6838      	ldr	r0, [r7, #0]
 8001af4:	f7ff ff40 	bl	8001978 <makeNum>
 8001af8:	4603      	mov	r3, r0
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
    pvtDataOut.velN         = (makeNum(pvtDataStr, 4, 48));
 8001afc:	2230      	movs	r2, #48	; 0x30
 8001afe:	2104      	movs	r1, #4
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f7ff ff39 	bl	8001978 <makeNum>
 8001b06:	4603      	mov	r3, r0
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
    pvtDataOut.velE         = (makeNum(pvtDataStr, 4, 52));
 8001b0a:	2234      	movs	r2, #52	; 0x34
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	6838      	ldr	r0, [r7, #0]
 8001b10:	f7ff ff32 	bl	8001978 <makeNum>
 8001b14:	4603      	mov	r3, r0
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    pvtDataOut.velD         = (makeNum(pvtDataStr, 4, 56));
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7ff ff2b 	bl	8001978 <makeNum>
 8001b22:	4603      	mov	r3, r0
 8001b24:	643b      	str	r3, [r7, #64]	; 0x40
    pvtDataOut.gSpeed       = (makeNum(pvtDataStr, 4, 60));
 8001b26:	223c      	movs	r2, #60	; 0x3c
 8001b28:	2104      	movs	r1, #4
 8001b2a:	6838      	ldr	r0, [r7, #0]
 8001b2c:	f7ff ff24 	bl	8001978 <makeNum>
 8001b30:	4603      	mov	r3, r0
 8001b32:	647b      	str	r3, [r7, #68]	; 0x44
    pvtDataOut.headMot      = (makeNum(pvtDataStr, 4, 64));
 8001b34:	2240      	movs	r2, #64	; 0x40
 8001b36:	2104      	movs	r1, #4
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f7ff ff1d 	bl	8001978 <makeNum>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
    pvtDataOut.sAcc         = (makeNum(pvtDataStr, 4, 68));
 8001b42:	2244      	movs	r2, #68	; 0x44
 8001b44:	2104      	movs	r1, #4
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ff16 	bl	8001978 <makeNum>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    pvtDataOut.headAcc      = (makeNum(pvtDataStr, 4, 72));
 8001b50:	2248      	movs	r2, #72	; 0x48
 8001b52:	2104      	movs	r1, #4
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f7ff ff0f 	bl	8001978 <makeNum>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	653b      	str	r3, [r7, #80]	; 0x50
    pvtDataOut.headVeh      = (makeNum(pvtDataStr, 4, 76));
 8001b5e:	224c      	movs	r2, #76	; 0x4c
 8001b60:	2104      	movs	r1, #4
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f7ff ff08 	bl	8001978 <makeNum>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	657b      	str	r3, [r7, #84]	; 0x54
    pvtDataOut.gdop         = (makeNum(pvtDataStr, 2, 80));
 8001b6c:	2250      	movs	r2, #80	; 0x50
 8001b6e:	2102      	movs	r1, #2
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f7ff ff01 	bl	8001978 <makeNum>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    pvtDataOut.pdop         = (makeNum(pvtDataStr, 2, 82));
 8001b7e:	2252      	movs	r2, #82	; 0x52
 8001b80:	2102      	movs	r1, #2
 8001b82:	6838      	ldr	r0, [r7, #0]
 8001b84:	f7ff fef8 	bl	8001978 <makeNum>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    pvtDataOut.tdop         = (makeNum(pvtDataStr, 2, 84));
 8001b90:	2254      	movs	r2, #84	; 0x54
 8001b92:	2102      	movs	r1, #2
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7ff feef 	bl	8001978 <makeNum>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    pvtDataOut.vdop         = (makeNum(pvtDataStr, 2, 86));
 8001ba2:	2256      	movs	r2, #86	; 0x56
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	6838      	ldr	r0, [r7, #0]
 8001ba8:	f7ff fee6 	bl	8001978 <makeNum>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pvtDataOut.hdop         = (makeNum(pvtDataStr, 2, 88));
 8001bb4:	2258      	movs	r2, #88	; 0x58
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	6838      	ldr	r0, [r7, #0]
 8001bba:	f7ff fedd 	bl	8001978 <makeNum>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    pvtDataOut.ndop         = (makeNum(pvtDataStr, 2, 90));
 8001bc6:	225a      	movs	r2, #90	; 0x5a
 8001bc8:	2102      	movs	r1, #2
 8001bca:	6838      	ldr	r0, [r7, #0]
 8001bcc:	f7ff fed4 	bl	8001978 <makeNum>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    pvtDataOut.edop         = (makeNum(pvtDataStr, 2, 92));
 8001bd8:	225c      	movs	r2, #92	; 0x5c
 8001bda:	2102      	movs	r1, #2
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f7ff fecb 	bl	8001978 <makeNum>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    return pvtDataOut;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	2260      	movs	r2, #96	; 0x60
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f009 f951 	bl	800ae9c <memcpy>
}
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	3768      	adds	r7, #104	; 0x68
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <xsens_mdata2_process>:
// MData2 packets have a series of smaller structures of data
// This handler walks through the buffer, identifies the XDA type from two bytes
// Then applies relevant conversions back into native types/structures as necessary
// Packets don't have a fixed number of child elements
void xsens_mdata2_process( xsens_packet_buffer_t *packet, callback_event_t evt_cb )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0c4      	sub	sp, #272	; 0x110
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c12:	6018      	str	r0, [r3, #0]
 8001c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c1c:	6019      	str	r1, [r3, #0]
    mdata2_parser_state_t md2_state      = XDI_PARSE_ID_B1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    mdata2_packet_t       output         = { 0 };
 8001c24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001c32:	461a      	mov	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	f009 f8b3 	bl	800ada0 <memset>
    uint8_t               bytes_consumed = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

    // Walk through the packet and run a tiny statemachine
    // to parse the sub-fields
    for( uint16_t i = 0; i < packet->length; i++ )
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001c46:	e09e      	b.n	8001d86 <xsens_mdata2_process+0x182>
    {
        switch( md2_state )
 8001c48:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	f200 8085 	bhi.w	8001d5c <xsens_mdata2_process+0x158>
 8001c52:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <xsens_mdata2_process+0x54>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c93 	.word	0x08001c93
 8001c60:	08001cc7 	.word	0x08001cc7
 8001c64:	08001ceb 	.word	0x08001ceb
        {
            case XDI_PARSE_ID_B1:
                // High byte
                output.id = ( uint16_t )( (uint16_t)packet->payload[i] << 8u );
 8001c68:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001c6c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c70:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c88:	801a      	strh	r2, [r3, #0]
                md2_state = XDI_PARSE_ID_B2;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001c90:	e074      	b.n	8001d7c <xsens_mdata2_process+0x178>

            case XDI_PARSE_ID_B2:
                // Low byte
                output.id |= ( uint16_t )( (uint16_t)packet->payload[i] );
 8001c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001ca0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001ca4:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001ca8:	6809      	ldr	r1, [r1, #0]
 8001caa:	440b      	add	r3, r1
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cbc:	801a      	strh	r2, [r3, #0]
                md2_state = XDI_PARSE_LENGTH;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001cc4:	e05a      	b.n	8001d7c <xsens_mdata2_process+0x178>

            case XDI_PARSE_LENGTH:
                // Length is one byte
                output.length = packet->payload[i];
 8001cc6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001cca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001cce:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	791a      	ldrb	r2, [r3, #4]
 8001cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ce0:	709a      	strb	r2, [r3, #2]
                md2_state     = XDI_PARSE_DATA;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001ce8:	e048      	b.n	8001d7c <xsens_mdata2_process+0x178>

            case XDI_PARSE_DATA:
                // Copy data across
                output.payload[bytes_consumed] = packet->payload[i];
 8001cea:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001cee:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001cf2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001cf6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	440a      	add	r2, r1
 8001cfe:	7911      	ldrb	r1, [r2, #4]
 8001d00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d04:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001d08:	4413      	add	r3, r2
 8001d0a:	460a      	mov	r2, r1
 8001d0c:	70da      	strb	r2, [r3, #3]
                bytes_consumed++;
 8001d0e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001d12:	3301      	adds	r3, #1
 8001d14:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

                // Once the field's data been copied to our sub-buffer,
                // handle it
                if( bytes_consumed >= output.length )
 8001d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d20:	789b      	ldrb	r3, [r3, #2]
 8001d22:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d327      	bcc.n	8001d7a <xsens_mdata2_process+0x176>
                {
                    // Using the isolated field, search for matching XID
                    // and then convert payloads to LE & structured data
                    xsens_mdata2_decode_field( &output, evt_cb );
 8001d2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d32:	f107 0208 	add.w	r2, r7, #8
 8001d36:	6819      	ldr	r1, [r3, #0]
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f000 f835 	bl	8001da8 <xsens_mdata2_decode_field>

                    // Cleanup our state before parsing remaining fields
                    md2_state      = XDI_PARSE_ID_B1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                    bytes_consumed = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
                    memset( &output, 0, sizeof( mdata2_packet_t ) );
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f009 f823 	bl	800ada0 <memset>
                }
                break;
 8001d5a:	e00e      	b.n	8001d7a <xsens_mdata2_process+0x176>

            default:
                // Case switch should be an exhaustive match?
                // Reset state?
                md2_state      = XDI_PARSE_ID_B1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                bytes_consumed = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
                memset( &output, 0, sizeof( mdata2_packet_t ) );
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f009 f814 	bl	800ada0 <memset>
                break;
 8001d78:	e000      	b.n	8001d7c <xsens_mdata2_process+0x178>
                break;
 8001d7a:	bf00      	nop
    for( uint16_t i = 0; i < packet->length; i++ )
 8001d7c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001d80:	3301      	adds	r3, #1
 8001d82:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	885b      	ldrh	r3, [r3, #2]
 8001d92:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001d96:	429a      	cmp	r2, r3
 8001d98:	f4ff af56 	bcc.w	8001c48 <xsens_mdata2_process+0x44>
        }
    }

    // Finished MData2 parsing in payload
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <xsens_mdata2_decode_field>:
};

// With the 'isolated' field from the rest of the payload,
// convert to LE and pass to user cb in a union
void xsens_mdata2_decode_field( mdata2_packet_t *output, callback_event_t evt_cb )
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0b2      	sub	sp, #200	; 0xc8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
    XsensEventData_t             value       = { 0 };
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	22b0      	movs	r2, #176	; 0xb0
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f008 fff0 	bl	800ada0 <memset>
    const mdata2_decode_rules_t *decode_rule = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    enum XSENS_FLOAT_TYPE number_precision = XSENS_IDENTIFIER_FORMAT_GET_PRECISION( output->id );
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
    enum XSENS_COORDINATE_SYSTEM coordinate_system = XSENS_IDENTIFIER_FORMAT_GET_COORD_SYSTEM( output->id );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
    uint16_t id_simplifed = XSENS_IDENTIFIER_FORMAT_SIMPLIFY( output->id );
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	f023 030f 	bic.w	r3, r3, #15
 8001dea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    
    // Find the matching XID in the table
    uint8_t table_length = sizeof( xid_decode_table ) / sizeof( mdata2_decode_rules_t );
 8001dee:	231d      	movs	r3, #29
 8001df0:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
    for( uint8_t i = 0; i < table_length; i++ )
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001dfa:	e015      	b.n	8001e28 <xsens_mdata2_decode_field+0x80>
    {
        if( xid_decode_table[i].xid == id_simplifed )
 8001dfc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001e00:	4ad6      	ldr	r2, [pc, #856]	; (800215c <xsens_mdata2_decode_field+0x3b4>)
 8001e02:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d107      	bne.n	8001e1e <xsens_mdata2_decode_field+0x76>
        {
            decode_rule = &xid_decode_table[i];
 8001e0e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4ad1      	ldr	r2, [pc, #836]	; (800215c <xsens_mdata2_decode_field+0x3b4>)
 8001e16:	4413      	add	r3, r2
 8001e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            break;
 8001e1c:	e00a      	b.n	8001e34 <xsens_mdata2_decode_field+0x8c>
    for( uint8_t i = 0; i < table_length; i++ )
 8001e1e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001e28:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8001e2c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3e3      	bcc.n	8001dfc <xsens_mdata2_decode_field+0x54>
        }
    }

    // Apply post-processing (BE->LE) strategy specific to the packet type
    if( decode_rule )
 8001e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 82fd 	beq.w	8002438 <xsens_mdata2_decode_field+0x690>
    {


    	if(decode_rule->xid == XDI_GNSS_PVT_DATA){
 8001e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	f247 0210 	movw	r2, #28688	; 0x7010
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d11b      	bne.n	8001e84 <xsens_mdata2_decode_field+0xdc>
    		value.type = decode_rule->type;
 8001e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e50:	78db      	ldrb	r3, [r3, #3]
 8001e52:	723b      	strb	r3, [r7, #8]
				value.coord_ref = coordinate_system;
 8001e54:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001e58:	727b      	strb	r3, [r7, #9]
    		memcpy(value.gnssPvtData, output->payload, 94);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	1cd9      	adds	r1, r3, #3
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	3302      	adds	r3, #2
 8001e64:	225e      	movs	r2, #94	; 0x5e
 8001e66:	4618      	mov	r0, r3
 8001e68:	f009 f818 	bl	800ae9c <memcpy>

				// Call the user-callback with the transformed data
				if( evt_cb )
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <xsens_mdata2_decode_field+0xdc>
				{
						evt_cb( decode_rule->event, &value );
 8001e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e76:	789a      	ldrb	r2, [r3, #2]
 8001e78:	f107 0108 	add.w	r1, r7, #8
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4798      	blx	r3
 8001e82:	e2d9      	b.n	8002438 <xsens_mdata2_decode_field+0x690>
						return;
				}
    	}

        // The structure describes the typical type
        value.type = decode_rule->type;
 8001e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e88:	78db      	ldrb	r3, [r3, #3]
 8001e8a:	723b      	strb	r3, [r7, #8]

        //  For situations where non-single precision is used, apply an offset to the enum
        //  to correctly describe the type as fixed-precision or double, etc
        if( number_precision )
 8001e8c:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01c      	beq.n	8001ece <xsens_mdata2_decode_field+0x126>
        {
            if( decode_rule->type < XSENS_EVT_TYPE_FLOAT )
 8001e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e98:	78db      	ldrb	r3, [r3, #3]
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	d80a      	bhi.n	8001eb4 <xsens_mdata2_decode_field+0x10c>
            {
                // Enum offset doesn't apply cleanly for non-float default values
                // So we 'zero' out the table's value, and use the precision offset to get
                // the single-value type field of that type
                value.type = XSENS_EVT_TYPE_FLOAT + ( number_precision * 10 );
 8001e9e:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	723b      	strb	r3, [r7, #8]
 8001eb2:	e00c      	b.n	8001ece <xsens_mdata2_decode_field+0x126>
            }
            else
            {
                value.type = decode_rule->type + ( number_precision * 10 );
 8001eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb8:	78da      	ldrb	r2, [r3, #3]
 8001eba:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	0089      	lsls	r1, r1, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	723b      	strb	r3, [r7, #8]
            }
        }

        // Provide the local tangent plane coordinate scheme in the callback
        value.coord_ref = coordinate_system;
 8001ece:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001ed2:	727b      	strb	r3, [r7, #9]

        // Convert BE data to LE, put it in the right union field
        switch( value.type )
 8001ed4:	7a3b      	ldrb	r3, [r7, #8]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	2b2b      	cmp	r3, #43	; 0x2b
 8001eda:	f200 829f 	bhi.w	800241c <xsens_mdata2_decode_field+0x674>
 8001ede:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <xsens_mdata2_decode_field+0x13c>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001f95 	.word	0x08001f95
 8001ee8:	08001f9f 	.word	0x08001f9f
 8001eec:	08001fb1 	.word	0x08001fb1
 8001ef0:	0800241d 	.word	0x0800241d
 8001ef4:	0800241d 	.word	0x0800241d
 8001ef8:	0800241d 	.word	0x0800241d
 8001efc:	0800241d 	.word	0x0800241d
 8001f00:	0800241d 	.word	0x0800241d
 8001f04:	0800241d 	.word	0x0800241d
 8001f08:	08001fc1 	.word	0x08001fc1
 8001f0c:	08001fd5 	.word	0x08001fd5
 8001f10:	08001ffb 	.word	0x08001ffb
 8001f14:	08002033 	.word	0x08002033
 8001f18:	0800207d 	.word	0x0800207d
 8001f1c:	0800241d 	.word	0x0800241d
 8001f20:	0800241d 	.word	0x0800241d
 8001f24:	0800241d 	.word	0x0800241d
 8001f28:	0800241d 	.word	0x0800241d
 8001f2c:	0800241d 	.word	0x0800241d
 8001f30:	08001fc1 	.word	0x08001fc1
 8001f34:	08001fd5 	.word	0x08001fd5
 8001f38:	08001ffb 	.word	0x08001ffb
 8001f3c:	08002033 	.word	0x08002033
 8001f40:	0800207d 	.word	0x0800207d
 8001f44:	0800241d 	.word	0x0800241d
 8001f48:	0800241d 	.word	0x0800241d
 8001f4c:	0800241d 	.word	0x0800241d
 8001f50:	0800241d 	.word	0x0800241d
 8001f54:	0800241d 	.word	0x0800241d
 8001f58:	08002121 	.word	0x08002121
 8001f5c:	08002135 	.word	0x08002135
 8001f60:	08002161 	.word	0x08002161
 8001f64:	0800219d 	.word	0x0800219d
 8001f68:	080021ed 	.word	0x080021ed
 8001f6c:	0800241d 	.word	0x0800241d
 8001f70:	0800241d 	.word	0x0800241d
 8001f74:	0800241d 	.word	0x0800241d
 8001f78:	0800241d 	.word	0x0800241d
 8001f7c:	0800241d 	.word	0x0800241d
 8001f80:	080022a1 	.word	0x080022a1
 8001f84:	080022b5 	.word	0x080022b5
 8001f88:	080022dd 	.word	0x080022dd
 8001f8c:	08002319 	.word	0x08002319
 8001f90:	08002369 	.word	0x08002369
        {
            case XSENS_EVT_TYPE_U8:
                value.data.u1 = output->payload[0];
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	78db      	ldrb	r3, [r3, #3]
 8001f98:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                break;
 8001f9c:	e241      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_U16:
                value.data.u2 = xsens_coalesce_16BE_16LE( &output->payload[0] );
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fe84 	bl	8002cb0 <xsens_coalesce_16BE_16LE>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                break;
 8001fae:	e238      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_U32:
                value.data.u4 = xsens_coalesce_32BE_32LE( &output->payload[0] );
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fe90 	bl	8002cda <xsens_coalesce_32BE_32LE>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8001fbe:	e230      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT:
            case XSENS_EVT_TYPE_1220FP:
                value.data.f4 = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3303      	adds	r3, #3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fea4 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
 8001fce:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                break;
 8001fd2:	e226      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT2:
            case XSENS_EVT_TYPE_1220FP2:
                value.data.f4x2[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3303      	adds	r3, #3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fe9a 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8001fde:	eef0 7a40 	vmov.f32	s15, s0
 8001fe2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x2[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3307      	adds	r3, #7
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fe91 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8001ff0:	eef0 7a40 	vmov.f32	s15, s0
 8001ff4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                break;
 8001ff8:	e213      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT3:
            case XSENS_EVT_TYPE_1220FP3:
                value.data.f4x3[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fe87 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
 8002008:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x3[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3307      	adds	r3, #7
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fe7e 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002016:	eef0 7a40 	vmov.f32	s15, s0
 800201a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x3[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	330b      	adds	r3, #11
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fe75 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                break;
 8002030:	e1f7      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT4:
            case XSENS_EVT_TYPE_1220FP4:
                value.data.f4x4[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3303      	adds	r3, #3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fe6b 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 800203c:	eef0 7a40 	vmov.f32	s15, s0
 8002040:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x4[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3307      	adds	r3, #7
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fe62 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 800204e:	eef0 7a40 	vmov.f32	s15, s0
 8002052:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x4[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	330b      	adds	r3, #11
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fe59 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002060:	eef0 7a40 	vmov.f32	s15, s0
 8002064:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                value.data.f4x4[3] = xsens_coalesce_32BE_F32LE( &output->payload[12] );
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	330f      	adds	r3, #15
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fe50 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002072:	eef0 7a40 	vmov.f32	s15, s0
 8002076:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                break;
 800207a:	e1d2      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT9:
            case XSENS_EVT_TYPE_1220FP9:
                value.data.f4x9[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3303      	adds	r3, #3
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fe46 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002086:	eef0 7a40 	vmov.f32	s15, s0
 800208a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x9[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3307      	adds	r3, #7
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fe3d 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002098:	eef0 7a40 	vmov.f32	s15, s0
 800209c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x9[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	330b      	adds	r3, #11
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fe34 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 80020aa:	eef0 7a40 	vmov.f32	s15, s0
 80020ae:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                value.data.f4x9[3] = xsens_coalesce_32BE_F32LE( &output->payload[12] );
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	330f      	adds	r3, #15
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fe2b 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 80020bc:	eef0 7a40 	vmov.f32	s15, s0
 80020c0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                value.data.f4x9[4] = xsens_coalesce_32BE_F32LE( &output->payload[16] );
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3313      	adds	r3, #19
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fe22 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 80020ce:	eef0 7a40 	vmov.f32	s15, s0
 80020d2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
                value.data.f4x9[5] = xsens_coalesce_32BE_F32LE( &output->payload[20] );
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3317      	adds	r3, #23
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fe19 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 80020e0:	eef0 7a40 	vmov.f32	s15, s0
 80020e4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
                value.data.f4x9[6] = xsens_coalesce_32BE_F32LE( &output->payload[24] );
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	331b      	adds	r3, #27
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fe10 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 80020f2:	eef0 7a40 	vmov.f32	s15, s0
 80020f6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
                value.data.f4x9[7] = xsens_coalesce_32BE_F32LE( &output->payload[28] );
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	331f      	adds	r3, #31
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fe07 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002104:	eef0 7a40 	vmov.f32	s15, s0
 8002108:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                value.data.f4x9[8] = xsens_coalesce_32BE_F32LE( &output->payload[32] );
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3323      	adds	r3, #35	; 0x23
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fdfe 	bl	8002d12 <xsens_coalesce_32BE_F32LE>
 8002116:	eef0 7a40 	vmov.f32	s15, s0
 800211a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
                break;
 800211e:	e180      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP:
                xsens_coalesce_48BE_48LE( &value.data.fp1632, &output->payload[0] );
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	1cda      	adds	r2, r3, #3
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	3368      	adds	r3, #104	; 0x68
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fe14 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                break;
 8002132:	e176      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP2:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x2[0], &output->payload[0] );
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	1cda      	adds	r2, r3, #3
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	3368      	adds	r3, #104	; 0x68
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fe0a 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x2[1], &output->payload[6] );
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f103 0209 	add.w	r2, r3, #9
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	3370      	adds	r3, #112	; 0x70
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fe00 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                break;
 800215a:	e162      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>
 800215c:	0800e3e8 	.word	0x0800e3e8

            case XSENS_EVT_TYPE_1632FP3:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[0], &output->payload[0] );
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1cda      	adds	r2, r3, #3
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	3368      	adds	r3, #104	; 0x68
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fdf4 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[1], &output->payload[6] );
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f103 0209 	add.w	r2, r3, #9
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	3370      	adds	r3, #112	; 0x70
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fdea 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[2], &output->payload[12] );
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f103 020f 	add.w	r2, r3, #15
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	3378      	adds	r3, #120	; 0x78
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fde0 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                break;
 800219a:	e142      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP4:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[0], &output->payload[0] );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1cda      	adds	r2, r3, #3
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	3368      	adds	r3, #104	; 0x68
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fdd6 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[1], &output->payload[6] );
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 0209 	add.w	r2, r3, #9
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	3370      	adds	r3, #112	; 0x70
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fdcc 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[2], &output->payload[12] );
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 020f 	add.w	r2, r3, #15
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	3378      	adds	r3, #120	; 0x78
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fdc2 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[3], &output->payload[18] );
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 0215 	add.w	r2, r3, #21
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	3380      	adds	r3, #128	; 0x80
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fdb8 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                break;
 80021ea:	e11a      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP9:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[0], &output->payload[0] );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1cda      	adds	r2, r3, #3
 80021f0:	f107 0308 	add.w	r3, r7, #8
 80021f4:	3368      	adds	r3, #104	; 0x68
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fdae 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[1], &output->payload[6] );
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f103 0209 	add.w	r2, r3, #9
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	3370      	adds	r3, #112	; 0x70
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fda4 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[2], &output->payload[12] );
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f103 020f 	add.w	r2, r3, #15
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	3378      	adds	r3, #120	; 0x78
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fd9a 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[3], &output->payload[18] );
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 0215 	add.w	r2, r3, #21
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	3380      	adds	r3, #128	; 0x80
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fd90 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[4], &output->payload[24] );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 021b 	add.w	r2, r3, #27
 8002240:	f107 0308 	add.w	r3, r7, #8
 8002244:	3388      	adds	r3, #136	; 0x88
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fd86 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[5], &output->payload[30] );
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	3390      	adds	r3, #144	; 0x90
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fd7c 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[6], &output->payload[36] );
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f103 0227 	add.w	r2, r3, #39	; 0x27
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	3398      	adds	r3, #152	; 0x98
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fd72 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[7], &output->payload[42] );
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800227c:	f107 0308 	add.w	r3, r7, #8
 8002280:	33a0      	adds	r3, #160	; 0xa0
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fd68 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[8], &output->payload[48] );
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0233 	add.w	r2, r3, #51	; 0x33
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	33a8      	adds	r3, #168	; 0xa8
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fd5e 	bl	8002d5a <xsens_coalesce_48BE_48LE>
                break;
 800229e:	e0c0      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE:
                xsens_swap_endian_u64( &value.data.f8, &output->payload[0] );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1cda      	adds	r2, r3, #3
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	3368      	adds	r3, #104	; 0x68
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fccd 	bl	8002c4c <xsens_swap_endian_u64>
                break;
 80022b2:	e0b6      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE2:
                xsens_swap_endian_u64( &value.data.f8x2[0], &output->payload[0] );
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1cda      	adds	r2, r3, #3
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	3368      	adds	r3, #104	; 0x68
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fcc3 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x2[1], &output->payload[8] );
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 020b 	add.w	r2, r3, #11
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	3370      	adds	r3, #112	; 0x70
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fcb9 	bl	8002c4c <xsens_swap_endian_u64>
                break;
 80022da:	e0a2      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE3:
                xsens_swap_endian_u64( &value.data.f8x3[0], &output->payload[0] );
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1cda      	adds	r2, r3, #3
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	3368      	adds	r3, #104	; 0x68
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fcaf 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x3[1], &output->payload[8] );
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 020b 	add.w	r2, r3, #11
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	3370      	adds	r3, #112	; 0x70
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fca5 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x3[2], &output->payload[16] );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0213 	add.w	r2, r3, #19
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	3378      	adds	r3, #120	; 0x78
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fc9b 	bl	8002c4c <xsens_swap_endian_u64>
                break;
 8002316:	e084      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE4:
                xsens_swap_endian_u64( &value.data.f8x4[0], &output->payload[0] );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1cda      	adds	r2, r3, #3
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	3368      	adds	r3, #104	; 0x68
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fc91 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[1], &output->payload[8] );
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f103 020b 	add.w	r2, r3, #11
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	3370      	adds	r3, #112	; 0x70
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fc87 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[2], &output->payload[16] );
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f103 0213 	add.w	r2, r3, #19
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	3378      	adds	r3, #120	; 0x78
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fc7d 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[3], &output->payload[24] );
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 021b 	add.w	r2, r3, #27
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	3380      	adds	r3, #128	; 0x80
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fc73 	bl	8002c4c <xsens_swap_endian_u64>
                break;
 8002366:	e05c      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE9:
                xsens_swap_endian_u64( &value.data.f8x9[0], &output->payload[0] );
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1cda      	adds	r2, r3, #3
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	3368      	adds	r3, #104	; 0x68
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fc69 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[1], &output->payload[8] );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f103 020b 	add.w	r2, r3, #11
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	3370      	adds	r3, #112	; 0x70
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fc5f 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[2], &output->payload[16] );
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f103 0213 	add.w	r2, r3, #19
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	3378      	adds	r3, #120	; 0x78
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fc55 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[3], &output->payload[24] );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f103 021b 	add.w	r2, r3, #27
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	3380      	adds	r3, #128	; 0x80
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fc4b 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[4], &output->payload[32] );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	3388      	adds	r3, #136	; 0x88
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fc41 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[5], &output->payload[40] );
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	3390      	adds	r3, #144	; 0x90
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fc37 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[6], &output->payload[48] );
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f103 0233 	add.w	r2, r3, #51	; 0x33
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	3398      	adds	r3, #152	; 0x98
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fc2d 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[7], &output->payload[56] );
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	33a0      	adds	r3, #160	; 0xa0
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fc23 	bl	8002c4c <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[8], &output->payload[64] );
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f103 0243 	add.w	r2, r3, #67	; 0x43
 800240c:	f107 0308 	add.w	r3, r7, #8
 8002410:	33a8      	adds	r3, #168	; 0xa8
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fc19 	bl	8002c4c <xsens_swap_endian_u64>
                break;
 800241a:	e002      	b.n	8002422 <xsens_mdata2_decode_field+0x67a>

            default:
                // There's an error or not supported, return a 'null' type?
                value.type = XSENS_EVT_TYPE_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	723b      	strb	r3, [r7, #8]
                break;
 8002420:	bf00      	nop
        }

        // Call the user-callback with the transformed data
        if( evt_cb )
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <xsens_mdata2_decode_field+0x690>
        {
            evt_cb( decode_rule->event, &value );
 8002428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800242c:	789a      	ldrb	r2, [r3, #2]
 800242e:	f107 0108 	add.w	r1, r7, #8
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	4610      	mov	r0, r2
 8002436:	4798      	blx	r3
        }
    }
}
 8002438:	37c8      	adds	r7, #200	; 0xc8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop

08002440 <xsens_mti_parse>:
    }
}

// Run each byte through the packet-level statemachine
void xsens_mti_parse( xsens_interface_t *interface, uint8_t byte )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
    // CRC is the sum of bytes including the CRC byte (ex PREAMBLE)
    if( interface->state != PARSER_PREAMBLE )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <xsens_mti_parse+0x26>
    {
        interface->crc += ( byte & 0xFF );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 2808 	ldrb.w	r2, [r3, #2056]	; 0x808
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	4413      	add	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
    }

    switch( interface->state )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b07      	cmp	r3, #7
 800246c:	f200 8087 	bhi.w	800257e <xsens_mti_parse+0x13e>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <xsens_mti_parse+0x38>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	08002499 	.word	0x08002499
 800247c:	080024ad 	.word	0x080024ad
 8002480:	080024bb 	.word	0x080024bb
 8002484:	080024c9 	.word	0x080024c9
 8002488:	080024f9 	.word	0x080024f9
 800248c:	08002509 	.word	0x08002509
 8002490:	08002527 	.word	0x08002527
 8002494:	0800255d 	.word	0x0800255d
    {
        case PARSER_PREAMBLE:
            if( byte == PREAMBLE_BYTE )
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	2bfa      	cmp	r3, #250	; 0xfa
 800249c:	d16a      	bne.n	8002574 <xsens_mti_parse+0x134>
            {
                xsens_mti_reset_parser( interface );
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f872 	bl	8002588 <xsens_mti_reset_parser>
                interface->state = PARSER_ADDRESS;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80024aa:	e063      	b.n	8002574 <xsens_mti_parse+0x134>

        case PARSER_ADDRESS:
            if( byte == ADDRESS_BYTE )
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d162      	bne.n	8002578 <xsens_mti_parse+0x138>
            {
                interface->state = PARSER_MESSAGE_ID;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80024b8:	e05e      	b.n	8002578 <xsens_mti_parse+0x138>

        case PARSER_MESSAGE_ID:
            interface->packet.message_id = byte;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	709a      	strb	r2, [r3, #2]
            interface->state             = PARSER_LENGTH;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2203      	movs	r2, #3
 80024c4:	701a      	strb	r2, [r3, #0]
            break;
 80024c6:	e05a      	b.n	800257e <xsens_mti_parse+0x13e>

        case PARSER_LENGTH:
            if( byte == LENGTH_EXTENDED_MODE )
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d102      	bne.n	80024d4 <xsens_mti_parse+0x94>
            {
                interface->state = PARSER_LENGTH_EXTENDED_B1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2204      	movs	r2, #4
 80024d2:	701a      	strb	r2, [r3, #0]
            }
            if( byte == LENGTH_NONE )
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <xsens_mti_parse+0xa8>
            {
                interface->packet.length = 0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	809a      	strh	r2, [r3, #4]
                interface->state         = PARSER_CRC;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2207      	movs	r2, #7
 80024e4:	701a      	strb	r2, [r3, #0]
            else
            {
                interface->packet.length = byte;
                interface->state         = PARSER_PAYLOAD;
            }
            break;
 80024e6:	e04a      	b.n	800257e <xsens_mti_parse+0x13e>
                interface->packet.length = byte;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	809a      	strh	r2, [r3, #4]
                interface->state         = PARSER_PAYLOAD;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2206      	movs	r2, #6
 80024f4:	701a      	strb	r2, [r3, #0]
            break;
 80024f6:	e042      	b.n	800257e <xsens_mti_parse+0x13e>

        case PARSER_LENGTH_EXTENDED_B1:
            interface->packet.length = byte;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	809a      	strh	r2, [r3, #4]
            // TODO decode long length packets
            interface->state = PARSER_LENGTH_EXTENDED_B2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2205      	movs	r2, #5
 8002504:	701a      	strb	r2, [r3, #0]
            break;
 8002506:	e03a      	b.n	800257e <xsens_mti_parse+0x13e>

        case PARSER_LENGTH_EXTENDED_B2:
            // TODO decode long length packets
            interface->packet.length &= byte << 8;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	889b      	ldrh	r3, [r3, #4]
 800250c:	b21a      	sxth	r2, r3
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	b21b      	sxth	r3, r3
 8002514:	4013      	ands	r3, r2
 8002516:	b21b      	sxth	r3, r3
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	809a      	strh	r2, [r3, #4]
            interface->state = PARSER_PAYLOAD;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2206      	movs	r2, #6
 8002522:	701a      	strb	r2, [r3, #0]
            break;
 8002524:	e02b      	b.n	800257e <xsens_mti_parse+0x13e>

        case PARSER_PAYLOAD:
            interface->packet.payload[interface->payload_pos] = byte;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	719a      	strb	r2, [r3, #6]
            interface->payload_pos++;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 800253c:	3301      	adds	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806

            // Once we've buffered the whole payload,
            // prepare to read the CRC
            if( interface->payload_pos >= interface->packet.length )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	889b      	ldrh	r3, [r3, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d313      	bcc.n	800257c <xsens_mti_parse+0x13c>
            {
                interface->state = PARSER_CRC;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2207      	movs	r2, #7
 8002558:	701a      	strb	r2, [r3, #0]
            }
            break;
 800255a:	e00f      	b.n	800257c <xsens_mti_parse+0x13c>

        case PARSER_CRC:
            // Check if CRC is valid
            if( interface->crc == 0x00 )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3808 	ldrb.w	r3, [r3, #2056]	; 0x808
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <xsens_mti_parse+0x12c>
            {
                // Packet was successfully recieved
                // Run the payload handling function
                xsens_mti_handle_payload( interface );
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f826 	bl	80025b8 <xsens_mti_handle_payload>
            else
            {
                // TODO send CRC failed event to user?
            }

            interface->state = PARSER_PREAMBLE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
            break;
 8002572:	e004      	b.n	800257e <xsens_mti_parse+0x13e>
            break;
 8002574:	bf00      	nop
 8002576:	e002      	b.n	800257e <xsens_mti_parse+0x13e>
            break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <xsens_mti_parse+0x13e>
            break;
 800257c:	bf00      	nop
    }
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop

08002588 <xsens_mti_reset_parser>:

void xsens_mti_reset_parser( xsens_interface_t *interface )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    // Clear the parser state and buffers
    memset( &( interface->packet ), 0, sizeof( xsens_packet_buffer_t ) );
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3302      	adds	r3, #2
 8002594:	f640 0204 	movw	r2, #2052	; 0x804
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f008 fc00 	bl	800ada0 <memset>
    interface->payload_pos = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
    interface->crc         = 0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <xsens_mti_handle_payload>:

// With a valid packet, process the payload
void xsens_mti_handle_payload( xsens_interface_t *interface )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
    xsens_packet_buffer_t *packet = &( interface->packet );
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3302      	adds	r3, #2
 80025c4:	617b      	str	r3, [r7, #20]

    // Search the inbound handler table for a match
    message_handler_ref_t *handler = xsens_mti_find_inbound_handler_entry( packet->message_id );
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f832 	bl	8002634 <xsens_mti_find_inbound_handler_entry>
 80025d0:	6138      	str	r0, [r7, #16]

    // If the ID is recognised, call the handler function (if it exists)
    if( handler )
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <xsens_mti_handle_payload+0x38>
    {
        callback_payload_t payload_handler_fn = (callback_payload_t)handler->handler_fn;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
        if( payload_handler_fn )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <xsens_mti_handle_payload+0x38>
        {
            most_recent_interface = interface;    // internally cache the interface for cb access
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <xsens_mti_handle_payload+0x40>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
            payload_handler_fn( packet );
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6978      	ldr	r0, [r7, #20]
 80025ee:	4798      	blx	r3
        }
    }
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20001430 	.word	0x20001430

080025fc <xsens_mti_override_id_handler>:

bool xsens_mti_override_id_handler( uint8_t id, callback_payload_t user_fn )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
    if( user_fn )
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <xsens_mti_override_id_handler+0x2c>
    {
        // Find the ID in the inbound handler 'jump table'
        message_handler_ref_t *handler = xsens_mti_find_inbound_handler_entry( id );
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f80f 	bl	8002634 <xsens_mti_find_inbound_handler_entry>
 8002616:	60f8      	str	r0, [r7, #12]

        if( handler )
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <xsens_mti_override_id_handler+0x2c>
        {
            handler->handler_fn = user_fn;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	605a      	str	r2, [r3, #4]
            return true;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <xsens_mti_override_id_handler+0x2e>
        }
    }

    return false;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <xsens_mti_find_inbound_handler_entry>:

message_handler_ref_t *xsens_mti_find_inbound_handler_entry( uint8_t find_id )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
    uint8_t table_length = sizeof( inbound_handler_table ) / sizeof( message_handler_ref_t );
 800263e:	2322      	movs	r3, #34	; 0x22
 8002640:	73fb      	strb	r3, [r7, #15]

    return xsens_mti_find_handler_entry(find_id, inbound_handler_table, table_length );
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	4904      	ldr	r1, [pc, #16]	; (8002658 <xsens_mti_find_inbound_handler_entry+0x24>)
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f807 	bl	800265c <xsens_mti_find_handler_entry>
 800264e:	4603      	mov	r3, r0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000000 	.word	0x20000000

0800265c <xsens_mti_find_handler_entry>:

message_handler_ref_t *xsens_mti_find_handler_entry( uint8_t find_id, message_handler_ref_t *entry_table, uint8_t entry_count )
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
    for( uint8_t i = 0; i < entry_count; i++ )
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e00f      	b.n	8002692 <xsens_mti_find_handler_entry+0x36>
    {
        if( entry_table[i].id == find_id )
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	4413      	add	r3, r2
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	79fa      	ldrb	r2, [r7, #7]
 800267e:	429a      	cmp	r2, r3
 8002680:	d104      	bne.n	800268c <xsens_mti_find_handler_entry+0x30>
        {
            return &entry_table[i];
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4413      	add	r3, r2
 800268a:	e007      	b.n	800269c <xsens_mti_find_handler_entry+0x40>
    for( uint8_t i = 0; i < entry_count; i++ )
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	3301      	adds	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	79bb      	ldrb	r3, [r7, #6]
 8002696:	429a      	cmp	r2, r3
 8002698:	d3eb      	bcc.n	8002672 <xsens_mti_find_handler_entry+0x16>
        }
    }

    return (message_handler_ref_t *)NULL;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <xsens_mti_buffer_crc>:

uint8_t xsens_mti_buffer_crc( uint8_t *buffer, uint16_t size )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

    for( uint16_t i = 0; i < size; i++ )
 80026b8:	2300      	movs	r3, #0
 80026ba:	81bb      	strh	r3, [r7, #12]
 80026bc:	e009      	b.n	80026d2 <xsens_mti_buffer_crc+0x2a>
    {
        crc -= buffer[i];
 80026be:	89bb      	ldrh	r3, [r7, #12]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	73fb      	strb	r3, [r7, #15]
    for( uint16_t i = 0; i < size; i++ )
 80026cc:	89bb      	ldrh	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	81bb      	strh	r3, [r7, #12]
 80026d2:	89ba      	ldrh	r2, [r7, #12]
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3f1      	bcc.n	80026be <xsens_mti_buffer_crc+0x16>
    }

    return crc;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <xsens_mti_send>:

void xsens_mti_send( xsens_interface_t *interface, xsens_packet_buffer_t *packet )
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026f4:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80026f8:	6018      	str	r0, [r3, #0]
 80026fa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026fe:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002702:	6019      	str	r1, [r3, #0]
    if( interface && packet )
 8002704:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002708:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80d4 	beq.w	80028bc <xsens_mti_send+0x1d4>
 8002714:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002718:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80cc 	beq.w	80028bc <xsens_mti_send+0x1d4>
    {
        uint8_t buffer[2048] = { 0 };
 8002724:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002728:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	3304      	adds	r3, #4
 8002732:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f008 fb31 	bl	800ada0 <memset>
        uint16_t buffer_pos = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        uint8_t crc = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d

        // Preamble
        buffer[buffer_pos++] = PREAMBLE_BYTE;
 800274a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 8002754:	461a      	mov	r2, r3
 8002756:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800275a:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800275e:	21fa      	movs	r1, #250	; 0xfa
 8002760:	5499      	strb	r1, [r3, r2]

        // Device Address
        buffer[buffer_pos++] = ADDRESS_BYTE;
 8002762:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 800276c:	461a      	mov	r2, r3
 800276e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002772:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002776:	21ff      	movs	r1, #255	; 0xff
 8002778:	5499      	strb	r1, [r3, r2]

        // Message ID
        buffer[buffer_pos++] = packet->message_id;
 800277a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 8002784:	461a      	mov	r2, r3
 8002786:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800278a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	7819      	ldrb	r1, [r3, #0]
 8002792:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002796:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800279a:	5499      	strb	r1, [r3, r2]

        // Payload Length
        if( packet->length < 0xFF )
 800279c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80027a0:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	885b      	ldrh	r3, [r3, #2]
 80027a8:	2bfe      	cmp	r3, #254	; 0xfe
 80027aa:	d812      	bhi.n	80027d2 <xsens_mti_send+0xea>
        {
            buffer[buffer_pos++] = packet->length;
 80027ac:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80027b0:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	8859      	ldrh	r1, [r3, #2]
 80027b8:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 80027c2:	461a      	mov	r2, r3
 80027c4:	b2c9      	uxtb	r1, r1
 80027c6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80027ca:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80027ce:	5499      	strb	r1, [r3, r2]
 80027d0:	e01e      	b.n	8002810 <xsens_mti_send+0x128>
        }
        else
        {
            // Extended packet handling sets the normal length byte to 255,
            // followed by two bytes of payload data
            buffer[buffer_pos++] = 0xFF;
 80027d2:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 80027dc:	461a      	mov	r2, r3
 80027de:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80027e2:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80027e6:	21ff      	movs	r1, #255	; 0xff
 80027e8:	5499      	strb	r1, [r3, r2]

            memcpy( &buffer[buffer_pos], &packet->length, 2 );
 80027ea:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80027ee:	f107 020c 	add.w	r2, r7, #12
 80027f2:	4413      	add	r3, r2
 80027f4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80027f8:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	3202      	adds	r2, #2
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	b292      	uxth	r2, r2
 8002804:	801a      	strh	r2, [r3, #0]
            buffer_pos += 2;
 8002806:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800280a:	3302      	adds	r3, #2
 800280c:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        }

        // Payload Data
        if( packet->length != 0 )
 8002810:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002814:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	885b      	ldrh	r3, [r3, #2]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01e      	beq.n	800285e <xsens_mti_send+0x176>
        {
            memcpy( &buffer[buffer_pos], (uint8_t *)packet->payload, packet->length );
 8002820:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002824:	f107 020c 	add.w	r2, r7, #12
 8002828:	18d0      	adds	r0, r2, r3
 800282a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800282e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1d19      	adds	r1, r3, #4
 8002836:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800283a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	885b      	ldrh	r3, [r3, #2]
 8002842:	461a      	mov	r2, r3
 8002844:	f008 fb2a 	bl	800ae9c <memcpy>
            buffer_pos += packet->length;
 8002848:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800284c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	885a      	ldrh	r2, [r3, #2]
 8002854:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002858:	4413      	add	r3, r2
 800285a:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        }

        // Calculate the CRC of the packet, exluding the preamble
        buffer[buffer_pos] = xsens_mti_buffer_crc( &buffer[1], buffer_pos-1 );
 800285e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	f8b7 480e 	ldrh.w	r4, [r7, #2062]	; 0x80e
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	3301      	adds	r3, #1
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff18 	bl	80026a8 <xsens_mti_buffer_crc>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002880:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002884:	551a      	strb	r2, [r3, r4]
        buffer_pos += 1;
 8002886:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800288a:	3301      	adds	r3, #1
 800288c:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e

        // Pass the buffer to the user so they can send to hardware
        if( interface->output_cb )
 8002890:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002894:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <xsens_mti_send+0x1d4>
        {
            interface->output_cb( buffer, buffer_pos );
 80028a2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028a6:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80028b0:	f8b7 180e 	ldrh.w	r1, [r7, #2062]	; 0x80e
 80028b4:	f107 020c 	add.w	r2, r7, #12
 80028b8:	4610      	mov	r0, r2
 80028ba:	4798      	blx	r3
        }
    }
}
 80028bc:	bf00      	nop
 80028be:	f607 0714 	addw	r7, r7, #2068	; 0x814
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}

080028c6 <xsens_mti_request>:

void xsens_mti_request( xsens_interface_t *interface, uint8_t id )
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028d2:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80028d6:	6018      	str	r0, [r3, #0]
 80028d8:	460a      	mov	r2, r1
 80028da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028de:	f6a3 030d 	subw	r3, r3, #2061	; 0x80d
 80028e2:	701a      	strb	r2, [r3, #0]
    xsens_packet_buffer_t packet = { 0 };
 80028e4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028e8:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80028ec:	4618      	mov	r0, r3
 80028ee:	f640 0304 	movw	r3, #2052	; 0x804
 80028f2:	461a      	mov	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f008 fa53 	bl	800ada0 <memset>

    packet.message_id = id;
 80028fa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80028fe:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002902:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8002906:	f6a2 020d 	subw	r2, r2, #2061	; 0x80d
 800290a:	7812      	ldrb	r2, [r2, #0]
 800290c:	701a      	strb	r2, [r3, #0]
    packet.length = 0;
 800290e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002912:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002916:	2200      	movs	r2, #0
 8002918:	805a      	strh	r2, [r3, #2]
    packet.payload[0] = 0;
 800291a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800291e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002922:	2200      	movs	r2, #0
 8002924:	711a      	strb	r2, [r3, #4]

    xsens_mti_send( interface, &packet );
 8002926:	f107 020c 	add.w	r2, r7, #12
 800292a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800292e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002932:	4611      	mov	r1, r2
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	f7ff fed7 	bl	80026e8 <xsens_mti_send>
}
 800293a:	bf00      	nop
 800293c:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <xsens_mti_reset_orientation>:
    xsens_mti_send( interface, &packet );
}


void xsens_mti_reset_orientation( xsens_interface_t *interface, XsensOrientationSetting_t code )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 800294a:	af00      	add	r7, sp, #0
 800294c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002950:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002954:	6018      	str	r0, [r3, #0]
 8002956:	460a      	mov	r2, r1
 8002958:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800295c:	f6a3 030d 	subw	r3, r3, #2061	; 0x80d
 8002960:	701a      	strb	r2, [r3, #0]
    xsens_packet_buffer_t packet = { 0 };
 8002962:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002966:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800296a:	4618      	mov	r0, r3
 800296c:	f640 0304 	movw	r3, #2052	; 0x804
 8002970:	461a      	mov	r2, r3
 8002972:	2100      	movs	r1, #0
 8002974:	f008 fa14 	bl	800ada0 <memset>
    
    packet.message_id = MT_RESETORIENTATION;
 8002978:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800297c:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002980:	22a4      	movs	r2, #164	; 0xa4
 8002982:	701a      	strb	r2, [r3, #0]
    packet.length = 2;
 8002984:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002988:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800298c:	2202      	movs	r2, #2
 800298e:	805a      	strh	r2, [r3, #2]
    packet.payload[0] = 0x00;
 8002990:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002994:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002998:	2200      	movs	r2, #0
 800299a:	711a      	strb	r2, [r3, #4]
    packet.payload[1] = code;
 800299c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80029a0:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80029a4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80029a8:	f6a2 020d 	subw	r2, r2, #2061	; 0x80d
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	715a      	strb	r2, [r3, #5]

    xsens_mti_send( interface, &packet );
 80029b0:	f107 020c 	add.w	r2, r7, #12
 80029b4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80029b8:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80029bc:	4611      	mov	r1, r2
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	f7ff fe92 	bl	80026e8 <xsens_mti_send>
}
 80029c4:	bf00      	nop
 80029c6:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <xsens_mti_set_configuration>:

void xsens_mti_set_configuration( xsens_interface_t *interface, XsensFrequencyConfig_t config[], uint8_t num_config )
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80029da:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80029de:	6018      	str	r0, [r3, #0]
 80029e0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80029e4:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80029e8:	6019      	str	r1, [r3, #0]
 80029ea:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80029ee:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 80029f2:	701a      	strb	r2, [r3, #0]
    // No more than 32 values can be configured
    if( interface && config && num_config && num_config <= 32 )
 80029f4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80029f8:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d074      	beq.n	8002aec <xsens_mti_set_configuration+0x11e>
 8002a02:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a06:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d06d      	beq.n	8002aec <xsens_mti_set_configuration+0x11e>
 8002a10:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a14:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d066      	beq.n	8002aec <xsens_mti_set_configuration+0x11e>
 8002a1e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a22:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d85f      	bhi.n	8002aec <xsens_mti_set_configuration+0x11e>
    {
        xsens_packet_buffer_t packet = { 0 };
 8002a2c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a30:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8002a34:	4618      	mov	r0, r3
 8002a36:	f640 0304 	movw	r3, #2052	; 0x804
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f008 f9af 	bl	800ada0 <memset>
        packet.message_id = MT_SETOUTPUTCONFIGURATION;
 8002a42:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002a46:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8002a4a:	22c0      	movs	r2, #192	; 0xc0
 8002a4c:	701a      	strb	r2, [r3, #0]

        // Form a big-endian MData2 style 'packet' for each field
        //  2 bytes for ID
        //  2 bytes for frequency
        for( uint8_t i = 0; i <= num_config; i++ )
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 8002a54:	e037      	b.n	8002ac6 <xsens_mti_set_configuration+0xf8>
        {
            uint8_t buff_pos = i * 4;
 8002a56:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
            
            // LE to BE conversion directly into the output buffer...
            xsens_swap_endian_u16( &packet.payload[buff_pos],   (uint8_t*)&config[i].id );
 8002a60:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8002a64:	f107 0210 	add.w	r2, r7, #16
 8002a68:	4413      	add	r3, r2
 8002a6a:	1d18      	adds	r0, r3, #4
 8002a6c:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8002a76:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f000 f8d0 	bl	8002c24 <xsens_swap_endian_u16>
            xsens_swap_endian_u16( &packet.payload[buff_pos+2], (uint8_t*)&config[i].frequency );
 8002a84:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8002a88:	3302      	adds	r3, #2
 8002a8a:	f107 0210 	add.w	r2, r7, #16
 8002a8e:	4413      	add	r3, r2
 8002a90:	1d18      	adds	r0, r3, #4
 8002a92:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8002a9c:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f000 f8bc 	bl	8002c24 <xsens_swap_endian_u16>
            packet.length = buff_pos;
 8002aac:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002ab6:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8002aba:	805a      	strh	r2, [r3, #2]
        for( uint8_t i = 0; i <= num_config; i++ )
 8002abc:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 8002ac6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002aca:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002ace:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d9be      	bls.n	8002a56 <xsens_mti_set_configuration+0x88>
        }

        // TODO: refactor as a MDATA2 output problem once generation fns are implemented?
        xsens_mti_send( interface, &packet );
 8002ad8:	f107 0210 	add.w	r2, r7, #16
 8002adc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002ae0:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f7ff fdfe 	bl	80026e8 <xsens_mti_send>
    }
}
 8002aec:	bf00      	nop
 8002aee:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <xsens_internal_handle_device_id>:



void xsens_internal_handle_device_id( xsens_packet_buffer_t *packet )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0ae      	sub	sp, #184	; 0xb8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    XsensEventData_t value = { 0 };
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	22b0      	movs	r2, #176	; 0xb0
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f008 f949 	bl	800ada0 <memset>

    if( packet->length == 4 )    // MTi 1, 10, 100
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	885b      	ldrh	r3, [r3, #2]
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d109      	bne.n	8002b2a <xsens_internal_handle_device_id+0x32>
    {
        value.type    = XSENS_EVT_TYPE_U32;
 8002b16:	2303      	movs	r3, #3
 8002b18:	723b      	strb	r3, [r7, #8]
        value.data.u4 = xsens_coalesce_32BE_32LE( &packet->payload[0] );
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f8db 	bl	8002cda <xsens_coalesce_32BE_32LE>
 8002b24:	4603      	mov	r3, r0
 8002b26:	673b      	str	r3, [r7, #112]	; 0x70
 8002b28:	e00c      	b.n	8002b44 <xsens_internal_handle_device_id+0x4c>
    }
    else if( packet->length == 8 )    // MTi-600
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	885b      	ldrh	r3, [r3, #2]
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d108      	bne.n	8002b44 <xsens_internal_handle_device_id+0x4c>
    {
        // TODO: untested 8-byte device ID
        value.type    = XSENS_EVT_TYPE_U32;
 8002b32:	2303      	movs	r3, #3
 8002b34:	723b      	strb	r3, [r7, #8]
        value.data.u4 = xsens_coalesce_32BE_32LE( &packet->payload[4] );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f8cd 	bl	8002cda <xsens_coalesce_32BE_32LE>
 8002b40:	4603      	mov	r3, r0
 8002b42:	673b      	str	r3, [r7, #112]	; 0x70
    }

    if( most_recent_interface->event_cb )
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <xsens_internal_handle_device_id+0x74>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <xsens_internal_handle_device_id+0x6a>
    {
        most_recent_interface->event_cb( XSENS_EVT_DEVICE_ID, &value );
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <xsens_internal_handle_device_id+0x74>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002b58:	f107 0208 	add.w	r2, r7, #8
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	2016      	movs	r0, #22
 8002b60:	4798      	blx	r3
    }
}
 8002b62:	bf00      	nop
 8002b64:	37b8      	adds	r7, #184	; 0xb8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20001430 	.word	0x20001430

08002b70 <xsens_internal_handle_product_code>:

void xsens_internal_handle_product_code( xsens_packet_buffer_t *packet )
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    // ASCII formatted code max 20 bytes
    // TODO: handle product code
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <xsens_internal_handle_hardware_version>:

void xsens_internal_handle_hardware_version( xsens_packet_buffer_t *packet )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    // TODO: handle product code

    //    uint8_t hw_version[2];
    //    uint16_t *hw_ptr = (uint16_t *)&hw_version;
    //    hw_ptr           = xsens_coalesce_16BE_16LE( &packet->payload[0] );
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <xsens_internal_handle_firmware_version>:

void xsens_internal_handle_firmware_version( xsens_packet_buffer_t *packet )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    // TODO: handle firmware version

    uint8_t  major    = packet->payload[0];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	75fb      	strb	r3, [r7, #23]
    uint8_t  minor    = packet->payload[1];
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	795b      	ldrb	r3, [r3, #5]
 8002baa:	75bb      	strb	r3, [r7, #22]
    uint8_t  revision = packet->payload[2];
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	799b      	ldrb	r3, [r3, #6]
 8002bb0:	757b      	strb	r3, [r7, #21]
    uint32_t build    = xsens_coalesce_32BE_32LE( &packet->payload[3] );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3307      	adds	r3, #7
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f88f 	bl	8002cda <xsens_coalesce_32BE_32LE>
 8002bbc:	6138      	str	r0, [r7, #16]
    uint32_t scm      = xsens_coalesce_32BE_32LE( &packet->payload[7] );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	330b      	adds	r3, #11
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f889 	bl	8002cda <xsens_coalesce_32BE_32LE>
 8002bc8:	60f8      	str	r0, [r7, #12]
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <xsens_internal_handle_selftest_results>:

void xsens_internal_handle_selftest_results( xsens_packet_buffer_t *packet )
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
    // TODO: handle selftest results
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <xsens_internal_handle_error>:

void xsens_internal_handle_error( xsens_packet_buffer_t *packet )
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
    uint8_t error_code = packet->payload[0];
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	791b      	ldrb	r3, [r3, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]

        default:
            break;
    }
     */
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <xsens_internal_handle_mdata2>:

void xsens_internal_handle_mdata2( xsens_packet_buffer_t *packet )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    // MData2 packets contain 1 to n smaller packets
    // with variable length fields, see xsens_mdata2.c/.h
    xsens_mdata2_process( packet, most_recent_interface->event_cb );
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <xsens_internal_handle_mdata2+0x20>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe fff6 	bl	8001c04 <xsens_mdata2_process>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20001430 	.word	0x20001430

08002c24 <xsens_swap_endian_u16>:
#include "IMU_rel/xsens_utility.h"
#include "math.h"
#include "stdlib.h"

void xsens_swap_endian_u16( uint8_t *dest, uint8_t *source )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
    dest[1] = source[0];
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3301      	adds	r3, #1
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	701a      	strb	r2, [r3, #0]
    dest[0] = source[1];
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	785a      	ldrb	r2, [r3, #1]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <xsens_swap_endian_u64>:
    dest[1] = source[2];
    dest[0] = source[3];
}

void xsens_swap_endian_u64( uint8_t *dest, uint8_t *source )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
    dest[7] = source[0];
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3307      	adds	r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	701a      	strb	r2, [r3, #0]
    dest[6] = source[1];
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3306      	adds	r3, #6
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	7852      	ldrb	r2, [r2, #1]
 8002c68:	701a      	strb	r2, [r3, #0]
    dest[5] = source[2];
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3305      	adds	r3, #5
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	7892      	ldrb	r2, [r2, #2]
 8002c72:	701a      	strb	r2, [r3, #0]
    dest[4] = source[3];
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	78d2      	ldrb	r2, [r2, #3]
 8002c7c:	701a      	strb	r2, [r3, #0]
    dest[3] = source[4];
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3303      	adds	r3, #3
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	7912      	ldrb	r2, [r2, #4]
 8002c86:	701a      	strb	r2, [r3, #0]
    dest[2] = source[5];
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	7952      	ldrb	r2, [r2, #5]
 8002c90:	701a      	strb	r2, [r3, #0]
    dest[1] = source[6];
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3301      	adds	r3, #1
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	7992      	ldrb	r2, [r2, #6]
 8002c9a:	701a      	strb	r2, [r3, #0]
    dest[0] = source[7];
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	79da      	ldrb	r2, [r3, #7]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	701a      	strb	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <xsens_coalesce_16BE_16LE>:

uint16_t xsens_coalesce_16BE_16LE( uint8_t *source )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
    return ( source[1] << 0 | source[0] << 8 );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	b29b      	uxth	r3, r3
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <xsens_coalesce_32BE_32LE>:

uint32_t xsens_coalesce_32BE_32LE( uint8_t *source )
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
    return ( ( source[3] << 0 )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3303      	adds	r3, #3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
             | ( source[2] << 8 )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3302      	adds	r3, #2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	431a      	orrs	r2, r3
             | ( source[1] << 16 )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
             | ( source[0] << 24 ) );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	4313      	orrs	r3, r2
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <xsens_coalesce_32BE_F32LE>:

float xsens_coalesce_32BE_F32LE( uint8_t *source )
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
    float    f;
    uint8_t *f_ptr = (uint8_t *)&f;
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	60fb      	str	r3, [r7, #12]

    f_ptr[3] = source[0];
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3303      	adds	r3, #3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
    f_ptr[2] = source[1];
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	7852      	ldrb	r2, [r2, #1]
 8002d32:	701a      	strb	r2, [r3, #0]
    f_ptr[1] = source[2];
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	7892      	ldrb	r2, [r2, #2]
 8002d3c:	701a      	strb	r2, [r3, #0]
    f_ptr[0] = source[3];
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	78da      	ldrb	r2, [r3, #3]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	701a      	strb	r2, [r3, #0]

    return f;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	ee07 3a90 	vmov	s15, r3
}
 8002d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <xsens_coalesce_48BE_48LE>:

// As per manual, big-endian 32-bit first, then BE 16-bit part i.e [b3, b2, b1, b0, b5, b4]
void xsens_coalesce_48BE_48LE( uint8_t *dest, uint8_t *source )
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
    dest[0] = source[3];
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	78da      	ldrb	r2, [r3, #3]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	701a      	strb	r2, [r3, #0]
    dest[1] = source[2];
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	7892      	ldrb	r2, [r2, #2]
 8002d74:	701a      	strb	r2, [r3, #0]
    dest[2] = source[1];
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3302      	adds	r3, #2
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	7852      	ldrb	r2, [r2, #1]
 8002d7e:	701a      	strb	r2, [r3, #0]
    dest[3] = source[0];
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3303      	adds	r3, #3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	7812      	ldrb	r2, [r2, #0]
 8002d88:	701a      	strb	r2, [r3, #0]
    dest[4] = source[5];
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	7952      	ldrb	r2, [r2, #5]
 8002d92:	701a      	strb	r2, [r3, #0]
    dest[5] = source[4];
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3305      	adds	r3, #5
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	7912      	ldrb	r2, [r2, #4]
 8002d9c:	701a      	strb	r2, [r3, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8002daa:	b4b0      	push	{r4, r5, r7}
 8002dac:	b091      	sub	sp, #68	; 0x44
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8002db2:	f240 13b1 	movw	r3, #433	; 0x1b1
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8002db8:	2307      	movs	r3, #7
 8002dba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
//	new_LoRa.power				   = POWER_20db;
	new_LoRa.overCurrentProtection = 100       ;
 8002dca:	2364      	movs	r3, #100	; 0x64
 8002dcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	new_LoRa.preamble			   = 8         ;
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	f107 0408 	add.w	r4, r7, #8
 8002ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dec:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	3744      	adds	r7, #68	; 0x44
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bcb0      	pop	{r4, r5, r7}
 8002df8:	4770      	bx	lr

08002dfa <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8002e04:	2101      	movs	r1, #1
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f97a 	bl	8003100 <LoRa_read>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8002e1a:	7bbb      	ldrb	r3, [r7, #14]
 8002e1c:	f023 0307 	bic.w	r3, r3, #7
 8002e20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]
 8002e28:	e03e      	b.n	8002ea8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10c      	bne.n	8002e4a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8002e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e34:	f023 0307 	bic.w	r3, r3, #7
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	b25b      	sxtb	r3, r3
 8002e40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	621a      	str	r2, [r3, #32]
 8002e48:	e02e      	b.n	8002ea8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d10c      	bne.n	8002e6a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8002e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e54:	f023 0307 	bic.w	r3, r3, #7
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	f043 0303 	orr.w	r3, r3, #3
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	621a      	str	r2, [r3, #32]
 8002e68:	e01e      	b.n	8002ea8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d10c      	bne.n	8002e8a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8002e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e74:	f023 0307 	bic.w	r3, r3, #7
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f043 0305 	orr.w	r3, r3, #5
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2205      	movs	r2, #5
 8002e86:	621a      	str	r2, [r3, #32]
 8002e88:	e00e      	b.n	8002ea8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d10b      	bne.n	8002ea8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8002e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e94:	f023 0307 	bic.w	r3, r3, #7
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	f043 0306 	orr.w	r3, r3, #6
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2206      	movs	r2, #6
 8002ea6:	621a      	str	r2, [r3, #32]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2101      	movs	r1, #1
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f940 	bl	8003134 <LoRa_write>
	//HAL_Delay(10);
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	889b      	ldrh	r3, [r3, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f003 fdb6 	bl	8006a48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6998      	ldr	r0, [r3, #24]
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	f004 ffa5 	bl	8007e36 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002eec:	bf00      	nop
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 fc8c 	bl	8008810 <HAL_SPI_GetState>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d1f7      	bne.n	8002eee <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6998      	ldr	r0, [r3, #24]
 8002f02:	8b3a      	ldrh	r2, [r7, #24]
 8002f04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	f005 f8d0 	bl	80080ae <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002f0e:	bf00      	nop
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f005 fc7b 	bl	8008810 <HAL_SPI_GetState>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d1f7      	bne.n	8002f10 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f003 fd8c 	bl	8006a48 <HAL_GPIO_WritePin>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	889b      	ldrh	r3, [r3, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	4619      	mov	r1, r3
 8002f54:	f003 fd78 	bl	8006a48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6998      	ldr	r0, [r3, #24]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	f004 ff67 	bl	8007e36 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002f68:	bf00      	nop
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f005 fc4e 	bl	8008810 <HAL_SPI_GetState>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d1f7      	bne.n	8002f6a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6998      	ldr	r0, [r3, #24]
 8002f7e:	8b3a      	ldrh	r2, [r7, #24]
 8002f80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	f004 ff56 	bl	8007e36 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002f8a:	bf00      	nop
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f005 fc3d 	bl	8008810 <HAL_SPI_GetState>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d1f7      	bne.n	8002f8c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	889b      	ldrh	r3, [r3, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f003 fd4e 	bl	8006a48 <HAL_GPIO_WritePin>
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	04db      	lsls	r3, r3, #19
 8002fc2:	115b      	asrs	r3, r3, #5
 8002fc4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2106      	movs	r1, #6
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8ae 	bl	8003134 <LoRa_write>
	HAL_Delay(5);
 8002fd8:	2005      	movs	r0, #5
 8002fda:	f002 fae7 	bl	80055ac <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2107      	movs	r1, #7
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8a2 	bl	8003134 <LoRa_write>
	HAL_Delay(5);
 8002ff0:	2005      	movs	r0, #5
 8002ff2:	f002 fadb 	bl	80055ac <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2108      	movs	r1, #8
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f897 	bl	8003134 <LoRa_write>
	HAL_Delay(5);
 8003006:	2005      	movs	r0, #5
 8003008:	f002 fad0 	bl	80055ac <HAL_Delay>
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	dd01      	ble.n	8003028 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8003024:	230c      	movs	r3, #12
 8003026:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b06      	cmp	r3, #6
 800302c:	dc01      	bgt.n	8003032 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800302e:	2307      	movs	r3, #7
 8003030:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8003032:	211e      	movs	r1, #30
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f863 	bl	8003100 <LoRa_read>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800303e:	200a      	movs	r0, #10
 8003040:	f002 fab4 	bl	80055ac <HAL_Delay>

	data = (SF << 4) | (_LoRa->CRCon << 2) | (read & 0x03);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	b25a      	sxtb	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	b25b      	sxtb	r3, r3
 8003054:	4313      	orrs	r3, r2
 8003056:	b25a      	sxtb	r2, r3
 8003058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	b25b      	sxtb	r3, r3
 8003062:	4313      	orrs	r3, r2
 8003064:	b25b      	sxtb	r3, r3
 8003066:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8003068:	7bbb      	ldrb	r3, [r7, #14]
 800306a:	461a      	mov	r2, r3
 800306c:	211e      	movs	r1, #30
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f860 	bl	8003134 <LoRa_write>
	HAL_Delay(10);
 8003074:	200a      	movs	r0, #10
 8003076:	f002 fa99 	bl	80055ac <HAL_Delay>
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	2b2c      	cmp	r3, #44	; 0x2c
 8003098:	d801      	bhi.n	800309e <LoRa_setOCP+0x1a>
		current = 45;
 800309a:	232d      	movs	r3, #45	; 0x2d
 800309c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	2bf0      	cmp	r3, #240	; 0xf0
 80030a2:	d901      	bls.n	80030a8 <LoRa_setOCP+0x24>
		current = 240;
 80030a4:	23f0      	movs	r3, #240	; 0xf0
 80030a6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	2b78      	cmp	r3, #120	; 0x78
 80030ac:	d809      	bhi.n	80030c2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	3b2d      	subs	r3, #45	; 0x2d
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <LoRa_setOCP+0x78>)
 80030b4:	fb82 1203 	smull	r1, r2, r2, r3
 80030b8:	1052      	asrs	r2, r2, #1
 80030ba:	17db      	asrs	r3, r3, #31
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e00b      	b.n	80030da <LoRa_setOCP+0x56>
	else if(current <= 240)
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	2bf0      	cmp	r3, #240	; 0xf0
 80030c6:	d808      	bhi.n	80030da <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	331e      	adds	r3, #30
 80030cc:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <LoRa_setOCP+0x78>)
 80030ce:	fb82 1203 	smull	r1, r2, r2, r3
 80030d2:	1092      	asrs	r2, r2, #2
 80030d4:	17db      	asrs	r3, r3, #31
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	3320      	adds	r3, #32
 80030de:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	461a      	mov	r2, r3
 80030e4:	210b      	movs	r1, #11
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f824 	bl	8003134 <LoRa_write>
	HAL_Delay(10);
 80030ec:	200a      	movs	r0, #10
 80030ee:	f002 fa5d 	bl	80055ac <HAL_Delay>
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	66666667 	.word	0x66666667

08003100 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003112:	b2db      	uxtb	r3, r3
 8003114:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8003116:	f107 030f 	add.w	r3, r7, #15
 800311a:	f107 010e 	add.w	r1, r7, #14
 800311e:	2201      	movs	r2, #1
 8003120:	9200      	str	r2, [sp, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff fec9 	bl	8002ebc <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
 8003140:	4613      	mov	r3, r2
 8003142:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800314a:	b2db      	uxtb	r3, r3
 800314c:	73bb      	strb	r3, [r7, #14]
	data = value;
 800314e:	78bb      	ldrb	r3, [r7, #2]
 8003150:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8003152:	f107 030f 	add.w	r3, r7, #15
 8003156:	f107 010e 	add.w	r1, r7, #14
 800315a:	2201      	movs	r2, #1
 800315c:	9200      	str	r2, [sp, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fee9 	bl	8002f38 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	461a      	mov	r2, r3
 800317a:	460b      	mov	r3, r1
 800317c:	72fb      	strb	r3, [r7, #11]
 800317e:	4613      	mov	r3, r2
 8003180:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003188:	b2db      	uxtb	r3, r3
 800318a:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	889b      	ldrh	r3, [r3, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	4619      	mov	r1, r3
 8003198:	f003 fc56 	bl	8006a48 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6998      	ldr	r0, [r3, #24]
 80031a0:	f107 0117 	add.w	r1, r7, #23
 80031a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031a8:	2201      	movs	r2, #1
 80031aa:	f004 fe44 	bl	8007e36 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80031ae:	bf00      	nop
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f005 fb2b 	bl	8008810 <HAL_SPI_GetState>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d1f7      	bne.n	80031b0 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6998      	ldr	r0, [r3, #24]
 80031c4:	7abb      	ldrb	r3, [r7, #10]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	f004 fe32 	bl	8007e36 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80031d2:	bf00      	nop
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 fb19 	bl	8008810 <HAL_SPI_GetState>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d1f7      	bne.n	80031d4 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	889b      	ldrh	r3, [r3, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4619      	mov	r1, r3
 80031f0:	f003 fc2a 	bl	8006a48 <HAL_GPIO_WritePin>
}
 80031f4:	bf00      	nop
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

	return 1;
 8003204:	2301      	movs	r3, #1
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	4611      	mov	r1, r2
 800321e:	461a      	mov	r2, r3
 8003220:	460b      	mov	r3, r1
 8003222:	71fb      	strb	r3, [r7, #7]
 8003224:	4613      	mov	r3, r2
 8003226:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800322e:	2101      	movs	r1, #1
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff fde2 	bl	8002dfa <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8003236:	210e      	movs	r1, #14
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff ff61 	bl	8003100 <LoRa_read>
 800323e:	4603      	mov	r3, r0
 8003240:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	461a      	mov	r2, r3
 8003246:	210d      	movs	r1, #13
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff ff73 	bl	8003134 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	461a      	mov	r2, r3
 8003252:	2122      	movs	r1, #34	; 0x22
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff ff6d 	bl	8003134 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	2100      	movs	r1, #0
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7ff ff84 	bl	800316e <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8003266:	2103      	movs	r1, #3
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fdc6 	bl	8002dfa <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800326e:	2112      	movs	r1, #18
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff ff45 	bl	8003100 <LoRa_read>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8003284:	22ff      	movs	r2, #255	; 0xff
 8003286:	2112      	movs	r1, #18
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f7ff ff53 	bl	8003134 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800328e:	6979      	ldr	r1, [r7, #20]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fdb2 	bl	8002dfa <LoRa_gotoMode>
			return 1;
 8003296:	2301      	movs	r3, #1
 8003298:	e00f      	b.n	80032ba <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800329a:	88bb      	ldrh	r3, [r7, #4]
 800329c:	3b01      	subs	r3, #1
 800329e:	80bb      	strh	r3, [r7, #4]
 80032a0:	88bb      	ldrh	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff fda6 	bl	8002dfa <LoRa_gotoMode>
				return 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e003      	b.n	80032ba <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f002 f97a 	bl	80055ac <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80032b8:	e7d9      	b.n	800326e <LoRa_transmit+0x5c>
	}
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80032ca:	2105      	movs	r1, #5
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fd94 	bl	8002dfa <LoRa_gotoMode>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80032da:	b590      	push	{r4, r7, lr}
 80032dc:	b089      	sub	sp, #36	; 0x24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	4613      	mov	r3, r2
 80032e6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e007      	b.n	8003302 <LoRa_receive+0x28>
		data[i]=0;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	4413      	add	r3, r2
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	3301      	adds	r3, #1
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	429a      	cmp	r2, r3
 8003308:	dbf3      	blt.n	80032f2 <LoRa_receive+0x18>

//	LoRa_gotoMode(_LoRa, STNBY_MODE);
	read = LoRa_read(_LoRa, RegIrqFlags);
 800330a:	2112      	movs	r1, #18
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fef7 	bl	8003100 <LoRa_read>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02f      	beq.n	8003380 <LoRa_receive+0xa6>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	2112      	movs	r1, #18
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff ff05 	bl	8003134 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800332a:	2113      	movs	r1, #19
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fee7 	bl	8003100 <LoRa_read>
 8003332:	4603      	mov	r3, r0
 8003334:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8003336:	2110      	movs	r1, #16
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fee1 	bl	8003100 <LoRa_read>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	461a      	mov	r2, r3
 8003346:	210d      	movs	r1, #13
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fef3 	bl	8003134 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800334e:	7cba      	ldrb	r2, [r7, #18]
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	4293      	cmp	r3, r2
 8003354:	bf28      	it	cs
 8003356:	4613      	movcs	r3, r2
 8003358:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e00b      	b.n	8003378 <LoRa_receive+0x9e>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	18d4      	adds	r4, r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff fec9 	bl	8003100 <LoRa_read>
 800336e:	4603      	mov	r3, r0
 8003370:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	7ffb      	ldrb	r3, [r7, #31]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	429a      	cmp	r2, r3
 800337e:	dbef      	blt.n	8003360 <LoRa_receive+0x86>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8003380:	2105      	movs	r1, #5
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7ff fd39 	bl	8002dfa <LoRa_gotoMode>
    return min;
 8003388:	7ffb      	ldrb	r3, [r7, #31]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}

08003392 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff2e 	bl	80031fc <LoRa_isvalid>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80d2 	beq.w	800354c <LoRa_init+0x1ba>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fd25 	bl	8002dfa <LoRa_gotoMode>
			_LoRa->current_mode = SLEEP_MODE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	621a      	str	r2, [r3, #32]
			HAL_Delay(10);
 80033b6:	200a      	movs	r0, #10
 80033b8:	f002 f8f8 	bl	80055ac <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80033bc:	2101      	movs	r1, #1
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fe9e 	bl	8003100 <LoRa_read>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80033c8:	200a      	movs	r0, #10
 80033ca:	f002 f8ef 	bl	80055ac <HAL_Delay>
			data = read | (LORA_MODEM<<7);
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033d4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80033d6:	7bbb      	ldrb	r3, [r7, #14]
 80033d8:	461a      	mov	r2, r3
 80033da:	2101      	movs	r1, #1
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fea9 	bl	8003134 <LoRa_write>
			HAL_Delay(100);
 80033e2:	2064      	movs	r0, #100	; 0x64
 80033e4:	f002 f8e2 	bl	80055ac <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff fde0 	bl	8002fb4 <LoRa_setFrequency>
			if(_LoRa->frequency<525){ //if freq<525MHz, set low freq mode on
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80033fc:	dc0f      	bgt.n	800341e <LoRa_init+0x8c>
				read = LoRa_read(_LoRa, RegOpMode);
 80033fe:	2101      	movs	r1, #1
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fe7d 	bl	8003100 <LoRa_read>
 8003406:	4603      	mov	r3, r0
 8003408:	73fb      	strb	r3, [r7, #15]
				data = read | (1<<3);
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	f043 0308 	orr.w	r3, r3, #8
 8003410:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 8003412:	7bbb      	ldrb	r3, [r7, #14]
 8003414:	461a      	mov	r2, r3
 8003416:	2101      	movs	r1, #1
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff fe8b 	bl	8003134 <LoRa_write>
			}

		// set output power gain:
		data = (_LoRa->paselect << 7) | (_LoRa->maxpower << 4) | (_LoRa->outputpower);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003424:	01db      	lsls	r3, r3, #7
 8003426:	b25a      	sxtb	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	b25b      	sxtb	r3, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	b25a      	sxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800343c:	b25b      	sxtb	r3, r3
 800343e:	4313      	orrs	r3, r2
 8003440:	b25b      	sxtb	r3, r3
 8003442:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegPaConfig, data);
 8003444:	7bbb      	ldrb	r3, [r7, #14]
 8003446:	461a      	mov	r2, r3
 8003448:	2109      	movs	r1, #9
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fe72 	bl	8003134 <LoRa_write>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fe13 	bl	8003084 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x20);
 800345e:	2220      	movs	r2, #32
 8003460:	210c      	movs	r1, #12
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fe66 	bl	8003134 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = (_LoRa->bandWidth << 4) | (_LoRa->crcRate << 1) | (_LoRa->implicit_on);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	b25a      	sxtb	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	b25b      	sxtb	r3, r3
 800347c:	4313      	orrs	r3, r2
 800347e:	b25a      	sxtb	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003486:	b25b      	sxtb	r3, r3
 8003488:	4313      	orrs	r3, r2
 800348a:	b25b      	sxtb	r3, r3
 800348c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800348e:	7bbb      	ldrb	r3, [r7, #14]
 8003490:	461a      	mov	r2, r3
 8003492:	211d      	movs	r1, #29
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fe4d 	bl	8003134 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fdb6 	bl	8003014 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0x64);
 80034a8:	2264      	movs	r2, #100	; 0x64
 80034aa:	211f      	movs	r1, #31
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fe41 	bl	8003134 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	2120      	movs	r1, #32
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff fe37 	bl	8003134 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	2121      	movs	r1, #33	; 0x21
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fe2f 	bl	8003134 <LoRa_write>
//			read = LoRa_read(_LoRa, RegDioMapping1);
//			data = read | 0x3F;
//			LoRa_write(_LoRa, RegDioMapping1, data);

			//Set base address
			LoRa_write(_LoRa, RegFiFoRxBaseAddr, 0x00);
 80034d6:	2200      	movs	r2, #0
 80034d8:	210f      	movs	r1, #15
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fe2a 	bl	8003134 <LoRa_write>
			LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);
 80034e0:	2200      	movs	r2, #0
 80034e2:	210e      	movs	r1, #14
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fe25 	bl	8003134 <LoRa_write>

			//Setting in errata note
			read = LoRa_read(_LoRa, 0x31);
 80034ea:	2131      	movs	r1, #49	; 0x31
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fe07 	bl	8003100 <LoRa_read>
 80034f2:	4603      	mov	r3, r0
 80034f4:	73fb      	strb	r3, [r7, #15]
			LoRa_write(_LoRa, 0x31, read&0x7F);
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	2131      	movs	r1, #49	; 0x31
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fe16 	bl	8003134 <LoRa_write>
			LoRa_write(_LoRa, 0x2F, 0x40);
 8003508:	2240      	movs	r2, #64	; 0x40
 800350a:	212f      	movs	r1, #47	; 0x2f
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fe11 	bl	8003134 <LoRa_write>
			LoRa_write(_LoRa, 0x30, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2130      	movs	r1, #48	; 0x30
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fe0c 	bl	8003134 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800351c:	2101      	movs	r1, #1
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fc6b 	bl	8002dfa <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	621a      	str	r2, [r3, #32]
			HAL_Delay(10);
 800352a:	200a      	movs	r0, #10
 800352c:	f002 f83e 	bl	80055ac <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8003530:	2142      	movs	r1, #66	; 0x42
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fde4 	bl	8003100 <LoRa_read>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b12      	cmp	r3, #18
 8003540:	d101      	bne.n	8003546 <LoRa_init+0x1b4>
				return LORA_OK;
 8003542:	23c8      	movs	r3, #200	; 0xc8
 8003544:	e004      	b.n	8003550 <LoRa_init+0x1be>
			else
				return LORA_NOT_FOUND;
 8003546:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800354a:	e001      	b.n	8003550 <LoRa_init+0x1be>
	}
	else {
		return LORA_UNAVAILABLE;
 800354c:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800355e:	463b      	mov	r3, r7
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <MX_ADC1_Init+0x98>)
 800356c:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <MX_ADC1_Init+0x9c>)
 800356e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <MX_ADC1_Init+0x98>)
 8003572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003576:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <MX_ADC1_Init+0x98>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <MX_ADC1_Init+0x98>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <MX_ADC1_Init+0x98>)
 8003586:	2201      	movs	r2, #1
 8003588:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <MX_ADC1_Init+0x98>)
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <MX_ADC1_Init+0x98>)
 8003594:	2200      	movs	r2, #0
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <MX_ADC1_Init+0x98>)
 800359a:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <MX_ADC1_Init+0xa0>)
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <MX_ADC1_Init+0x98>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <MX_ADC1_Init+0x98>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <MX_ADC1_Init+0x98>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <MX_ADC1_Init+0x98>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035b8:	480d      	ldr	r0, [pc, #52]	; (80035f0 <MX_ADC1_Init+0x98>)
 80035ba:	f002 f81b 	bl	80055f4 <HAL_ADC_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80035c4:	f001 fab0 	bl	8004b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80035c8:	2305      	movs	r3, #5
 80035ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80035cc:	2301      	movs	r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035d4:	463b      	mov	r3, r7
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <MX_ADC1_Init+0x98>)
 80035da:	f002 f92f 	bl	800583c <HAL_ADC_ConfigChannel>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80035e4:	f001 faa0 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20001434 	.word	0x20001434
 80035f4:	40012000 	.word	0x40012000
 80035f8:	0f000001 	.word	0x0f000001

080035fc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003602:	463b      	mov	r3, r7
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <MX_ADC3_Init+0xa0>)
 8003612:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800361a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <MX_ADC3_Init+0x9c>)
 800361e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003622:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003624:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800362a:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <MX_ADC3_Init+0x9c>)
 800362c:	2200      	movs	r2, #0
 800362e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <MX_ADC3_Init+0x9c>)
 800363a:	2200      	movs	r2, #0
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800363e:	4b16      	ldr	r3, [pc, #88]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003640:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <MX_ADC3_Init+0xa4>)
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <MX_ADC3_Init+0x9c>)
 800364c:	2201      	movs	r2, #1
 800364e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <MX_ADC3_Init+0x9c>)
 800365a:	2201      	movs	r2, #1
 800365c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800365e:	480e      	ldr	r0, [pc, #56]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003660:	f001 ffc8 	bl	80055f4 <HAL_ADC_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 800366a:	f001 fa5d 	bl	8004b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800366e:	2304      	movs	r3, #4
 8003670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800367a:	463b      	mov	r3, r7
 800367c:	4619      	mov	r1, r3
 800367e:	4806      	ldr	r0, [pc, #24]	; (8003698 <MX_ADC3_Init+0x9c>)
 8003680:	f002 f8dc 	bl	800583c <HAL_ADC_ConfigChannel>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 800368a:	f001 fa4d 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2000147c 	.word	0x2000147c
 800369c:	40012200 	.word	0x40012200
 80036a0:	0f000001 	.word	0x0f000001

080036a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 031c 	add.w	r3, r7, #28
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2e      	ldr	r2, [pc, #184]	; (800377c <HAL_ADC_MspInit+0xd8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d128      	bne.n	8003718 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	4b2d      	ldr	r3, [pc, #180]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6453      	str	r3, [r2, #68]	; 0x44
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	4b26      	ldr	r3, [pc, #152]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a25      	ldr	r2, [pc, #148]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036fe:	2320      	movs	r3, #32
 8003700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003702:	2303      	movs	r3, #3
 8003704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4619      	mov	r1, r3
 8003710:	481c      	ldr	r0, [pc, #112]	; (8003784 <HAL_ADC_MspInit+0xe0>)
 8003712:	f002 ffd5 	bl	80066c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8003716:	e02c      	b.n	8003772 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <HAL_ADC_MspInit+0xe4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d127      	bne.n	8003772 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 800372c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 8003748:	f043 0320 	orr.w	r3, r3, #32
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_ADC_MspInit+0xdc>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800375a:	2340      	movs	r3, #64	; 0x40
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375e:	2303      	movs	r3, #3
 8003760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003766:	f107 031c 	add.w	r3, r7, #28
 800376a:	4619      	mov	r1, r3
 800376c:	4807      	ldr	r0, [pc, #28]	; (800378c <HAL_ADC_MspInit+0xe8>)
 800376e:	f002 ffa7 	bl	80066c0 <HAL_GPIO_Init>
}
 8003772:	bf00      	nop
 8003774:	3730      	adds	r7, #48	; 0x30
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40012000 	.word	0x40012000
 8003780:	40023800 	.word	0x40023800
 8003784:	40020000 	.word	0x40020000
 8003788:	40012200 	.word	0x40012200
 800378c:	40021400 	.word	0x40021400

08003790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	4b27      	ldr	r3, [pc, #156]	; (8003838 <MX_DMA_Init+0xa8>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <MX_DMA_Init+0xa8>)
 80037a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <MX_DMA_Init+0xa8>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <MX_DMA_Init+0xa8>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	4a1f      	ldr	r2, [pc, #124]	; (8003838 <MX_DMA_Init+0xa8>)
 80037bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c0:	6313      	str	r3, [r2, #48]	; 0x30
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <MX_DMA_Init+0xa8>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	200c      	movs	r0, #12
 80037d4:	f002 fb3b 	bl	8005e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80037d8:	200c      	movs	r0, #12
 80037da:	f002 fb54 	bl	8005e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	200e      	movs	r0, #14
 80037e4:	f002 fb33 	bl	8005e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80037e8:	200e      	movs	r0, #14
 80037ea:	f002 fb4c 	bl	8005e86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	2038      	movs	r0, #56	; 0x38
 80037f4:	f002 fb2b 	bl	8005e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037f8:	2038      	movs	r0, #56	; 0x38
 80037fa:	f002 fb44 	bl	8005e86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80037fe:	2200      	movs	r2, #0
 8003800:	2100      	movs	r1, #0
 8003802:	2039      	movs	r0, #57	; 0x39
 8003804:	f002 fb23 	bl	8005e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003808:	2039      	movs	r0, #57	; 0x39
 800380a:	f002 fb3c 	bl	8005e86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	203a      	movs	r0, #58	; 0x3a
 8003814:	f002 fb1b 	bl	8005e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003818:	203a      	movs	r0, #58	; 0x3a
 800381a:	f002 fb34 	bl	8005e86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2100      	movs	r1, #0
 8003822:	2046      	movs	r0, #70	; 0x46
 8003824:	f002 fb13 	bl	8005e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003828:	2046      	movs	r0, #70	; 0x46
 800382a:	f002 fb2c 	bl	8005e86 <HAL_NVIC_EnableIRQ>

}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800

0800383c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003842:	f107 031c 	add.w	r3, r7, #28
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a64      	ldr	r2, [pc, #400]	; (80039ec <MX_GPIO_Init+0x1b0>)
 800385c:	f043 0310 	orr.w	r3, r3, #16
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b62      	ldr	r3, [pc, #392]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a5d      	ldr	r2, [pc, #372]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b5b      	ldr	r3, [pc, #364]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b57      	ldr	r3, [pc, #348]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a56      	ldr	r2, [pc, #344]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003894:	f043 0320 	orr.w	r3, r3, #32
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b54      	ldr	r3, [pc, #336]	; (80039ec <MX_GPIO_Init+0x1b0>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	4b50      	ldr	r3, [pc, #320]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a4f      	ldr	r2, [pc, #316]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b49      	ldr	r3, [pc, #292]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a48      	ldr	r2, [pc, #288]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b46      	ldr	r3, [pc, #280]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	4b42      	ldr	r3, [pc, #264]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a41      	ldr	r2, [pc, #260]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <MX_GPIO_Init+0x1b0>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	4a3a      	ldr	r2, [pc, #232]	; (80039ec <MX_GPIO_Init+0x1b0>)
 8003904:	f043 0302 	orr.w	r3, r3, #2
 8003908:	6313      	str	r3, [r2, #48]	; 0x30
 800390a:	4b38      	ldr	r3, [pc, #224]	; (80039ec <MX_GPIO_Init+0x1b0>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8003916:	2201      	movs	r2, #1
 8003918:	2110      	movs	r1, #16
 800391a:	4835      	ldr	r0, [pc, #212]	; (80039f0 <MX_GPIO_Init+0x1b4>)
 800391c:	f003 f894 	bl	8006a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FEM_CTX_Pin|FEM_CPS_Pin, GPIO_PIN_RESET);
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003926:	4833      	ldr	r0, [pc, #204]	; (80039f4 <MX_GPIO_Init+0x1b8>)
 8003928:	f003 f88e 	bl	8006a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_SET);
 800392c:	2201      	movs	r2, #1
 800392e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003932:	4830      	ldr	r0, [pc, #192]	; (80039f4 <MX_GPIO_Init+0x1b8>)
 8003934:	f003 f888 	bl	8006a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8003938:	2310      	movs	r3, #16
 800393a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393c:	2301      	movs	r3, #1
 800393e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003944:	2300      	movs	r3, #0
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	4619      	mov	r1, r3
 800394e:	4828      	ldr	r0, [pc, #160]	; (80039f0 <MX_GPIO_Init+0x1b4>)
 8003950:	f002 feb6 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO0_Pin;
 8003954:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800395a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800395e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003964:	f107 031c 	add.w	r3, r7, #28
 8003968:	4619      	mov	r1, r3
 800396a:	4823      	ldr	r0, [pc, #140]	; (80039f8 <MX_GPIO_Init+0x1bc>)
 800396c:	f002 fea8 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mode_Switch_Pin;
 8003970:	2340      	movs	r3, #64	; 0x40
 8003972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003978:	2301      	movs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Mode_Switch_GPIO_Port, &GPIO_InitStruct);
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	4619      	mov	r1, r3
 8003982:	481e      	ldr	r0, [pc, #120]	; (80039fc <MX_GPIO_Init+0x1c0>)
 8003984:	f002 fe9c 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FEM_CTX_Pin|LoRa_RST_Pin|FEM_CPS_Pin;
 8003988:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800398c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398e:	2301      	movs	r3, #1
 8003990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	2300      	movs	r3, #0
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800399a:	f107 031c 	add.w	r3, r7, #28
 800399e:	4619      	mov	r1, r3
 80039a0:	4814      	ldr	r0, [pc, #80]	; (80039f4 <MX_GPIO_Init+0x1b8>)
 80039a2:	f002 fe8d 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 80039a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	480d      	ldr	r0, [pc, #52]	; (80039f4 <MX_GPIO_Init+0x1b8>)
 80039be:	f002 fe7f 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80039c2:	2320      	movs	r3, #32
 80039c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c6:	2302      	movs	r3, #2
 80039c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2303      	movs	r3, #3
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039d2:	2305      	movs	r3, #5
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d6:	f107 031c 	add.w	r3, r7, #28
 80039da:	4619      	mov	r1, r3
 80039dc:	4808      	ldr	r0, [pc, #32]	; (8003a00 <MX_GPIO_Init+0x1c4>)
 80039de:	f002 fe6f 	bl	80066c0 <HAL_GPIO_Init>

}
 80039e2:	bf00      	nop
 80039e4:	3730      	adds	r7, #48	; 0x30
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020400 	.word	0x40020400

08003a04 <__io_putchar>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

PUTCHAR_PROTOTYPE {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&EXT_uart, (uint8_t*) &ch, 1, 0xFFFF);
 8003a0c:	1d39      	adds	r1, r7, #4
 8003a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a12:	2201      	movs	r2, #1
 8003a14:	4803      	ldr	r0, [pc, #12]	; (8003a24 <__io_putchar+0x20>)
 8003a16:	f005 f89a 	bl	8008b4e <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(&EXT_DMA_TX, (uint8_t *)&ch, 1);
	return ch;
 8003a1a:	687b      	ldr	r3, [r7, #4]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20001a74 	.word	0x20001a74

08003a28 <HAL_UARTEx_RxEventCallback>:
bool EXT_got_data;
uint16_t EXT_data_Size;

extern IMU imu;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
	IMU_UART_CB(huart, Size);
 8003a34:	887b      	ldrh	r3, [r7, #2]
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fd fab3 	bl	8000fa4 <IMU_UART_CB>

	if (huart->Instance == USART1) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <HAL_UARTEx_RxEventCallback+0x50>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d113      	bne.n	8003a70 <HAL_UARTEx_RxEventCallback+0x48>
		EXT_got_data = true;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_UARTEx_RxEventCallback+0x54>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
		EXT_data_Size = Size;
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <HAL_UARTEx_RxEventCallback+0x58>)
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	8013      	strh	r3, [r2, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(&EXT_uart, EXT_buffer, EXT_BUFFER_SIZE);
 8003a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a58:	490a      	ldr	r1, [pc, #40]	; (8003a84 <HAL_UARTEx_RxEventCallback+0x5c>)
 8003a5a:	480b      	ldr	r0, [pc, #44]	; (8003a88 <HAL_UARTEx_RxEventCallback+0x60>)
 8003a5c:	f005 f988 	bl	8008d70 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_UARTEx_RxEventCallback+0x64>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_UARTEx_RxEventCallback+0x64>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0208 	bic.w	r2, r2, #8
 8003a6e:	601a      	str	r2, [r3, #0]
	}

}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40011000 	.word	0x40011000
 8003a7c:	20001928 	.word	0x20001928
 8003a80:	2000192a 	.word	0x2000192a
 8003a84:	20001528 	.word	0x20001528
 8003a88:	20001a74 	.word	0x20001a74
 8003a8c:	20001afc 	.word	0x20001afc

08003a90 <proc_data_4>:
	uint8_t datas[1024];
	int length;
} IMU_DATA_TO_SEND_t;
//typedef struct IMU_DATA_TO_SEND IMU_DATA_TO_SEND_t;

void proc_data_4(IMU_DATA_TO_SEND_t *data, float value) {
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	ed87 0a00 	vstr	s0, [r7]
	f32_t f32_value;
	f32_value.f = value;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]
	data->datas[data->length] = f32_value.u8[3];
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003aa6:	7bf9      	ldrb	r1, [r7, #15]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[2];
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ac0:	7bb9      	ldrb	r1, [r7, #14]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[1];
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ada:	7b79      	ldrb	r1, [r7, #13]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[0];
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003af4:	7b39      	ldrb	r1, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <proc_data_2>:

void proc_data_2(IMU_DATA_TO_SEND_t *data, float value) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	ed87 0a00 	vstr	s0, [r7]
	f16_t f16_value;
	f32_t temp;
	temp.f = value;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	60bb      	str	r3, [r7, #8]
	f32_to_f16(&temp, &f16_value);
 8003b24:	f107 020c 	add.w	r2, r7, #12
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fec8 	bl	80018c4 <f32_to_f16>
	data->datas[data->length] = f16_value.u8[1];
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b3a:	7b79      	ldrb	r1, [r7, #13]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f16_value.u8[0];
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b54:	7b39      	ldrb	r1, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <proc_data_2_uint16>:

void proc_data_2_uint16(IMU_DATA_TO_SEND_t *data, uint16_t value) {
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
	f16_t temp;
	temp.u16 = value;
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	81bb      	strh	r3, [r7, #12]
	data->datas[data->length] = temp.u8[1];
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b86:	7b79      	ldrb	r1, [r7, #13]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = temp.u8[0];
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ba0:	7b39      	ldrb	r1, [r7, #12]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <proc_data_1_uint8>:

void proc_data_1_uint8(IMU_DATA_TO_SEND_t *data, uint8_t value) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
	data->datas[data->length] = value;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	78f9      	ldrb	r1, [r7, #3]
 8003bd6:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <proc_data_4_uint8>:

void proc_data_4_uint8(IMU_DATA_TO_SEND_t *data, uint32_t value) {
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
	f32_t f32_value;
	f32_value.u32 = value;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]
	data->datas[data->length] = f32_value.u8[3];
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c06:	7bf9      	ldrb	r1, [r7, #15]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[2];
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c20:	7bb9      	ldrb	r1, [r7, #14]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[1];
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c3a:	7b79      	ldrb	r1, [r7, #13]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[0];
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c54:	7b39      	ldrb	r1, [r7, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <imu_data_conv_config>:

void imu_data_conv_config(IMU *imu, IMU_DATA_TO_SEND_t *out) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
	out->length = 0;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	memset(out->datas, 0, 1024);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f007 f886 	bl	800ada0 <memset>
	proc_data_1_uint8(out, data_hour);
 8003c94:	4ba9      	ldr	r3, [pc, #676]	; (8003f3c <imu_data_conv_config+0x2c8>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6838      	ldr	r0, [r7, #0]
 8003c9c:	f7ff ff90 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_min);
 8003ca0:	4ba7      	ldr	r3, [pc, #668]	; (8003f40 <imu_data_conv_config+0x2cc>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f7ff ff8a 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_sec);
 8003cac:	4ba5      	ldr	r3, [pc, #660]	; (8003f44 <imu_data_conv_config+0x2d0>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6838      	ldr	r0, [r7, #0]
 8003cb4:	f7ff ff84 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_subSec);
 8003cb8:	4ba3      	ldr	r3, [pc, #652]	; (8003f48 <imu_data_conv_config+0x2d4>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6838      	ldr	r0, [r7, #0]
 8003cc0:	f7ff ff7e 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_2_uint16(out, data_counter);
 8003cc4:	4ba1      	ldr	r3, [pc, #644]	; (8003f4c <imu_data_conv_config+0x2d8>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6838      	ldr	r0, [r7, #0]
 8003ccc:	f7ff ff50 	bl	8003b70 <proc_data_2_uint16>
	proc_data_4(out, imu->deltaQ[0]);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003cda:	eeb0 0a67 	vmov.f32	s0, s15
 8003cde:	6838      	ldr	r0, [r7, #0]
 8003ce0:	f7ff fed6 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->deltaQ[1]);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cea:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003cee:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f7ff fecc 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->deltaQ[2]);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfe:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003d02:	eeb0 0a67 	vmov.f32	s0, s15
 8003d06:	6838      	ldr	r0, [r7, #0]
 8003d08:	f7ff fec2 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->deltaQ[3]);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d12:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003d16:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1a:	6838      	ldr	r0, [r7, #0]
 8003d1c:	f7ff feb8 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[0]);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d26:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	6838      	ldr	r0, [r7, #0]
 8003d30:	f7ff feae 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[1]);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	f7ff fea4 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[2]);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d4e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003d52:	eeb0 0a67 	vmov.f32	s0, s15
 8003d56:	6838      	ldr	r0, [r7, #0]
 8003d58:	f7ff fe9a 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[3]);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d62:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d66:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f7ff fe90 	bl	8003a90 <proc_data_4>
	proc_data_2(out, imu->rateOfTurnXYZ[0]);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d76:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7e:	6838      	ldr	r0, [r7, #0]
 8003d80:	f7ff fec8 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[1]);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d92:	6838      	ldr	r0, [r7, #0]
 8003d94:	f7ff febe 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[2]);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003da2:	eeb0 0a67 	vmov.f32	s0, s15
 8003da6:	6838      	ldr	r0, [r7, #0]
 8003da8:	f7ff feb4 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->accelerationXYZ[0]);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003db6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dba:	6838      	ldr	r0, [r7, #0]
 8003dbc:	f7ff feaa 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->accelerationXYZ[1]);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003dca:	eeb0 0a67 	vmov.f32	s0, s15
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f7ff fea0 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->accelerationXYZ[2]);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dda:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003dde:	eeb0 0a67 	vmov.f32	s0, s15
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	f7ff fe96 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[0]);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dee:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003df2:	eeb0 0a67 	vmov.f32	s0, s15
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f7ff fe8c 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[1]);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e02:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003e06:	eeb0 0a67 	vmov.f32	s0, s15
 8003e0a:	6838      	ldr	r0, [r7, #0]
 8003e0c:	f7ff fe82 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[2]);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e16:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1e:	6838      	ldr	r0, [r7, #0]
 8003e20:	f7ff fe78 	bl	8003b14 <proc_data_2>
	proc_data_4(out, imu->deltaV[0]);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e32:	6838      	ldr	r0, [r7, #0]
 8003e34:	f7ff fe2c 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->deltaV[1]);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003e42:	eeb0 0a67 	vmov.f32	s0, s15
 8003e46:	6838      	ldr	r0, [r7, #0]
 8003e48:	f7ff fe22 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->deltaV[2]);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e52:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003e56:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f7ff fe18 	bl	8003a90 <proc_data_4>
//	proc_data_2(out, imu->positionEcefXYZ[0]);
//	proc_data_2(out, imu->positionEcefXYZ[1]);
//	proc_data_2(out, imu->positionEcefXYZ[2]);
	proc_data_4(out, imu->latitude);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e66:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e6e:	6838      	ldr	r0, [r7, #0]
 8003e70:	f7ff fe0e 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->longitude);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f7ff fe04 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->altitudeEllip);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8e:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003e92:	eeb0 0a67 	vmov.f32	s0, s15
 8003e96:	6838      	ldr	r0, [r7, #0]
 8003e98:	f7ff fdfa 	bl	8003a90 <proc_data_4>
	proc_data_2(out, imu->velocityXYZ[0]);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea2:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eaa:	6838      	ldr	r0, [r7, #0]
 8003eac:	f7ff fe32 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[1]);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb6:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003eba:	eeb0 0a67 	vmov.f32	s0, s15
 8003ebe:	6838      	ldr	r0, [r7, #0]
 8003ec0:	f7ff fe28 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[2]);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eca:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8003ece:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed2:	6838      	ldr	r0, [r7, #0]
 8003ed4:	f7ff fe1e 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->temp);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ede:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee6:	6838      	ldr	r0, [r7, #0]
 8003ee8:	f7ff fe14 	bl	8003b14 <proc_data_2>
	proc_data_1_uint8(out, imu->myGnssData.fixtype);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6838      	ldr	r0, [r7, #0]
 8003efa:	f7ff fe61 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_1_uint8(out, imu->myGnssData.numSV);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f04:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6838      	ldr	r0, [r7, #0]
 8003f0c:	f7ff fe58 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_4_uint8(out, imu->status);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6838      	ldr	r0, [r7, #0]
 8003f1e:	f7ff fe68 	bl	8003bf2 <proc_data_4_uint8>
	proc_data_2(out, data_PA_temp);
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <imu_data_conv_config+0x2dc>)
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2c:	6838      	ldr	r0, [r7, #0]
 8003f2e:	f7ff fdf1 	bl	8003b14 <proc_data_2>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20001516 	.word	0x20001516
 8003f40:	20001517 	.word	0x20001517
 8003f44:	20001518 	.word	0x20001518
 8003f48:	20001519 	.word	0x20001519
 8003f4c:	20001514 	.word	0x20001514
 8003f50:	20001524 	.word	0x20001524

08003f54 <imu_data_conv_onFly>:
	proc_data_2(out, 3);
	proc_data_4(out, 60);

}

void imu_data_conv_onFly(IMU *imu, IMU_DATA_TO_SEND_t *out) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	out->length = 0;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	memset(out->datas, 0, 1024);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f006 ff16 	bl	800ada0 <memset>
	proc_data_1_uint8(out, data_hour);
 8003f74:	4b60      	ldr	r3, [pc, #384]	; (80040f8 <imu_data_conv_onFly+0x1a4>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6838      	ldr	r0, [r7, #0]
 8003f7c:	f7ff fe20 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_min);
 8003f80:	4b5e      	ldr	r3, [pc, #376]	; (80040fc <imu_data_conv_onFly+0x1a8>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	4619      	mov	r1, r3
 8003f86:	6838      	ldr	r0, [r7, #0]
 8003f88:	f7ff fe1a 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_sec);
 8003f8c:	4b5c      	ldr	r3, [pc, #368]	; (8004100 <imu_data_conv_onFly+0x1ac>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	4619      	mov	r1, r3
 8003f92:	6838      	ldr	r0, [r7, #0]
 8003f94:	f7ff fe14 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_subSec);
 8003f98:	4b5a      	ldr	r3, [pc, #360]	; (8004104 <imu_data_conv_onFly+0x1b0>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff fe0e 	bl	8003bc0 <proc_data_1_uint8>
	proc_data_2_uint16(out, data_counter);
 8003fa4:	4b58      	ldr	r3, [pc, #352]	; (8004108 <imu_data_conv_onFly+0x1b4>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6838      	ldr	r0, [r7, #0]
 8003fac:	f7ff fde0 	bl	8003b70 <proc_data_2_uint16>
	proc_data_4(out, imu->quaternionWXYZ[0]);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003fba:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbe:	6838      	ldr	r0, [r7, #0]
 8003fc0:	f7ff fd66 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[1]);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003fce:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd2:	6838      	ldr	r0, [r7, #0]
 8003fd4:	f7ff fd5c 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[2]);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fde:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe6:	6838      	ldr	r0, [r7, #0]
 8003fe8:	f7ff fd52 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[3]);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffa:	6838      	ldr	r0, [r7, #0]
 8003ffc:	f7ff fd48 	bl	8003a90 <proc_data_4>
	proc_data_2(out, imu->rateOfTurnXYZ[0]);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004006:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800400a:	eeb0 0a67 	vmov.f32	s0, s15
 800400e:	6838      	ldr	r0, [r7, #0]
 8004010:	f7ff fd80 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[1]);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800401e:	eeb0 0a67 	vmov.f32	s0, s15
 8004022:	6838      	ldr	r0, [r7, #0]
 8004024:	f7ff fd76 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[2]);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004032:	eeb0 0a67 	vmov.f32	s0, s15
 8004036:	6838      	ldr	r0, [r7, #0]
 8004038:	f7ff fd6c 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[0]);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004042:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004046:	eeb0 0a67 	vmov.f32	s0, s15
 800404a:	6838      	ldr	r0, [r7, #0]
 800404c:	f7ff fd62 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[1]);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800405a:	eeb0 0a67 	vmov.f32	s0, s15
 800405e:	6838      	ldr	r0, [r7, #0]
 8004060:	f7ff fd58 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[2]);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800406e:	eeb0 0a67 	vmov.f32	s0, s15
 8004072:	6838      	ldr	r0, [r7, #0]
 8004074:	f7ff fd4e 	bl	8003b14 <proc_data_2>
	proc_data_4(out, imu->latitude);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8004082:	eeb0 0a67 	vmov.f32	s0, s15
 8004086:	6838      	ldr	r0, [r7, #0]
 8004088:	f7ff fd02 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->longitude);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004092:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8004096:	eeb0 0a67 	vmov.f32	s0, s15
 800409a:	6838      	ldr	r0, [r7, #0]
 800409c:	f7ff fcf8 	bl	8003a90 <proc_data_4>
	proc_data_4(out, imu->altitudeEllip);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a6:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80040aa:	eeb0 0a67 	vmov.f32	s0, s15
 80040ae:	6838      	ldr	r0, [r7, #0]
 80040b0:	f7ff fcee 	bl	8003a90 <proc_data_4>
	proc_data_2(out, imu->velocityXYZ[0]);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80040be:	eeb0 0a67 	vmov.f32	s0, s15
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f7ff fd26 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[1]);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ce:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 80040d2:	eeb0 0a67 	vmov.f32	s0, s15
 80040d6:	6838      	ldr	r0, [r7, #0]
 80040d8:	f7ff fd1c 	bl	8003b14 <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[2]);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80040e6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ea:	6838      	ldr	r0, [r7, #0]
 80040ec:	f7ff fd12 	bl	8003b14 <proc_data_2>

}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20001516 	.word	0x20001516
 80040fc:	20001517 	.word	0x20001517
 8004100:	20001518 	.word	0x20001518
 8004104:	20001519 	.word	0x20001519
 8004108:	20001514 	.word	0x20001514
 800410c:	00000000 	.word	0x00000000

08004110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004114:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8004118:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800411a:	f001 f9d5 	bl	80054c8 <HAL_Init>

  /* USER CODE BEGIN Init */

	HAL_UARTEx_ReceiveToIdle_DMA(&EXT_uart, EXT_buffer, EXT_BUFFER_SIZE);
 800411e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004122:	4947      	ldr	r1, [pc, #284]	; (8004240 <main+0x130>)
 8004124:	4847      	ldr	r0, [pc, #284]	; (8004244 <main+0x134>)
 8004126:	f004 fe23 	bl	8008d70 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&EXT_DMA_RX, DMA_IT_HT);
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <main+0x138>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b45      	ldr	r3, [pc, #276]	; (8004248 <main+0x138>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0208 	bic.w	r2, r2, #8
 8004138:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800413a:	f000 fc89 	bl	8004a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800413e:	f7ff fb7d 	bl	800383c <MX_GPIO_Init>
  MX_DMA_Init();
 8004142:	f7ff fb25 	bl	8003790 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004146:	f000 ffe9 	bl	800511c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800414a:	f001 f811 	bl	8005170 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 800414e:	f000 fd75 	bl	8004c3c <MX_SPI4_Init>
  MX_RTC_Init();
 8004152:	f000 fcef 	bl	8004b34 <MX_RTC_Init>
  MX_ADC3_Init();
 8004156:	f7ff fa51 	bl	80035fc <MX_ADC3_Init>
  MX_ADC1_Init();
 800415a:	f7ff f9fd 	bl	8003558 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	/*Lora init==============================================================*/
	myLoRa = newLoRa();
 800415e:	4c3b      	ldr	r4, [pc, #236]	; (800424c <main+0x13c>)
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fe20 	bl	8002daa <newLoRa>
 800416a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800416e:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8004172:	461d      	mov	r5, r3
 8004174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004180:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004184:	e884 0003 	stmia.w	r4, {r0, r1}

	myLoRa.CS_port = SPI4_CS_GPIO_Port;
 8004188:	4b30      	ldr	r3, [pc, #192]	; (800424c <main+0x13c>)
 800418a:	4a31      	ldr	r2, [pc, #196]	; (8004250 <main+0x140>)
 800418c:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = SPI4_CS_Pin;
 800418e:	4b2f      	ldr	r3, [pc, #188]	; (800424c <main+0x13c>)
 8004190:	2210      	movs	r2, #16
 8004192:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = LoRa_RST_GPIO_Port;
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <main+0x13c>)
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <main+0x144>)
 8004198:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = LoRa_RST_Pin;
 800419a:	4b2c      	ldr	r3, [pc, #176]	; (800424c <main+0x13c>)
 800419c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041a0:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <main+0x13c>)
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <main+0x148>)
 80041a6:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <main+0x13c>)
 80041aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ae:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi4;
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <main+0x13c>)
 80041b2:	4a2a      	ldr	r2, [pc, #168]	; (800425c <main+0x14c>)
 80041b4:	619a      	str	r2, [r3, #24]
	myLoRa.LoRa_modem = LORA_MODEM;
 80041b6:	4b25      	ldr	r3, [pc, #148]	; (800424c <main+0x13c>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	771a      	strb	r2, [r3, #28]
	myLoRa.frequency = 433;             	// default = 433 		MHz
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <main+0x13c>)
 80041be:	f240 12b1 	movw	r2, #433	; 0x1b1
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24
	myLoRa.paselect = RFO;
 80041c4:	4b21      	ldr	r3, [pc, #132]	; (800424c <main+0x13c>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	myLoRa.maxpower = 7;                    // 0~7 Pmax = 10.8+0.6*maxpower
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <main+0x13c>)
 80041ce:	2207      	movs	r2, #7
 80041d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	myLoRa.outputpower = 10;                // 0~15, Pout(RFO) = Pmax-(15-outputpower), Pout(PA_BOOST) = = 17-(15-outputpower)
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <main+0x13c>)
 80041d6:	220a      	movs	r2, #10
 80041d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	myLoRa.PaDac = 0x84;                    // 0x84:max power = 17dBm   0x87:max power = 20dBm in PA_BOOST pin//-4~15
 80041dc:	4b1b      	ldr	r3, [pc, #108]	; (800424c <main+0x13c>)
 80041de:	2284      	movs	r2, #132	; 0x84
 80041e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	myLoRa.overCurrentProtection = 100;     // default = 100 		mA
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <main+0x13c>)
 80041e6:	2264      	movs	r2, #100	; 0x64
 80041e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	myLoRa.bandWidth = BW_125KHz;       	// default = BW_125	KHz
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <main+0x13c>)
 80041ee:	2207      	movs	r2, #7
 80041f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	myLoRa.crcRate = CR_4_5;          		// default = CR_4_5
 80041f4:	4b15      	ldr	r3, [pc, #84]	; (800424c <main+0x13c>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.implicit_on = EXPLICIT;          // default = EXPLICIT
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <main+0x13c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	myLoRa.spredingFactor = SF_7;           // default = SF_7
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <main+0x13c>)
 8004206:	2207      	movs	r2, #7
 8004208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	myLoRa.CRCon = 0;
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <main+0x13c>)
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	myLoRa.preamble = 10;              		// default = 8;
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <main+0x13c>)
 8004216:	220a      	movs	r2, #10
 8004218:	859a      	strh	r2, [r3, #44]	; 0x2c
	myLoRa.TCXOon = 0;
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <main+0x13c>)
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	uint16_t LoRa_status = LoRa_init(&myLoRa);
 8004222:	480a      	ldr	r0, [pc, #40]	; (800424c <main+0x13c>)
 8004224:	f7ff f8b5 	bl	8003392 <LoRa_init>
 8004228:	4603      	mov	r3, r0
 800422a:	f8a7 34e0 	strh.w	r3, [r7, #1248]	; 0x4e0
	if (LoRa_status == LORA_OK) {            //initialize LoRa configuration
 800422e:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	; 0x4e0
 8004232:	2bc8      	cmp	r3, #200	; 0xc8
 8004234:	d116      	bne.n	8004264 <main+0x154>
		printf("LoRa is running... \n");
 8004236:	480a      	ldr	r0, [pc, #40]	; (8004260 <main+0x150>)
 8004238:	f006 fcd2 	bl	800abe0 <puts>
 800423c:	e018      	b.n	8004270 <main+0x160>
 800423e:	bf00      	nop
 8004240:	20001528 	.word	0x20001528
 8004244:	20001a74 	.word	0x20001a74
 8004248:	20001afc 	.word	0x20001afc
 800424c:	200014dc 	.word	0x200014dc
 8004250:	40021000 	.word	0x40021000
 8004254:	40020c00 	.word	0x40020c00
 8004258:	40021400 	.word	0x40021400
 800425c:	20001958 	.word	0x20001958
 8004260:	0800e2f8 	.word	0x0800e2f8
	} else {
		printf("LoRa failed :( \n Error code: %d \n", LoRa_status);
 8004264:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	; 0x4e0
 8004268:	4619      	mov	r1, r3
 800426a:	4882      	ldr	r0, [pc, #520]	; (8004474 <main+0x364>)
 800426c:	f006 fc52 	bl	800ab14 <iprintf>
	}
//	LoRa_setLowDaraRateOptimization(&myLoRa, 1);
	LoRa_startReceiving(&myLoRa);
 8004270:	4881      	ldr	r0, [pc, #516]	; (8004478 <main+0x368>)
 8004272:	f7ff f826 	bl	80032c2 <LoRa_startReceiving>
	uint8_t received_data[128];
	uint8_t packet_size = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
	/*Lora init end===========================================================*/

	IMU_Init();
 800427c:	f7fc fee2 	bl	8001044 <IMU_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t timer_fly = HAL_GetTick();
 8004280:	f001 f988 	bl	8005594 <HAL_GetTick>
 8004284:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
	uint32_t timer_config = HAL_GetTick();
 8004288:	f001 f984 	bl	8005594 <HAL_GetTick>
 800428c:	f8c7 04e8 	str.w	r0, [r7, #1256]	; 0x4e8
	uint32_t loopRunTime = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
	bool GPS_no_calied = true;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 34e3 	strb.w	r3, [r7, #1251]	; 0x4e3

	IMU_DATA_TO_SEND_t data2Lora;

	data_counter = 0;
 800429c:	4b77      	ldr	r3, [pc, #476]	; (800447c <main+0x36c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	801a      	strh	r2, [r3, #0]

	printf("init finish!!!!!!!!!!!!\n");
 80042a2:	4877      	ldr	r0, [pc, #476]	; (8004480 <main+0x370>)
 80042a4:	f006 fc9c 	bl	800abe0 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//IMU data gathering
		IMU_process_data();
 80042a8:	f7fc ff3e 	bl	8001128 <IMU_process_data>
		IMU_State_mechine();
 80042ac:	f7fc ff76 	bl	800119c <IMU_State_mechine>

		/* Get the RTC current Time */
		HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80042b0:	2200      	movs	r2, #0
 80042b2:	4974      	ldr	r1, [pc, #464]	; (8004484 <main+0x374>)
 80042b4:	4874      	ldr	r0, [pc, #464]	; (8004488 <main+0x378>)
 80042b6:	f003 fb47 	bl	8007948 <HAL_RTC_GetTime>
		/* Get the RTC current Date */
		HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 80042ba:	2200      	movs	r2, #0
 80042bc:	4973      	ldr	r1, [pc, #460]	; (800448c <main+0x37c>)
 80042be:	4872      	ldr	r0, [pc, #456]	; (8004488 <main+0x378>)
 80042c0:	f003 fc24 	bl	8007b0c <HAL_RTC_GetDate>

		//Calibrate date ,only run once
		if (	(imu.myGnssData.numSV >= 4)
 80042c4:	4b72      	ldr	r3, [pc, #456]	; (8004490 <main+0x380>)
 80042c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ca:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	f240 80a3 	bls.w	800441a <main+0x30a>
				&& ((GetDate.Year + 2000) != imu.myGnssData.year)
 80042d4:	4b6d      	ldr	r3, [pc, #436]	; (800448c <main+0x37c>)
 80042d6:	78db      	ldrb	r3, [r3, #3]
 80042d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80042dc:	4a6c      	ldr	r2, [pc, #432]	; (8004490 <main+0x380>)
 80042de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e2:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f000 8097 	beq.w	800441a <main+0x30a>
				&& (GPS_no_calied)) {
 80042ec:	f897 34e3 	ldrb.w	r3, [r7, #1251]	; 0x4e3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8092 	beq.w	800441a <main+0x30a>
			printf("Reset RTC timer\n");
 80042f6:	4867      	ldr	r0, [pc, #412]	; (8004494 <main+0x384>)
 80042f8:	f006 fc72 	bl	800abe0 <puts>
			RTC_TimeTypeDef IMU_time;
			RTC_DateTypeDef IMU_date;

			IMU_date.Year = imu.myGnssData.year - 2000;
 80042fc:	4b64      	ldr	r3, [pc, #400]	; (8004490 <main+0x380>)
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3330      	adds	r3, #48	; 0x30
 800430a:	b2da      	uxtb	r2, r3
 800430c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004310:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8004314:	70da      	strb	r2, [r3, #3]
			IMU_date.Month = imu.myGnssData.month;
 8004316:	4b5e      	ldr	r3, [pc, #376]	; (8004490 <main+0x380>)
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8004320:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004324:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8004328:	705a      	strb	r2, [r3, #1]
			IMU_date.Date = imu.myGnssData.day;
 800432a:	4b59      	ldr	r3, [pc, #356]	; (8004490 <main+0x380>)
 800432c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004330:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8004334:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004338:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800433c:	709a      	strb	r2, [r3, #2]
			IMU_time.Hours = imu.myGnssData.hour;
 800433e:	4b54      	ldr	r3, [pc, #336]	; (8004490 <main+0x380>)
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8004348:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800434c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8004350:	701a      	strb	r2, [r3, #0]
			IMU_time.Minutes = imu.myGnssData.minute;
 8004352:	4b4f      	ldr	r3, [pc, #316]	; (8004490 <main+0x380>)
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 800435c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004360:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8004364:	705a      	strb	r2, [r3, #1]
			IMU_time.Seconds = imu.myGnssData.second;
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <main+0x380>)
 8004368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8004370:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004374:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8004378:	709a      	strb	r2, [r3, #2]

			IMU_date.Year = imu.myGnssData.year - 2000;
 800437a:	4b45      	ldr	r3, [pc, #276]	; (8004490 <main+0x380>)
 800437c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004380:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8004384:	b2db      	uxtb	r3, r3
 8004386:	3330      	adds	r3, #48	; 0x30
 8004388:	b2da      	uxtb	r2, r3
 800438a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800438e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8004392:	70da      	strb	r2, [r3, #3]
			IMU_date.Month = imu.myGnssData.month;
 8004394:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <main+0x380>)
 8004396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800439e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80043a2:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80043a6:	705a      	strb	r2, [r3, #1]
			IMU_date.Date = imu.myGnssData.day;
 80043a8:	4b39      	ldr	r3, [pc, #228]	; (8004490 <main+0x380>)
 80043aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ae:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 80043b2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80043b6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80043ba:	709a      	strb	r2, [r3, #2]
			IMU_time.Hours = imu.myGnssData.hour;
 80043bc:	4b34      	ldr	r3, [pc, #208]	; (8004490 <main+0x380>)
 80043be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c2:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 80043c6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80043ca:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80043ce:	701a      	strb	r2, [r3, #0]
			IMU_time.Minutes = imu.myGnssData.minute;
 80043d0:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <main+0x380>)
 80043d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d6:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 80043da:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80043de:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80043e2:	705a      	strb	r2, [r3, #1]
			IMU_time.Seconds = imu.myGnssData.second;
 80043e4:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <main+0x380>)
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 80043ee:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80043f2:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80043f6:	709a      	strb	r2, [r3, #2]

			HAL_RTC_SetTime(&hrtc, &IMU_time, RTC_FORMAT_BIN);
 80043f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043fc:	2200      	movs	r2, #0
 80043fe:	4619      	mov	r1, r3
 8004400:	4821      	ldr	r0, [pc, #132]	; (8004488 <main+0x378>)
 8004402:	f003 fa07 	bl	8007814 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &IMU_date, RTC_FORMAT_BIN);
 8004406:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800440a:	2200      	movs	r2, #0
 800440c:	4619      	mov	r1, r3
 800440e:	481e      	ldr	r0, [pc, #120]	; (8004488 <main+0x378>)
 8004410:	f003 faf8 	bl	8007a04 <HAL_RTC_SetDate>

			GPS_no_calied = false;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 34e3 	strb.w	r3, [r7, #1251]	; 0x4e3
		}

		/*check fly mode switch*/
		modeSwitch = HAL_GPIO_ReadPin(Mode_Switch_GPIO_Port,
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	481e      	ldr	r0, [pc, #120]	; (8004498 <main+0x388>)
 800441e:	f002 fafb 	bl	8006a18 <HAL_GPIO_ReadPin>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <main+0x38c>)
 8004428:	701a      	strb	r2, [r3, #0]
		Mode_Switch_Pin);
		if (modeSwitch == GPIO_PIN_RESET && prevModeSwitch == GPIO_PIN_SET
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <main+0x38c>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d147      	bne.n	80044c2 <main+0x3b2>
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <main+0x390>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d143      	bne.n	80044c2 <main+0x3b2>
				&& HAL_GetTick() > flyModeDebounce) {
 800443a:	f001 f8ab 	bl	8005594 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <main+0x394>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d93c      	bls.n	80044c2 <main+0x3b2>
			flyModeDebounce = HAL_GetTick() + 1000;
 8004448:	f001 f8a4 	bl	8005594 <HAL_GetTick>
 800444c:	4603      	mov	r3, r0
 800444e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004452:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <main+0x394>)
 8004454:	6013      	str	r3, [r2, #0]
			if (curFlyMode == config) {
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <main+0x398>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d128      	bne.n	80044b0 <main+0x3a0>
				curFlyMode = onFly;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <main+0x398>)
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
				data_counter = 0;
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <main+0x36c>)
 8004466:	2200      	movs	r2, #0
 8004468:	801a      	strh	r2, [r3, #0]
				printf("fly mode now --> on fly\n");
 800446a:	4810      	ldr	r0, [pc, #64]	; (80044ac <main+0x39c>)
 800446c:	f006 fbb8 	bl	800abe0 <puts>
 8004470:	e027      	b.n	80044c2 <main+0x3b2>
 8004472:	bf00      	nop
 8004474:	0800e30c 	.word	0x0800e30c
 8004478:	200014dc 	.word	0x200014dc
 800447c:	20001514 	.word	0x20001514
 8004480:	0800e330 	.word	0x0800e330
 8004484:	200014c8 	.word	0x200014c8
 8004488:	20001938 	.word	0x20001938
 800448c:	200014c4 	.word	0x200014c4
 8004490:	2000032c 	.word	0x2000032c
 8004494:	0800e348 	.word	0x0800e348
 8004498:	40020000 	.word	0x40020000
 800449c:	2000192c 	.word	0x2000192c
 80044a0:	2000192d 	.word	0x2000192d
 80044a4:	20001930 	.word	0x20001930
 80044a8:	2000192e 	.word	0x2000192e
 80044ac:	0800e358 	.word	0x0800e358
			} else {
				curFlyMode = config;
 80044b0:	4b6f      	ldr	r3, [pc, #444]	; (8004670 <main+0x560>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
				data_counter = 0;
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <main+0x564>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	801a      	strh	r2, [r3, #0]
				printf("fly mode now --> config\n");
 80044bc:	486e      	ldr	r0, [pc, #440]	; (8004678 <main+0x568>)
 80044be:	f006 fb8f 	bl	800abe0 <puts>
			}
		}
		prevModeSwitch = modeSwitch;
 80044c2:	4b6e      	ldr	r3, [pc, #440]	; (800467c <main+0x56c>)
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	4b6e      	ldr	r3, [pc, #440]	; (8004680 <main+0x570>)
 80044c8:	701a      	strb	r2, [r3, #0]



		//packing data from IMU to send via Lora
		if (curFlyMode == config) {
 80044ca:	4b69      	ldr	r3, [pc, #420]	; (8004670 <main+0x560>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 81b0 	bne.w	8004834 <main+0x724>
			if (isIdle==false && HAL_GetTick()-timer_config>config_delay) {//current state = normal
 80044d4:	4b6b      	ldr	r3, [pc, #428]	; (8004684 <main+0x574>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f083 0301 	eor.w	r3, r3, #1
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 815e 	beq.w	80047a0 <main+0x690>
 80044e4:	f001 f856 	bl	8005594 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4a65      	ldr	r2, [pc, #404]	; (8004688 <main+0x578>)
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	4293      	cmp	r3, r2
 80044f6:	f240 8153 	bls.w	80047a0 <main+0x690>
				data_hour = GetTime.Hours;
 80044fa:	4b64      	ldr	r3, [pc, #400]	; (800468c <main+0x57c>)
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	4b64      	ldr	r3, [pc, #400]	; (8004690 <main+0x580>)
 8004500:	701a      	strb	r2, [r3, #0]
				data_min = GetTime.Minutes;
 8004502:	4b62      	ldr	r3, [pc, #392]	; (800468c <main+0x57c>)
 8004504:	785a      	ldrb	r2, [r3, #1]
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <main+0x584>)
 8004508:	701a      	strb	r2, [r3, #0]
				data_sec = GetTime.Seconds;
 800450a:	4b60      	ldr	r3, [pc, #384]	; (800468c <main+0x57c>)
 800450c:	789a      	ldrb	r2, [r3, #2]
 800450e:	4b62      	ldr	r3, [pc, #392]	; (8004698 <main+0x588>)
 8004510:	701a      	strb	r2, [r3, #0]
				data_subSec = ((float) (255 - GetTime.SubSeconds)) * 1.
 8004512:	4b5e      	ldr	r3, [pc, #376]	; (800468c <main+0x57c>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	ee17 0a90 	vmov	r0, s15
 8004526:	f7fc f81f 	bl	8000568 <__aeabi_f2d>
 800452a:	4604      	mov	r4, r0
 800452c:	460d      	mov	r5, r1
						/ ((float) (GetTime.SecondFraction + 1)) * 100;
 800452e:	4b57      	ldr	r3, [pc, #348]	; (800468c <main+0x57c>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	3301      	adds	r3, #1
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453c:	ee17 0a90 	vmov	r0, s15
 8004540:	f7fc f812 	bl	8000568 <__aeabi_f2d>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4620      	mov	r0, r4
 800454a:	4629      	mov	r1, r5
 800454c:	f7fc f98e 	bl	800086c <__aeabi_ddiv>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <main+0x58c>)
 800455e:	f7fc f85b 	bl	8000618 <__aeabi_dmul>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
				data_subSec = ((float) (255 - GetTime.SubSeconds)) * 1.
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	f7fc fb2d 	bl	8000bc8 <__aeabi_d2uiz>
 800456e:	4603      	mov	r3, r0
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <main+0x590>)
 8004574:	701a      	strb	r2, [r3, #0]

				/*temp sensor*/
				HAL_ADC_Start(&hadc1);
 8004576:	484b      	ldr	r0, [pc, #300]	; (80046a4 <main+0x594>)
 8004578:	f001 f880 	bl	800567c <HAL_ADC_Start>
				ADC_read = HAL_ADC_GetValue(&hadc1);
 800457c:	4849      	ldr	r0, [pc, #292]	; (80046a4 <main+0x594>)
 800457e:	f001 f94f 	bl	8005820 <HAL_ADC_GetValue>
 8004582:	4603      	mov	r3, r0
 8004584:	4a48      	ldr	r2, [pc, #288]	; (80046a8 <main+0x598>)
 8004586:	6013      	str	r3, [r2, #0]
				Vout = ADC_read/(pow(2,ADC_resolution)-1)*Vin_temp;
 8004588:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <main+0x598>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb ffc9 	bl	8000524 <__aeabi_ui2d>
 8004592:	4604      	mov	r4, r0
 8004594:	460d      	mov	r5, r1
 8004596:	4b45      	ldr	r3, [pc, #276]	; (80046ac <main+0x59c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fb ffd2 	bl	8000544 <__aeabi_i2d>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	ec43 2b11 	vmov	d1, r2, r3
 80045a8:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8004668 <main+0x558>
 80045ac:	f008 fab2 	bl	800cb14 <pow>
 80045b0:	ec51 0b10 	vmov	r0, r1, d0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <main+0x5a0>)
 80045ba:	f7fb fe75 	bl	80002a8 <__aeabi_dsub>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4620      	mov	r0, r4
 80045c4:	4629      	mov	r1, r5
 80045c6:	f7fc f951 	bl	800086c <__aeabi_ddiv>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4614      	mov	r4, r2
 80045d0:	461d      	mov	r5, r3
 80045d2:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <main+0x5a4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb ffb4 	bl	8000544 <__aeabi_i2d>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fc f818 	bl	8000618 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f7fc fb0a 	bl	8000c08 <__aeabi_d2f>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <main+0x5a8>)
 80045f8:	6013      	str	r3, [r2, #0]
				data_PA_temp = (Vout-Vbias)/OutV_Temp_ratio;//temp:in Celsius
 80045fa:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <main+0x5a8>)
 80045fc:	ed93 7a00 	vldr	s14, [r3]
 8004600:	4b2e      	ldr	r3, [pc, #184]	; (80046bc <main+0x5ac>)
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	ee77 6a67 	vsub.f32	s13, s14, s15
 800460a:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <main+0x5b0>)
 800460c:	ed93 7a00 	vldr	s14, [r3]
 8004610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <main+0x5b4>)
 8004616:	edc3 7a00 	vstr	s15, [r3]
		//		printf("temp: %f\n", data_PA_temp);

				imu_data_conv_config(&imu, &data2Lora);
 800461a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800461e:	4619      	mov	r1, r3
 8004620:	4829      	ldr	r0, [pc, #164]	; (80046c8 <main+0x5b8>)
 8004622:	f7ff fb27 	bl	8003c74 <imu_data_conv_config>
	//				imu_data_conv_config_test(&imu, &data2Lora);

				//LoRa_transmit()
				HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_RESET);
 8004626:	2200      	movs	r2, #0
 8004628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800462c:	4827      	ldr	r0, [pc, #156]	; (80046cc <main+0x5bc>)
 800462e:	f002 fa0b 	bl	8006a48 <HAL_GPIO_WritePin>
				uint8_t err = LoRa_transmit(&myLoRa, data2Lora.datas, data2Lora.length, TRANSMIT_TIMEOUT);
 8004632:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004636:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800463a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800463e:	b2da      	uxtb	r2, r3
 8004640:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004644:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004648:	4821      	ldr	r0, [pc, #132]	; (80046d0 <main+0x5c0>)
 800464a:	f7fe fde2 	bl	8003212 <LoRa_transmit>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 34dd 	strb.w	r3, [r7, #1245]	; 0x4dd
				if (err == 0) {
 8004654:	f897 34dd 	ldrb.w	r3, [r7, #1245]	; 0x4dd
 8004658:	2b00      	cmp	r3, #0
 800465a:	d13d      	bne.n	80046d8 <main+0x5c8>
					printf("LoRa_transmit timed out\n");
 800465c:	481d      	ldr	r0, [pc, #116]	; (80046d4 <main+0x5c4>)
 800465e:	f006 fabf 	bl	800abe0 <puts>
 8004662:	e03c      	b.n	80046de <main+0x5ce>
 8004664:	f3af 8000 	nop.w
 8004668:	00000000 	.word	0x00000000
 800466c:	40000000 	.word	0x40000000
 8004670:	2000192e 	.word	0x2000192e
 8004674:	20001514 	.word	0x20001514
 8004678:	0800e370 	.word	0x0800e370
 800467c:	2000192c 	.word	0x2000192c
 8004680:	2000192d 	.word	0x2000192d
 8004684:	20001934 	.word	0x20001934
 8004688:	20000124 	.word	0x20000124
 800468c:	200014c8 	.word	0x200014c8
 8004690:	20001516 	.word	0x20001516
 8004694:	20001517 	.word	0x20001517
 8004698:	20001518 	.word	0x20001518
 800469c:	40590000 	.word	0x40590000
 80046a0:	20001519 	.word	0x20001519
 80046a4:	20001434 	.word	0x20001434
 80046a8:	2000151c 	.word	0x2000151c
 80046ac:	20000110 	.word	0x20000110
 80046b0:	3ff00000 	.word	0x3ff00000
 80046b4:	20000114 	.word	0x20000114
 80046b8:	20001520 	.word	0x20001520
 80046bc:	20000118 	.word	0x20000118
 80046c0:	2000011c 	.word	0x2000011c
 80046c4:	20001524 	.word	0x20001524
 80046c8:	2000032c 	.word	0x2000032c
 80046cc:	40020c00 	.word	0x40020c00
 80046d0:	200014dc 	.word	0x200014dc
 80046d4:	0800e388 	.word	0x0800e388
				} else {
					printf("LoRa_transmit seccessed\n");
 80046d8:	4890      	ldr	r0, [pc, #576]	; (800491c <main+0x80c>)
 80046da:	f006 fa81 	bl	800abe0 <puts>
	//				HAL_Delay(1);
				}
				HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_SET);
 80046de:	2201      	movs	r2, #1
 80046e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046e4:	488e      	ldr	r0, [pc, #568]	; (8004920 <main+0x810>)
 80046e6:	f002 f9af 	bl	8006a48 <HAL_GPIO_WritePin>
				loopRunTime = HAL_GetTick() - loopRunTime;
 80046ea:	f000 ff53 	bl	8005594 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
				printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 80046fa:	4b8a      	ldr	r3, [pc, #552]	; (8004924 <main+0x814>)
 80046fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4618      	mov	r0, r3
 8004704:	f7fb ff30 	bl	8000568 <__aeabi_f2d>
 8004708:	e9c7 0100 	strd	r0, r1, [r7]
						imu.quaternionWXYZ[1], imu.quaternionWXYZ[2],
 800470c:	4b85      	ldr	r3, [pc, #532]	; (8004924 <main+0x814>)
 800470e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb ff27 	bl	8000568 <__aeabi_f2d>
 800471a:	4604      	mov	r4, r0
 800471c:	460d      	mov	r5, r1
						imu.quaternionWXYZ[1], imu.quaternionWXYZ[2],
 800471e:	4b81      	ldr	r3, [pc, #516]	; (8004924 <main+0x814>)
 8004720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 8004726:	4618      	mov	r0, r3
 8004728:	f7fb ff1e 	bl	8000568 <__aeabi_f2d>
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
						imu.quaternionWXYZ[3], data_PA_temp, data2Lora.length,
 8004730:	4b7c      	ldr	r3, [pc, #496]	; (8004924 <main+0x814>)
 8004732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb ff15 	bl	8000568 <__aeabi_f2d>
 800473e:	4682      	mov	sl, r0
 8004740:	468b      	mov	fp, r1
 8004742:	4b79      	ldr	r3, [pc, #484]	; (8004928 <main+0x818>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fb ff0e 	bl	8000568 <__aeabi_f2d>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8004754:	f5a1 6193 	sub.w	r1, r1, #1176	; 0x498
 8004758:	f8d1 1400 	ldr.w	r1, [r1, #1024]	; 0x400
 800475c:	4873      	ldr	r0, [pc, #460]	; (800492c <main+0x81c>)
 800475e:	8800      	ldrh	r0, [r0, #0]
 8004760:	900a      	str	r0, [sp, #40]	; 0x28
 8004762:	f8d7 04e4 	ldr.w	r0, [r7, #1252]	; 0x4e4
 8004766:	9009      	str	r0, [sp, #36]	; 0x24
 8004768:	9108      	str	r1, [sp, #32]
 800476a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800476e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004772:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004776:	e9cd 4500 	strd	r4, r5, [sp]
 800477a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477e:	486c      	ldr	r0, [pc, #432]	; (8004930 <main+0x820>)
 8004780:	f006 f9c8 	bl	800ab14 <iprintf>
						loopRunTime, data_counter);
				loopRunTime = HAL_GetTick();
 8004784:	f000 ff06 	bl	8005594 <HAL_GetTick>
 8004788:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
				timer_config = HAL_GetTick();
 800478c:	f000 ff02 	bl	8005594 <HAL_GetTick>
 8004790:	f8c7 04e8 	str.w	r0, [r7, #1256]	; 0x4e8
				data_counter += 1;
 8004794:	4b65      	ldr	r3, [pc, #404]	; (800492c <main+0x81c>)
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	4b63      	ldr	r3, [pc, #396]	; (800492c <main+0x81c>)
 800479e:	801a      	strh	r2, [r3, #0]
			}

			//LoRa_receive()
			HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_SET); //low frequency port switch, RESET for transmit, SET for receive
 80047a0:	2201      	movs	r2, #1
 80047a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047a6:	485e      	ldr	r0, [pc, #376]	; (8004920 <main+0x810>)
 80047a8:	f002 f94e 	bl	8006a48 <HAL_GPIO_WritePin>

			memset(received_data, 0, sizeof(received_data)/sizeof(received_data[0]));
 80047ac:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f006 faf3 	bl	800ada0 <memset>
			packet_size = LoRa_receive(&myLoRa, received_data, sizeof(received_data)/sizeof(received_data[0]));
 80047ba:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	4619      	mov	r1, r3
 80047c2:	485c      	ldr	r0, [pc, #368]	; (8004934 <main+0x824>)
 80047c4:	f7fe fd89 	bl	80032da <LoRa_receive>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
	//		packet_size = LoRa_receive_single(&myLoRa, received_data, sizeof(received_data)/sizeof(received_data[0]));

			/*Process data*/
			if (packet_size != 0) {
 80047ce:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f43f ad68 	beq.w	80042a8 <main+0x198>
				printf("LoRa get: %s\n", received_data);
 80047d8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80047dc:	4619      	mov	r1, r3
 80047de:	4856      	ldr	r0, [pc, #344]	; (8004938 <main+0x828>)
 80047e0:	f006 f998 	bl	800ab14 <iprintf>
				if(received_data[0] == '1'){ //reset frame
 80047e4:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 80047e8:	2b31      	cmp	r3, #49	; 0x31
 80047ea:	d103      	bne.n	80047f4 <main+0x6e4>
					xsens_mti_reset_orientation(&imu.imu_interface, XSENS_ORIENTATION_ALIGNMENT_RESET);
 80047ec:	2104      	movs	r1, #4
 80047ee:	4853      	ldr	r0, [pc, #332]	; (800493c <main+0x82c>)
 80047f0:	f7fe f8a8 	bl	8002944 <xsens_mti_reset_orientation>
				}
				if(received_data[0] == '2'){ //command Idle state
 80047f4:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 80047f8:	2b32      	cmp	r3, #50	; 0x32
 80047fa:	d102      	bne.n	8004802 <main+0x6f2>
					isIdle=true;
 80047fc:	4b50      	ldr	r3, [pc, #320]	; (8004940 <main+0x830>)
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
				}
				if(received_data[0] == '3'){ //return Normal state
 8004802:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 8004806:	2b33      	cmp	r3, #51	; 0x33
 8004808:	d105      	bne.n	8004816 <main+0x706>
					isIdle=false;
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <main+0x830>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
					data_counter = 0;
 8004810:	4b46      	ldr	r3, [pc, #280]	; (800492c <main+0x81c>)
 8004812:	2200      	movs	r2, #0
 8004814:	801a      	strh	r2, [r3, #0]
				}
				if(received_data[0] == '4'){ //switch to flight mode
 8004816:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 800481a:	2b34      	cmp	r3, #52	; 0x34
 800481c:	f47f ad44 	bne.w	80042a8 <main+0x198>
					curFlyMode = onFly;
 8004820:	4b48      	ldr	r3, [pc, #288]	; (8004944 <main+0x834>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
					data_counter = 0;
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <main+0x81c>)
 8004828:	2200      	movs	r2, #0
 800482a:	801a      	strh	r2, [r3, #0]
					printf("fly mode now --> on fly\n");
 800482c:	4846      	ldr	r0, [pc, #280]	; (8004948 <main+0x838>)
 800482e:	f006 f9d7 	bl	800abe0 <puts>
 8004832:	e539      	b.n	80042a8 <main+0x198>
				}
			}


		} else if (curFlyMode == onFly && HAL_GetTick()-timer_fly>fly_delay) {
 8004834:	4b43      	ldr	r3, [pc, #268]	; (8004944 <main+0x834>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	f47f ad35 	bne.w	80042a8 <main+0x198>
 800483e:	f000 fea9 	bl	8005594 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	4a40      	ldr	r2, [pc, #256]	; (800494c <main+0x83c>)
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	4293      	cmp	r3, r2
 8004850:	f67f ad2a 	bls.w	80042a8 <main+0x198>
			data_hour = GetTime.Hours;
 8004854:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <main+0x840>)
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <main+0x844>)
 800485a:	701a      	strb	r2, [r3, #0]
			data_min = GetTime.Minutes;
 800485c:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <main+0x840>)
 800485e:	785a      	ldrb	r2, [r3, #1]
 8004860:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <main+0x848>)
 8004862:	701a      	strb	r2, [r3, #0]
			data_sec = GetTime.Seconds;
 8004864:	4b3a      	ldr	r3, [pc, #232]	; (8004950 <main+0x840>)
 8004866:	789a      	ldrb	r2, [r3, #2]
 8004868:	4b3c      	ldr	r3, [pc, #240]	; (800495c <main+0x84c>)
 800486a:	701a      	strb	r2, [r3, #0]
			data_subSec = ((float) (255 - GetTime.SubSeconds)) * 1.
 800486c:	4b38      	ldr	r3, [pc, #224]	; (8004950 <main+0x840>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487c:	ee17 0a90 	vmov	r0, s15
 8004880:	f7fb fe72 	bl	8000568 <__aeabi_f2d>
 8004884:	4604      	mov	r4, r0
 8004886:	460d      	mov	r5, r1
					/ ((float) (GetTime.SecondFraction + 1)) * 100;
 8004888:	4b31      	ldr	r3, [pc, #196]	; (8004950 <main+0x840>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	3301      	adds	r3, #1
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	ee17 0a90 	vmov	r0, s15
 800489a:	f7fb fe65 	bl	8000568 <__aeabi_f2d>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4620      	mov	r0, r4
 80048a4:	4629      	mov	r1, r5
 80048a6:	f7fb ffe1 	bl	800086c <__aeabi_ddiv>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <main+0x850>)
 80048b8:	f7fb feae 	bl	8000618 <__aeabi_dmul>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
			data_subSec = ((float) (255 - GetTime.SubSeconds)) * 1.
 80048c0:	4610      	mov	r0, r2
 80048c2:	4619      	mov	r1, r3
 80048c4:	f7fc f980 	bl	8000bc8 <__aeabi_d2uiz>
 80048c8:	4603      	mov	r3, r0
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <main+0x854>)
 80048ce:	701a      	strb	r2, [r3, #0]

			imu_data_conv_onFly(&imu, &data2Lora);
 80048d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048d4:	4619      	mov	r1, r3
 80048d6:	4813      	ldr	r0, [pc, #76]	; (8004924 <main+0x814>)
 80048d8:	f7ff fb3c 	bl	8003f54 <imu_data_conv_onFly>
			//LoRa_transmit()
			HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_RESET);
 80048dc:	2200      	movs	r2, #0
 80048de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048e2:	480f      	ldr	r0, [pc, #60]	; (8004920 <main+0x810>)
 80048e4:	f002 f8b0 	bl	8006a48 <HAL_GPIO_WritePin>
			uint8_t err = LoRa_transmit(&myLoRa, data2Lora.datas, data2Lora.length, TRANSMIT_TIMEOUT);
 80048e8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80048ec:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80048f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80048fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80048fe:	480d      	ldr	r0, [pc, #52]	; (8004934 <main+0x824>)
 8004900:	f7fe fc87 	bl	8003212 <LoRa_transmit>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 34de 	strb.w	r3, [r7, #1246]	; 0x4de
			if (err == 0) {
 800490a:	f897 34de 	ldrb.w	r3, [r7, #1246]	; 0x4de
 800490e:	2b00      	cmp	r3, #0
 8004910:	d12c      	bne.n	800496c <main+0x85c>
				printf("LoRa_transmit timed out\n");
 8004912:	4815      	ldr	r0, [pc, #84]	; (8004968 <main+0x858>)
 8004914:	f006 f964 	bl	800abe0 <puts>
 8004918:	e02b      	b.n	8004972 <main+0x862>
 800491a:	bf00      	nop
 800491c:	0800e3a0 	.word	0x0800e3a0
 8004920:	40020c00 	.word	0x40020c00
 8004924:	2000032c 	.word	0x2000032c
 8004928:	20001524 	.word	0x20001524
 800492c:	20001514 	.word	0x20001514
 8004930:	0800e3b8 	.word	0x0800e3b8
 8004934:	200014dc 	.word	0x200014dc
 8004938:	0800e3d8 	.word	0x0800e3d8
 800493c:	20000b34 	.word	0x20000b34
 8004940:	20001934 	.word	0x20001934
 8004944:	2000192e 	.word	0x2000192e
 8004948:	0800e358 	.word	0x0800e358
 800494c:	20000120 	.word	0x20000120
 8004950:	200014c8 	.word	0x200014c8
 8004954:	20001516 	.word	0x20001516
 8004958:	20001517 	.word	0x20001517
 800495c:	20001518 	.word	0x20001518
 8004960:	40590000 	.word	0x40590000
 8004964:	20001519 	.word	0x20001519
 8004968:	0800e388 	.word	0x0800e388
			} else {
				printf("LoRa_transmit seccessed\n");
 800496c:	4832      	ldr	r0, [pc, #200]	; (8004a38 <main+0x928>)
 800496e:	f006 f937 	bl	800abe0 <puts>
//				HAL_Delay(1);
			}
			HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_SET);
 8004972:	2201      	movs	r2, #1
 8004974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004978:	4830      	ldr	r0, [pc, #192]	; (8004a3c <main+0x92c>)
 800497a:	f002 f865 	bl	8006a48 <HAL_GPIO_WritePin>
			loopRunTime = HAL_GetTick() - loopRunTime;
 800497e:	f000 fe09 	bl	8005594 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <main+0x930>)
 8004990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	4618      	mov	r0, r3
 8004998:	f7fb fde6 	bl	8000568 <__aeabi_f2d>
 800499c:	e9c7 0100 	strd	r0, r1, [r7]
					imu.quaternionWXYZ[1], imu.quaternionWXYZ[2],
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <main+0x930>)
 80049a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fb fddd 	bl	8000568 <__aeabi_f2d>
 80049ae:	4604      	mov	r4, r0
 80049b0:	460d      	mov	r5, r1
					imu.quaternionWXYZ[1], imu.quaternionWXYZ[2],
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <main+0x930>)
 80049b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fb fdd4 	bl	8000568 <__aeabi_f2d>
 80049c0:	4680      	mov	r8, r0
 80049c2:	4689      	mov	r9, r1
					imu.quaternionWXYZ[3], data_PA_temp, data2Lora.length,
 80049c4:	4b1e      	ldr	r3, [pc, #120]	; (8004a40 <main+0x930>)
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			printf("acc:%f,%f,%f,%f,%f,%d,%d,%d\n", imu.quaternionWXYZ[0],
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fb fdcb 	bl	8000568 <__aeabi_f2d>
 80049d2:	4682      	mov	sl, r0
 80049d4:	468b      	mov	fp, r1
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <main+0x934>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fdc4 	bl	8000568 <__aeabi_f2d>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 80049e8:	f5a1 6193 	sub.w	r1, r1, #1176	; 0x498
 80049ec:	f8d1 1400 	ldr.w	r1, [r1, #1024]	; 0x400
 80049f0:	4815      	ldr	r0, [pc, #84]	; (8004a48 <main+0x938>)
 80049f2:	8800      	ldrh	r0, [r0, #0]
 80049f4:	900a      	str	r0, [sp, #40]	; 0x28
 80049f6:	f8d7 04e4 	ldr.w	r0, [r7, #1252]	; 0x4e4
 80049fa:	9009      	str	r0, [sp, #36]	; 0x24
 80049fc:	9108      	str	r1, [sp, #32]
 80049fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a02:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004a06:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004a0a:	e9cd 4500 	strd	r4, r5, [sp]
 8004a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a12:	480e      	ldr	r0, [pc, #56]	; (8004a4c <main+0x93c>)
 8004a14:	f006 f87e 	bl	800ab14 <iprintf>
					loopRunTime, data_counter);
			loopRunTime = HAL_GetTick();
 8004a18:	f000 fdbc 	bl	8005594 <HAL_GetTick>
 8004a1c:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
			timer_fly = HAL_GetTick();
 8004a20:	f000 fdb8 	bl	8005594 <HAL_GetTick>
 8004a24:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
			data_counter += 1;
 8004a28:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <main+0x938>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <main+0x938>)
 8004a32:	801a      	strh	r2, [r3, #0]
		IMU_process_data();
 8004a34:	e438      	b.n	80042a8 <main+0x198>
 8004a36:	bf00      	nop
 8004a38:	0800e3a0 	.word	0x0800e3a0
 8004a3c:	40020c00 	.word	0x40020c00
 8004a40:	2000032c 	.word	0x2000032c
 8004a44:	20001524 	.word	0x20001524
 8004a48:	20001514 	.word	0x20001514
 8004a4c:	0800e3b8 	.word	0x0800e3b8

08004a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b094      	sub	sp, #80	; 0x50
 8004a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a56:	f107 0320 	add.w	r3, r7, #32
 8004a5a:	2230      	movs	r2, #48	; 0x30
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f006 f99e 	bl	800ada0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	2300      	movs	r3, #0
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	4b29      	ldr	r3, [pc, #164]	; (8004b20 <SystemClock_Config+0xd0>)
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <SystemClock_Config+0xd0>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6413      	str	r3, [r2, #64]	; 0x40
 8004a84:	4b26      	ldr	r3, [pc, #152]	; (8004b20 <SystemClock_Config+0xd0>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004a90:	2300      	movs	r3, #0
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <SystemClock_Config+0xd4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004a9c:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <SystemClock_Config+0xd4>)
 8004a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <SystemClock_Config+0xd4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004ab0:	2305      	movs	r3, #5
 8004ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004aba:	2301      	movs	r3, #1
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ac8:	2308      	movs	r3, #8
 8004aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004acc:	2354      	movs	r3, #84	; 0x54
 8004ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ad8:	f107 0320 	add.w	r3, r7, #32
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 ffcd 	bl	8006a7c <HAL_RCC_OscConfig>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004ae8:	f000 f81e 	bl	8004b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004aec:	230f      	movs	r3, #15
 8004aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004af0:	2302      	movs	r3, #2
 8004af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b02:	f107 030c 	add.w	r3, r7, #12
 8004b06:	2102      	movs	r1, #2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f002 fa2f 	bl	8006f6c <HAL_RCC_ClockConfig>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004b14:	f000 f808 	bl	8004b28 <Error_Handler>
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3750      	adds	r7, #80	; 0x50
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40007000 	.word	0x40007000

08004b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b2c:	b672      	cpsid	i
}
 8004b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004b30:	e7fe      	b.n	8004b30 <Error_Handler+0x8>
	...

08004b34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004b48:	2300      	movs	r3, #0
 8004b4a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004b4c:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b4e:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <MX_RTC_Init+0xb0>)
 8004b50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b5a:	227f      	movs	r2, #127	; 0x7f
 8004b5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b60:	22ff      	movs	r2, #255	; 0xff
 8004b62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004b70:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004b76:	481a      	ldr	r0, [pc, #104]	; (8004be0 <MX_RTC_Init+0xac>)
 8004b78:	f002 fdd6 	bl	8007728 <HAL_RTC_Init>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004b82:	f7ff ffd1 	bl	8004b28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	480f      	ldr	r0, [pc, #60]	; (8004be0 <MX_RTC_Init+0xac>)
 8004ba2:	f002 fe37 	bl	8007814 <HAL_RTC_SetTime>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004bac:	f7ff ffbc 	bl	8004b28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4806      	ldr	r0, [pc, #24]	; (8004be0 <MX_RTC_Init+0xac>)
 8004bc8:	f002 ff1c 	bl	8007a04 <HAL_RTC_SetDate>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004bd2:	f7ff ffa9 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20001938 	.word	0x20001938
 8004be4:	40002800 	.word	0x40002800

08004be8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08e      	sub	sp, #56	; 0x38
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	2230      	movs	r2, #48	; 0x30
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f006 f8d1 	bl	800ada0 <memset>
  if(rtcHandle->Instance==RTC)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a0c      	ldr	r2, [pc, #48]	; (8004c34 <HAL_RTC_MspInit+0x4c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d111      	bne.n	8004c2c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c08:	2320      	movs	r3, #32
 8004c0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c12:	f107 0308 	add.w	r3, r7, #8
 8004c16:	4618      	mov	r0, r3
 8004c18:	f002 fbc6 	bl	80073a8 <HAL_RCCEx_PeriphCLKConfig>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004c22:	f7ff ff81 	bl	8004b28 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <HAL_RTC_MspInit+0x50>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3738      	adds	r7, #56	; 0x38
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40002800 	.word	0x40002800
 8004c38:	42470e3c 	.word	0x42470e3c

08004c3c <MX_SPI4_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <MX_SPI4_Init+0x68>)
 8004c44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004c46:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004c66:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c70:	2210      	movs	r2, #16
 8004c72:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c88:	220a      	movs	r2, #10
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004c8c:	4804      	ldr	r0, [pc, #16]	; (8004ca0 <MX_SPI4_Init+0x64>)
 8004c8e:	f003 f849 	bl	8007d24 <HAL_SPI_Init>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004c98:	f7ff ff46 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004c9c:	bf00      	nop
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20001958 	.word	0x20001958
 8004ca4:	40013400 	.word	0x40013400

08004ca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a4c      	ldr	r2, [pc, #304]	; (8004df8 <HAL_SPI_MspInit+0x150>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	f040 8091 	bne.w	8004dee <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <HAL_SPI_MspInit+0x154>)
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	4a49      	ldr	r2, [pc, #292]	; (8004dfc <HAL_SPI_MspInit+0x154>)
 8004cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cda:	6453      	str	r3, [r2, #68]	; 0x44
 8004cdc:	4b47      	ldr	r3, [pc, #284]	; (8004dfc <HAL_SPI_MspInit+0x154>)
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <HAL_SPI_MspInit+0x154>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	4a42      	ldr	r2, [pc, #264]	; (8004dfc <HAL_SPI_MspInit+0x154>)
 8004cf2:	f043 0310 	orr.w	r3, r3, #16
 8004cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <HAL_SPI_MspInit+0x154>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8004d04:	2364      	movs	r3, #100	; 0x64
 8004d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d10:	2303      	movs	r3, #3
 8004d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004d14:	2305      	movs	r3, #5
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d18:	f107 0314 	add.w	r3, r7, #20
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4838      	ldr	r0, [pc, #224]	; (8004e00 <HAL_SPI_MspInit+0x158>)
 8004d20:	f001 fcce 	bl	80066c0 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8004d24:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d26:	4a38      	ldr	r2, [pc, #224]	; (8004e08 <HAL_SPI_MspInit+0x160>)
 8004d28:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d30:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d32:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d38:	4b32      	ldr	r3, [pc, #200]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d44:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d46:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8004d52:	4b2c      	ldr	r3, [pc, #176]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d58:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8004d64:	4827      	ldr	r0, [pc, #156]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d66:	f001 f8a9 	bl	8005ebc <HAL_DMA_Init>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004d70:	f7ff feda 	bl	8004b28 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d78:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d7a:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <HAL_SPI_MspInit+0x15c>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8004d80:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004d82:	4a23      	ldr	r2, [pc, #140]	; (8004e10 <HAL_SPI_MspInit+0x168>)
 8004d84:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8004d86:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d8c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d9a:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da0:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004da8:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dba:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8004dc2:	4812      	ldr	r0, [pc, #72]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004dc4:	f001 f87a 	bl	8005ebc <HAL_DMA_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8004dce:	f7ff feab 	bl	8004b28 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004dd6:	649a      	str	r2, [r3, #72]	; 0x48
 8004dd8:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <HAL_SPI_MspInit+0x164>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2100      	movs	r1, #0
 8004de2:	2054      	movs	r0, #84	; 0x54
 8004de4:	f001 f833 	bl	8005e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8004de8:	2054      	movs	r0, #84	; 0x54
 8004dea:	f001 f84c 	bl	8005e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004dee:	bf00      	nop
 8004df0:	3728      	adds	r7, #40	; 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40013400 	.word	0x40013400
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40021000 	.word	0x40021000
 8004e04:	200019b0 	.word	0x200019b0
 8004e08:	40026410 	.word	0x40026410
 8004e0c:	20001a10 	.word	0x20001a10
 8004e10:	40026428 	.word	0x40026428

08004e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e28:	6453      	str	r3, [r2, #68]	; 0x44
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_MspInit+0x4c>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e68:	e7fe      	b.n	8004e68 <NMI_Handler+0x4>

08004e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e6e:	e7fe      	b.n	8004e6e <HardFault_Handler+0x4>

08004e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e74:	e7fe      	b.n	8004e74 <MemManage_Handler+0x4>

08004e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e76:	b480      	push	{r7}
 8004e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e7a:	e7fe      	b.n	8004e7a <BusFault_Handler+0x4>

08004e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e80:	e7fe      	b.n	8004e80 <UsageFault_Handler+0x4>

08004e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e82:	b480      	push	{r7}
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004eb0:	f000 fb5c 	bl	800556c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004ebc:	4802      	ldr	r0, [pc, #8]	; (8004ec8 <DMA1_Stream1_IRQHandler+0x10>)
 8004ebe:	f001 f995 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20001bbc 	.word	0x20001bbc

08004ecc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <DMA1_Stream3_IRQHandler+0x10>)
 8004ed2:	f001 f98b 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20001c1c 	.word	0x20001c1c

08004ee0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <USART1_IRQHandler+0x10>)
 8004ee6:	f003 ffa9 	bl	8008e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20001a74 	.word	0x20001a74

08004ef4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <USART3_IRQHandler+0x10>)
 8004efa:	f003 ff9f 	bl	8008e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20001ab8 	.word	0x20001ab8

08004f08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8004f0c:	4802      	ldr	r0, [pc, #8]	; (8004f18 <DMA2_Stream0_IRQHandler+0x10>)
 8004f0e:	f001 f96d 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	200019b0 	.word	0x200019b0

08004f1c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <DMA2_Stream1_IRQHandler+0x10>)
 8004f22:	f001 f963 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20001a10 	.word	0x20001a10

08004f30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <DMA2_Stream2_IRQHandler+0x10>)
 8004f36:	f001 f959 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20001afc 	.word	0x20001afc

08004f44 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <DMA2_Stream7_IRQHandler+0x10>)
 8004f4a:	f001 f94f 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20001b5c 	.word	0x20001b5c

08004f58 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004f5c:	4802      	ldr	r0, [pc, #8]	; (8004f68 <SPI4_IRQHandler+0x10>)
 8004f5e:	f003 fb59 	bl	8008614 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20001958 	.word	0x20001958

08004f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return 1;
 8004f70:	2301      	movs	r3, #1
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <_kill>:

int _kill(int pid, int sig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f86:	f005 ff5d 	bl	800ae44 <__errno>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2216      	movs	r2, #22
 8004f8e:	601a      	str	r2, [r3, #0]
  return -1;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <_exit>:

void _exit (int status)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ffe7 	bl	8004f7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fae:	e7fe      	b.n	8004fae <_exit+0x12>

08004fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e00a      	b.n	8004fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fc2:	f3af 8000 	nop.w
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	60ba      	str	r2, [r7, #8]
 8004fce:	b2ca      	uxtb	r2, r1
 8004fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	dbf0      	blt.n	8004fc2 <_read+0x12>
  }

  return len;
 8004fe0:	687b      	ldr	r3, [r7, #4]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	e009      	b.n	8005010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	60ba      	str	r2, [r7, #8]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe fcfd 	bl	8003a04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	3301      	adds	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	dbf1      	blt.n	8004ffc <_write+0x12>
  }
  return len;
 8005018:	687b      	ldr	r3, [r7, #4]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <_close>:

int _close(int file)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800504a:	605a      	str	r2, [r3, #4]
  return 0;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <_isatty>:

int _isatty(int file)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005062:	2301      	movs	r3, #1
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005094:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <_sbrk+0x5c>)
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <_sbrk+0x60>)
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <_sbrk+0x64>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <_sbrk+0x64>)
 80050aa:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <_sbrk+0x68>)
 80050ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <_sbrk+0x64>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4413      	add	r3, r2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d207      	bcs.n	80050cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050bc:	f005 fec2 	bl	800ae44 <__errno>
 80050c0:	4603      	mov	r3, r0
 80050c2:	220c      	movs	r2, #12
 80050c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	e009      	b.n	80050e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <_sbrk+0x64>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050d2:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <_sbrk+0x64>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <_sbrk+0x64>)
 80050dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050de:	68fb      	ldr	r3, [r7, #12]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20030000 	.word	0x20030000
 80050ec:	00000400 	.word	0x00000400
 80050f0:	20001a70 	.word	0x20001a70
 80050f4:	20001dd0 	.word	0x20001dd0

080050f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <SystemInit+0x20>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <SystemInit+0x20>)
 8005104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 8005122:	4a12      	ldr	r2, [pc, #72]	; (800516c <MX_USART1_UART_Init+0x50>)
 8005124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 8005128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800512c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 8005130:	2200      	movs	r2, #0
 8005132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 8005136:	2200      	movs	r2, #0
 8005138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 800513c:	2200      	movs	r2, #0
 800513e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 8005142:	220c      	movs	r2, #12
 8005144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 8005148:	2200      	movs	r2, #0
 800514a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 800514e:	2200      	movs	r2, #0
 8005150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <MX_USART1_UART_Init+0x4c>)
 8005154:	f003 fcae 	bl	8008ab4 <HAL_UART_Init>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800515e:	f7ff fce3 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20001a74 	.word	0x20001a74
 800516c:	40011000 	.word	0x40011000

08005170 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005174:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 8005176:	4a11      	ldr	r2, [pc, #68]	; (80051bc <MX_USART3_UART_Init+0x4c>)
 8005178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 800517c:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <MX_USART3_UART_Init+0x50>)
 800517e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005180:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 8005182:	2200      	movs	r2, #0
 8005184:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 8005188:	2200      	movs	r2, #0
 800518a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 8005194:	220c      	movs	r2, #12
 8005196:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 800519a:	2200      	movs	r2, #0
 800519c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80051a4:	4804      	ldr	r0, [pc, #16]	; (80051b8 <MX_USART3_UART_Init+0x48>)
 80051a6:	f003 fc85 	bl	8008ab4 <HAL_UART_Init>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80051b0:	f7ff fcba 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80051b4:	bf00      	nop
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20001ab8 	.word	0x20001ab8
 80051bc:	40004800 	.word	0x40004800
 80051c0:	001e8480 	.word	0x001e8480

080051c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08c      	sub	sp, #48	; 0x30
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051cc:	f107 031c 	add.w	r3, r7, #28
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a97      	ldr	r2, [pc, #604]	; (8005440 <HAL_UART_MspInit+0x27c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	f040 8091 	bne.w	800530a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	4b95      	ldr	r3, [pc, #596]	; (8005444 <HAL_UART_MspInit+0x280>)
 80051ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f0:	4a94      	ldr	r2, [pc, #592]	; (8005444 <HAL_UART_MspInit+0x280>)
 80051f2:	f043 0310 	orr.w	r3, r3, #16
 80051f6:	6453      	str	r3, [r2, #68]	; 0x44
 80051f8:	4b92      	ldr	r3, [pc, #584]	; (8005444 <HAL_UART_MspInit+0x280>)
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	4b8e      	ldr	r3, [pc, #568]	; (8005444 <HAL_UART_MspInit+0x280>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	4a8d      	ldr	r2, [pc, #564]	; (8005444 <HAL_UART_MspInit+0x280>)
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	6313      	str	r3, [r2, #48]	; 0x30
 8005214:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <HAL_UART_MspInit+0x280>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005220:	23c0      	movs	r3, #192	; 0xc0
 8005222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005224:	2302      	movs	r3, #2
 8005226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005228:	2300      	movs	r3, #0
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005230:	2307      	movs	r3, #7
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005234:	f107 031c 	add.w	r3, r7, #28
 8005238:	4619      	mov	r1, r3
 800523a:	4883      	ldr	r0, [pc, #524]	; (8005448 <HAL_UART_MspInit+0x284>)
 800523c:	f001 fa40 	bl	80066c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005240:	4b82      	ldr	r3, [pc, #520]	; (800544c <HAL_UART_MspInit+0x288>)
 8005242:	4a83      	ldr	r2, [pc, #524]	; (8005450 <HAL_UART_MspInit+0x28c>)
 8005244:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005246:	4b81      	ldr	r3, [pc, #516]	; (800544c <HAL_UART_MspInit+0x288>)
 8005248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800524c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800524e:	4b7f      	ldr	r3, [pc, #508]	; (800544c <HAL_UART_MspInit+0x288>)
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005254:	4b7d      	ldr	r3, [pc, #500]	; (800544c <HAL_UART_MspInit+0x288>)
 8005256:	2200      	movs	r2, #0
 8005258:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800525a:	4b7c      	ldr	r3, [pc, #496]	; (800544c <HAL_UART_MspInit+0x288>)
 800525c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005260:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005262:	4b7a      	ldr	r3, [pc, #488]	; (800544c <HAL_UART_MspInit+0x288>)
 8005264:	2200      	movs	r2, #0
 8005266:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005268:	4b78      	ldr	r3, [pc, #480]	; (800544c <HAL_UART_MspInit+0x288>)
 800526a:	2200      	movs	r2, #0
 800526c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800526e:	4b77      	ldr	r3, [pc, #476]	; (800544c <HAL_UART_MspInit+0x288>)
 8005270:	2200      	movs	r2, #0
 8005272:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005274:	4b75      	ldr	r3, [pc, #468]	; (800544c <HAL_UART_MspInit+0x288>)
 8005276:	2200      	movs	r2, #0
 8005278:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800527a:	4b74      	ldr	r3, [pc, #464]	; (800544c <HAL_UART_MspInit+0x288>)
 800527c:	2200      	movs	r2, #0
 800527e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005280:	4872      	ldr	r0, [pc, #456]	; (800544c <HAL_UART_MspInit+0x288>)
 8005282:	f000 fe1b 	bl	8005ebc <HAL_DMA_Init>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800528c:	f7ff fc4c 	bl	8004b28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a6e      	ldr	r2, [pc, #440]	; (800544c <HAL_UART_MspInit+0x288>)
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
 8005296:	4a6d      	ldr	r2, [pc, #436]	; (800544c <HAL_UART_MspInit+0x288>)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800529c:	4b6d      	ldr	r3, [pc, #436]	; (8005454 <HAL_UART_MspInit+0x290>)
 800529e:	4a6e      	ldr	r2, [pc, #440]	; (8005458 <HAL_UART_MspInit+0x294>)
 80052a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80052a2:	4b6c      	ldr	r3, [pc, #432]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052aa:	4b6a      	ldr	r3, [pc, #424]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052ac:	2240      	movs	r2, #64	; 0x40
 80052ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052b0:	4b68      	ldr	r3, [pc, #416]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052b6:	4b67      	ldr	r3, [pc, #412]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052be:	4b65      	ldr	r3, [pc, #404]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052c4:	4b63      	ldr	r3, [pc, #396]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80052ca:	4b62      	ldr	r3, [pc, #392]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052d0:	4b60      	ldr	r3, [pc, #384]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052d6:	4b5f      	ldr	r3, [pc, #380]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052d8:	2200      	movs	r2, #0
 80052da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80052dc:	485d      	ldr	r0, [pc, #372]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052de:	f000 fded 	bl	8005ebc <HAL_DMA_Init>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80052e8:	f7ff fc1e 	bl	8004b28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a59      	ldr	r2, [pc, #356]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052f0:	635a      	str	r2, [r3, #52]	; 0x34
 80052f2:	4a58      	ldr	r2, [pc, #352]	; (8005454 <HAL_UART_MspInit+0x290>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80052f8:	2200      	movs	r2, #0
 80052fa:	2100      	movs	r1, #0
 80052fc:	2025      	movs	r0, #37	; 0x25
 80052fe:	f000 fda6 	bl	8005e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005302:	2025      	movs	r0, #37	; 0x25
 8005304:	f000 fdbf 	bl	8005e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005308:	e096      	b.n	8005438 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a53      	ldr	r2, [pc, #332]	; (800545c <HAL_UART_MspInit+0x298>)
 8005310:	4293      	cmp	r3, r2
 8005312:	f040 8091 	bne.w	8005438 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_UART_MspInit+0x280>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	4a49      	ldr	r2, [pc, #292]	; (8005444 <HAL_UART_MspInit+0x280>)
 8005320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005324:	6413      	str	r3, [r2, #64]	; 0x40
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_UART_MspInit+0x280>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	4b43      	ldr	r3, [pc, #268]	; (8005444 <HAL_UART_MspInit+0x280>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	4a42      	ldr	r2, [pc, #264]	; (8005444 <HAL_UART_MspInit+0x280>)
 800533c:	f043 0308 	orr.w	r3, r3, #8
 8005340:	6313      	str	r3, [r2, #48]	; 0x30
 8005342:	4b40      	ldr	r3, [pc, #256]	; (8005444 <HAL_UART_MspInit+0x280>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_TX_Pin|IMU_RX_Pin;
 800534e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005354:	2302      	movs	r3, #2
 8005356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800535c:	2303      	movs	r3, #3
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005360:	2307      	movs	r3, #7
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005364:	f107 031c 	add.w	r3, r7, #28
 8005368:	4619      	mov	r1, r3
 800536a:	483d      	ldr	r0, [pc, #244]	; (8005460 <HAL_UART_MspInit+0x29c>)
 800536c:	f001 f9a8 	bl	80066c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005370:	4b3c      	ldr	r3, [pc, #240]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 8005372:	4a3d      	ldr	r2, [pc, #244]	; (8005468 <HAL_UART_MspInit+0x2a4>)
 8005374:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005376:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 8005378:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800537c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800537e:	4b39      	ldr	r3, [pc, #228]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 8005380:	2200      	movs	r2, #0
 8005382:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005384:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 8005386:	2200      	movs	r2, #0
 8005388:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800538a:	4b36      	ldr	r3, [pc, #216]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 800538c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005390:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005392:	4b34      	ldr	r3, [pc, #208]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 8005394:	2200      	movs	r2, #0
 8005396:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005398:	4b32      	ldr	r3, [pc, #200]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800539e:	4b31      	ldr	r3, [pc, #196]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053a4:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80053b0:	482c      	ldr	r0, [pc, #176]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 80053b2:	f000 fd83 	bl	8005ebc <HAL_DMA_Init>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80053bc:	f7ff fbb4 	bl	8004b28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a28      	ldr	r2, [pc, #160]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
 80053c6:	4a27      	ldr	r2, [pc, #156]	; (8005464 <HAL_UART_MspInit+0x2a0>)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053ce:	4a28      	ldr	r2, [pc, #160]	; (8005470 <HAL_UART_MspInit+0x2ac>)
 80053d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80053d2:	4b26      	ldr	r3, [pc, #152]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053d8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053da:	4b24      	ldr	r3, [pc, #144]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053dc:	2240      	movs	r2, #64	; 0x40
 80053de:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053e0:	4b22      	ldr	r3, [pc, #136]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053e6:	4b21      	ldr	r3, [pc, #132]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80053fa:	4b1c      	ldr	r3, [pc, #112]	; (800546c <HAL_UART_MspInit+0x2a8>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005400:	4b1a      	ldr	r3, [pc, #104]	; (800546c <HAL_UART_MspInit+0x2a8>)
 8005402:	2200      	movs	r2, #0
 8005404:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005406:	4b19      	ldr	r3, [pc, #100]	; (800546c <HAL_UART_MspInit+0x2a8>)
 8005408:	2200      	movs	r2, #0
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800540c:	4817      	ldr	r0, [pc, #92]	; (800546c <HAL_UART_MspInit+0x2a8>)
 800540e:	f000 fd55 	bl	8005ebc <HAL_DMA_Init>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8005418:	f7ff fb86 	bl	8004b28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a13      	ldr	r2, [pc, #76]	; (800546c <HAL_UART_MspInit+0x2a8>)
 8005420:	635a      	str	r2, [r3, #52]	; 0x34
 8005422:	4a12      	ldr	r2, [pc, #72]	; (800546c <HAL_UART_MspInit+0x2a8>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005428:	2200      	movs	r2, #0
 800542a:	2100      	movs	r1, #0
 800542c:	2027      	movs	r0, #39	; 0x27
 800542e:	f000 fd0e 	bl	8005e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005432:	2027      	movs	r0, #39	; 0x27
 8005434:	f000 fd27 	bl	8005e86 <HAL_NVIC_EnableIRQ>
}
 8005438:	bf00      	nop
 800543a:	3730      	adds	r7, #48	; 0x30
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40011000 	.word	0x40011000
 8005444:	40023800 	.word	0x40023800
 8005448:	40020400 	.word	0x40020400
 800544c:	20001afc 	.word	0x20001afc
 8005450:	40026440 	.word	0x40026440
 8005454:	20001b5c 	.word	0x20001b5c
 8005458:	400264b8 	.word	0x400264b8
 800545c:	40004800 	.word	0x40004800
 8005460:	40020c00 	.word	0x40020c00
 8005464:	20001bbc 	.word	0x20001bbc
 8005468:	40026028 	.word	0x40026028
 800546c:	20001c1c 	.word	0x20001c1c
 8005470:	40026058 	.word	0x40026058

08005474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005478:	480d      	ldr	r0, [pc, #52]	; (80054b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800547a:	490e      	ldr	r1, [pc, #56]	; (80054b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800547c:	4a0e      	ldr	r2, [pc, #56]	; (80054b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800547e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005480:	e002      	b.n	8005488 <LoopCopyDataInit>

08005482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005486:	3304      	adds	r3, #4

08005488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800548a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800548c:	d3f9      	bcc.n	8005482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800548e:	4a0b      	ldr	r2, [pc, #44]	; (80054bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005490:	4c0b      	ldr	r4, [pc, #44]	; (80054c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005494:	e001      	b.n	800549a <LoopFillZerobss>

08005496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005498:	3204      	adds	r2, #4

0800549a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800549a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800549c:	d3fb      	bcc.n	8005496 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800549e:	f7ff fe2b 	bl	80050f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054a2:	f005 fcd5 	bl	800ae50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054a6:	f7fe fe33 	bl	8004110 <main>
  bx  lr    
 80054aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80054ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80054b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054b4:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 80054b8:	0800e830 	.word	0x0800e830
  ldr r2, =_sbss
 80054bc:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 80054c0:	20001dcc 	.word	0x20001dcc

080054c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054c4:	e7fe      	b.n	80054c4 <ADC_IRQHandler>
	...

080054c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <HAL_Init+0x40>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a0d      	ldr	r2, [pc, #52]	; (8005508 <HAL_Init+0x40>)
 80054d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_Init+0x40>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <HAL_Init+0x40>)
 80054de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_Init+0x40>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a07      	ldr	r2, [pc, #28]	; (8005508 <HAL_Init+0x40>)
 80054ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054f0:	2003      	movs	r0, #3
 80054f2:	f000 fca1 	bl	8005e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054f6:	200f      	movs	r0, #15
 80054f8:	f000 f808 	bl	800550c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054fc:	f7ff fc8a 	bl	8004e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023c00 	.word	0x40023c00

0800550c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005514:	4b12      	ldr	r3, [pc, #72]	; (8005560 <HAL_InitTick+0x54>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_InitTick+0x58>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	4619      	mov	r1, r3
 800551e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005522:	fbb3 f3f1 	udiv	r3, r3, r1
 8005526:	fbb2 f3f3 	udiv	r3, r2, r3
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fcb9 	bl	8005ea2 <HAL_SYSTICK_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e00e      	b.n	8005558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b0f      	cmp	r3, #15
 800553e:	d80a      	bhi.n	8005556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005540:	2200      	movs	r2, #0
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	f000 fc81 	bl	8005e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800554c:	4a06      	ldr	r2, [pc, #24]	; (8005568 <HAL_InitTick+0x5c>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e000      	b.n	8005558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000128 	.word	0x20000128
 8005564:	20000130 	.word	0x20000130
 8005568:	2000012c 	.word	0x2000012c

0800556c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_IncTick+0x20>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_IncTick+0x24>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4413      	add	r3, r2
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <HAL_IncTick+0x24>)
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000130 	.word	0x20000130
 8005590:	20001c7c 	.word	0x20001c7c

08005594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return uwTick;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_GetTick+0x14>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20001c7c 	.word	0x20001c7c

080055ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055b4:	f7ff ffee 	bl	8005594 <HAL_GetTick>
 80055b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d005      	beq.n	80055d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_Delay+0x44>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055d2:	bf00      	nop
 80055d4:	f7ff ffde 	bl	8005594 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d8f7      	bhi.n	80055d4 <HAL_Delay+0x28>
  {
  }
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000130 	.word	0x20000130

080055f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e033      	b.n	8005672 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fe f846 	bl	80036a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	d118      	bne.n	8005664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800563a:	f023 0302 	bic.w	r3, r3, #2
 800563e:	f043 0202 	orr.w	r2, r3, #2
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa2a 	bl	8005aa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	f043 0201 	orr.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
 8005662:	e001      	b.n	8005668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_ADC_Start+0x1a>
 8005692:	2302      	movs	r3, #2
 8005694:	e0b2      	b.n	80057fc <HAL_ADC_Start+0x180>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d018      	beq.n	80056de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056bc:	4b52      	ldr	r3, [pc, #328]	; (8005808 <HAL_ADC_Start+0x18c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a52      	ldr	r2, [pc, #328]	; (800580c <HAL_ADC_Start+0x190>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	0c9a      	lsrs	r2, r3, #18
 80056c8:	4613      	mov	r3, r2
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4413      	add	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80056d0:	e002      	b.n	80056d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f9      	bne.n	80056d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d17a      	bne.n	80057e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005716:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572a:	d106      	bne.n	800573a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005730:	f023 0206 	bic.w	r2, r3, #6
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	645a      	str	r2, [r3, #68]	; 0x44
 8005738:	e002      	b.n	8005740 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005748:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_ADC_Start+0x194>)
 800574a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005754:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2b00      	cmp	r3, #0
 8005760:	d12a      	bne.n	80057b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <HAL_ADC_Start+0x198>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d015      	beq.n	8005798 <HAL_ADC_Start+0x11c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <HAL_ADC_Start+0x19c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d105      	bne.n	8005782 <HAL_ADC_Start+0x106>
 8005776:	4b26      	ldr	r3, [pc, #152]	; (8005810 <HAL_ADC_Start+0x194>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a25      	ldr	r2, [pc, #148]	; (800581c <HAL_ADC_Start+0x1a0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d136      	bne.n	80057fa <HAL_ADC_Start+0x17e>
 800578c:	4b20      	ldr	r3, [pc, #128]	; (8005810 <HAL_ADC_Start+0x194>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d130      	bne.n	80057fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d129      	bne.n	80057fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	e020      	b.n	80057fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a15      	ldr	r2, [pc, #84]	; (8005814 <HAL_ADC_Start+0x198>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d11b      	bne.n	80057fa <HAL_ADC_Start+0x17e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d114      	bne.n	80057fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	e00b      	b.n	80057fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0210 	orr.w	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20000128 	.word	0x20000128
 800580c:	431bde83 	.word	0x431bde83
 8005810:	40012300 	.word	0x40012300
 8005814:	40012000 	.word	0x40012000
 8005818:	40012100 	.word	0x40012100
 800581c:	40012200 	.word	0x40012200

08005820 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x1c>
 8005854:	2302      	movs	r3, #2
 8005856:	e113      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x244>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b09      	cmp	r3, #9
 8005866:	d925      	bls.n	80058b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68d9      	ldr	r1, [r3, #12]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	4613      	mov	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4413      	add	r3, r2
 800587c:	3b1e      	subs	r3, #30
 800587e:	2207      	movs	r2, #7
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43da      	mvns	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	400a      	ands	r2, r1
 800588c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68d9      	ldr	r1, [r3, #12]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	4618      	mov	r0, r3
 80058a0:	4603      	mov	r3, r0
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4403      	add	r3, r0
 80058a6:	3b1e      	subs	r3, #30
 80058a8:	409a      	lsls	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	e022      	b.n	80058fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6919      	ldr	r1, [r3, #16]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	4613      	mov	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	4413      	add	r3, r2
 80058c8:	2207      	movs	r2, #7
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43da      	mvns	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	400a      	ands	r2, r1
 80058d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6919      	ldr	r1, [r3, #16]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	4618      	mov	r0, r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4403      	add	r3, r0
 80058f0:	409a      	lsls	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d824      	bhi.n	800594c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	3b05      	subs	r3, #5
 8005914:	221f      	movs	r2, #31
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43da      	mvns	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	400a      	ands	r2, r1
 8005922:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	4618      	mov	r0, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	3b05      	subs	r3, #5
 800593e:	fa00 f203 	lsl.w	r2, r0, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	635a      	str	r2, [r3, #52]	; 0x34
 800594a:	e04c      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b0c      	cmp	r3, #12
 8005952:	d824      	bhi.n	800599e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	3b23      	subs	r3, #35	; 0x23
 8005966:	221f      	movs	r2, #31
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	43da      	mvns	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	400a      	ands	r2, r1
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	4618      	mov	r0, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	3b23      	subs	r3, #35	; 0x23
 8005990:	fa00 f203 	lsl.w	r2, r0, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
 800599c:	e023      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	3b41      	subs	r3, #65	; 0x41
 80059b0:	221f      	movs	r2, #31
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	43da      	mvns	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	400a      	ands	r2, r1
 80059be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4618      	mov	r0, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	3b41      	subs	r3, #65	; 0x41
 80059da:	fa00 f203 	lsl.w	r2, r0, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <HAL_ADC_ConfigChannel+0x250>)
 80059e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <HAL_ADC_ConfigChannel+0x254>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d10f      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x1d8>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b12      	cmp	r3, #18
 80059fa:	d10b      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <HAL_ADC_ConfigChannel+0x254>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d12b      	bne.n	8005a76 <HAL_ADC_ConfigChannel+0x23a>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <HAL_ADC_ConfigChannel+0x258>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <HAL_ADC_ConfigChannel+0x1f4>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b11      	cmp	r3, #17
 8005a2e:	d122      	bne.n	8005a76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <HAL_ADC_ConfigChannel+0x258>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d111      	bne.n	8005a76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a52:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <HAL_ADC_ConfigChannel+0x25c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a11      	ldr	r2, [pc, #68]	; (8005a9c <HAL_ADC_ConfigChannel+0x260>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	0c9a      	lsrs	r2, r3, #18
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a68:	e002      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f9      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40012300 	.word	0x40012300
 8005a90:	40012000 	.word	0x40012000
 8005a94:	10000012 	.word	0x10000012
 8005a98:	20000128 	.word	0x20000128
 8005a9c:	431bde83 	.word	0x431bde83

08005aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005aa8:	4b79      	ldr	r3, [pc, #484]	; (8005c90 <ADC_Init+0x1f0>)
 8005aaa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6859      	ldr	r1, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	021a      	lsls	r2, r3, #8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	4a58      	ldr	r2, [pc, #352]	; (8005c94 <ADC_Init+0x1f4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6899      	ldr	r1, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	e00f      	b.n	8005b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0202 	bic.w	r2, r2, #2
 8005bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	7e1b      	ldrb	r3, [r3, #24]
 8005bb8:	005a      	lsls	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01b      	beq.n	8005c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6859      	ldr	r1, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	035a      	lsls	r2, r3, #13
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e007      	b.n	8005c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	051a      	lsls	r2, r3, #20
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6899      	ldr	r1, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c56:	025a      	lsls	r2, r3, #9
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6899      	ldr	r1, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	029a      	lsls	r2, r3, #10
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40012300 	.word	0x40012300
 8005c94:	0f000001 	.word	0x0f000001

08005c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <__NVIC_SetPriorityGrouping+0x44>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cca:	4a04      	ldr	r2, [pc, #16]	; (8005cdc <__NVIC_SetPriorityGrouping+0x44>)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	60d3      	str	r3, [r2, #12]
}
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	e000ed00 	.word	0xe000ed00

08005ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ce4:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	f003 0307 	and.w	r3, r3, #7
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	e000ed00 	.word	0xe000ed00

08005cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	db0b      	blt.n	8005d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	f003 021f 	and.w	r2, r3, #31
 8005d14:	4907      	ldr	r1, [pc, #28]	; (8005d34 <__NVIC_EnableIRQ+0x38>)
 8005d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	e000e100 	.word	0xe000e100

08005d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	6039      	str	r1, [r7, #0]
 8005d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	db0a      	blt.n	8005d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	490c      	ldr	r1, [pc, #48]	; (8005d84 <__NVIC_SetPriority+0x4c>)
 8005d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d60:	e00a      	b.n	8005d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	4908      	ldr	r1, [pc, #32]	; (8005d88 <__NVIC_SetPriority+0x50>)
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	3b04      	subs	r3, #4
 8005d70:	0112      	lsls	r2, r2, #4
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	440b      	add	r3, r1
 8005d76:	761a      	strb	r2, [r3, #24]
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	e000e100 	.word	0xe000e100
 8005d88:	e000ed00 	.word	0xe000ed00

08005d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b089      	sub	sp, #36	; 0x24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f1c3 0307 	rsb	r3, r3, #7
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	bf28      	it	cs
 8005daa:	2304      	movcs	r3, #4
 8005dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	3304      	adds	r3, #4
 8005db2:	2b06      	cmp	r3, #6
 8005db4:	d902      	bls.n	8005dbc <NVIC_EncodePriority+0x30>
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3b03      	subs	r3, #3
 8005dba:	e000      	b.n	8005dbe <NVIC_EncodePriority+0x32>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43da      	mvns	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	401a      	ands	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	fa01 f303 	lsl.w	r3, r1, r3
 8005dde:	43d9      	mvns	r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de4:	4313      	orrs	r3, r2
         );
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3724      	adds	r7, #36	; 0x24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e04:	d301      	bcc.n	8005e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e06:	2301      	movs	r3, #1
 8005e08:	e00f      	b.n	8005e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <SysTick_Config+0x40>)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e12:	210f      	movs	r1, #15
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	f7ff ff8e 	bl	8005d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <SysTick_Config+0x40>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e22:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <SysTick_Config+0x40>)
 8005e24:	2207      	movs	r2, #7
 8005e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	e000e010 	.word	0xe000e010

08005e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff ff29 	bl	8005c98 <__NVIC_SetPriorityGrouping>
}
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	4603      	mov	r3, r0
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e60:	f7ff ff3e 	bl	8005ce0 <__NVIC_GetPriorityGrouping>
 8005e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	f7ff ff8e 	bl	8005d8c <NVIC_EncodePriority>
 8005e70:	4602      	mov	r2, r0
 8005e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e76:	4611      	mov	r1, r2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff ff5d 	bl	8005d38 <__NVIC_SetPriority>
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff ff31 	bl	8005cfc <__NVIC_EnableIRQ>
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff ffa2 	bl	8005df4 <SysTick_Config>
 8005eb0:	4603      	mov	r3, r0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ec8:	f7ff fb64 	bl	8005594 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e099      	b.n	800600c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ef8:	e00f      	b.n	8005f1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005efa:	f7ff fb4b 	bl	8005594 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	d908      	bls.n	8005f1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2203      	movs	r2, #3
 8005f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e078      	b.n	800600c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e8      	bne.n	8005efa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4b38      	ldr	r3, [pc, #224]	; (8006014 <HAL_DMA_Init+0x158>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d107      	bne.n	8005f84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0307 	bic.w	r3, r3, #7
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d117      	bne.n	8005fde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fb01 	bl	80065c8 <DMA_CheckFifoParam>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2240      	movs	r2, #64	; 0x40
 8005fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e016      	b.n	800600c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fab8 	bl	800655c <DMA_CalcBaseAndBitshift>
 8005fec:	4603      	mov	r3, r0
 8005fee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff4:	223f      	movs	r2, #63	; 0x3f
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	f010803f 	.word	0xf010803f

08006018 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_DMA_Start_IT+0x26>
 800603a:	2302      	movs	r3, #2
 800603c:	e040      	b.n	80060c0 <HAL_DMA_Start_IT+0xa8>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d12f      	bne.n	80060b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fa4a 	bl	8006500 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	223f      	movs	r2, #63	; 0x3f
 8006072:	409a      	lsls	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0216 	orr.w	r2, r2, #22
 8006086:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e005      	b.n	80060be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
 80060bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060d6:	f7ff fa5d 	bl	8005594 <HAL_GetTick>
 80060da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d008      	beq.n	80060fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2280      	movs	r2, #128	; 0x80
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e052      	b.n	80061a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0216 	bic.w	r2, r2, #22
 8006108:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006118:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <HAL_DMA_Abort+0x62>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0208 	bic.w	r2, r2, #8
 8006138:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800614a:	e013      	b.n	8006174 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800614c:	f7ff fa22 	bl	8005594 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b05      	cmp	r3, #5
 8006158:	d90c      	bls.n	8006174 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2203      	movs	r2, #3
 8006164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e015      	b.n	80061a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e4      	bne.n	800614c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006186:	223f      	movs	r2, #63	; 0x3f
 8006188:	409a      	lsls	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d004      	beq.n	80061c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e00c      	b.n	80061e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2205      	movs	r2, #5
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061f8:	4b8e      	ldr	r3, [pc, #568]	; (8006434 <HAL_DMA_IRQHandler+0x248>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a8e      	ldr	r2, [pc, #568]	; (8006438 <HAL_DMA_IRQHandler+0x24c>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006216:	2208      	movs	r2, #8
 8006218:	409a      	lsls	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01a      	beq.n	8006258 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d013      	beq.n	8006258 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0204 	bic.w	r2, r2, #4
 800623e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006244:	2208      	movs	r2, #8
 8006246:	409a      	lsls	r2, r3
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	2201      	movs	r2, #1
 800625e:	409a      	lsls	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d012      	beq.n	800628e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627a:	2201      	movs	r2, #1
 800627c:	409a      	lsls	r2, r3
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f043 0202 	orr.w	r2, r3, #2
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006292:	2204      	movs	r2, #4
 8006294:	409a      	lsls	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d012      	beq.n	80062c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b0:	2204      	movs	r2, #4
 80062b2:	409a      	lsls	r2, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062bc:	f043 0204 	orr.w	r2, r3, #4
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	2210      	movs	r2, #16
 80062ca:	409a      	lsls	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d043      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d03c      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e6:	2210      	movs	r2, #16
 80062e8:	409a      	lsls	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d018      	beq.n	800632e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d108      	bne.n	800631c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d024      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	e01f      	b.n	800635c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01b      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
 800632c:	e016      	b.n	800635c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0208 	bic.w	r2, r2, #8
 800634a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006360:	2220      	movs	r2, #32
 8006362:	409a      	lsls	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 808f 	beq.w	800648c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8087 	beq.w	800648c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006382:	2220      	movs	r2, #32
 8006384:	409a      	lsls	r2, r3
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b05      	cmp	r3, #5
 8006394:	d136      	bne.n	8006404 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0216 	bic.w	r2, r2, #22
 80063a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_DMA_IRQHandler+0x1da>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0208 	bic.w	r2, r2, #8
 80063d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	223f      	movs	r2, #63	; 0x3f
 80063dc:	409a      	lsls	r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d07e      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
        }
        return;
 8006402:	e079      	b.n	80064f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01d      	beq.n	800644e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10d      	bne.n	800643c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	2b00      	cmp	r3, #0
 8006426:	d031      	beq.n	800648c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
 8006430:	e02c      	b.n	800648c <HAL_DMA_IRQHandler+0x2a0>
 8006432:	bf00      	nop
 8006434:	20000128 	.word	0x20000128
 8006438:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d023      	beq.n	800648c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
 800644c:	e01e      	b.n	800648c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10f      	bne.n	800647c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0210 	bic.w	r2, r2, #16
 800646a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006490:	2b00      	cmp	r3, #0
 8006492:	d032      	beq.n	80064fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d022      	beq.n	80064e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2205      	movs	r2, #5
 80064a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	3301      	adds	r3, #1
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d307      	bcc.n	80064d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f2      	bne.n	80064b8 <HAL_DMA_IRQHandler+0x2cc>
 80064d2:	e000      	b.n	80064d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80064d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
 80064f6:	e000      	b.n	80064fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80064f8:	bf00      	nop
    }
  }
}
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800651c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d108      	bne.n	8006540 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800653e:	e007      	b.n	8006550 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	3b10      	subs	r3, #16
 800656c:	4a14      	ldr	r2, [pc, #80]	; (80065c0 <DMA_CalcBaseAndBitshift+0x64>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006576:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <DMA_CalcBaseAndBitshift+0x68>)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b03      	cmp	r3, #3
 8006588:	d909      	bls.n	800659e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	1d1a      	adds	r2, r3, #4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	659a      	str	r2, [r3, #88]	; 0x58
 800659c:	e007      	b.n	80065ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	aaaaaaab 	.word	0xaaaaaaab
 80065c4:	0800e474 	.word	0x0800e474

080065c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11f      	bne.n	8006622 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d856      	bhi.n	8006696 <DMA_CheckFifoParam+0xce>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <DMA_CheckFifoParam+0x28>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006613 	.word	0x08006613
 80065f8:	08006601 	.word	0x08006601
 80065fc:	08006697 	.word	0x08006697
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d046      	beq.n	800669a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006610:	e043      	b.n	800669a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800661a:	d140      	bne.n	800669e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006620:	e03d      	b.n	800669e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662a:	d121      	bne.n	8006670 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d837      	bhi.n	80066a2 <DMA_CheckFifoParam+0xda>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <DMA_CheckFifoParam+0x70>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006649 	.word	0x08006649
 800663c:	0800664f 	.word	0x0800664f
 8006640:	08006649 	.word	0x08006649
 8006644:	08006661 	.word	0x08006661
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
      break;
 800664c:	e030      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d025      	beq.n	80066a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800665e:	e022      	b.n	80066a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006668:	d11f      	bne.n	80066aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800666e:	e01c      	b.n	80066aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d903      	bls.n	800667e <DMA_CheckFifoParam+0xb6>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d003      	beq.n	8006684 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800667c:	e018      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
      break;
 8006682:	e015      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
      break;
 8006694:	e00b      	b.n	80066ae <DMA_CheckFifoParam+0xe6>
      break;
 8006696:	bf00      	nop
 8006698:	e00a      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 800669a:	bf00      	nop
 800669c:	e008      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 800669e:	bf00      	nop
 80066a0:	e006      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 80066a2:	bf00      	nop
 80066a4:	e004      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 80066ae:	bf00      	nop
    }
  } 
  
  return status; 
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e177      	b.n	80069cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066dc:	2201      	movs	r2, #1
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4013      	ands	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	f040 8166 	bne.w	80069c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	2b01      	cmp	r3, #1
 8006704:	d005      	beq.n	8006712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800670e:	2b02      	cmp	r3, #2
 8006710:	d130      	bne.n	8006774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	2203      	movs	r2, #3
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43db      	mvns	r3, r3
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	4013      	ands	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4313      	orrs	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006748:	2201      	movs	r2, #1
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	091b      	lsrs	r3, r3, #4
 800675e:	f003 0201 	and.w	r2, r3, #1
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	4313      	orrs	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	2b03      	cmp	r3, #3
 800677e:	d017      	beq.n	80067b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	2203      	movs	r2, #3
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4013      	ands	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d123      	bne.n	8006804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	08da      	lsrs	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3208      	adds	r2, #8
 80067c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	220f      	movs	r2, #15
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	08da      	lsrs	r2, r3, #3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3208      	adds	r2, #8
 80067fe:	69b9      	ldr	r1, [r7, #24]
 8006800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	2203      	movs	r2, #3
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	43db      	mvns	r3, r3
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4013      	ands	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f003 0203 	and.w	r2, r3, #3
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80c0 	beq.w	80069c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	4b66      	ldr	r3, [pc, #408]	; (80069e4 <HAL_GPIO_Init+0x324>)
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	4a65      	ldr	r2, [pc, #404]	; (80069e4 <HAL_GPIO_Init+0x324>)
 8006850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006854:	6453      	str	r3, [r2, #68]	; 0x44
 8006856:	4b63      	ldr	r3, [pc, #396]	; (80069e4 <HAL_GPIO_Init+0x324>)
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006862:	4a61      	ldr	r2, [pc, #388]	; (80069e8 <HAL_GPIO_Init+0x328>)
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	3302      	adds	r3, #2
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	220f      	movs	r2, #15
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	43db      	mvns	r3, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4013      	ands	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a58      	ldr	r2, [pc, #352]	; (80069ec <HAL_GPIO_Init+0x32c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d037      	beq.n	80068fe <HAL_GPIO_Init+0x23e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a57      	ldr	r2, [pc, #348]	; (80069f0 <HAL_GPIO_Init+0x330>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d031      	beq.n	80068fa <HAL_GPIO_Init+0x23a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a56      	ldr	r2, [pc, #344]	; (80069f4 <HAL_GPIO_Init+0x334>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02b      	beq.n	80068f6 <HAL_GPIO_Init+0x236>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a55      	ldr	r2, [pc, #340]	; (80069f8 <HAL_GPIO_Init+0x338>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d025      	beq.n	80068f2 <HAL_GPIO_Init+0x232>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a54      	ldr	r2, [pc, #336]	; (80069fc <HAL_GPIO_Init+0x33c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d01f      	beq.n	80068ee <HAL_GPIO_Init+0x22e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a53      	ldr	r2, [pc, #332]	; (8006a00 <HAL_GPIO_Init+0x340>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d019      	beq.n	80068ea <HAL_GPIO_Init+0x22a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a52      	ldr	r2, [pc, #328]	; (8006a04 <HAL_GPIO_Init+0x344>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <HAL_GPIO_Init+0x226>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a51      	ldr	r2, [pc, #324]	; (8006a08 <HAL_GPIO_Init+0x348>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00d      	beq.n	80068e2 <HAL_GPIO_Init+0x222>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a50      	ldr	r2, [pc, #320]	; (8006a0c <HAL_GPIO_Init+0x34c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <HAL_GPIO_Init+0x21e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a4f      	ldr	r2, [pc, #316]	; (8006a10 <HAL_GPIO_Init+0x350>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <HAL_GPIO_Init+0x21a>
 80068d6:	2309      	movs	r3, #9
 80068d8:	e012      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068da:	230a      	movs	r3, #10
 80068dc:	e010      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068de:	2308      	movs	r3, #8
 80068e0:	e00e      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068e2:	2307      	movs	r3, #7
 80068e4:	e00c      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068e6:	2306      	movs	r3, #6
 80068e8:	e00a      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068ea:	2305      	movs	r3, #5
 80068ec:	e008      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068ee:	2304      	movs	r3, #4
 80068f0:	e006      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068f2:	2303      	movs	r3, #3
 80068f4:	e004      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e002      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068fe:	2300      	movs	r3, #0
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	f002 0203 	and.w	r2, r2, #3
 8006906:	0092      	lsls	r2, r2, #2
 8006908:	4093      	lsls	r3, r2
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006910:	4935      	ldr	r1, [pc, #212]	; (80069e8 <HAL_GPIO_Init+0x328>)
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	089b      	lsrs	r3, r3, #2
 8006916:	3302      	adds	r3, #2
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800691e:	4b3d      	ldr	r3, [pc, #244]	; (8006a14 <HAL_GPIO_Init+0x354>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	43db      	mvns	r3, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4013      	ands	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006942:	4a34      	ldr	r2, [pc, #208]	; (8006a14 <HAL_GPIO_Init+0x354>)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006948:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <HAL_GPIO_Init+0x354>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	43db      	mvns	r3, r3
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	4013      	ands	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800696c:	4a29      	ldr	r2, [pc, #164]	; (8006a14 <HAL_GPIO_Init+0x354>)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006972:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <HAL_GPIO_Init+0x354>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	43db      	mvns	r3, r3
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	4013      	ands	r3, r2
 8006980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <HAL_GPIO_Init+0x354>)
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800699c:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <HAL_GPIO_Init+0x354>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4013      	ands	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069c0:	4a14      	ldr	r2, [pc, #80]	; (8006a14 <HAL_GPIO_Init+0x354>)
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3301      	adds	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b0f      	cmp	r3, #15
 80069d0:	f67f ae84 	bls.w	80066dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	3724      	adds	r7, #36	; 0x24
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40023800 	.word	0x40023800
 80069e8:	40013800 	.word	0x40013800
 80069ec:	40020000 	.word	0x40020000
 80069f0:	40020400 	.word	0x40020400
 80069f4:	40020800 	.word	0x40020800
 80069f8:	40020c00 	.word	0x40020c00
 80069fc:	40021000 	.word	0x40021000
 8006a00:	40021400 	.word	0x40021400
 8006a04:	40021800 	.word	0x40021800
 8006a08:	40021c00 	.word	0x40021c00
 8006a0c:	40022000 	.word	0x40022000
 8006a10:	40022400 	.word	0x40022400
 8006a14:	40013c00 	.word	0x40013c00

08006a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	887b      	ldrh	r3, [r7, #2]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	e001      	b.n	8006a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
 8006a54:	4613      	mov	r3, r2
 8006a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a58:	787b      	ldrb	r3, [r7, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a5e:	887a      	ldrh	r2, [r7, #2]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a64:	e003      	b.n	8006a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a66:	887b      	ldrh	r3, [r7, #2]
 8006a68:	041a      	lsls	r2, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	619a      	str	r2, [r3, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e267      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d075      	beq.n	8006b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a9a:	4b88      	ldr	r3, [pc, #544]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa6:	4b85      	ldr	r3, [pc, #532]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d112      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ab2:	4b82      	ldr	r3, [pc, #520]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006abe:	d10b      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac0:	4b7e      	ldr	r3, [pc, #504]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d05b      	beq.n	8006b84 <HAL_RCC_OscConfig+0x108>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d157      	bne.n	8006b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e242      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae0:	d106      	bne.n	8006af0 <HAL_RCC_OscConfig+0x74>
 8006ae2:	4b76      	ldr	r3, [pc, #472]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a75      	ldr	r2, [pc, #468]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e01d      	b.n	8006b2c <HAL_RCC_OscConfig+0xb0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCC_OscConfig+0x98>
 8006afa:	4b70      	ldr	r3, [pc, #448]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a6f      	ldr	r2, [pc, #444]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4b6d      	ldr	r3, [pc, #436]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a6c      	ldr	r2, [pc, #432]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0xb0>
 8006b14:	4b69      	ldr	r3, [pc, #420]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a68      	ldr	r2, [pc, #416]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	4b66      	ldr	r3, [pc, #408]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a65      	ldr	r2, [pc, #404]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d013      	beq.n	8006b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fe fd2e 	bl	8005594 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fe fd2a 	bl	8005594 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e207      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4e:	4b5b      	ldr	r3, [pc, #364]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0xc0>
 8006b5a:	e014      	b.n	8006b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5c:	f7fe fd1a 	bl	8005594 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b64:	f7fe fd16 	bl	8005594 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	; 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e1f3      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b76:	4b51      	ldr	r3, [pc, #324]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0xe8>
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d063      	beq.n	8006c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b92:	4b4a      	ldr	r3, [pc, #296]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b9e:	4b47      	ldr	r3, [pc, #284]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d11c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006baa:	4b44      	ldr	r3, [pc, #272]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d116      	bne.n	8006be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb6:	4b41      	ldr	r3, [pc, #260]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_RCC_OscConfig+0x152>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d001      	beq.n	8006bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e1c7      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bce:	4b3b      	ldr	r3, [pc, #236]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4937      	ldr	r1, [pc, #220]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be2:	e03a      	b.n	8006c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d020      	beq.n	8006c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bec:	4b34      	ldr	r3, [pc, #208]	; (8006cc0 <HAL_RCC_OscConfig+0x244>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf2:	f7fe fccf 	bl	8005594 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bfa:	f7fe fccb 	bl	8005594 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e1a8      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0c:	4b2b      	ldr	r3, [pc, #172]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c18:	4b28      	ldr	r3, [pc, #160]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4925      	ldr	r1, [pc, #148]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	600b      	str	r3, [r1, #0]
 8006c2c:	e015      	b.n	8006c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <HAL_RCC_OscConfig+0x244>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fe fcae 	bl	8005594 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c3c:	f7fe fcaa 	bl	8005594 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e187      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d036      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d016      	beq.n	8006c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c6e:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <HAL_RCC_OscConfig+0x248>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c74:	f7fe fc8e 	bl	8005594 <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7c:	f7fe fc8a 	bl	8005594 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e167      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <HAL_RCC_OscConfig+0x240>)
 8006c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f0      	beq.n	8006c7c <HAL_RCC_OscConfig+0x200>
 8006c9a:	e01b      	b.n	8006cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <HAL_RCC_OscConfig+0x248>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca2:	f7fe fc77 	bl	8005594 <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca8:	e00e      	b.n	8006cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006caa:	f7fe fc73 	bl	8005594 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d907      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e150      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	42470000 	.word	0x42470000
 8006cc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc8:	4b88      	ldr	r3, [pc, #544]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ea      	bne.n	8006caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8097 	beq.w	8006e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ce6:	4b81      	ldr	r3, [pc, #516]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10f      	bne.n	8006d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	4b7d      	ldr	r3, [pc, #500]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	4a7c      	ldr	r2, [pc, #496]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d00:	6413      	str	r3, [r2, #64]	; 0x40
 8006d02:	4b7a      	ldr	r3, [pc, #488]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	60bb      	str	r3, [r7, #8]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d12:	4b77      	ldr	r3, [pc, #476]	; (8006ef0 <HAL_RCC_OscConfig+0x474>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d118      	bne.n	8006d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d1e:	4b74      	ldr	r3, [pc, #464]	; (8006ef0 <HAL_RCC_OscConfig+0x474>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a73      	ldr	r2, [pc, #460]	; (8006ef0 <HAL_RCC_OscConfig+0x474>)
 8006d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d2a:	f7fe fc33 	bl	8005594 <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d32:	f7fe fc2f 	bl	8005594 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e10c      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d44:	4b6a      	ldr	r3, [pc, #424]	; (8006ef0 <HAL_RCC_OscConfig+0x474>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0f0      	beq.n	8006d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d106      	bne.n	8006d66 <HAL_RCC_OscConfig+0x2ea>
 8006d58:	4b64      	ldr	r3, [pc, #400]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5c:	4a63      	ldr	r2, [pc, #396]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	6713      	str	r3, [r2, #112]	; 0x70
 8006d64:	e01c      	b.n	8006da0 <HAL_RCC_OscConfig+0x324>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b05      	cmp	r3, #5
 8006d6c:	d10c      	bne.n	8006d88 <HAL_RCC_OscConfig+0x30c>
 8006d6e:	4b5f      	ldr	r3, [pc, #380]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	4a5e      	ldr	r2, [pc, #376]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d74:	f043 0304 	orr.w	r3, r3, #4
 8006d78:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7a:	4b5c      	ldr	r3, [pc, #368]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	4a5b      	ldr	r2, [pc, #364]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d80:	f043 0301 	orr.w	r3, r3, #1
 8006d84:	6713      	str	r3, [r2, #112]	; 0x70
 8006d86:	e00b      	b.n	8006da0 <HAL_RCC_OscConfig+0x324>
 8006d88:	4b58      	ldr	r3, [pc, #352]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8c:	4a57      	ldr	r2, [pc, #348]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	6713      	str	r3, [r2, #112]	; 0x70
 8006d94:	4b55      	ldr	r3, [pc, #340]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	4a54      	ldr	r2, [pc, #336]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006d9a:	f023 0304 	bic.w	r3, r3, #4
 8006d9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d015      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da8:	f7fe fbf4 	bl	8005594 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db0:	f7fe fbf0 	bl	8005594 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e0cb      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc6:	4b49      	ldr	r3, [pc, #292]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0ee      	beq.n	8006db0 <HAL_RCC_OscConfig+0x334>
 8006dd2:	e014      	b.n	8006dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd4:	f7fe fbde 	bl	8005594 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ddc:	f7fe fbda 	bl	8005594 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0b5      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df2:	4b3e      	ldr	r3, [pc, #248]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1ee      	bne.n	8006ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d105      	bne.n	8006e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e04:	4b39      	ldr	r3, [pc, #228]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	4a38      	ldr	r2, [pc, #224]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80a1 	beq.w	8006f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e1a:	4b34      	ldr	r3, [pc, #208]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d05c      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d141      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2e:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <HAL_RCC_OscConfig+0x478>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e34:	f7fe fbae 	bl	8005594 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3c:	f7fe fbaa 	bl	8005594 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e087      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4e:	4b27      	ldr	r3, [pc, #156]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69da      	ldr	r2, [r3, #28]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	019b      	lsls	r3, r3, #6
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	085b      	lsrs	r3, r3, #1
 8006e72:	3b01      	subs	r3, #1
 8006e74:	041b      	lsls	r3, r3, #16
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	491b      	ldr	r1, [pc, #108]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e84:	4b1b      	ldr	r3, [pc, #108]	; (8006ef4 <HAL_RCC_OscConfig+0x478>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8a:	f7fe fb83 	bl	8005594 <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e90:	e008      	b.n	8006ea4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e92:	f7fe fb7f 	bl	8005594 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e05c      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea4:	4b11      	ldr	r3, [pc, #68]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0f0      	beq.n	8006e92 <HAL_RCC_OscConfig+0x416>
 8006eb0:	e054      	b.n	8006f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb2:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <HAL_RCC_OscConfig+0x478>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb8:	f7fe fb6c 	bl	8005594 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec0:	f7fe fb68 	bl	8005594 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e045      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_RCC_OscConfig+0x470>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x444>
 8006ede:	e03d      	b.n	8006f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d107      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e038      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	40007000 	.word	0x40007000
 8006ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ef8:	4b1b      	ldr	r3, [pc, #108]	; (8006f68 <HAL_RCC_OscConfig+0x4ec>)
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d028      	beq.n	8006f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d121      	bne.n	8006f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d11a      	bne.n	8006f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f28:	4013      	ands	r3, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d111      	bne.n	8006f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	3b01      	subs	r3, #1
 8006f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d107      	bne.n	8006f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d001      	beq.n	8006f5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40023800 	.word	0x40023800

08006f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0cc      	b.n	800711a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f80:	4b68      	ldr	r3, [pc, #416]	; (8007124 <HAL_RCC_ClockConfig+0x1b8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d90c      	bls.n	8006fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b65      	ldr	r3, [pc, #404]	; (8007124 <HAL_RCC_ClockConfig+0x1b8>)
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b63      	ldr	r3, [pc, #396]	; (8007124 <HAL_RCC_ClockConfig+0x1b8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0b8      	b.n	800711a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d020      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fc0:	4b59      	ldr	r3, [pc, #356]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	4a58      	ldr	r2, [pc, #352]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd8:	4b53      	ldr	r3, [pc, #332]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	4a52      	ldr	r2, [pc, #328]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fe4:	4b50      	ldr	r3, [pc, #320]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	494d      	ldr	r1, [pc, #308]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d044      	beq.n	800708c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d107      	bne.n	800701a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800700a:	4b47      	ldr	r3, [pc, #284]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d119      	bne.n	800704a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e07f      	b.n	800711a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d003      	beq.n	800702a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007026:	2b03      	cmp	r3, #3
 8007028:	d107      	bne.n	800703a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800702a:	4b3f      	ldr	r3, [pc, #252]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e06f      	b.n	800711a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e067      	b.n	800711a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800704a:	4b37      	ldr	r3, [pc, #220]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f023 0203 	bic.w	r2, r3, #3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4934      	ldr	r1, [pc, #208]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	4313      	orrs	r3, r2
 800705a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800705c:	f7fe fa9a 	bl	8005594 <HAL_GetTick>
 8007060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007062:	e00a      	b.n	800707a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007064:	f7fe fa96 	bl	8005594 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e04f      	b.n	800711a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707a:	4b2b      	ldr	r3, [pc, #172]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 020c 	and.w	r2, r3, #12
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	429a      	cmp	r2, r3
 800708a:	d1eb      	bne.n	8007064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800708c:	4b25      	ldr	r3, [pc, #148]	; (8007124 <HAL_RCC_ClockConfig+0x1b8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d20c      	bcs.n	80070b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <HAL_RCC_ClockConfig+0x1b8>)
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a2:	4b20      	ldr	r3, [pc, #128]	; (8007124 <HAL_RCC_ClockConfig+0x1b8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d001      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e032      	b.n	800711a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070c0:	4b19      	ldr	r3, [pc, #100]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	4916      	ldr	r1, [pc, #88]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	490e      	ldr	r1, [pc, #56]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070f2:	f000 f821 	bl	8007138 <HAL_RCC_GetSysClockFreq>
 80070f6:	4602      	mov	r2, r0
 80070f8:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	490a      	ldr	r1, [pc, #40]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 8007104:	5ccb      	ldrb	r3, [r1, r3]
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	4a09      	ldr	r2, [pc, #36]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 800710c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <HAL_RCC_ClockConfig+0x1c8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe f9fa 	bl	800550c <HAL_InitTick>

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40023c00 	.word	0x40023c00
 8007128:	40023800 	.word	0x40023800
 800712c:	0800e45c 	.word	0x0800e45c
 8007130:	20000128 	.word	0x20000128
 8007134:	2000012c 	.word	0x2000012c

08007138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800713c:	b094      	sub	sp, #80	; 0x50
 800713e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	647b      	str	r3, [r7, #68]	; 0x44
 8007144:	2300      	movs	r3, #0
 8007146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007148:	2300      	movs	r3, #0
 800714a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007150:	4b79      	ldr	r3, [pc, #484]	; (8007338 <HAL_RCC_GetSysClockFreq+0x200>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 030c 	and.w	r3, r3, #12
 8007158:	2b08      	cmp	r3, #8
 800715a:	d00d      	beq.n	8007178 <HAL_RCC_GetSysClockFreq+0x40>
 800715c:	2b08      	cmp	r3, #8
 800715e:	f200 80e1 	bhi.w	8007324 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_RCC_GetSysClockFreq+0x34>
 8007166:	2b04      	cmp	r3, #4
 8007168:	d003      	beq.n	8007172 <HAL_RCC_GetSysClockFreq+0x3a>
 800716a:	e0db      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800716c:	4b73      	ldr	r3, [pc, #460]	; (800733c <HAL_RCC_GetSysClockFreq+0x204>)
 800716e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007170:	e0db      	b.n	800732a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007172:	4b72      	ldr	r3, [pc, #456]	; (800733c <HAL_RCC_GetSysClockFreq+0x204>)
 8007174:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007176:	e0d8      	b.n	800732a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007178:	4b6f      	ldr	r3, [pc, #444]	; (8007338 <HAL_RCC_GetSysClockFreq+0x200>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007180:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007182:	4b6d      	ldr	r3, [pc, #436]	; (8007338 <HAL_RCC_GetSysClockFreq+0x200>)
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d063      	beq.n	8007256 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800718e:	4b6a      	ldr	r3, [pc, #424]	; (8007338 <HAL_RCC_GetSysClockFreq+0x200>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	099b      	lsrs	r3, r3, #6
 8007194:	2200      	movs	r2, #0
 8007196:	63bb      	str	r3, [r7, #56]	; 0x38
 8007198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
 80071a2:	2300      	movs	r3, #0
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
 80071a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071aa:	4622      	mov	r2, r4
 80071ac:	462b      	mov	r3, r5
 80071ae:	f04f 0000 	mov.w	r0, #0
 80071b2:	f04f 0100 	mov.w	r1, #0
 80071b6:	0159      	lsls	r1, r3, #5
 80071b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071bc:	0150      	lsls	r0, r2, #5
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4621      	mov	r1, r4
 80071c4:	1a51      	subs	r1, r2, r1
 80071c6:	6139      	str	r1, [r7, #16]
 80071c8:	4629      	mov	r1, r5
 80071ca:	eb63 0301 	sbc.w	r3, r3, r1
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071dc:	4659      	mov	r1, fp
 80071de:	018b      	lsls	r3, r1, #6
 80071e0:	4651      	mov	r1, sl
 80071e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071e6:	4651      	mov	r1, sl
 80071e8:	018a      	lsls	r2, r1, #6
 80071ea:	4651      	mov	r1, sl
 80071ec:	ebb2 0801 	subs.w	r8, r2, r1
 80071f0:	4659      	mov	r1, fp
 80071f2:	eb63 0901 	sbc.w	r9, r3, r1
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800720a:	4690      	mov	r8, r2
 800720c:	4699      	mov	r9, r3
 800720e:	4623      	mov	r3, r4
 8007210:	eb18 0303 	adds.w	r3, r8, r3
 8007214:	60bb      	str	r3, [r7, #8]
 8007216:	462b      	mov	r3, r5
 8007218:	eb49 0303 	adc.w	r3, r9, r3
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800722a:	4629      	mov	r1, r5
 800722c:	028b      	lsls	r3, r1, #10
 800722e:	4621      	mov	r1, r4
 8007230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007234:	4621      	mov	r1, r4
 8007236:	028a      	lsls	r2, r1, #10
 8007238:	4610      	mov	r0, r2
 800723a:	4619      	mov	r1, r3
 800723c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723e:	2200      	movs	r2, #0
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
 8007242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007244:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007248:	f7f9 fd2e 	bl	8000ca8 <__aeabi_uldivmod>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4613      	mov	r3, r2
 8007252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007254:	e058      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007256:	4b38      	ldr	r3, [pc, #224]	; (8007338 <HAL_RCC_GetSysClockFreq+0x200>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	099b      	lsrs	r3, r3, #6
 800725c:	2200      	movs	r2, #0
 800725e:	4618      	mov	r0, r3
 8007260:	4611      	mov	r1, r2
 8007262:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007266:	623b      	str	r3, [r7, #32]
 8007268:	2300      	movs	r3, #0
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
 800726c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	f04f 0000 	mov.w	r0, #0
 8007278:	f04f 0100 	mov.w	r1, #0
 800727c:	0159      	lsls	r1, r3, #5
 800727e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007282:	0150      	lsls	r0, r2, #5
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4641      	mov	r1, r8
 800728a:	ebb2 0a01 	subs.w	sl, r2, r1
 800728e:	4649      	mov	r1, r9
 8007290:	eb63 0b01 	sbc.w	fp, r3, r1
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072a8:	ebb2 040a 	subs.w	r4, r2, sl
 80072ac:	eb63 050b 	sbc.w	r5, r3, fp
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	00eb      	lsls	r3, r5, #3
 80072ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072be:	00e2      	lsls	r2, r4, #3
 80072c0:	4614      	mov	r4, r2
 80072c2:	461d      	mov	r5, r3
 80072c4:	4643      	mov	r3, r8
 80072c6:	18e3      	adds	r3, r4, r3
 80072c8:	603b      	str	r3, [r7, #0]
 80072ca:	464b      	mov	r3, r9
 80072cc:	eb45 0303 	adc.w	r3, r5, r3
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072de:	4629      	mov	r1, r5
 80072e0:	028b      	lsls	r3, r1, #10
 80072e2:	4621      	mov	r1, r4
 80072e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072e8:	4621      	mov	r1, r4
 80072ea:	028a      	lsls	r2, r1, #10
 80072ec:	4610      	mov	r0, r2
 80072ee:	4619      	mov	r1, r3
 80072f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f2:	2200      	movs	r2, #0
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	61fa      	str	r2, [r7, #28]
 80072f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072fc:	f7f9 fcd4 	bl	8000ca8 <__aeabi_uldivmod>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4613      	mov	r3, r2
 8007306:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <HAL_RCC_GetSysClockFreq+0x200>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	0c1b      	lsrs	r3, r3, #16
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	3301      	adds	r3, #1
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800731a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007322:	e002      	b.n	800732a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_RCC_GetSysClockFreq+0x204>)
 8007326:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800732a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800732c:	4618      	mov	r0, r3
 800732e:	3750      	adds	r7, #80	; 0x50
 8007330:	46bd      	mov	sp, r7
 8007332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800
 800733c:	00f42400 	.word	0x00f42400

08007340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007344:	4b03      	ldr	r3, [pc, #12]	; (8007354 <HAL_RCC_GetHCLKFreq+0x14>)
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000128 	.word	0x20000128

08007358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800735c:	f7ff fff0 	bl	8007340 <HAL_RCC_GetHCLKFreq>
 8007360:	4602      	mov	r2, r0
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	0a9b      	lsrs	r3, r3, #10
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	4903      	ldr	r1, [pc, #12]	; (800737c <HAL_RCC_GetPCLK1Freq+0x24>)
 800736e:	5ccb      	ldrb	r3, [r1, r3]
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007374:	4618      	mov	r0, r3
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40023800 	.word	0x40023800
 800737c:	0800e46c 	.word	0x0800e46c

08007380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007384:	f7ff ffdc 	bl	8007340 <HAL_RCC_GetHCLKFreq>
 8007388:	4602      	mov	r2, r0
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	0b5b      	lsrs	r3, r3, #13
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	4903      	ldr	r1, [pc, #12]	; (80073a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007396:	5ccb      	ldrb	r3, [r1, r3]
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800739c:	4618      	mov	r0, r3
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40023800 	.word	0x40023800
 80073a4:	0800e46c 	.word	0x0800e46c

080073a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d075      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073dc:	4b91      	ldr	r3, [pc, #580]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073e2:	f7fe f8d7 	bl	8005594 <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073e8:	e008      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073ea:	f7fe f8d3 	bl	8005594 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e189      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073fc:	4b8a      	ldr	r3, [pc, #552]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f0      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d009      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	019a      	lsls	r2, r3, #6
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	071b      	lsls	r3, r3, #28
 8007420:	4981      	ldr	r1, [pc, #516]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01f      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007434:	4b7c      	ldr	r3, [pc, #496]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800743a:	0f1b      	lsrs	r3, r3, #28
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	019a      	lsls	r2, r3, #6
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	061b      	lsls	r3, r3, #24
 800744e:	431a      	orrs	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	071b      	lsls	r3, r3, #28
 8007454:	4974      	ldr	r1, [pc, #464]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800745c:	4b72      	ldr	r3, [pc, #456]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800745e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007462:	f023 021f 	bic.w	r2, r3, #31
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	3b01      	subs	r3, #1
 800746c:	496e      	ldr	r1, [pc, #440]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	019a      	lsls	r2, r3, #6
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	061b      	lsls	r3, r3, #24
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	071b      	lsls	r3, r3, #28
 8007494:	4964      	ldr	r1, [pc, #400]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800749c:	4b61      	ldr	r3, [pc, #388]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074a2:	f7fe f877 	bl	8005594 <HAL_GetTick>
 80074a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074a8:	e008      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074aa:	f7fe f873 	bl	8005594 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e129      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074bc:	4b5a      	ldr	r3, [pc, #360]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d079      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074e0:	4b52      	ldr	r3, [pc, #328]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074e6:	f7fe f855 	bl	8005594 <HAL_GetTick>
 80074ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074ec:	e008      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80074ee:	f7fe f851 	bl	8005594 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e107      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007500:	4b49      	ldr	r3, [pc, #292]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800750c:	d0ef      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d020      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800751a:	4b43      	ldr	r3, [pc, #268]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007520:	0f1b      	lsrs	r3, r3, #28
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	019a      	lsls	r2, r3, #6
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	061b      	lsls	r3, r3, #24
 8007534:	431a      	orrs	r2, r3
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	071b      	lsls	r3, r3, #28
 800753a:	493b      	ldr	r1, [pc, #236]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007542:	4b39      	ldr	r3, [pc, #228]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007548:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	3b01      	subs	r3, #1
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	4934      	ldr	r1, [pc, #208]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01e      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007568:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	0e1b      	lsrs	r3, r3, #24
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	019a      	lsls	r2, r3, #6
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	061b      	lsls	r3, r3, #24
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	071b      	lsls	r3, r3, #28
 8007588:	4927      	ldr	r1, [pc, #156]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007596:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	4922      	ldr	r1, [pc, #136]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075a6:	4b21      	ldr	r3, [pc, #132]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075ac:	f7fd fff2 	bl	8005594 <HAL_GetTick>
 80075b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075b2:	e008      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80075b4:	f7fd ffee 	bl	8005594 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e0a4      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075c6:	4b18      	ldr	r3, [pc, #96]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d2:	d1ef      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 808b 	beq.w	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	4a0f      	ldr	r2, [pc, #60]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f0:	6413      	str	r3, [r2, #64]	; 0x40
 80075f2:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a0b      	ldr	r2, [pc, #44]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007608:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800760a:	f7fd ffc3 	bl	8005594 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007610:	e010      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007612:	f7fd ffbf 	bl	8005594 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d909      	bls.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e075      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007624:	42470068 	.word	0x42470068
 8007628:	40023800 	.word	0x40023800
 800762c:	42470070 	.word	0x42470070
 8007630:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007634:	4b38      	ldr	r3, [pc, #224]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0e8      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007640:	4b36      	ldr	r3, [pc, #216]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007648:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02f      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d028      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800765e:	4b2f      	ldr	r3, [pc, #188]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007666:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007668:	4b2d      	ldr	r3, [pc, #180]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800766a:	2201      	movs	r2, #1
 800766c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800766e:	4b2c      	ldr	r3, [pc, #176]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007674:	4a29      	ldr	r2, [pc, #164]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800767a:	4b28      	ldr	r3, [pc, #160]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800767c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b01      	cmp	r3, #1
 8007684:	d114      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007686:	f7fd ff85 	bl	8005594 <HAL_GetTick>
 800768a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768c:	e00a      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768e:	f7fd ff81 	bl	8005594 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	f241 3288 	movw	r2, #5000	; 0x1388
 800769c:	4293      	cmp	r3, r2
 800769e:	d901      	bls.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e035      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a4:	4b1d      	ldr	r3, [pc, #116]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0ee      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076bc:	d10d      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x332>
 80076be:	4b17      	ldr	r3, [pc, #92]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d2:	4912      	ldr	r1, [pc, #72]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	608b      	str	r3, [r1, #8]
 80076d8:	e005      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	4a0f      	ldr	r2, [pc, #60]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076e4:	6093      	str	r3, [r2, #8]
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f2:	490a      	ldr	r1, [pc, #40]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800770c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40007000 	.word	0x40007000
 800771c:	40023800 	.word	0x40023800
 8007720:	42470e40 	.word	0x42470e40
 8007724:	424711e0 	.word	0x424711e0

08007728 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e066      	b.n	800780c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7f5b      	ldrb	r3, [r3, #29]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fd fa4a 	bl	8004be8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	22ca      	movs	r2, #202	; 0xca
 8007760:	625a      	str	r2, [r3, #36]	; 0x24
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2253      	movs	r2, #83	; 0x53
 8007768:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa45 	bl	8007bfa <RTC_EnterInitMode>
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d12c      	bne.n	80077d4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800778c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6899      	ldr	r1, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	68d2      	ldr	r2, [r2, #12]
 80077b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6919      	ldr	r1, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	041a      	lsls	r2, r3, #16
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa4c 	bl	8007c68 <RTC_ExitInitMode>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d113      	bne.n	8007802 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	22ff      	movs	r2, #255	; 0xff
 8007808:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007814:	b590      	push	{r4, r7, lr}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	7f1b      	ldrb	r3, [r3, #28]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_RTC_SetTime+0x1c>
 800782c:	2302      	movs	r3, #2
 800782e:	e087      	b.n	8007940 <HAL_RTC_SetTime+0x12c>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2202      	movs	r2, #2
 800783a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d126      	bne.n	8007890 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fa29 	bl	8007cb2 <RTC_ByteToBcd2>
 8007860:	4603      	mov	r3, r0
 8007862:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fa22 	bl	8007cb2 <RTC_ByteToBcd2>
 800786e:	4603      	mov	r3, r0
 8007870:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007872:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	789b      	ldrb	r3, [r3, #2]
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fa1a 	bl	8007cb2 <RTC_ByteToBcd2>
 800787e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007880:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	78db      	ldrb	r3, [r3, #3]
 8007888:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	e018      	b.n	80078c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2200      	movs	r2, #0
 80078a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80078b0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80078b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	78db      	ldrb	r3, [r3, #3]
 80078bc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	22ca      	movs	r2, #202	; 0xca
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2253      	movs	r2, #83	; 0x53
 80078d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 f991 	bl	8007bfa <RTC_EnterInitMode>
 80078d8:	4603      	mov	r3, r0
 80078da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80078dc:	7cfb      	ldrb	r3, [r7, #19]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d120      	bne.n	8007924 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007900:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6899      	ldr	r1, [r3, #8]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 f9a4 	bl	8007c68 <RTC_ExitInitMode>
 8007920:	4603      	mov	r3, r0
 8007922:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007924:	7cfb      	ldrb	r3, [r7, #19]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d102      	bne.n	8007930 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	771a      	strb	r2, [r3, #28]

  return status;
 800793e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007940:	4618      	mov	r0, r3
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	bd90      	pop	{r4, r7, pc}

08007948 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800797a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800797e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	0c1b      	lsrs	r3, r3, #16
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800798a:	b2da      	uxtb	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799a:	b2da      	uxtb	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	0d9b      	lsrs	r3, r3, #22
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11a      	bne.n	80079fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f98f 	bl	8007cec <RTC_Bcd2ToByte>
 80079ce:	4603      	mov	r3, r0
 80079d0:	461a      	mov	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f986 	bl	8007cec <RTC_Bcd2ToByte>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	789b      	ldrb	r3, [r3, #2]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 f97d 	bl	8007cec <RTC_Bcd2ToByte>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a04:	b590      	push	{r4, r7, lr}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	7f1b      	ldrb	r3, [r3, #28]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_RTC_SetDate+0x1c>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e071      	b.n	8007b04 <HAL_RTC_SetDate+0x100>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10e      	bne.n	8007a50 <HAL_RTC_SetDate+0x4c>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	330a      	adds	r3, #10
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d11c      	bne.n	8007a90 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	78db      	ldrb	r3, [r3, #3]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f929 	bl	8007cb2 <RTC_ByteToBcd2>
 8007a60:	4603      	mov	r3, r0
 8007a62:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f922 	bl	8007cb2 <RTC_ByteToBcd2>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a72:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	789b      	ldrb	r3, [r3, #2]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 f91a 	bl	8007cb2 <RTC_ByteToBcd2>
 8007a7e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a80:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
 8007a8e:	e00e      	b.n	8007aae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	78db      	ldrb	r3, [r3, #3]
 8007a94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a9c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007aa2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	22ca      	movs	r2, #202	; 0xca
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2253      	movs	r2, #83	; 0x53
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f89b 	bl	8007bfa <RTC_EnterInitMode>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007ac8:	7cfb      	ldrb	r3, [r7, #19]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10c      	bne.n	8007ae8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ad8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007adc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f8c2 	bl	8007c68 <RTC_ExitInitMode>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007ae8:	7cfb      	ldrb	r3, [r7, #19]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	22ff      	movs	r2, #255	; 0xff
 8007afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	771a      	strb	r2, [r3, #28]

  return status;
 8007b02:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd90      	pop	{r4, r7, pc}

08007b0c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	0a1b      	lsrs	r3, r3, #8
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	0b5b      	lsrs	r3, r3, #13
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d11a      	bne.n	8007ba0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	78db      	ldrb	r3, [r3, #3]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f8bc 	bl	8007cec <RTC_Bcd2ToByte>
 8007b74:	4603      	mov	r3, r0
 8007b76:	461a      	mov	r2, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f8b3 	bl	8007cec <RTC_Bcd2ToByte>
 8007b86:	4603      	mov	r3, r0
 8007b88:	461a      	mov	r2, r3
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	789b      	ldrb	r3, [r3, #2]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f8aa 	bl	8007cec <RTC_Bcd2ToByte>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bc4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bc6:	f7fd fce5 	bl	8005594 <HAL_GetTick>
 8007bca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007bcc:	e009      	b.n	8007be2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bce:	f7fd fce1 	bl	8005594 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bdc:	d901      	bls.n	8007be2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e007      	b.n	8007bf2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0ee      	beq.n	8007bce <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d122      	bne.n	8007c5e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c28:	f7fd fcb4 	bl	8005594 <HAL_GetTick>
 8007c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007c2e:	e00c      	b.n	8007c4a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c30:	f7fd fcb0 	bl	8005594 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3e:	d904      	bls.n	8007c4a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2204      	movs	r2, #4
 8007c44:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <RTC_EnterInitMode+0x64>
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d1e8      	bne.n	8007c30 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c82:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff ff89 	bl	8007baa <HAL_RTC_WaitForSynchro>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	4603      	mov	r3, r0
 8007cba:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007cc0:	e005      	b.n	8007cce <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	3b0a      	subs	r3, #10
 8007ccc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	2b09      	cmp	r3, #9
 8007cd2:	d8f6      	bhi.n	8007cc2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	b2db      	uxtb	r3, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	091b      	lsrs	r3, r3, #4
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	0092      	lsls	r2, r2, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	4413      	add	r3, r2
 8007d16:	b2db      	uxtb	r3, r3
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e07b      	b.n	8007e2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d108      	bne.n	8007d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d46:	d009      	beq.n	8007d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	61da      	str	r2, [r3, #28]
 8007d4e:	e005      	b.n	8007d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7fc ff96 	bl	8004ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	431a      	orrs	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de0:	ea42 0103 	orr.w	r1, r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	0c1b      	lsrs	r3, r3, #16
 8007dfa:	f003 0104 	and.w	r1, r3, #4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	f003 0210 	and.w	r2, r3, #16
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b088      	sub	sp, #32
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	603b      	str	r3, [r7, #0]
 8007e42:	4613      	mov	r3, r2
 8007e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_SPI_Transmit+0x22>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e126      	b.n	80080a6 <HAL_SPI_Transmit+0x270>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e60:	f7fd fb98 	bl	8005594 <HAL_GetTick>
 8007e64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d002      	beq.n	8007e7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
 8007e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e7a:	e10b      	b.n	8008094 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_SPI_Transmit+0x52>
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e8c:	e102      	b.n	8008094 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2203      	movs	r2, #3
 8007e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed4:	d10f      	bne.n	8007ef6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f00:	2b40      	cmp	r3, #64	; 0x40
 8007f02:	d007      	beq.n	8007f14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1c:	d14b      	bne.n	8007fb6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <HAL_SPI_Transmit+0xf6>
 8007f26:	8afb      	ldrh	r3, [r7, #22]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d13e      	bne.n	8007faa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	881a      	ldrh	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	1c9a      	adds	r2, r3, #2
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f50:	e02b      	b.n	8007faa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d112      	bne.n	8007f86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f64:	881a      	ldrh	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	1c9a      	adds	r2, r3, #2
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f84:	e011      	b.n	8007faa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f86:	f7fd fb05 	bl	8005594 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d803      	bhi.n	8007f9e <HAL_SPI_Transmit+0x168>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d102      	bne.n	8007fa4 <HAL_SPI_Transmit+0x16e>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007fa8:	e074      	b.n	8008094 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1ce      	bne.n	8007f52 <HAL_SPI_Transmit+0x11c>
 8007fb4:	e04c      	b.n	8008050 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SPI_Transmit+0x18e>
 8007fbe:	8afb      	ldrh	r3, [r7, #22]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d140      	bne.n	8008046 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	7812      	ldrb	r2, [r2, #0]
 8007fd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007fea:	e02c      	b.n	8008046 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d113      	bne.n	8008022 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	330c      	adds	r3, #12
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008016:	b29b      	uxth	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008020:	e011      	b.n	8008046 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008022:	f7fd fab7 	bl	8005594 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d803      	bhi.n	800803a <HAL_SPI_Transmit+0x204>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d102      	bne.n	8008040 <HAL_SPI_Transmit+0x20a>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008044:	e026      	b.n	8008094 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1cd      	bne.n	8007fec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fceb 	bl	8008a30 <SPI_EndRxTxTransaction>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e000      	b.n	8008094 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008092:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3720      	adds	r7, #32
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b088      	sub	sp, #32
 80080b2:	af02      	add	r7, sp, #8
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ca:	d112      	bne.n	80080f2 <HAL_SPI_Receive+0x44>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10e      	bne.n	80080f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2204      	movs	r2, #4
 80080d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080dc:	88fa      	ldrh	r2, [r7, #6]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	4613      	mov	r3, r2
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 f8f1 	bl	80082d0 <HAL_SPI_TransmitReceive>
 80080ee:	4603      	mov	r3, r0
 80080f0:	e0ea      	b.n	80082c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_SPI_Receive+0x52>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e0e3      	b.n	80082c8 <HAL_SPI_Receive+0x21a>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008108:	f7fd fa44 	bl	8005594 <HAL_GetTick>
 800810c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d002      	beq.n	8008120 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800811a:	2302      	movs	r3, #2
 800811c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800811e:	e0ca      	b.n	80082b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_SPI_Receive+0x7e>
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008130:	e0c1      	b.n	80082b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2204      	movs	r2, #4
 8008136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	88fa      	ldrh	r2, [r7, #6]
 800814a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	88fa      	ldrh	r2, [r7, #6]
 8008150:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008178:	d10f      	bne.n	800819a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008188:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008198:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	d007      	beq.n	80081b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d162      	bne.n	8008286 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80081c0:	e02e      	b.n	8008220 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d115      	bne.n	80081fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f103 020c 	add.w	r2, r3, #12
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	7812      	ldrb	r2, [r2, #0]
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081fa:	e011      	b.n	8008220 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081fc:	f7fd f9ca 	bl	8005594 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d803      	bhi.n	8008214 <HAL_SPI_Receive+0x166>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d102      	bne.n	800821a <HAL_SPI_Receive+0x16c>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800821e:	e04a      	b.n	80082b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1cb      	bne.n	80081c2 <HAL_SPI_Receive+0x114>
 800822a:	e031      	b.n	8008290 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b01      	cmp	r3, #1
 8008238:	d113      	bne.n	8008262 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	b292      	uxth	r2, r2
 8008246:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	1c9a      	adds	r2, r3, #2
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008260:	e011      	b.n	8008286 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008262:	f7fd f997 	bl	8005594 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d803      	bhi.n	800827a <HAL_SPI_Receive+0x1cc>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d102      	bne.n	8008280 <HAL_SPI_Receive+0x1d2>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008284:	e017      	b.n	80082b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828a:	b29b      	uxth	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1cd      	bne.n	800822c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 fb65 	bl	8008964 <SPI_EndRxTransaction>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	75fb      	strb	r3, [r7, #23]
 80082b2:	e000      	b.n	80082b6 <HAL_SPI_Receive+0x208>
  }

error :
 80082b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08c      	sub	sp, #48	; 0x30
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082de:	2301      	movs	r3, #1
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_SPI_TransmitReceive+0x26>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e18a      	b.n	800860c <HAL_SPI_TransmitReceive+0x33c>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082fe:	f7fd f949 	bl	8005594 <HAL_GetTick>
 8008302:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800830a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008314:	887b      	ldrh	r3, [r7, #2]
 8008316:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800831c:	2b01      	cmp	r3, #1
 800831e:	d00f      	beq.n	8008340 <HAL_SPI_TransmitReceive+0x70>
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008326:	d107      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x68>
 8008330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008334:	2b04      	cmp	r3, #4
 8008336:	d003      	beq.n	8008340 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008338:	2302      	movs	r3, #2
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800833e:	e15b      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <HAL_SPI_TransmitReceive+0x82>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <HAL_SPI_TransmitReceive+0x82>
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008358:	e14e      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b04      	cmp	r3, #4
 8008364:	d003      	beq.n	800836e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2205      	movs	r2, #5
 800836a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	887a      	ldrh	r2, [r7, #2]
 800837e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	887a      	ldrh	r2, [r7, #2]
 8008384:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	887a      	ldrh	r2, [r7, #2]
 8008390:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	887a      	ldrh	r2, [r7, #2]
 8008396:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ae:	2b40      	cmp	r3, #64	; 0x40
 80083b0:	d007      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ca:	d178      	bne.n	80084be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_SPI_TransmitReceive+0x10a>
 80083d4:	8b7b      	ldrh	r3, [r7, #26]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d166      	bne.n	80084a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	1c9a      	adds	r2, r3, #2
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083fe:	e053      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b02      	cmp	r3, #2
 800840c:	d11b      	bne.n	8008446 <HAL_SPI_TransmitReceive+0x176>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d016      	beq.n	8008446 <HAL_SPI_TransmitReceive+0x176>
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b01      	cmp	r3, #1
 800841c:	d113      	bne.n	8008446 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	881a      	ldrh	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	1c9a      	adds	r2, r3, #2
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b01      	cmp	r3, #1
 8008452:	d119      	bne.n	8008488 <HAL_SPI_TransmitReceive+0x1b8>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d014      	beq.n	8008488 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008468:	b292      	uxth	r2, r2
 800846a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008484:	2301      	movs	r3, #1
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008488:	f7fd f884 	bl	8005594 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008494:	429a      	cmp	r2, r3
 8008496:	d807      	bhi.n	80084a8 <HAL_SPI_TransmitReceive+0x1d8>
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d003      	beq.n	80084a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084a6:	e0a7      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1a6      	bne.n	8008400 <HAL_SPI_TransmitReceive+0x130>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1a1      	bne.n	8008400 <HAL_SPI_TransmitReceive+0x130>
 80084bc:	e07c      	b.n	80085b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_SPI_TransmitReceive+0x1fc>
 80084c6:	8b7b      	ldrh	r3, [r7, #26]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d16b      	bne.n	80085a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	330c      	adds	r3, #12
 80084d6:	7812      	ldrb	r2, [r2, #0]
 80084d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f2:	e057      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d11c      	bne.n	800853c <HAL_SPI_TransmitReceive+0x26c>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d017      	beq.n	800853c <HAL_SPI_TransmitReceive+0x26c>
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d114      	bne.n	800853c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	330c      	adds	r3, #12
 800851c:	7812      	ldrb	r2, [r2, #0]
 800851e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800852e:	b29b      	uxth	r3, r3
 8008530:	3b01      	subs	r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b01      	cmp	r3, #1
 8008548:	d119      	bne.n	800857e <HAL_SPI_TransmitReceive+0x2ae>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800854e:	b29b      	uxth	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d014      	beq.n	800857e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	b2d2      	uxtb	r2, r2
 8008560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008570:	b29b      	uxth	r3, r3
 8008572:	3b01      	subs	r3, #1
 8008574:	b29a      	uxth	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800857a:	2301      	movs	r3, #1
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800857e:	f7fd f809 	bl	8005594 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800858a:	429a      	cmp	r2, r3
 800858c:	d803      	bhi.n	8008596 <HAL_SPI_TransmitReceive+0x2c6>
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d102      	bne.n	800859c <HAL_SPI_TransmitReceive+0x2cc>
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d103      	bne.n	80085a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085a2:	e029      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1a2      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x224>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d19d      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 fa37 	bl	8008a30 <SPI_EndRxTxTransaction>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d006      	beq.n	80085d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80085d4:	e010      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10b      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	e000      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80085f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008608:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800860c:	4618      	mov	r0, r3
 800860e:	3730      	adds	r7, #48	; 0x30
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10e      	bne.n	8008654 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800863c:	2b00      	cmp	r3, #0
 800863e:	d009      	beq.n	8008654 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
    return;
 8008652:	e0ce      	b.n	80087f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <HAL_SPI_IRQHandler+0x5e>
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
    return;
 8008670:	e0bf      	b.n	80087f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <HAL_SPI_IRQHandler+0x7e>
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80b0 	beq.w	80087f2 <HAL_SPI_IRQHandler+0x1de>
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80aa 	beq.w	80087f2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d023      	beq.n	80086f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d011      	beq.n	80086d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b8:	f043 0204 	orr.w	r2, r3, #4
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	e00b      	b.n	80086f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	693b      	ldr	r3, [r7, #16]
        return;
 80086ee:	e080      	b.n	80087f2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d014      	beq.n	8008724 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fe:	f043 0201 	orr.w	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	f043 0208 	orr.w	r2, r3, #8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800873a:	2300      	movs	r3, #0
 800873c:	60bb      	str	r3, [r7, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874c:	2b00      	cmp	r3, #0
 800874e:	d04f      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800875e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d104      	bne.n	800877c <HAL_SPI_IRQHandler+0x168>
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d034      	beq.n	80087e6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0203 	bic.w	r2, r2, #3
 800878a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d011      	beq.n	80087b8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008798:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <HAL_SPI_IRQHandler+0x1e4>)
 800879a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fd fd01 	bl	80061a8 <HAL_DMA_Abort_IT>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d016      	beq.n	80087ee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087c4:	4a0c      	ldr	r2, [pc, #48]	; (80087f8 <HAL_SPI_IRQHandler+0x1e4>)
 80087c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fd fceb 	bl	80061a8 <HAL_DMA_Abort_IT>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80087e4:	e003      	b.n	80087ee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f808 	bl	80087fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80087ec:	e000      	b.n	80087f0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80087ee:	bf00      	nop
    return;
 80087f0:	bf00      	nop
  }
}
 80087f2:	3720      	adds	r7, #32
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	0800882d 	.word	0x0800882d

080087fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800881e:	b2db      	uxtb	r3, r3
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff ffd8 	bl	80087fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4613      	mov	r3, r2
 8008862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008864:	f7fc fe96 	bl	8005594 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4413      	add	r3, r2
 8008872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008874:	f7fc fe8e 	bl	8005594 <HAL_GetTick>
 8008878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800887a:	4b39      	ldr	r3, [pc, #228]	; (8008960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	015b      	lsls	r3, r3, #5
 8008880:	0d1b      	lsrs	r3, r3, #20
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800888a:	e054      	b.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d050      	beq.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008894:	f7fc fe7e 	bl	8005594 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d902      	bls.n	80088aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d13d      	bne.n	8008926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088c2:	d111      	bne.n	80088e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088cc:	d004      	beq.n	80088d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d6:	d107      	bne.n	80088e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f0:	d10f      	bne.n	8008912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e017      	b.n	8008956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3b01      	subs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4013      	ands	r3, r2
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	429a      	cmp	r2, r3
 8008944:	bf0c      	ite	eq
 8008946:	2301      	moveq	r3, #1
 8008948:	2300      	movne	r3, #0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	429a      	cmp	r2, r3
 8008952:	d19b      	bne.n	800888c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000128 	.word	0x20000128

08008964 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008978:	d111      	bne.n	800899e <SPI_EndRxTransaction+0x3a>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008982:	d004      	beq.n	800898e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898c:	d107      	bne.n	800899e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800899c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089a6:	d12a      	bne.n	80089fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b0:	d012      	beq.n	80089d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2200      	movs	r2, #0
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f7ff ff49 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02d      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089cc:	f043 0220 	orr.w	r2, r3, #32
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e026      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	2101      	movs	r1, #1
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff ff36 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01a      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f2:	f043 0220 	orr.w	r2, r3, #32
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e013      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2101      	movs	r1, #1
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff ff23 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e000      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a3c:	4b1b      	ldr	r3, [pc, #108]	; (8008aac <SPI_EndRxTxTransaction+0x7c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1b      	ldr	r2, [pc, #108]	; (8008ab0 <SPI_EndRxTxTransaction+0x80>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	0d5b      	lsrs	r3, r3, #21
 8008a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a5a:	d112      	bne.n	8008a82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	2180      	movs	r1, #128	; 0x80
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fef4 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d016      	beq.n	8008aa0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a76:	f043 0220 	orr.w	r2, r3, #32
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e00f      	b.n	8008aa2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00a      	beq.n	8008a9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a98:	2b80      	cmp	r3, #128	; 0x80
 8008a9a:	d0f2      	beq.n	8008a82 <SPI_EndRxTxTransaction+0x52>
 8008a9c:	e000      	b.n	8008aa0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008a9e:	bf00      	nop
  }

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000128 	.word	0x20000128
 8008ab0:	165e9f81 	.word	0x165e9f81

08008ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e03f      	b.n	8008b46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fc fb72 	bl	80051c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2224      	movs	r2, #36	; 0x24
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f881 	bl	8009c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695a      	ldr	r2, [r3, #20]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68da      	ldr	r2, [r3, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b08a      	sub	sp, #40	; 0x28
 8008b52:	af02      	add	r7, sp, #8
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	603b      	str	r3, [r7, #0]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d17c      	bne.n	8008c68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <HAL_UART_Transmit+0x2c>
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e075      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_UART_Transmit+0x3e>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e06e      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2221      	movs	r2, #33	; 0x21
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ba2:	f7fc fcf7 	bl	8005594 <HAL_GetTick>
 8008ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	88fa      	ldrh	r2, [r7, #6]
 8008bac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	88fa      	ldrh	r2, [r7, #6]
 8008bb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bbc:	d108      	bne.n	8008bd0 <HAL_UART_Transmit+0x82>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d104      	bne.n	8008bd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	61bb      	str	r3, [r7, #24]
 8008bce:	e003      	b.n	8008bd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008be0:	e02a      	b.n	8008c38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2200      	movs	r2, #0
 8008bea:	2180      	movs	r1, #128	; 0x80
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fd38 	bl	8009662 <UART_WaitOnFlagUntilTimeout>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e036      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	3302      	adds	r3, #2
 8008c16:	61bb      	str	r3, [r7, #24]
 8008c18:	e007      	b.n	8008c2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1cf      	bne.n	8008be2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2140      	movs	r1, #64	; 0x40
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fd08 	bl	8009662 <UART_WaitOnFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e006      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e000      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08c      	sub	sp, #48	; 0x30
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d165      	bne.n	8008d5a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <HAL_UART_Transmit_DMA+0x26>
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e05e      	b.n	8008d5c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_UART_Transmit_DMA+0x38>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e057      	b.n	8008d5c <HAL_UART_Transmit_DMA+0xe8>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	88fa      	ldrh	r2, [r7, #6]
 8008cc4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2221      	movs	r2, #33	; 0x21
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	4a22      	ldr	r2, [pc, #136]	; (8008d64 <HAL_UART_Transmit_DMA+0xf0>)
 8008cda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce0:	4a21      	ldr	r2, [pc, #132]	; (8008d68 <HAL_UART_Transmit_DMA+0xf4>)
 8008ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce8:	4a20      	ldr	r2, [pc, #128]	; (8008d6c <HAL_UART_Transmit_DMA+0xf8>)
 8008cea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008cf4:	f107 0308 	add.w	r3, r7, #8
 8008cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	6819      	ldr	r1, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3304      	adds	r3, #4
 8008d08:	461a      	mov	r2, r3
 8008d0a:	88fb      	ldrh	r3, [r7, #6]
 8008d0c:	f7fd f984 	bl	8006018 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d18:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3314      	adds	r3, #20
 8008d28:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	617b      	str	r3, [r7, #20]
   return(result);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3314      	adds	r3, #20
 8008d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d42:	627a      	str	r2, [r7, #36]	; 0x24
 8008d44:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6a39      	ldr	r1, [r7, #32]
 8008d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e5      	bne.n	8008d22 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e000      	b.n	8008d5c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008d5a:	2302      	movs	r3, #2
  }
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3730      	adds	r7, #48	; 0x30
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	080093bd 	.word	0x080093bd
 8008d68:	08009457 	.word	0x08009457
 8008d6c:	080095cf 	.word	0x080095cf

08008d70 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08c      	sub	sp, #48	; 0x30
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b20      	cmp	r3, #32
 8008d88:	d152      	bne.n	8008e30 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e04b      	b.n	8008e32 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e044      	b.n	8008e32 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008db6:	88fb      	ldrh	r3, [r7, #6]
 8008db8:	461a      	mov	r2, r3
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fcbf 	bl	8009740 <UART_Start_Receive_DMA>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d12c      	bne.n	8008e2a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d125      	bne.n	8008e24 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dd8:	2300      	movs	r3, #0
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f043 0310 	orr.w	r3, r3, #16
 8008e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	330c      	adds	r3, #12
 8008e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	6a39      	ldr	r1, [r7, #32]
 8008e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e5      	bne.n	8008dee <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008e22:	e002      	b.n	8008e2a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e2e:	e000      	b.n	8008e32 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008e30:	2302      	movs	r3, #2
  }
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3730      	adds	r7, #48	; 0x30
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b0ba      	sub	sp, #232	; 0xe8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e72:	f003 030f 	and.w	r3, r3, #15
 8008e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10f      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x66>
 8008e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fdf5 	bl	8009a8a <UART_Receive_IT>
      return;
 8008ea0:	e256      	b.n	8009350 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80de 	beq.w	8009068 <HAL_UART_IRQHandler+0x22c>
 8008eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d106      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ebc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80d1 	beq.w	8009068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00b      	beq.n	8008eea <HAL_UART_IRQHandler+0xae>
 8008ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	f043 0201 	orr.w	r2, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <HAL_UART_IRQHandler+0xd2>
 8008ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f043 0202 	orr.w	r2, r3, #2
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <HAL_UART_IRQHandler+0xf6>
 8008f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d005      	beq.n	8008f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	f043 0204 	orr.w	r2, r3, #4
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d011      	beq.n	8008f62 <HAL_UART_IRQHandler+0x126>
 8008f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d105      	bne.n	8008f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	f043 0208 	orr.w	r2, r3, #8
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 81ed 	beq.w	8009346 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <HAL_UART_IRQHandler+0x14e>
 8008f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f7c:	f003 0320 	and.w	r3, r3, #32
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fd80 	bl	8009a8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f94:	2b40      	cmp	r3, #64	; 0x40
 8008f96:	bf0c      	ite	eq
 8008f98:	2301      	moveq	r3, #1
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f003 0308 	and.w	r3, r3, #8
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x17a>
 8008fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d04f      	beq.n	8009056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fc88 	bl	80098cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc6:	2b40      	cmp	r3, #64	; 0x40
 8008fc8:	d141      	bne.n	800904e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3314      	adds	r3, #20
 8008fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3314      	adds	r3, #20
 8008ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800900e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1d9      	bne.n	8008fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d013      	beq.n	8009046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	4a7d      	ldr	r2, [pc, #500]	; (8009218 <HAL_UART_IRQHandler+0x3dc>)
 8009024:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	4618      	mov	r0, r3
 800902c:	f7fd f8bc 	bl	80061a8 <HAL_DMA_Abort_IT>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d016      	beq.n	8009064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009044:	e00e      	b.n	8009064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f9ae 	bl	80093a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800904c:	e00a      	b.n	8009064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f9aa 	bl	80093a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009054:	e006      	b.n	8009064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f9a6 	bl	80093a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009062:	e170      	b.n	8009346 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009064:	bf00      	nop
    return;
 8009066:	e16e      	b.n	8009346 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	2b01      	cmp	r3, #1
 800906e:	f040 814a 	bne.w	8009306 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 8143 	beq.w	8009306 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 813c 	beq.w	8009306 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60bb      	str	r3, [r7, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b40      	cmp	r3, #64	; 0x40
 80090b0:	f040 80b4 	bne.w	800921c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8140 	beq.w	800934a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090d2:	429a      	cmp	r2, r3
 80090d4:	f080 8139 	bcs.w	800934a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ea:	f000 8088 	beq.w	80091fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	330c      	adds	r3, #12
 80090f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800910c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800911a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800911e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1d9      	bne.n	80090ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3314      	adds	r3, #20
 8009140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800914a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800914c:	f023 0301 	bic.w	r3, r3, #1
 8009150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3314      	adds	r3, #20
 800915a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800915e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009166:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e1      	bne.n	800913a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3314      	adds	r3, #20
 800917c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3314      	adds	r3, #20
 8009196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800919a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800919c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80091a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e3      	bne.n	8009176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ce:	f023 0310 	bic.w	r3, r3, #16
 80091d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	330c      	adds	r3, #12
 80091dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80091e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80091e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e3      	bne.n	80091bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fc ff65 	bl	80060c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009206:	b29b      	uxth	r3, r3
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	b29b      	uxth	r3, r3
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7fa fc0a 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009214:	e099      	b.n	800934a <HAL_UART_IRQHandler+0x50e>
 8009216:	bf00      	nop
 8009218:	08009993 	.word	0x08009993
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009224:	b29b      	uxth	r3, r3
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009230:	b29b      	uxth	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 808b 	beq.w	800934e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8086 	beq.w	800934e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	330c      	adds	r3, #12
 8009248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	330c      	adds	r3, #12
 8009262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009266:	647a      	str	r2, [r7, #68]	; 0x44
 8009268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800926c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e3      	bne.n	8009242 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3314      	adds	r3, #20
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	623b      	str	r3, [r7, #32]
   return(result);
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	f023 0301 	bic.w	r3, r3, #1
 8009290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3314      	adds	r3, #20
 800929a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800929e:	633a      	str	r2, [r7, #48]	; 0x30
 80092a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e3      	bne.n	800927a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2220      	movs	r2, #32
 80092b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	330c      	adds	r3, #12
 80092c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0310 	bic.w	r3, r3, #16
 80092d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	330c      	adds	r3, #12
 80092e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80092e4:	61fa      	str	r2, [r7, #28]
 80092e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	69b9      	ldr	r1, [r7, #24]
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	617b      	str	r3, [r7, #20]
   return(result);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e3      	bne.n	80092c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fa fb92 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009304:	e023      	b.n	800934e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <HAL_UART_IRQHandler+0x4ea>
 8009312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fb4b 	bl	80099ba <UART_Transmit_IT>
    return;
 8009324:	e014      	b.n	8009350 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800932a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00e      	beq.n	8009350 <HAL_UART_IRQHandler+0x514>
 8009332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	d008      	beq.n	8009350 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fb8b 	bl	8009a5a <UART_EndTransmit_IT>
    return;
 8009344:	e004      	b.n	8009350 <HAL_UART_IRQHandler+0x514>
    return;
 8009346:	bf00      	nop
 8009348:	e002      	b.n	8009350 <HAL_UART_IRQHandler+0x514>
      return;
 800934a:	bf00      	nop
 800934c:	e000      	b.n	8009350 <HAL_UART_IRQHandler+0x514>
      return;
 800934e:	bf00      	nop
  }
}
 8009350:	37e8      	adds	r7, #232	; 0xe8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop

08009358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b090      	sub	sp, #64	; 0x40
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d137      	bne.n	8009448 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80093d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093da:	2200      	movs	r2, #0
 80093dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	3314      	adds	r3, #20
 80093e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	623b      	str	r3, [r7, #32]
   return(result);
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80093f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3314      	adds	r3, #20
 80093fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093fe:	633a      	str	r2, [r7, #48]	; 0x30
 8009400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e5      	bne.n	80093de <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	60fb      	str	r3, [r7, #12]
   return(result);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330c      	adds	r3, #12
 8009430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009432:	61fa      	str	r2, [r7, #28]
 8009434:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	69b9      	ldr	r1, [r7, #24]
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	617b      	str	r3, [r7, #20]
   return(result);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e5      	bne.n	8009412 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009446:	e002      	b.n	800944e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009448:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800944a:	f7ff ff85 	bl	8009358 <HAL_UART_TxCpltCallback>
}
 800944e:	bf00      	nop
 8009450:	3740      	adds	r7, #64	; 0x40
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f7ff ff81 	bl	800936c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b09c      	sub	sp, #112	; 0x70
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d172      	bne.n	8009574 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800948e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009490:	2200      	movs	r2, #0
 8009492:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	330c      	adds	r3, #12
 800949a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80094ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80094b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e5      	bne.n	8009494 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3314      	adds	r3, #20
 80094ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	667b      	str	r3, [r7, #100]	; 0x64
 80094e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3314      	adds	r3, #20
 80094e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094e8:	647a      	str	r2, [r7, #68]	; 0x44
 80094ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e5      	bne.n	80094c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3314      	adds	r3, #20
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	623b      	str	r3, [r7, #32]
   return(result);
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009512:	663b      	str	r3, [r7, #96]	; 0x60
 8009514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3314      	adds	r3, #20
 800951a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800951c:	633a      	str	r2, [r7, #48]	; 0x30
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e5      	bne.n	80094fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009532:	2220      	movs	r2, #32
 8009534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800953a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953c:	2b01      	cmp	r3, #1
 800953e:	d119      	bne.n	8009574 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0310 	bic.w	r3, r3, #16
 8009556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	330c      	adds	r3, #12
 800955e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009560:	61fa      	str	r2, [r7, #28]
 8009562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	69b9      	ldr	r1, [r7, #24]
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	617b      	str	r3, [r7, #20]
   return(result);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e5      	bne.n	8009540 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009578:	2b01      	cmp	r3, #1
 800957a:	d106      	bne.n	800958a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800957c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009580:	4619      	mov	r1, r3
 8009582:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009584:	f7fa fa50 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009588:	e002      	b.n	8009590 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800958a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800958c:	f7ff fef8 	bl	8009380 <HAL_UART_RxCpltCallback>
}
 8009590:	bf00      	nop
 8009592:	3770      	adds	r7, #112	; 0x70
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d108      	bne.n	80095c0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095b2:	085b      	lsrs	r3, r3, #1
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	4619      	mov	r1, r3
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7fa fa35 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095be:	e002      	b.n	80095c6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff fee7 	bl	8009394 <HAL_UART_RxHalfCpltCallback>
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ea:	2b80      	cmp	r3, #128	; 0x80
 80095ec:	bf0c      	ite	eq
 80095ee:	2301      	moveq	r3, #1
 80095f0:	2300      	movne	r3, #0
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b21      	cmp	r3, #33	; 0x21
 8009600:	d108      	bne.n	8009614 <UART_DMAError+0x46>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2200      	movs	r2, #0
 800960c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800960e:	68b8      	ldr	r0, [r7, #8]
 8009610:	f000 f934 	bl	800987c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961e:	2b40      	cmp	r3, #64	; 0x40
 8009620:	bf0c      	ite	eq
 8009622:	2301      	moveq	r3, #1
 8009624:	2300      	movne	r3, #0
 8009626:	b2db      	uxtb	r3, r3
 8009628:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b22      	cmp	r3, #34	; 0x22
 8009634:	d108      	bne.n	8009648 <UART_DMAError+0x7a>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2200      	movs	r2, #0
 8009640:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009642:	68b8      	ldr	r0, [r7, #8]
 8009644:	f000 f942 	bl	80098cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964c:	f043 0210 	orr.w	r2, r3, #16
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009654:	68b8      	ldr	r0, [r7, #8]
 8009656:	f7ff fea7 	bl	80093a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b090      	sub	sp, #64	; 0x40
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	4613      	mov	r3, r2
 8009670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009672:	e050      	b.n	8009716 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967a:	d04c      	beq.n	8009716 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800967c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0x30>
 8009682:	f7fb ff87 	bl	8005594 <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800968e:	429a      	cmp	r2, r3
 8009690:	d241      	bcs.n	8009716 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	330c      	adds	r3, #12
 8009698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	330c      	adds	r3, #12
 80096b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096b2:	637a      	str	r2, [r7, #52]	; 0x34
 80096b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e5      	bne.n	8009692 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3314      	adds	r3, #20
 80096cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	613b      	str	r3, [r7, #16]
   return(result);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f023 0301 	bic.w	r3, r3, #1
 80096dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3314      	adds	r3, #20
 80096e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096e6:	623a      	str	r2, [r7, #32]
 80096e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	69f9      	ldr	r1, [r7, #28]
 80096ec:	6a3a      	ldr	r2, [r7, #32]
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e5      	bne.n	80096c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2220      	movs	r2, #32
 8009706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e00f      	b.n	8009736 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4013      	ands	r3, r2
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	429a      	cmp	r2, r3
 8009724:	bf0c      	ite	eq
 8009726:	2301      	moveq	r3, #1
 8009728:	2300      	movne	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	461a      	mov	r2, r3
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	429a      	cmp	r2, r3
 8009732:	d09f      	beq.n	8009674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3740      	adds	r7, #64	; 0x40
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b098      	sub	sp, #96	; 0x60
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	88fa      	ldrh	r2, [r7, #6]
 8009758:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2222      	movs	r2, #34	; 0x22
 8009764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	4a40      	ldr	r2, [pc, #256]	; (8009870 <UART_Start_Receive_DMA+0x130>)
 800976e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	4a3f      	ldr	r2, [pc, #252]	; (8009874 <UART_Start_Receive_DMA+0x134>)
 8009776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	4a3e      	ldr	r2, [pc, #248]	; (8009878 <UART_Start_Receive_DMA+0x138>)
 800977e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	2200      	movs	r2, #0
 8009786:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009788:	f107 0308 	add.w	r3, r7, #8
 800978c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3304      	adds	r3, #4
 8009798:	4619      	mov	r1, r3
 800979a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	88fb      	ldrh	r3, [r7, #6]
 80097a0:	f7fc fc3a 	bl	8006018 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80097a4:	2300      	movs	r3, #0
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	613b      	str	r3, [r7, #16]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	613b      	str	r3, [r7, #16]
 80097b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d019      	beq.n	80097fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	330c      	adds	r3, #12
 80097e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80097ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80097f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	f043 0301 	orr.w	r3, r3, #1
 8009814:	657b      	str	r3, [r7, #84]	; 0x54
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3314      	adds	r3, #20
 800981c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800981e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009820:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3314      	adds	r3, #20
 8009838:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	617b      	str	r3, [r7, #20]
   return(result);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009848:	653b      	str	r3, [r7, #80]	; 0x50
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3314      	adds	r3, #20
 8009850:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009852:	627a      	str	r2, [r7, #36]	; 0x24
 8009854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	6a39      	ldr	r1, [r7, #32]
 8009858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e5      	bne.n	8009832 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3760      	adds	r7, #96	; 0x60
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	08009473 	.word	0x08009473
 8009874:	08009599 	.word	0x08009599
 8009878:	080095cf 	.word	0x080095cf

0800987c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b089      	sub	sp, #36	; 0x24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	330c      	adds	r3, #12
 800988a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	60bb      	str	r3, [r7, #8]
   return(result);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	330c      	adds	r3, #12
 80098a2:	69fa      	ldr	r2, [r7, #28]
 80098a4:	61ba      	str	r2, [r7, #24]
 80098a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6979      	ldr	r1, [r7, #20]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	e841 2300 	strex	r3, r2, [r1]
 80098b0:	613b      	str	r3, [r7, #16]
   return(result);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e5      	bne.n	8009884 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80098c0:	bf00      	nop
 80098c2:	3724      	adds	r7, #36	; 0x24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b095      	sub	sp, #84	; 0x54
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	330c      	adds	r3, #12
 80098da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098de:	e853 3f00 	ldrex	r3, [r3]
 80098e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	330c      	adds	r3, #12
 80098f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098f4:	643a      	str	r2, [r7, #64]	; 0x40
 80098f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e5      	bne.n	80098d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3314      	adds	r3, #20
 800990e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	61fb      	str	r3, [r7, #28]
   return(result);
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f023 0301 	bic.w	r3, r3, #1
 800991e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3314      	adds	r3, #20
 8009926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800992e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e5      	bne.n	8009908 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	2b01      	cmp	r3, #1
 8009942:	d119      	bne.n	8009978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	60bb      	str	r3, [r7, #8]
   return(result);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f023 0310 	bic.w	r3, r3, #16
 800995a:	647b      	str	r3, [r7, #68]	; 0x44
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	330c      	adds	r3, #12
 8009962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009964:	61ba      	str	r2, [r7, #24]
 8009966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6979      	ldr	r1, [r7, #20]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	613b      	str	r3, [r7, #16]
   return(result);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e5      	bne.n	8009944 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2220      	movs	r2, #32
 800997c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009986:	bf00      	nop
 8009988:	3754      	adds	r7, #84	; 0x54
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7ff fcfb 	bl	80093a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b085      	sub	sp, #20
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b21      	cmp	r3, #33	; 0x21
 80099cc:	d13e      	bne.n	8009a4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d6:	d114      	bne.n	8009a02 <UART_Transmit_IT+0x48>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d110      	bne.n	8009a02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	1c9a      	adds	r2, r3, #2
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	621a      	str	r2, [r3, #32]
 8009a00:	e008      	b.n	8009a14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	1c59      	adds	r1, r3, #1
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6211      	str	r1, [r2, #32]
 8009a0c:	781a      	ldrb	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	4619      	mov	r1, r3
 8009a22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10f      	bne.n	8009a48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e000      	b.n	8009a4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fc6c 	bl	8009358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b08c      	sub	sp, #48	; 0x30
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b22      	cmp	r3, #34	; 0x22
 8009a9c:	f040 80ab 	bne.w	8009bf6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa8:	d117      	bne.n	8009ada <UART_Receive_IT+0x50>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d113      	bne.n	8009ada <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad2:	1c9a      	adds	r2, r3, #2
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ad8:	e026      	b.n	8009b28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aec:	d007      	beq.n	8009afe <UART_Receive_IT+0x74>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10a      	bne.n	8009b0c <UART_Receive_IT+0x82>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d106      	bne.n	8009b0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	e008      	b.n	8009b1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	4619      	mov	r1, r3
 8009b36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d15a      	bne.n	8009bf2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0220 	bic.w	r2, r2, #32
 8009b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695a      	ldr	r2, [r3, #20]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0201 	bic.w	r2, r2, #1
 8009b6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d135      	bne.n	8009be8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	330c      	adds	r3, #12
 8009b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	613b      	str	r3, [r7, #16]
   return(result);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f023 0310 	bic.w	r3, r3, #16
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba2:	623a      	str	r2, [r7, #32]
 8009ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	69f9      	ldr	r1, [r7, #28]
 8009ba8:	6a3a      	ldr	r2, [r7, #32]
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e5      	bne.n	8009b82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d10a      	bne.n	8009bda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7f9 ff21 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
 8009be6:	e002      	b.n	8009bee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fbc9 	bl	8009380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e002      	b.n	8009bf8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e000      	b.n	8009bf8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009bf6:	2302      	movs	r3, #2
  }
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3730      	adds	r7, #48	; 0x30
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c04:	b0c0      	sub	sp, #256	; 0x100
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c1c:	68d9      	ldr	r1, [r3, #12]
 8009c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	ea40 0301 	orr.w	r3, r0, r1
 8009c28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	431a      	orrs	r2, r3
 8009c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c58:	f021 010c 	bic.w	r1, r1, #12
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c66:	430b      	orrs	r3, r1
 8009c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c7a:	6999      	ldr	r1, [r3, #24]
 8009c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	ea40 0301 	orr.w	r3, r0, r1
 8009c86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	4b8f      	ldr	r3, [pc, #572]	; (8009ecc <UART_SetConfig+0x2cc>)
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d005      	beq.n	8009ca0 <UART_SetConfig+0xa0>
 8009c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b8d      	ldr	r3, [pc, #564]	; (8009ed0 <UART_SetConfig+0x2d0>)
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d104      	bne.n	8009caa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ca0:	f7fd fb6e 	bl	8007380 <HAL_RCC_GetPCLK2Freq>
 8009ca4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ca8:	e003      	b.n	8009cb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009caa:	f7fd fb55 	bl	8007358 <HAL_RCC_GetPCLK1Freq>
 8009cae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cbc:	f040 810c 	bne.w	8009ed8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009cce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009cd2:	4622      	mov	r2, r4
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	1891      	adds	r1, r2, r2
 8009cd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009cda:	415b      	adcs	r3, r3
 8009cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	eb12 0801 	adds.w	r8, r2, r1
 8009ce8:	4629      	mov	r1, r5
 8009cea:	eb43 0901 	adc.w	r9, r3, r1
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d02:	4690      	mov	r8, r2
 8009d04:	4699      	mov	r9, r3
 8009d06:	4623      	mov	r3, r4
 8009d08:	eb18 0303 	adds.w	r3, r8, r3
 8009d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d10:	462b      	mov	r3, r5
 8009d12:	eb49 0303 	adc.w	r3, r9, r3
 8009d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009d2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d2e:	460b      	mov	r3, r1
 8009d30:	18db      	adds	r3, r3, r3
 8009d32:	653b      	str	r3, [r7, #80]	; 0x50
 8009d34:	4613      	mov	r3, r2
 8009d36:	eb42 0303 	adc.w	r3, r2, r3
 8009d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8009d3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d44:	f7f6 ffb0 	bl	8000ca8 <__aeabi_uldivmod>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4b61      	ldr	r3, [pc, #388]	; (8009ed4 <UART_SetConfig+0x2d4>)
 8009d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	011c      	lsls	r4, r3, #4
 8009d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	1891      	adds	r1, r2, r2
 8009d6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d70:	415b      	adcs	r3, r3
 8009d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d78:	4641      	mov	r1, r8
 8009d7a:	eb12 0a01 	adds.w	sl, r2, r1
 8009d7e:	4649      	mov	r1, r9
 8009d80:	eb43 0b01 	adc.w	fp, r3, r1
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d98:	4692      	mov	sl, r2
 8009d9a:	469b      	mov	fp, r3
 8009d9c:	4643      	mov	r3, r8
 8009d9e:	eb1a 0303 	adds.w	r3, sl, r3
 8009da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009da6:	464b      	mov	r3, r9
 8009da8:	eb4b 0303 	adc.w	r3, fp, r3
 8009dac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009dc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	18db      	adds	r3, r3, r3
 8009dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8009dca:	4613      	mov	r3, r2
 8009dcc:	eb42 0303 	adc.w	r3, r2, r3
 8009dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8009dd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009dd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009dda:	f7f6 ff65 	bl	8000ca8 <__aeabi_uldivmod>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	4b3b      	ldr	r3, [pc, #236]	; (8009ed4 <UART_SetConfig+0x2d4>)
 8009de6:	fba3 2301 	umull	r2, r3, r3, r1
 8009dea:	095b      	lsrs	r3, r3, #5
 8009dec:	2264      	movs	r2, #100	; 0x64
 8009dee:	fb02 f303 	mul.w	r3, r2, r3
 8009df2:	1acb      	subs	r3, r1, r3
 8009df4:	00db      	lsls	r3, r3, #3
 8009df6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009dfa:	4b36      	ldr	r3, [pc, #216]	; (8009ed4 <UART_SetConfig+0x2d4>)
 8009dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8009e00:	095b      	lsrs	r3, r3, #5
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e08:	441c      	add	r4, r3
 8009e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	1891      	adds	r1, r2, r2
 8009e22:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e24:	415b      	adcs	r3, r3
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	1851      	adds	r1, r2, r1
 8009e30:	6339      	str	r1, [r7, #48]	; 0x30
 8009e32:	4649      	mov	r1, r9
 8009e34:	414b      	adcs	r3, r1
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
 8009e38:	f04f 0200 	mov.w	r2, #0
 8009e3c:	f04f 0300 	mov.w	r3, #0
 8009e40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e44:	4659      	mov	r1, fp
 8009e46:	00cb      	lsls	r3, r1, #3
 8009e48:	4651      	mov	r1, sl
 8009e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e4e:	4651      	mov	r1, sl
 8009e50:	00ca      	lsls	r2, r1, #3
 8009e52:	4610      	mov	r0, r2
 8009e54:	4619      	mov	r1, r3
 8009e56:	4603      	mov	r3, r0
 8009e58:	4642      	mov	r2, r8
 8009e5a:	189b      	adds	r3, r3, r2
 8009e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e60:	464b      	mov	r3, r9
 8009e62:	460a      	mov	r2, r1
 8009e64:	eb42 0303 	adc.w	r3, r2, r3
 8009e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e80:	460b      	mov	r3, r1
 8009e82:	18db      	adds	r3, r3, r3
 8009e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e86:	4613      	mov	r3, r2
 8009e88:	eb42 0303 	adc.w	r3, r2, r3
 8009e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e96:	f7f6 ff07 	bl	8000ca8 <__aeabi_uldivmod>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <UART_SetConfig+0x2d4>)
 8009ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ea4:	095b      	lsrs	r3, r3, #5
 8009ea6:	2164      	movs	r1, #100	; 0x64
 8009ea8:	fb01 f303 	mul.w	r3, r1, r3
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	3332      	adds	r3, #50	; 0x32
 8009eb2:	4a08      	ldr	r2, [pc, #32]	; (8009ed4 <UART_SetConfig+0x2d4>)
 8009eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	f003 0207 	and.w	r2, r3, #7
 8009ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4422      	add	r2, r4
 8009ec6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ec8:	e106      	b.n	800a0d8 <UART_SetConfig+0x4d8>
 8009eca:	bf00      	nop
 8009ecc:	40011000 	.word	0x40011000
 8009ed0:	40011400 	.word	0x40011400
 8009ed4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009edc:	2200      	movs	r2, #0
 8009ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ee2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ee6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009eea:	4642      	mov	r2, r8
 8009eec:	464b      	mov	r3, r9
 8009eee:	1891      	adds	r1, r2, r2
 8009ef0:	6239      	str	r1, [r7, #32]
 8009ef2:	415b      	adcs	r3, r3
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009efa:	4641      	mov	r1, r8
 8009efc:	1854      	adds	r4, r2, r1
 8009efe:	4649      	mov	r1, r9
 8009f00:	eb43 0501 	adc.w	r5, r3, r1
 8009f04:	f04f 0200 	mov.w	r2, #0
 8009f08:	f04f 0300 	mov.w	r3, #0
 8009f0c:	00eb      	lsls	r3, r5, #3
 8009f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f12:	00e2      	lsls	r2, r4, #3
 8009f14:	4614      	mov	r4, r2
 8009f16:	461d      	mov	r5, r3
 8009f18:	4643      	mov	r3, r8
 8009f1a:	18e3      	adds	r3, r4, r3
 8009f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f20:	464b      	mov	r3, r9
 8009f22:	eb45 0303 	adc.w	r3, r5, r3
 8009f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f46:	4629      	mov	r1, r5
 8009f48:	008b      	lsls	r3, r1, #2
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f50:	4621      	mov	r1, r4
 8009f52:	008a      	lsls	r2, r1, #2
 8009f54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f58:	f7f6 fea6 	bl	8000ca8 <__aeabi_uldivmod>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4b60      	ldr	r3, [pc, #384]	; (800a0e4 <UART_SetConfig+0x4e4>)
 8009f62:	fba3 2302 	umull	r2, r3, r3, r2
 8009f66:	095b      	lsrs	r3, r3, #5
 8009f68:	011c      	lsls	r4, r3, #4
 8009f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	464b      	mov	r3, r9
 8009f80:	1891      	adds	r1, r2, r2
 8009f82:	61b9      	str	r1, [r7, #24]
 8009f84:	415b      	adcs	r3, r3
 8009f86:	61fb      	str	r3, [r7, #28]
 8009f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	1851      	adds	r1, r2, r1
 8009f90:	6139      	str	r1, [r7, #16]
 8009f92:	4649      	mov	r1, r9
 8009f94:	414b      	adcs	r3, r1
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	f04f 0200 	mov.w	r2, #0
 8009f9c:	f04f 0300 	mov.w	r3, #0
 8009fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	00cb      	lsls	r3, r1, #3
 8009fa8:	4651      	mov	r1, sl
 8009faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fae:	4651      	mov	r1, sl
 8009fb0:	00ca      	lsls	r2, r1, #3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4642      	mov	r2, r8
 8009fba:	189b      	adds	r3, r3, r2
 8009fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	460a      	mov	r2, r1
 8009fc4:	eb42 0303 	adc.w	r3, r2, r3
 8009fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	f04f 0300 	mov.w	r3, #0
 8009fe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	008b      	lsls	r3, r1, #2
 8009fe8:	4641      	mov	r1, r8
 8009fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fee:	4641      	mov	r1, r8
 8009ff0:	008a      	lsls	r2, r1, #2
 8009ff2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ff6:	f7f6 fe57 	bl	8000ca8 <__aeabi_uldivmod>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	4b38      	ldr	r3, [pc, #224]	; (800a0e4 <UART_SetConfig+0x4e4>)
 800a002:	fba3 2301 	umull	r2, r3, r3, r1
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	2264      	movs	r2, #100	; 0x64
 800a00a:	fb02 f303 	mul.w	r3, r2, r3
 800a00e:	1acb      	subs	r3, r1, r3
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	3332      	adds	r3, #50	; 0x32
 800a014:	4a33      	ldr	r2, [pc, #204]	; (800a0e4 <UART_SetConfig+0x4e4>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	095b      	lsrs	r3, r3, #5
 800a01c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a020:	441c      	add	r4, r3
 800a022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a026:	2200      	movs	r2, #0
 800a028:	673b      	str	r3, [r7, #112]	; 0x70
 800a02a:	677a      	str	r2, [r7, #116]	; 0x74
 800a02c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a030:	4642      	mov	r2, r8
 800a032:	464b      	mov	r3, r9
 800a034:	1891      	adds	r1, r2, r2
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	415b      	adcs	r3, r3
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a040:	4641      	mov	r1, r8
 800a042:	1851      	adds	r1, r2, r1
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	4649      	mov	r1, r9
 800a048:	414b      	adcs	r3, r1
 800a04a:	607b      	str	r3, [r7, #4]
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	f04f 0300 	mov.w	r3, #0
 800a054:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a058:	4659      	mov	r1, fp
 800a05a:	00cb      	lsls	r3, r1, #3
 800a05c:	4651      	mov	r1, sl
 800a05e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a062:	4651      	mov	r1, sl
 800a064:	00ca      	lsls	r2, r1, #3
 800a066:	4610      	mov	r0, r2
 800a068:	4619      	mov	r1, r3
 800a06a:	4603      	mov	r3, r0
 800a06c:	4642      	mov	r2, r8
 800a06e:	189b      	adds	r3, r3, r2
 800a070:	66bb      	str	r3, [r7, #104]	; 0x68
 800a072:	464b      	mov	r3, r9
 800a074:	460a      	mov	r2, r1
 800a076:	eb42 0303 	adc.w	r3, r2, r3
 800a07a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	663b      	str	r3, [r7, #96]	; 0x60
 800a086:	667a      	str	r2, [r7, #100]	; 0x64
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a094:	4649      	mov	r1, r9
 800a096:	008b      	lsls	r3, r1, #2
 800a098:	4641      	mov	r1, r8
 800a09a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a09e:	4641      	mov	r1, r8
 800a0a0:	008a      	lsls	r2, r1, #2
 800a0a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a0a6:	f7f6 fdff 	bl	8000ca8 <__aeabi_uldivmod>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <UART_SetConfig+0x4e4>)
 800a0b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0b4:	095b      	lsrs	r3, r3, #5
 800a0b6:	2164      	movs	r1, #100	; 0x64
 800a0b8:	fb01 f303 	mul.w	r3, r1, r3
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	3332      	adds	r3, #50	; 0x32
 800a0c2:	4a08      	ldr	r2, [pc, #32]	; (800a0e4 <UART_SetConfig+0x4e4>)
 800a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c8:	095b      	lsrs	r3, r3, #5
 800a0ca:	f003 020f 	and.w	r2, r3, #15
 800a0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4422      	add	r2, r4
 800a0d6:	609a      	str	r2, [r3, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0e4:	51eb851f 	.word	0x51eb851f

0800a0e8 <__cvt>:
 800a0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	ec55 4b10 	vmov	r4, r5, d0
 800a0f0:	2d00      	cmp	r5, #0
 800a0f2:	460e      	mov	r6, r1
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	bfbb      	ittet	lt
 800a0fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0fe:	461d      	movlt	r5, r3
 800a100:	2300      	movge	r3, #0
 800a102:	232d      	movlt	r3, #45	; 0x2d
 800a104:	700b      	strb	r3, [r1, #0]
 800a106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a108:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a10c:	4691      	mov	r9, r2
 800a10e:	f023 0820 	bic.w	r8, r3, #32
 800a112:	bfbc      	itt	lt
 800a114:	4622      	movlt	r2, r4
 800a116:	4614      	movlt	r4, r2
 800a118:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a11c:	d005      	beq.n	800a12a <__cvt+0x42>
 800a11e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a122:	d100      	bne.n	800a126 <__cvt+0x3e>
 800a124:	3601      	adds	r6, #1
 800a126:	2102      	movs	r1, #2
 800a128:	e000      	b.n	800a12c <__cvt+0x44>
 800a12a:	2103      	movs	r1, #3
 800a12c:	ab03      	add	r3, sp, #12
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	ab02      	add	r3, sp, #8
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	ec45 4b10 	vmov	d0, r4, r5
 800a138:	4653      	mov	r3, sl
 800a13a:	4632      	mov	r2, r6
 800a13c:	f000 ff44 	bl	800afc8 <_dtoa_r>
 800a140:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a144:	4607      	mov	r7, r0
 800a146:	d102      	bne.n	800a14e <__cvt+0x66>
 800a148:	f019 0f01 	tst.w	r9, #1
 800a14c:	d022      	beq.n	800a194 <__cvt+0xac>
 800a14e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a152:	eb07 0906 	add.w	r9, r7, r6
 800a156:	d110      	bne.n	800a17a <__cvt+0x92>
 800a158:	783b      	ldrb	r3, [r7, #0]
 800a15a:	2b30      	cmp	r3, #48	; 0x30
 800a15c:	d10a      	bne.n	800a174 <__cvt+0x8c>
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f7f6 fcbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800a16a:	b918      	cbnz	r0, 800a174 <__cvt+0x8c>
 800a16c:	f1c6 0601 	rsb	r6, r6, #1
 800a170:	f8ca 6000 	str.w	r6, [sl]
 800a174:	f8da 3000 	ldr.w	r3, [sl]
 800a178:	4499      	add	r9, r3
 800a17a:	2200      	movs	r2, #0
 800a17c:	2300      	movs	r3, #0
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800a186:	b108      	cbz	r0, 800a18c <__cvt+0xa4>
 800a188:	f8cd 900c 	str.w	r9, [sp, #12]
 800a18c:	2230      	movs	r2, #48	; 0x30
 800a18e:	9b03      	ldr	r3, [sp, #12]
 800a190:	454b      	cmp	r3, r9
 800a192:	d307      	bcc.n	800a1a4 <__cvt+0xbc>
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a198:	1bdb      	subs	r3, r3, r7
 800a19a:	4638      	mov	r0, r7
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	b004      	add	sp, #16
 800a1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a4:	1c59      	adds	r1, r3, #1
 800a1a6:	9103      	str	r1, [sp, #12]
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	e7f0      	b.n	800a18e <__cvt+0xa6>

0800a1ac <__exponent>:
 800a1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	bfb8      	it	lt
 800a1b4:	4249      	neglt	r1, r1
 800a1b6:	f803 2b02 	strb.w	r2, [r3], #2
 800a1ba:	bfb4      	ite	lt
 800a1bc:	222d      	movlt	r2, #45	; 0x2d
 800a1be:	222b      	movge	r2, #43	; 0x2b
 800a1c0:	2909      	cmp	r1, #9
 800a1c2:	7042      	strb	r2, [r0, #1]
 800a1c4:	dd2a      	ble.n	800a21c <__exponent+0x70>
 800a1c6:	f10d 0207 	add.w	r2, sp, #7
 800a1ca:	4617      	mov	r7, r2
 800a1cc:	260a      	movs	r6, #10
 800a1ce:	4694      	mov	ip, r2
 800a1d0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a1d4:	fb06 1415 	mls	r4, r6, r5, r1
 800a1d8:	3430      	adds	r4, #48	; 0x30
 800a1da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a1de:	460c      	mov	r4, r1
 800a1e0:	2c63      	cmp	r4, #99	; 0x63
 800a1e2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	dcf1      	bgt.n	800a1ce <__exponent+0x22>
 800a1ea:	3130      	adds	r1, #48	; 0x30
 800a1ec:	f1ac 0402 	sub.w	r4, ip, #2
 800a1f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1f4:	1c41      	adds	r1, r0, #1
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	42ba      	cmp	r2, r7
 800a1fa:	d30a      	bcc.n	800a212 <__exponent+0x66>
 800a1fc:	f10d 0209 	add.w	r2, sp, #9
 800a200:	eba2 020c 	sub.w	r2, r2, ip
 800a204:	42bc      	cmp	r4, r7
 800a206:	bf88      	it	hi
 800a208:	2200      	movhi	r2, #0
 800a20a:	4413      	add	r3, r2
 800a20c:	1a18      	subs	r0, r3, r0
 800a20e:	b003      	add	sp, #12
 800a210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a212:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a216:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a21a:	e7ed      	b.n	800a1f8 <__exponent+0x4c>
 800a21c:	2330      	movs	r3, #48	; 0x30
 800a21e:	3130      	adds	r1, #48	; 0x30
 800a220:	7083      	strb	r3, [r0, #2]
 800a222:	70c1      	strb	r1, [r0, #3]
 800a224:	1d03      	adds	r3, r0, #4
 800a226:	e7f1      	b.n	800a20c <__exponent+0x60>

0800a228 <_printf_float>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ed2d 8b02 	vpush	{d8}
 800a230:	b08d      	sub	sp, #52	; 0x34
 800a232:	460c      	mov	r4, r1
 800a234:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a238:	4616      	mov	r6, r2
 800a23a:	461f      	mov	r7, r3
 800a23c:	4605      	mov	r5, r0
 800a23e:	f000 fdb7 	bl	800adb0 <_localeconv_r>
 800a242:	f8d0 a000 	ldr.w	sl, [r0]
 800a246:	4650      	mov	r0, sl
 800a248:	f7f6 f822 	bl	8000290 <strlen>
 800a24c:	2300      	movs	r3, #0
 800a24e:	930a      	str	r3, [sp, #40]	; 0x28
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	9305      	str	r3, [sp, #20]
 800a254:	f8d8 3000 	ldr.w	r3, [r8]
 800a258:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a25c:	3307      	adds	r3, #7
 800a25e:	f023 0307 	bic.w	r3, r3, #7
 800a262:	f103 0208 	add.w	r2, r3, #8
 800a266:	f8c8 2000 	str.w	r2, [r8]
 800a26a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a26e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a272:	9307      	str	r3, [sp, #28]
 800a274:	f8cd 8018 	str.w	r8, [sp, #24]
 800a278:	ee08 0a10 	vmov	s16, r0
 800a27c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a284:	4b9e      	ldr	r3, [pc, #632]	; (800a500 <_printf_float+0x2d8>)
 800a286:	f04f 32ff 	mov.w	r2, #4294967295
 800a28a:	f7f6 fc5f 	bl	8000b4c <__aeabi_dcmpun>
 800a28e:	bb88      	cbnz	r0, 800a2f4 <_printf_float+0xcc>
 800a290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a294:	4b9a      	ldr	r3, [pc, #616]	; (800a500 <_printf_float+0x2d8>)
 800a296:	f04f 32ff 	mov.w	r2, #4294967295
 800a29a:	f7f6 fc39 	bl	8000b10 <__aeabi_dcmple>
 800a29e:	bb48      	cbnz	r0, 800a2f4 <_printf_float+0xcc>
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f7f6 fc28 	bl	8000afc <__aeabi_dcmplt>
 800a2ac:	b110      	cbz	r0, 800a2b4 <_printf_float+0x8c>
 800a2ae:	232d      	movs	r3, #45	; 0x2d
 800a2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b4:	4a93      	ldr	r2, [pc, #588]	; (800a504 <_printf_float+0x2dc>)
 800a2b6:	4b94      	ldr	r3, [pc, #592]	; (800a508 <_printf_float+0x2e0>)
 800a2b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2bc:	bf94      	ite	ls
 800a2be:	4690      	movls	r8, r2
 800a2c0:	4698      	movhi	r8, r3
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	9b05      	ldr	r3, [sp, #20]
 800a2c8:	f023 0304 	bic.w	r3, r3, #4
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	f04f 0900 	mov.w	r9, #0
 800a2d2:	9700      	str	r7, [sp, #0]
 800a2d4:	4633      	mov	r3, r6
 800a2d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f000 f9da 	bl	800a694 <_printf_common>
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	f040 8090 	bne.w	800a406 <_printf_float+0x1de>
 800a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ea:	b00d      	add	sp, #52	; 0x34
 800a2ec:	ecbd 8b02 	vpop	{d8}
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	4642      	mov	r2, r8
 800a2f6:	464b      	mov	r3, r9
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	f7f6 fc26 	bl	8000b4c <__aeabi_dcmpun>
 800a300:	b140      	cbz	r0, 800a314 <_printf_float+0xec>
 800a302:	464b      	mov	r3, r9
 800a304:	2b00      	cmp	r3, #0
 800a306:	bfbc      	itt	lt
 800a308:	232d      	movlt	r3, #45	; 0x2d
 800a30a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a30e:	4a7f      	ldr	r2, [pc, #508]	; (800a50c <_printf_float+0x2e4>)
 800a310:	4b7f      	ldr	r3, [pc, #508]	; (800a510 <_printf_float+0x2e8>)
 800a312:	e7d1      	b.n	800a2b8 <_printf_float+0x90>
 800a314:	6863      	ldr	r3, [r4, #4]
 800a316:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a31a:	9206      	str	r2, [sp, #24]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	d13f      	bne.n	800a3a0 <_printf_float+0x178>
 800a320:	2306      	movs	r3, #6
 800a322:	6063      	str	r3, [r4, #4]
 800a324:	9b05      	ldr	r3, [sp, #20]
 800a326:	6861      	ldr	r1, [r4, #4]
 800a328:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a32c:	2300      	movs	r3, #0
 800a32e:	9303      	str	r3, [sp, #12]
 800a330:	ab0a      	add	r3, sp, #40	; 0x28
 800a332:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a336:	ab09      	add	r3, sp, #36	; 0x24
 800a338:	ec49 8b10 	vmov	d0, r8, r9
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	6022      	str	r2, [r4, #0]
 800a340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a344:	4628      	mov	r0, r5
 800a346:	f7ff fecf 	bl	800a0e8 <__cvt>
 800a34a:	9b06      	ldr	r3, [sp, #24]
 800a34c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a34e:	2b47      	cmp	r3, #71	; 0x47
 800a350:	4680      	mov	r8, r0
 800a352:	d108      	bne.n	800a366 <_printf_float+0x13e>
 800a354:	1cc8      	adds	r0, r1, #3
 800a356:	db02      	blt.n	800a35e <_printf_float+0x136>
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	4299      	cmp	r1, r3
 800a35c:	dd41      	ble.n	800a3e2 <_printf_float+0x1ba>
 800a35e:	f1ab 0302 	sub.w	r3, fp, #2
 800a362:	fa5f fb83 	uxtb.w	fp, r3
 800a366:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a36a:	d820      	bhi.n	800a3ae <_printf_float+0x186>
 800a36c:	3901      	subs	r1, #1
 800a36e:	465a      	mov	r2, fp
 800a370:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a374:	9109      	str	r1, [sp, #36]	; 0x24
 800a376:	f7ff ff19 	bl	800a1ac <__exponent>
 800a37a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a37c:	1813      	adds	r3, r2, r0
 800a37e:	2a01      	cmp	r2, #1
 800a380:	4681      	mov	r9, r0
 800a382:	6123      	str	r3, [r4, #16]
 800a384:	dc02      	bgt.n	800a38c <_printf_float+0x164>
 800a386:	6822      	ldr	r2, [r4, #0]
 800a388:	07d2      	lsls	r2, r2, #31
 800a38a:	d501      	bpl.n	800a390 <_printf_float+0x168>
 800a38c:	3301      	adds	r3, #1
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a394:	2b00      	cmp	r3, #0
 800a396:	d09c      	beq.n	800a2d2 <_printf_float+0xaa>
 800a398:	232d      	movs	r3, #45	; 0x2d
 800a39a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a39e:	e798      	b.n	800a2d2 <_printf_float+0xaa>
 800a3a0:	9a06      	ldr	r2, [sp, #24]
 800a3a2:	2a47      	cmp	r2, #71	; 0x47
 800a3a4:	d1be      	bne.n	800a324 <_printf_float+0xfc>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1bc      	bne.n	800a324 <_printf_float+0xfc>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e7b9      	b.n	800a322 <_printf_float+0xfa>
 800a3ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3b2:	d118      	bne.n	800a3e6 <_printf_float+0x1be>
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	6863      	ldr	r3, [r4, #4]
 800a3b8:	dd0b      	ble.n	800a3d2 <_printf_float+0x1aa>
 800a3ba:	6121      	str	r1, [r4, #16]
 800a3bc:	b913      	cbnz	r3, 800a3c4 <_printf_float+0x19c>
 800a3be:	6822      	ldr	r2, [r4, #0]
 800a3c0:	07d0      	lsls	r0, r2, #31
 800a3c2:	d502      	bpl.n	800a3ca <_printf_float+0x1a2>
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	440b      	add	r3, r1
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3cc:	f04f 0900 	mov.w	r9, #0
 800a3d0:	e7de      	b.n	800a390 <_printf_float+0x168>
 800a3d2:	b913      	cbnz	r3, 800a3da <_printf_float+0x1b2>
 800a3d4:	6822      	ldr	r2, [r4, #0]
 800a3d6:	07d2      	lsls	r2, r2, #31
 800a3d8:	d501      	bpl.n	800a3de <_printf_float+0x1b6>
 800a3da:	3302      	adds	r3, #2
 800a3dc:	e7f4      	b.n	800a3c8 <_printf_float+0x1a0>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e7f2      	b.n	800a3c8 <_printf_float+0x1a0>
 800a3e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e8:	4299      	cmp	r1, r3
 800a3ea:	db05      	blt.n	800a3f8 <_printf_float+0x1d0>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	6121      	str	r1, [r4, #16]
 800a3f0:	07d8      	lsls	r0, r3, #31
 800a3f2:	d5ea      	bpl.n	800a3ca <_printf_float+0x1a2>
 800a3f4:	1c4b      	adds	r3, r1, #1
 800a3f6:	e7e7      	b.n	800a3c8 <_printf_float+0x1a0>
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	bfd4      	ite	le
 800a3fc:	f1c1 0202 	rsble	r2, r1, #2
 800a400:	2201      	movgt	r2, #1
 800a402:	4413      	add	r3, r2
 800a404:	e7e0      	b.n	800a3c8 <_printf_float+0x1a0>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	055a      	lsls	r2, r3, #21
 800a40a:	d407      	bmi.n	800a41c <_printf_float+0x1f4>
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	4642      	mov	r2, r8
 800a410:	4631      	mov	r1, r6
 800a412:	4628      	mov	r0, r5
 800a414:	47b8      	blx	r7
 800a416:	3001      	adds	r0, #1
 800a418:	d12c      	bne.n	800a474 <_printf_float+0x24c>
 800a41a:	e764      	b.n	800a2e6 <_printf_float+0xbe>
 800a41c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a420:	f240 80e0 	bls.w	800a5e4 <_printf_float+0x3bc>
 800a424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a428:	2200      	movs	r2, #0
 800a42a:	2300      	movs	r3, #0
 800a42c:	f7f6 fb5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a430:	2800      	cmp	r0, #0
 800a432:	d034      	beq.n	800a49e <_printf_float+0x276>
 800a434:	4a37      	ldr	r2, [pc, #220]	; (800a514 <_printf_float+0x2ec>)
 800a436:	2301      	movs	r3, #1
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	f43f af51 	beq.w	800a2e6 <_printf_float+0xbe>
 800a444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a448:	429a      	cmp	r2, r3
 800a44a:	db02      	blt.n	800a452 <_printf_float+0x22a>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	07d8      	lsls	r0, r3, #31
 800a450:	d510      	bpl.n	800a474 <_printf_float+0x24c>
 800a452:	ee18 3a10 	vmov	r3, s16
 800a456:	4652      	mov	r2, sl
 800a458:	4631      	mov	r1, r6
 800a45a:	4628      	mov	r0, r5
 800a45c:	47b8      	blx	r7
 800a45e:	3001      	adds	r0, #1
 800a460:	f43f af41 	beq.w	800a2e6 <_printf_float+0xbe>
 800a464:	f04f 0800 	mov.w	r8, #0
 800a468:	f104 091a 	add.w	r9, r4, #26
 800a46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46e:	3b01      	subs	r3, #1
 800a470:	4543      	cmp	r3, r8
 800a472:	dc09      	bgt.n	800a488 <_printf_float+0x260>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	079b      	lsls	r3, r3, #30
 800a478:	f100 8107 	bmi.w	800a68a <_printf_float+0x462>
 800a47c:	68e0      	ldr	r0, [r4, #12]
 800a47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a480:	4298      	cmp	r0, r3
 800a482:	bfb8      	it	lt
 800a484:	4618      	movlt	r0, r3
 800a486:	e730      	b.n	800a2ea <_printf_float+0xc2>
 800a488:	2301      	movs	r3, #1
 800a48a:	464a      	mov	r2, r9
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f af27 	beq.w	800a2e6 <_printf_float+0xbe>
 800a498:	f108 0801 	add.w	r8, r8, #1
 800a49c:	e7e6      	b.n	800a46c <_printf_float+0x244>
 800a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dc39      	bgt.n	800a518 <_printf_float+0x2f0>
 800a4a4:	4a1b      	ldr	r2, [pc, #108]	; (800a514 <_printf_float+0x2ec>)
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	47b8      	blx	r7
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f43f af19 	beq.w	800a2e6 <_printf_float+0xbe>
 800a4b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	d102      	bne.n	800a4c2 <_printf_float+0x29a>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	07d9      	lsls	r1, r3, #31
 800a4c0:	d5d8      	bpl.n	800a474 <_printf_float+0x24c>
 800a4c2:	ee18 3a10 	vmov	r3, s16
 800a4c6:	4652      	mov	r2, sl
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	47b8      	blx	r7
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	f43f af09 	beq.w	800a2e6 <_printf_float+0xbe>
 800a4d4:	f04f 0900 	mov.w	r9, #0
 800a4d8:	f104 0a1a 	add.w	sl, r4, #26
 800a4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4de:	425b      	negs	r3, r3
 800a4e0:	454b      	cmp	r3, r9
 800a4e2:	dc01      	bgt.n	800a4e8 <_printf_float+0x2c0>
 800a4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e6:	e792      	b.n	800a40e <_printf_float+0x1e6>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f aef7 	beq.w	800a2e6 <_printf_float+0xbe>
 800a4f8:	f109 0901 	add.w	r9, r9, #1
 800a4fc:	e7ee      	b.n	800a4dc <_printf_float+0x2b4>
 800a4fe:	bf00      	nop
 800a500:	7fefffff 	.word	0x7fefffff
 800a504:	0800e47c 	.word	0x0800e47c
 800a508:	0800e480 	.word	0x0800e480
 800a50c:	0800e484 	.word	0x0800e484
 800a510:	0800e488 	.word	0x0800e488
 800a514:	0800e48c 	.word	0x0800e48c
 800a518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a51a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a51c:	429a      	cmp	r2, r3
 800a51e:	bfa8      	it	ge
 800a520:	461a      	movge	r2, r3
 800a522:	2a00      	cmp	r2, #0
 800a524:	4691      	mov	r9, r2
 800a526:	dc37      	bgt.n	800a598 <_printf_float+0x370>
 800a528:	f04f 0b00 	mov.w	fp, #0
 800a52c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a530:	f104 021a 	add.w	r2, r4, #26
 800a534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	eba3 0309 	sub.w	r3, r3, r9
 800a53c:	455b      	cmp	r3, fp
 800a53e:	dc33      	bgt.n	800a5a8 <_printf_float+0x380>
 800a540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a544:	429a      	cmp	r2, r3
 800a546:	db3b      	blt.n	800a5c0 <_printf_float+0x398>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	07da      	lsls	r2, r3, #31
 800a54c:	d438      	bmi.n	800a5c0 <_printf_float+0x398>
 800a54e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a552:	eba2 0903 	sub.w	r9, r2, r3
 800a556:	9b05      	ldr	r3, [sp, #20]
 800a558:	1ad2      	subs	r2, r2, r3
 800a55a:	4591      	cmp	r9, r2
 800a55c:	bfa8      	it	ge
 800a55e:	4691      	movge	r9, r2
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	dc35      	bgt.n	800a5d2 <_printf_float+0x3aa>
 800a566:	f04f 0800 	mov.w	r8, #0
 800a56a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a56e:	f104 0a1a 	add.w	sl, r4, #26
 800a572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a576:	1a9b      	subs	r3, r3, r2
 800a578:	eba3 0309 	sub.w	r3, r3, r9
 800a57c:	4543      	cmp	r3, r8
 800a57e:	f77f af79 	ble.w	800a474 <_printf_float+0x24c>
 800a582:	2301      	movs	r3, #1
 800a584:	4652      	mov	r2, sl
 800a586:	4631      	mov	r1, r6
 800a588:	4628      	mov	r0, r5
 800a58a:	47b8      	blx	r7
 800a58c:	3001      	adds	r0, #1
 800a58e:	f43f aeaa 	beq.w	800a2e6 <_printf_float+0xbe>
 800a592:	f108 0801 	add.w	r8, r8, #1
 800a596:	e7ec      	b.n	800a572 <_printf_float+0x34a>
 800a598:	4613      	mov	r3, r2
 800a59a:	4631      	mov	r1, r6
 800a59c:	4642      	mov	r2, r8
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b8      	blx	r7
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d1c0      	bne.n	800a528 <_printf_float+0x300>
 800a5a6:	e69e      	b.n	800a2e6 <_printf_float+0xbe>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	9205      	str	r2, [sp, #20]
 800a5b0:	47b8      	blx	r7
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	f43f ae97 	beq.w	800a2e6 <_printf_float+0xbe>
 800a5b8:	9a05      	ldr	r2, [sp, #20]
 800a5ba:	f10b 0b01 	add.w	fp, fp, #1
 800a5be:	e7b9      	b.n	800a534 <_printf_float+0x30c>
 800a5c0:	ee18 3a10 	vmov	r3, s16
 800a5c4:	4652      	mov	r2, sl
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	47b8      	blx	r7
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d1be      	bne.n	800a54e <_printf_float+0x326>
 800a5d0:	e689      	b.n	800a2e6 <_printf_float+0xbe>
 800a5d2:	9a05      	ldr	r2, [sp, #20]
 800a5d4:	464b      	mov	r3, r9
 800a5d6:	4442      	add	r2, r8
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d1c1      	bne.n	800a566 <_printf_float+0x33e>
 800a5e2:	e680      	b.n	800a2e6 <_printf_float+0xbe>
 800a5e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5e6:	2a01      	cmp	r2, #1
 800a5e8:	dc01      	bgt.n	800a5ee <_printf_float+0x3c6>
 800a5ea:	07db      	lsls	r3, r3, #31
 800a5ec:	d53a      	bpl.n	800a664 <_printf_float+0x43c>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	47b8      	blx	r7
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f43f ae74 	beq.w	800a2e6 <_printf_float+0xbe>
 800a5fe:	ee18 3a10 	vmov	r3, s16
 800a602:	4652      	mov	r2, sl
 800a604:	4631      	mov	r1, r6
 800a606:	4628      	mov	r0, r5
 800a608:	47b8      	blx	r7
 800a60a:	3001      	adds	r0, #1
 800a60c:	f43f ae6b 	beq.w	800a2e6 <_printf_float+0xbe>
 800a610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a614:	2200      	movs	r2, #0
 800a616:	2300      	movs	r3, #0
 800a618:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a61c:	f7f6 fa64 	bl	8000ae8 <__aeabi_dcmpeq>
 800a620:	b9d8      	cbnz	r0, 800a65a <_printf_float+0x432>
 800a622:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a626:	f108 0201 	add.w	r2, r8, #1
 800a62a:	4631      	mov	r1, r6
 800a62c:	4628      	mov	r0, r5
 800a62e:	47b8      	blx	r7
 800a630:	3001      	adds	r0, #1
 800a632:	d10e      	bne.n	800a652 <_printf_float+0x42a>
 800a634:	e657      	b.n	800a2e6 <_printf_float+0xbe>
 800a636:	2301      	movs	r3, #1
 800a638:	4652      	mov	r2, sl
 800a63a:	4631      	mov	r1, r6
 800a63c:	4628      	mov	r0, r5
 800a63e:	47b8      	blx	r7
 800a640:	3001      	adds	r0, #1
 800a642:	f43f ae50 	beq.w	800a2e6 <_printf_float+0xbe>
 800a646:	f108 0801 	add.w	r8, r8, #1
 800a64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64c:	3b01      	subs	r3, #1
 800a64e:	4543      	cmp	r3, r8
 800a650:	dcf1      	bgt.n	800a636 <_printf_float+0x40e>
 800a652:	464b      	mov	r3, r9
 800a654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a658:	e6da      	b.n	800a410 <_printf_float+0x1e8>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	f104 0a1a 	add.w	sl, r4, #26
 800a662:	e7f2      	b.n	800a64a <_printf_float+0x422>
 800a664:	2301      	movs	r3, #1
 800a666:	4642      	mov	r2, r8
 800a668:	e7df      	b.n	800a62a <_printf_float+0x402>
 800a66a:	2301      	movs	r3, #1
 800a66c:	464a      	mov	r2, r9
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	f43f ae36 	beq.w	800a2e6 <_printf_float+0xbe>
 800a67a:	f108 0801 	add.w	r8, r8, #1
 800a67e:	68e3      	ldr	r3, [r4, #12]
 800a680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a682:	1a5b      	subs	r3, r3, r1
 800a684:	4543      	cmp	r3, r8
 800a686:	dcf0      	bgt.n	800a66a <_printf_float+0x442>
 800a688:	e6f8      	b.n	800a47c <_printf_float+0x254>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	f104 0919 	add.w	r9, r4, #25
 800a692:	e7f4      	b.n	800a67e <_printf_float+0x456>

0800a694 <_printf_common>:
 800a694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	4616      	mov	r6, r2
 800a69a:	4699      	mov	r9, r3
 800a69c:	688a      	ldr	r2, [r1, #8]
 800a69e:	690b      	ldr	r3, [r1, #16]
 800a6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	bfb8      	it	lt
 800a6a8:	4613      	movlt	r3, r2
 800a6aa:	6033      	str	r3, [r6, #0]
 800a6ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	b10a      	cbz	r2, 800a6ba <_printf_common+0x26>
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	6033      	str	r3, [r6, #0]
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	0699      	lsls	r1, r3, #26
 800a6be:	bf42      	ittt	mi
 800a6c0:	6833      	ldrmi	r3, [r6, #0]
 800a6c2:	3302      	addmi	r3, #2
 800a6c4:	6033      	strmi	r3, [r6, #0]
 800a6c6:	6825      	ldr	r5, [r4, #0]
 800a6c8:	f015 0506 	ands.w	r5, r5, #6
 800a6cc:	d106      	bne.n	800a6dc <_printf_common+0x48>
 800a6ce:	f104 0a19 	add.w	sl, r4, #25
 800a6d2:	68e3      	ldr	r3, [r4, #12]
 800a6d4:	6832      	ldr	r2, [r6, #0]
 800a6d6:	1a9b      	subs	r3, r3, r2
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	dc26      	bgt.n	800a72a <_printf_common+0x96>
 800a6dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6e0:	1e13      	subs	r3, r2, #0
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	bf18      	it	ne
 800a6e6:	2301      	movne	r3, #1
 800a6e8:	0692      	lsls	r2, r2, #26
 800a6ea:	d42b      	bmi.n	800a744 <_printf_common+0xb0>
 800a6ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	47c0      	blx	r8
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d01e      	beq.n	800a738 <_printf_common+0xa4>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	6922      	ldr	r2, [r4, #16]
 800a6fe:	f003 0306 	and.w	r3, r3, #6
 800a702:	2b04      	cmp	r3, #4
 800a704:	bf02      	ittt	eq
 800a706:	68e5      	ldreq	r5, [r4, #12]
 800a708:	6833      	ldreq	r3, [r6, #0]
 800a70a:	1aed      	subeq	r5, r5, r3
 800a70c:	68a3      	ldr	r3, [r4, #8]
 800a70e:	bf0c      	ite	eq
 800a710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a714:	2500      	movne	r5, #0
 800a716:	4293      	cmp	r3, r2
 800a718:	bfc4      	itt	gt
 800a71a:	1a9b      	subgt	r3, r3, r2
 800a71c:	18ed      	addgt	r5, r5, r3
 800a71e:	2600      	movs	r6, #0
 800a720:	341a      	adds	r4, #26
 800a722:	42b5      	cmp	r5, r6
 800a724:	d11a      	bne.n	800a75c <_printf_common+0xc8>
 800a726:	2000      	movs	r0, #0
 800a728:	e008      	b.n	800a73c <_printf_common+0xa8>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4652      	mov	r2, sl
 800a72e:	4649      	mov	r1, r9
 800a730:	4638      	mov	r0, r7
 800a732:	47c0      	blx	r8
 800a734:	3001      	adds	r0, #1
 800a736:	d103      	bne.n	800a740 <_printf_common+0xac>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	3501      	adds	r5, #1
 800a742:	e7c6      	b.n	800a6d2 <_printf_common+0x3e>
 800a744:	18e1      	adds	r1, r4, r3
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	2030      	movs	r0, #48	; 0x30
 800a74a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a74e:	4422      	add	r2, r4
 800a750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a758:	3302      	adds	r3, #2
 800a75a:	e7c7      	b.n	800a6ec <_printf_common+0x58>
 800a75c:	2301      	movs	r3, #1
 800a75e:	4622      	mov	r2, r4
 800a760:	4649      	mov	r1, r9
 800a762:	4638      	mov	r0, r7
 800a764:	47c0      	blx	r8
 800a766:	3001      	adds	r0, #1
 800a768:	d0e6      	beq.n	800a738 <_printf_common+0xa4>
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7d9      	b.n	800a722 <_printf_common+0x8e>
	...

0800a770 <_printf_i>:
 800a770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a774:	7e0f      	ldrb	r7, [r1, #24]
 800a776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a778:	2f78      	cmp	r7, #120	; 0x78
 800a77a:	4691      	mov	r9, r2
 800a77c:	4680      	mov	r8, r0
 800a77e:	460c      	mov	r4, r1
 800a780:	469a      	mov	sl, r3
 800a782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a786:	d807      	bhi.n	800a798 <_printf_i+0x28>
 800a788:	2f62      	cmp	r7, #98	; 0x62
 800a78a:	d80a      	bhi.n	800a7a2 <_printf_i+0x32>
 800a78c:	2f00      	cmp	r7, #0
 800a78e:	f000 80d4 	beq.w	800a93a <_printf_i+0x1ca>
 800a792:	2f58      	cmp	r7, #88	; 0x58
 800a794:	f000 80c0 	beq.w	800a918 <_printf_i+0x1a8>
 800a798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a79c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7a0:	e03a      	b.n	800a818 <_printf_i+0xa8>
 800a7a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7a6:	2b15      	cmp	r3, #21
 800a7a8:	d8f6      	bhi.n	800a798 <_printf_i+0x28>
 800a7aa:	a101      	add	r1, pc, #4	; (adr r1, 800a7b0 <_printf_i+0x40>)
 800a7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a81d 	.word	0x0800a81d
 800a7b8:	0800a799 	.word	0x0800a799
 800a7bc:	0800a799 	.word	0x0800a799
 800a7c0:	0800a799 	.word	0x0800a799
 800a7c4:	0800a799 	.word	0x0800a799
 800a7c8:	0800a81d 	.word	0x0800a81d
 800a7cc:	0800a799 	.word	0x0800a799
 800a7d0:	0800a799 	.word	0x0800a799
 800a7d4:	0800a799 	.word	0x0800a799
 800a7d8:	0800a799 	.word	0x0800a799
 800a7dc:	0800a921 	.word	0x0800a921
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a8db 	.word	0x0800a8db
 800a7e8:	0800a799 	.word	0x0800a799
 800a7ec:	0800a799 	.word	0x0800a799
 800a7f0:	0800a943 	.word	0x0800a943
 800a7f4:	0800a799 	.word	0x0800a799
 800a7f8:	0800a849 	.word	0x0800a849
 800a7fc:	0800a799 	.word	0x0800a799
 800a800:	0800a799 	.word	0x0800a799
 800a804:	0800a8e3 	.word	0x0800a8e3
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	602a      	str	r2, [r5, #0]
 800a810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a818:	2301      	movs	r3, #1
 800a81a:	e09f      	b.n	800a95c <_printf_i+0x1ec>
 800a81c:	6820      	ldr	r0, [r4, #0]
 800a81e:	682b      	ldr	r3, [r5, #0]
 800a820:	0607      	lsls	r7, r0, #24
 800a822:	f103 0104 	add.w	r1, r3, #4
 800a826:	6029      	str	r1, [r5, #0]
 800a828:	d501      	bpl.n	800a82e <_printf_i+0xbe>
 800a82a:	681e      	ldr	r6, [r3, #0]
 800a82c:	e003      	b.n	800a836 <_printf_i+0xc6>
 800a82e:	0646      	lsls	r6, r0, #25
 800a830:	d5fb      	bpl.n	800a82a <_printf_i+0xba>
 800a832:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a836:	2e00      	cmp	r6, #0
 800a838:	da03      	bge.n	800a842 <_printf_i+0xd2>
 800a83a:	232d      	movs	r3, #45	; 0x2d
 800a83c:	4276      	negs	r6, r6
 800a83e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a842:	485a      	ldr	r0, [pc, #360]	; (800a9ac <_printf_i+0x23c>)
 800a844:	230a      	movs	r3, #10
 800a846:	e012      	b.n	800a86e <_printf_i+0xfe>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	6820      	ldr	r0, [r4, #0]
 800a84c:	1d19      	adds	r1, r3, #4
 800a84e:	6029      	str	r1, [r5, #0]
 800a850:	0605      	lsls	r5, r0, #24
 800a852:	d501      	bpl.n	800a858 <_printf_i+0xe8>
 800a854:	681e      	ldr	r6, [r3, #0]
 800a856:	e002      	b.n	800a85e <_printf_i+0xee>
 800a858:	0641      	lsls	r1, r0, #25
 800a85a:	d5fb      	bpl.n	800a854 <_printf_i+0xe4>
 800a85c:	881e      	ldrh	r6, [r3, #0]
 800a85e:	4853      	ldr	r0, [pc, #332]	; (800a9ac <_printf_i+0x23c>)
 800a860:	2f6f      	cmp	r7, #111	; 0x6f
 800a862:	bf0c      	ite	eq
 800a864:	2308      	moveq	r3, #8
 800a866:	230a      	movne	r3, #10
 800a868:	2100      	movs	r1, #0
 800a86a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a86e:	6865      	ldr	r5, [r4, #4]
 800a870:	60a5      	str	r5, [r4, #8]
 800a872:	2d00      	cmp	r5, #0
 800a874:	bfa2      	ittt	ge
 800a876:	6821      	ldrge	r1, [r4, #0]
 800a878:	f021 0104 	bicge.w	r1, r1, #4
 800a87c:	6021      	strge	r1, [r4, #0]
 800a87e:	b90e      	cbnz	r6, 800a884 <_printf_i+0x114>
 800a880:	2d00      	cmp	r5, #0
 800a882:	d04b      	beq.n	800a91c <_printf_i+0x1ac>
 800a884:	4615      	mov	r5, r2
 800a886:	fbb6 f1f3 	udiv	r1, r6, r3
 800a88a:	fb03 6711 	mls	r7, r3, r1, r6
 800a88e:	5dc7      	ldrb	r7, [r0, r7]
 800a890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a894:	4637      	mov	r7, r6
 800a896:	42bb      	cmp	r3, r7
 800a898:	460e      	mov	r6, r1
 800a89a:	d9f4      	bls.n	800a886 <_printf_i+0x116>
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d10b      	bne.n	800a8b8 <_printf_i+0x148>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	07de      	lsls	r6, r3, #31
 800a8a4:	d508      	bpl.n	800a8b8 <_printf_i+0x148>
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	bfde      	ittt	le
 800a8ae:	2330      	movle	r3, #48	; 0x30
 800a8b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8b8:	1b52      	subs	r2, r2, r5
 800a8ba:	6122      	str	r2, [r4, #16]
 800a8bc:	f8cd a000 	str.w	sl, [sp]
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	aa03      	add	r2, sp, #12
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7ff fee4 	bl	800a694 <_printf_common>
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d14a      	bne.n	800a966 <_printf_i+0x1f6>
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	b004      	add	sp, #16
 800a8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	f043 0320 	orr.w	r3, r3, #32
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	4833      	ldr	r0, [pc, #204]	; (800a9b0 <_printf_i+0x240>)
 800a8e4:	2778      	movs	r7, #120	; 0x78
 800a8e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	6829      	ldr	r1, [r5, #0]
 800a8ee:	061f      	lsls	r7, r3, #24
 800a8f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8f4:	d402      	bmi.n	800a8fc <_printf_i+0x18c>
 800a8f6:	065f      	lsls	r7, r3, #25
 800a8f8:	bf48      	it	mi
 800a8fa:	b2b6      	uxthmi	r6, r6
 800a8fc:	07df      	lsls	r7, r3, #31
 800a8fe:	bf48      	it	mi
 800a900:	f043 0320 	orrmi.w	r3, r3, #32
 800a904:	6029      	str	r1, [r5, #0]
 800a906:	bf48      	it	mi
 800a908:	6023      	strmi	r3, [r4, #0]
 800a90a:	b91e      	cbnz	r6, 800a914 <_printf_i+0x1a4>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	f023 0320 	bic.w	r3, r3, #32
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	2310      	movs	r3, #16
 800a916:	e7a7      	b.n	800a868 <_printf_i+0xf8>
 800a918:	4824      	ldr	r0, [pc, #144]	; (800a9ac <_printf_i+0x23c>)
 800a91a:	e7e4      	b.n	800a8e6 <_printf_i+0x176>
 800a91c:	4615      	mov	r5, r2
 800a91e:	e7bd      	b.n	800a89c <_printf_i+0x12c>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	6826      	ldr	r6, [r4, #0]
 800a924:	6961      	ldr	r1, [r4, #20]
 800a926:	1d18      	adds	r0, r3, #4
 800a928:	6028      	str	r0, [r5, #0]
 800a92a:	0635      	lsls	r5, r6, #24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	d501      	bpl.n	800a934 <_printf_i+0x1c4>
 800a930:	6019      	str	r1, [r3, #0]
 800a932:	e002      	b.n	800a93a <_printf_i+0x1ca>
 800a934:	0670      	lsls	r0, r6, #25
 800a936:	d5fb      	bpl.n	800a930 <_printf_i+0x1c0>
 800a938:	8019      	strh	r1, [r3, #0]
 800a93a:	2300      	movs	r3, #0
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	4615      	mov	r5, r2
 800a940:	e7bc      	b.n	800a8bc <_printf_i+0x14c>
 800a942:	682b      	ldr	r3, [r5, #0]
 800a944:	1d1a      	adds	r2, r3, #4
 800a946:	602a      	str	r2, [r5, #0]
 800a948:	681d      	ldr	r5, [r3, #0]
 800a94a:	6862      	ldr	r2, [r4, #4]
 800a94c:	2100      	movs	r1, #0
 800a94e:	4628      	mov	r0, r5
 800a950:	f7f5 fc4e 	bl	80001f0 <memchr>
 800a954:	b108      	cbz	r0, 800a95a <_printf_i+0x1ea>
 800a956:	1b40      	subs	r0, r0, r5
 800a958:	6060      	str	r0, [r4, #4]
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	6123      	str	r3, [r4, #16]
 800a95e:	2300      	movs	r3, #0
 800a960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a964:	e7aa      	b.n	800a8bc <_printf_i+0x14c>
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	462a      	mov	r2, r5
 800a96a:	4649      	mov	r1, r9
 800a96c:	4640      	mov	r0, r8
 800a96e:	47d0      	blx	sl
 800a970:	3001      	adds	r0, #1
 800a972:	d0ad      	beq.n	800a8d0 <_printf_i+0x160>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	079b      	lsls	r3, r3, #30
 800a978:	d413      	bmi.n	800a9a2 <_printf_i+0x232>
 800a97a:	68e0      	ldr	r0, [r4, #12]
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	4298      	cmp	r0, r3
 800a980:	bfb8      	it	lt
 800a982:	4618      	movlt	r0, r3
 800a984:	e7a6      	b.n	800a8d4 <_printf_i+0x164>
 800a986:	2301      	movs	r3, #1
 800a988:	4632      	mov	r2, r6
 800a98a:	4649      	mov	r1, r9
 800a98c:	4640      	mov	r0, r8
 800a98e:	47d0      	blx	sl
 800a990:	3001      	adds	r0, #1
 800a992:	d09d      	beq.n	800a8d0 <_printf_i+0x160>
 800a994:	3501      	adds	r5, #1
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	9903      	ldr	r1, [sp, #12]
 800a99a:	1a5b      	subs	r3, r3, r1
 800a99c:	42ab      	cmp	r3, r5
 800a99e:	dcf2      	bgt.n	800a986 <_printf_i+0x216>
 800a9a0:	e7eb      	b.n	800a97a <_printf_i+0x20a>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	f104 0619 	add.w	r6, r4, #25
 800a9a8:	e7f5      	b.n	800a996 <_printf_i+0x226>
 800a9aa:	bf00      	nop
 800a9ac:	0800e48e 	.word	0x0800e48e
 800a9b0:	0800e49f 	.word	0x0800e49f

0800a9b4 <std>:
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a9be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9c2:	6083      	str	r3, [r0, #8]
 800a9c4:	8181      	strh	r1, [r0, #12]
 800a9c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a9c8:	81c2      	strh	r2, [r0, #14]
 800a9ca:	6183      	str	r3, [r0, #24]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	2208      	movs	r2, #8
 800a9d0:	305c      	adds	r0, #92	; 0x5c
 800a9d2:	f000 f9e5 	bl	800ada0 <memset>
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <std+0x38>)
 800a9d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a9da:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <std+0x3c>)
 800a9dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <std+0x40>)
 800a9e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9e2:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <std+0x44>)
 800a9e4:	6224      	str	r4, [r4, #32]
 800a9e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800abf1 	.word	0x0800abf1
 800a9f0:	0800ac13 	.word	0x0800ac13
 800a9f4:	0800ac4b 	.word	0x0800ac4b
 800a9f8:	0800ac6f 	.word	0x0800ac6f

0800a9fc <stdio_exit_handler>:
 800a9fc:	4a02      	ldr	r2, [pc, #8]	; (800aa08 <stdio_exit_handler+0xc>)
 800a9fe:	4903      	ldr	r1, [pc, #12]	; (800aa0c <stdio_exit_handler+0x10>)
 800aa00:	4803      	ldr	r0, [pc, #12]	; (800aa10 <stdio_exit_handler+0x14>)
 800aa02:	f000 b869 	b.w	800aad8 <_fwalk_sglue>
 800aa06:	bf00      	nop
 800aa08:	20000134 	.word	0x20000134
 800aa0c:	0800c839 	.word	0x0800c839
 800aa10:	20000140 	.word	0x20000140

0800aa14 <cleanup_stdio>:
 800aa14:	6841      	ldr	r1, [r0, #4]
 800aa16:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <cleanup_stdio+0x34>)
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	d001      	beq.n	800aa24 <cleanup_stdio+0x10>
 800aa20:	f001 ff0a 	bl	800c838 <_fflush_r>
 800aa24:	68a1      	ldr	r1, [r4, #8]
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <cleanup_stdio+0x38>)
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	d002      	beq.n	800aa32 <cleanup_stdio+0x1e>
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f001 ff03 	bl	800c838 <_fflush_r>
 800aa32:	68e1      	ldr	r1, [r4, #12]
 800aa34:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <cleanup_stdio+0x3c>)
 800aa36:	4299      	cmp	r1, r3
 800aa38:	d004      	beq.n	800aa44 <cleanup_stdio+0x30>
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa40:	f001 befa 	b.w	800c838 <_fflush_r>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	bf00      	nop
 800aa48:	20001c80 	.word	0x20001c80
 800aa4c:	20001ce8 	.word	0x20001ce8
 800aa50:	20001d50 	.word	0x20001d50

0800aa54 <global_stdio_init.part.0>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <global_stdio_init.part.0+0x30>)
 800aa58:	4c0b      	ldr	r4, [pc, #44]	; (800aa88 <global_stdio_init.part.0+0x34>)
 800aa5a:	4a0c      	ldr	r2, [pc, #48]	; (800aa8c <global_stdio_init.part.0+0x38>)
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	2200      	movs	r2, #0
 800aa62:	2104      	movs	r1, #4
 800aa64:	f7ff ffa6 	bl	800a9b4 <std>
 800aa68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	2109      	movs	r1, #9
 800aa70:	f7ff ffa0 	bl	800a9b4 <std>
 800aa74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa78:	2202      	movs	r2, #2
 800aa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa7e:	2112      	movs	r1, #18
 800aa80:	f7ff bf98 	b.w	800a9b4 <std>
 800aa84:	20001db8 	.word	0x20001db8
 800aa88:	20001c80 	.word	0x20001c80
 800aa8c:	0800a9fd 	.word	0x0800a9fd

0800aa90 <__sfp_lock_acquire>:
 800aa90:	4801      	ldr	r0, [pc, #4]	; (800aa98 <__sfp_lock_acquire+0x8>)
 800aa92:	f000 ba01 	b.w	800ae98 <__retarget_lock_acquire_recursive>
 800aa96:	bf00      	nop
 800aa98:	20001dc1 	.word	0x20001dc1

0800aa9c <__sfp_lock_release>:
 800aa9c:	4801      	ldr	r0, [pc, #4]	; (800aaa4 <__sfp_lock_release+0x8>)
 800aa9e:	f000 b9fc 	b.w	800ae9a <__retarget_lock_release_recursive>
 800aaa2:	bf00      	nop
 800aaa4:	20001dc1 	.word	0x20001dc1

0800aaa8 <__sinit>:
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	4604      	mov	r4, r0
 800aaac:	f7ff fff0 	bl	800aa90 <__sfp_lock_acquire>
 800aab0:	6a23      	ldr	r3, [r4, #32]
 800aab2:	b11b      	cbz	r3, 800aabc <__sinit+0x14>
 800aab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab8:	f7ff bff0 	b.w	800aa9c <__sfp_lock_release>
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <__sinit+0x28>)
 800aabe:	6223      	str	r3, [r4, #32]
 800aac0:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <__sinit+0x2c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1f5      	bne.n	800aab4 <__sinit+0xc>
 800aac8:	f7ff ffc4 	bl	800aa54 <global_stdio_init.part.0>
 800aacc:	e7f2      	b.n	800aab4 <__sinit+0xc>
 800aace:	bf00      	nop
 800aad0:	0800aa15 	.word	0x0800aa15
 800aad4:	20001db8 	.word	0x20001db8

0800aad8 <_fwalk_sglue>:
 800aad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aadc:	4607      	mov	r7, r0
 800aade:	4688      	mov	r8, r1
 800aae0:	4614      	mov	r4, r2
 800aae2:	2600      	movs	r6, #0
 800aae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aae8:	f1b9 0901 	subs.w	r9, r9, #1
 800aaec:	d505      	bpl.n	800aafa <_fwalk_sglue+0x22>
 800aaee:	6824      	ldr	r4, [r4, #0]
 800aaf0:	2c00      	cmp	r4, #0
 800aaf2:	d1f7      	bne.n	800aae4 <_fwalk_sglue+0xc>
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafa:	89ab      	ldrh	r3, [r5, #12]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d907      	bls.n	800ab10 <_fwalk_sglue+0x38>
 800ab00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab04:	3301      	adds	r3, #1
 800ab06:	d003      	beq.n	800ab10 <_fwalk_sglue+0x38>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	47c0      	blx	r8
 800ab0e:	4306      	orrs	r6, r0
 800ab10:	3568      	adds	r5, #104	; 0x68
 800ab12:	e7e9      	b.n	800aae8 <_fwalk_sglue+0x10>

0800ab14 <iprintf>:
 800ab14:	b40f      	push	{r0, r1, r2, r3}
 800ab16:	b507      	push	{r0, r1, r2, lr}
 800ab18:	4906      	ldr	r1, [pc, #24]	; (800ab34 <iprintf+0x20>)
 800ab1a:	ab04      	add	r3, sp, #16
 800ab1c:	6808      	ldr	r0, [r1, #0]
 800ab1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab22:	6881      	ldr	r1, [r0, #8]
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	f001 fce7 	bl	800c4f8 <_vfiprintf_r>
 800ab2a:	b003      	add	sp, #12
 800ab2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab30:	b004      	add	sp, #16
 800ab32:	4770      	bx	lr
 800ab34:	2000018c 	.word	0x2000018c

0800ab38 <_puts_r>:
 800ab38:	6a03      	ldr	r3, [r0, #32]
 800ab3a:	b570      	push	{r4, r5, r6, lr}
 800ab3c:	6884      	ldr	r4, [r0, #8]
 800ab3e:	4605      	mov	r5, r0
 800ab40:	460e      	mov	r6, r1
 800ab42:	b90b      	cbnz	r3, 800ab48 <_puts_r+0x10>
 800ab44:	f7ff ffb0 	bl	800aaa8 <__sinit>
 800ab48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab4a:	07db      	lsls	r3, r3, #31
 800ab4c:	d405      	bmi.n	800ab5a <_puts_r+0x22>
 800ab4e:	89a3      	ldrh	r3, [r4, #12]
 800ab50:	0598      	lsls	r0, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_puts_r+0x22>
 800ab54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab56:	f000 f99f 	bl	800ae98 <__retarget_lock_acquire_recursive>
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	0719      	lsls	r1, r3, #28
 800ab5e:	d513      	bpl.n	800ab88 <_puts_r+0x50>
 800ab60:	6923      	ldr	r3, [r4, #16]
 800ab62:	b18b      	cbz	r3, 800ab88 <_puts_r+0x50>
 800ab64:	3e01      	subs	r6, #1
 800ab66:	68a3      	ldr	r3, [r4, #8]
 800ab68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	60a3      	str	r3, [r4, #8]
 800ab70:	b9e9      	cbnz	r1, 800abae <_puts_r+0x76>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	da2e      	bge.n	800abd4 <_puts_r+0x9c>
 800ab76:	4622      	mov	r2, r4
 800ab78:	210a      	movs	r1, #10
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f000 f87b 	bl	800ac76 <__swbuf_r>
 800ab80:	3001      	adds	r0, #1
 800ab82:	d007      	beq.n	800ab94 <_puts_r+0x5c>
 800ab84:	250a      	movs	r5, #10
 800ab86:	e007      	b.n	800ab98 <_puts_r+0x60>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f000 f8b0 	bl	800acf0 <__swsetup_r>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0e7      	beq.n	800ab64 <_puts_r+0x2c>
 800ab94:	f04f 35ff 	mov.w	r5, #4294967295
 800ab98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab9a:	07da      	lsls	r2, r3, #31
 800ab9c:	d405      	bmi.n	800abaa <_puts_r+0x72>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	059b      	lsls	r3, r3, #22
 800aba2:	d402      	bmi.n	800abaa <_puts_r+0x72>
 800aba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aba6:	f000 f978 	bl	800ae9a <__retarget_lock_release_recursive>
 800abaa:	4628      	mov	r0, r5
 800abac:	bd70      	pop	{r4, r5, r6, pc}
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da04      	bge.n	800abbc <_puts_r+0x84>
 800abb2:	69a2      	ldr	r2, [r4, #24]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	dc06      	bgt.n	800abc6 <_puts_r+0x8e>
 800abb8:	290a      	cmp	r1, #10
 800abba:	d004      	beq.n	800abc6 <_puts_r+0x8e>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	7019      	strb	r1, [r3, #0]
 800abc4:	e7cf      	b.n	800ab66 <_puts_r+0x2e>
 800abc6:	4622      	mov	r2, r4
 800abc8:	4628      	mov	r0, r5
 800abca:	f000 f854 	bl	800ac76 <__swbuf_r>
 800abce:	3001      	adds	r0, #1
 800abd0:	d1c9      	bne.n	800ab66 <_puts_r+0x2e>
 800abd2:	e7df      	b.n	800ab94 <_puts_r+0x5c>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	250a      	movs	r5, #10
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	6022      	str	r2, [r4, #0]
 800abdc:	701d      	strb	r5, [r3, #0]
 800abde:	e7db      	b.n	800ab98 <_puts_r+0x60>

0800abe0 <puts>:
 800abe0:	4b02      	ldr	r3, [pc, #8]	; (800abec <puts+0xc>)
 800abe2:	4601      	mov	r1, r0
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f7ff bfa7 	b.w	800ab38 <_puts_r>
 800abea:	bf00      	nop
 800abec:	2000018c 	.word	0x2000018c

0800abf0 <__sread>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	f000 f900 	bl	800adfc <_read_r>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	bfab      	itete	ge
 800ac00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac02:	89a3      	ldrhlt	r3, [r4, #12]
 800ac04:	181b      	addge	r3, r3, r0
 800ac06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac0a:	bfac      	ite	ge
 800ac0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac0e:	81a3      	strhlt	r3, [r4, #12]
 800ac10:	bd10      	pop	{r4, pc}

0800ac12 <__swrite>:
 800ac12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac16:	461f      	mov	r7, r3
 800ac18:	898b      	ldrh	r3, [r1, #12]
 800ac1a:	05db      	lsls	r3, r3, #23
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	4616      	mov	r6, r2
 800ac22:	d505      	bpl.n	800ac30 <__swrite+0x1e>
 800ac24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac28:	2302      	movs	r3, #2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f000 f8d4 	bl	800add8 <_lseek_r>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	463b      	mov	r3, r7
 800ac40:	4628      	mov	r0, r5
 800ac42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	f000 b8eb 	b.w	800ae20 <_write_r>

0800ac4a <__sseek>:
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac52:	f000 f8c1 	bl	800add8 <_lseek_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	bf15      	itete	ne
 800ac5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac66:	81a3      	strheq	r3, [r4, #12]
 800ac68:	bf18      	it	ne
 800ac6a:	81a3      	strhne	r3, [r4, #12]
 800ac6c:	bd10      	pop	{r4, pc}

0800ac6e <__sclose>:
 800ac6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac72:	f000 b8a1 	b.w	800adb8 <_close_r>

0800ac76 <__swbuf_r>:
 800ac76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac78:	460e      	mov	r6, r1
 800ac7a:	4614      	mov	r4, r2
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	b118      	cbz	r0, 800ac88 <__swbuf_r+0x12>
 800ac80:	6a03      	ldr	r3, [r0, #32]
 800ac82:	b90b      	cbnz	r3, 800ac88 <__swbuf_r+0x12>
 800ac84:	f7ff ff10 	bl	800aaa8 <__sinit>
 800ac88:	69a3      	ldr	r3, [r4, #24]
 800ac8a:	60a3      	str	r3, [r4, #8]
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	071a      	lsls	r2, r3, #28
 800ac90:	d525      	bpl.n	800acde <__swbuf_r+0x68>
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	b31b      	cbz	r3, 800acde <__swbuf_r+0x68>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	6922      	ldr	r2, [r4, #16]
 800ac9a:	1a98      	subs	r0, r3, r2
 800ac9c:	6963      	ldr	r3, [r4, #20]
 800ac9e:	b2f6      	uxtb	r6, r6
 800aca0:	4283      	cmp	r3, r0
 800aca2:	4637      	mov	r7, r6
 800aca4:	dc04      	bgt.n	800acb0 <__swbuf_r+0x3a>
 800aca6:	4621      	mov	r1, r4
 800aca8:	4628      	mov	r0, r5
 800acaa:	f001 fdc5 	bl	800c838 <_fflush_r>
 800acae:	b9e0      	cbnz	r0, 800acea <__swbuf_r+0x74>
 800acb0:	68a3      	ldr	r3, [r4, #8]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	60a3      	str	r3, [r4, #8]
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	6022      	str	r2, [r4, #0]
 800acbc:	701e      	strb	r6, [r3, #0]
 800acbe:	6962      	ldr	r2, [r4, #20]
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d004      	beq.n	800acd0 <__swbuf_r+0x5a>
 800acc6:	89a3      	ldrh	r3, [r4, #12]
 800acc8:	07db      	lsls	r3, r3, #31
 800acca:	d506      	bpl.n	800acda <__swbuf_r+0x64>
 800accc:	2e0a      	cmp	r6, #10
 800acce:	d104      	bne.n	800acda <__swbuf_r+0x64>
 800acd0:	4621      	mov	r1, r4
 800acd2:	4628      	mov	r0, r5
 800acd4:	f001 fdb0 	bl	800c838 <_fflush_r>
 800acd8:	b938      	cbnz	r0, 800acea <__swbuf_r+0x74>
 800acda:	4638      	mov	r0, r7
 800acdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acde:	4621      	mov	r1, r4
 800ace0:	4628      	mov	r0, r5
 800ace2:	f000 f805 	bl	800acf0 <__swsetup_r>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d0d5      	beq.n	800ac96 <__swbuf_r+0x20>
 800acea:	f04f 37ff 	mov.w	r7, #4294967295
 800acee:	e7f4      	b.n	800acda <__swbuf_r+0x64>

0800acf0 <__swsetup_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4b2a      	ldr	r3, [pc, #168]	; (800ad9c <__swsetup_r+0xac>)
 800acf4:	4605      	mov	r5, r0
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	460c      	mov	r4, r1
 800acfa:	b118      	cbz	r0, 800ad04 <__swsetup_r+0x14>
 800acfc:	6a03      	ldr	r3, [r0, #32]
 800acfe:	b90b      	cbnz	r3, 800ad04 <__swsetup_r+0x14>
 800ad00:	f7ff fed2 	bl	800aaa8 <__sinit>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad0a:	0718      	lsls	r0, r3, #28
 800ad0c:	d422      	bmi.n	800ad54 <__swsetup_r+0x64>
 800ad0e:	06d9      	lsls	r1, r3, #27
 800ad10:	d407      	bmi.n	800ad22 <__swsetup_r+0x32>
 800ad12:	2309      	movs	r3, #9
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e034      	b.n	800ad8c <__swsetup_r+0x9c>
 800ad22:	0758      	lsls	r0, r3, #29
 800ad24:	d512      	bpl.n	800ad4c <__swsetup_r+0x5c>
 800ad26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad28:	b141      	cbz	r1, 800ad3c <__swsetup_r+0x4c>
 800ad2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	d002      	beq.n	800ad38 <__swsetup_r+0x48>
 800ad32:	4628      	mov	r0, r5
 800ad34:	f000 ff3a 	bl	800bbac <_free_r>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	6363      	str	r3, [r4, #52]	; 0x34
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	2300      	movs	r3, #0
 800ad46:	6063      	str	r3, [r4, #4]
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	f043 0308 	orr.w	r3, r3, #8
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	6923      	ldr	r3, [r4, #16]
 800ad56:	b94b      	cbnz	r3, 800ad6c <__swsetup_r+0x7c>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad62:	d003      	beq.n	800ad6c <__swsetup_r+0x7c>
 800ad64:	4621      	mov	r1, r4
 800ad66:	4628      	mov	r0, r5
 800ad68:	f001 fdb4 	bl	800c8d4 <__smakebuf_r>
 800ad6c:	89a0      	ldrh	r0, [r4, #12]
 800ad6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad72:	f010 0301 	ands.w	r3, r0, #1
 800ad76:	d00a      	beq.n	800ad8e <__swsetup_r+0x9e>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60a3      	str	r3, [r4, #8]
 800ad7c:	6963      	ldr	r3, [r4, #20]
 800ad7e:	425b      	negs	r3, r3
 800ad80:	61a3      	str	r3, [r4, #24]
 800ad82:	6923      	ldr	r3, [r4, #16]
 800ad84:	b943      	cbnz	r3, 800ad98 <__swsetup_r+0xa8>
 800ad86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad8a:	d1c4      	bne.n	800ad16 <__swsetup_r+0x26>
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	0781      	lsls	r1, r0, #30
 800ad90:	bf58      	it	pl
 800ad92:	6963      	ldrpl	r3, [r4, #20]
 800ad94:	60a3      	str	r3, [r4, #8]
 800ad96:	e7f4      	b.n	800ad82 <__swsetup_r+0x92>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	e7f7      	b.n	800ad8c <__swsetup_r+0x9c>
 800ad9c:	2000018c 	.word	0x2000018c

0800ada0 <memset>:
 800ada0:	4402      	add	r2, r0
 800ada2:	4603      	mov	r3, r0
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d100      	bne.n	800adaa <memset+0xa>
 800ada8:	4770      	bx	lr
 800adaa:	f803 1b01 	strb.w	r1, [r3], #1
 800adae:	e7f9      	b.n	800ada4 <memset+0x4>

0800adb0 <_localeconv_r>:
 800adb0:	4800      	ldr	r0, [pc, #0]	; (800adb4 <_localeconv_r+0x4>)
 800adb2:	4770      	bx	lr
 800adb4:	20000280 	.word	0x20000280

0800adb8 <_close_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4d06      	ldr	r5, [pc, #24]	; (800add4 <_close_r+0x1c>)
 800adbc:	2300      	movs	r3, #0
 800adbe:	4604      	mov	r4, r0
 800adc0:	4608      	mov	r0, r1
 800adc2:	602b      	str	r3, [r5, #0]
 800adc4:	f7fa f92d 	bl	8005022 <_close>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d102      	bne.n	800add2 <_close_r+0x1a>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	b103      	cbz	r3, 800add2 <_close_r+0x1a>
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	20001dbc 	.word	0x20001dbc

0800add8 <_lseek_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4d07      	ldr	r5, [pc, #28]	; (800adf8 <_lseek_r+0x20>)
 800addc:	4604      	mov	r4, r0
 800adde:	4608      	mov	r0, r1
 800ade0:	4611      	mov	r1, r2
 800ade2:	2200      	movs	r2, #0
 800ade4:	602a      	str	r2, [r5, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f7fa f942 	bl	8005070 <_lseek>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_lseek_r+0x1e>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_lseek_r+0x1e>
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	20001dbc 	.word	0x20001dbc

0800adfc <_read_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	; (800ae1c <_read_r+0x20>)
 800ae00:	4604      	mov	r4, r0
 800ae02:	4608      	mov	r0, r1
 800ae04:	4611      	mov	r1, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7fa f8d0 	bl	8004fb0 <_read>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_read_r+0x1e>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_read_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20001dbc 	.word	0x20001dbc

0800ae20 <_write_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4d07      	ldr	r5, [pc, #28]	; (800ae40 <_write_r+0x20>)
 800ae24:	4604      	mov	r4, r0
 800ae26:	4608      	mov	r0, r1
 800ae28:	4611      	mov	r1, r2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	602a      	str	r2, [r5, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f7fa f8db 	bl	8004fea <_write>
 800ae34:	1c43      	adds	r3, r0, #1
 800ae36:	d102      	bne.n	800ae3e <_write_r+0x1e>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	b103      	cbz	r3, 800ae3e <_write_r+0x1e>
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	20001dbc 	.word	0x20001dbc

0800ae44 <__errno>:
 800ae44:	4b01      	ldr	r3, [pc, #4]	; (800ae4c <__errno+0x8>)
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	2000018c 	.word	0x2000018c

0800ae50 <__libc_init_array>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	4d0d      	ldr	r5, [pc, #52]	; (800ae88 <__libc_init_array+0x38>)
 800ae54:	4c0d      	ldr	r4, [pc, #52]	; (800ae8c <__libc_init_array+0x3c>)
 800ae56:	1b64      	subs	r4, r4, r5
 800ae58:	10a4      	asrs	r4, r4, #2
 800ae5a:	2600      	movs	r6, #0
 800ae5c:	42a6      	cmp	r6, r4
 800ae5e:	d109      	bne.n	800ae74 <__libc_init_array+0x24>
 800ae60:	4d0b      	ldr	r5, [pc, #44]	; (800ae90 <__libc_init_array+0x40>)
 800ae62:	4c0c      	ldr	r4, [pc, #48]	; (800ae94 <__libc_init_array+0x44>)
 800ae64:	f002 fd90 	bl	800d988 <_init>
 800ae68:	1b64      	subs	r4, r4, r5
 800ae6a:	10a4      	asrs	r4, r4, #2
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	42a6      	cmp	r6, r4
 800ae70:	d105      	bne.n	800ae7e <__libc_init_array+0x2e>
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae78:	4798      	blx	r3
 800ae7a:	3601      	adds	r6, #1
 800ae7c:	e7ee      	b.n	800ae5c <__libc_init_array+0xc>
 800ae7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae82:	4798      	blx	r3
 800ae84:	3601      	adds	r6, #1
 800ae86:	e7f2      	b.n	800ae6e <__libc_init_array+0x1e>
 800ae88:	0800e828 	.word	0x0800e828
 800ae8c:	0800e828 	.word	0x0800e828
 800ae90:	0800e828 	.word	0x0800e828
 800ae94:	0800e82c 	.word	0x0800e82c

0800ae98 <__retarget_lock_acquire_recursive>:
 800ae98:	4770      	bx	lr

0800ae9a <__retarget_lock_release_recursive>:
 800ae9a:	4770      	bx	lr

0800ae9c <memcpy>:
 800ae9c:	440a      	add	r2, r1
 800ae9e:	4291      	cmp	r1, r2
 800aea0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aea4:	d100      	bne.n	800aea8 <memcpy+0xc>
 800aea6:	4770      	bx	lr
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeb2:	4291      	cmp	r1, r2
 800aeb4:	d1f9      	bne.n	800aeaa <memcpy+0xe>
 800aeb6:	bd10      	pop	{r4, pc}

0800aeb8 <quorem>:
 800aeb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	6903      	ldr	r3, [r0, #16]
 800aebe:	690c      	ldr	r4, [r1, #16]
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	4607      	mov	r7, r0
 800aec4:	db7e      	blt.n	800afc4 <quorem+0x10c>
 800aec6:	3c01      	subs	r4, #1
 800aec8:	f101 0814 	add.w	r8, r1, #20
 800aecc:	f100 0514 	add.w	r5, r0, #20
 800aed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aeda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aede:	3301      	adds	r3, #1
 800aee0:	429a      	cmp	r2, r3
 800aee2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aee6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aeea:	fbb2 f6f3 	udiv	r6, r2, r3
 800aeee:	d331      	bcc.n	800af54 <quorem+0x9c>
 800aef0:	f04f 0e00 	mov.w	lr, #0
 800aef4:	4640      	mov	r0, r8
 800aef6:	46ac      	mov	ip, r5
 800aef8:	46f2      	mov	sl, lr
 800aefa:	f850 2b04 	ldr.w	r2, [r0], #4
 800aefe:	b293      	uxth	r3, r2
 800af00:	fb06 e303 	mla	r3, r6, r3, lr
 800af04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af08:	0c1a      	lsrs	r2, r3, #16
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	ebaa 0303 	sub.w	r3, sl, r3
 800af10:	f8dc a000 	ldr.w	sl, [ip]
 800af14:	fa13 f38a 	uxtah	r3, r3, sl
 800af18:	fb06 220e 	mla	r2, r6, lr, r2
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	9b00      	ldr	r3, [sp, #0]
 800af20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af24:	b292      	uxth	r2, r2
 800af26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af2e:	f8bd 3000 	ldrh.w	r3, [sp]
 800af32:	4581      	cmp	r9, r0
 800af34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af38:	f84c 3b04 	str.w	r3, [ip], #4
 800af3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af40:	d2db      	bcs.n	800aefa <quorem+0x42>
 800af42:	f855 300b 	ldr.w	r3, [r5, fp]
 800af46:	b92b      	cbnz	r3, 800af54 <quorem+0x9c>
 800af48:	9b01      	ldr	r3, [sp, #4]
 800af4a:	3b04      	subs	r3, #4
 800af4c:	429d      	cmp	r5, r3
 800af4e:	461a      	mov	r2, r3
 800af50:	d32c      	bcc.n	800afac <quorem+0xf4>
 800af52:	613c      	str	r4, [r7, #16]
 800af54:	4638      	mov	r0, r7
 800af56:	f001 f9a5 	bl	800c2a4 <__mcmp>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	db22      	blt.n	800afa4 <quorem+0xec>
 800af5e:	3601      	adds	r6, #1
 800af60:	4629      	mov	r1, r5
 800af62:	2000      	movs	r0, #0
 800af64:	f858 2b04 	ldr.w	r2, [r8], #4
 800af68:	f8d1 c000 	ldr.w	ip, [r1]
 800af6c:	b293      	uxth	r3, r2
 800af6e:	1ac3      	subs	r3, r0, r3
 800af70:	0c12      	lsrs	r2, r2, #16
 800af72:	fa13 f38c 	uxtah	r3, r3, ip
 800af76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800af7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af7e:	b29b      	uxth	r3, r3
 800af80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af84:	45c1      	cmp	r9, r8
 800af86:	f841 3b04 	str.w	r3, [r1], #4
 800af8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af8e:	d2e9      	bcs.n	800af64 <quorem+0xac>
 800af90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af98:	b922      	cbnz	r2, 800afa4 <quorem+0xec>
 800af9a:	3b04      	subs	r3, #4
 800af9c:	429d      	cmp	r5, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	d30a      	bcc.n	800afb8 <quorem+0x100>
 800afa2:	613c      	str	r4, [r7, #16]
 800afa4:	4630      	mov	r0, r6
 800afa6:	b003      	add	sp, #12
 800afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afac:	6812      	ldr	r2, [r2, #0]
 800afae:	3b04      	subs	r3, #4
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	d1ce      	bne.n	800af52 <quorem+0x9a>
 800afb4:	3c01      	subs	r4, #1
 800afb6:	e7c9      	b.n	800af4c <quorem+0x94>
 800afb8:	6812      	ldr	r2, [r2, #0]
 800afba:	3b04      	subs	r3, #4
 800afbc:	2a00      	cmp	r2, #0
 800afbe:	d1f0      	bne.n	800afa2 <quorem+0xea>
 800afc0:	3c01      	subs	r4, #1
 800afc2:	e7eb      	b.n	800af9c <quorem+0xe4>
 800afc4:	2000      	movs	r0, #0
 800afc6:	e7ee      	b.n	800afa6 <quorem+0xee>

0800afc8 <_dtoa_r>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	ed2d 8b04 	vpush	{d8-d9}
 800afd0:	69c5      	ldr	r5, [r0, #28]
 800afd2:	b093      	sub	sp, #76	; 0x4c
 800afd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afd8:	ec57 6b10 	vmov	r6, r7, d0
 800afdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afe0:	9107      	str	r1, [sp, #28]
 800afe2:	4604      	mov	r4, r0
 800afe4:	920a      	str	r2, [sp, #40]	; 0x28
 800afe6:	930d      	str	r3, [sp, #52]	; 0x34
 800afe8:	b975      	cbnz	r5, 800b008 <_dtoa_r+0x40>
 800afea:	2010      	movs	r0, #16
 800afec:	f000 fe2a 	bl	800bc44 <malloc>
 800aff0:	4602      	mov	r2, r0
 800aff2:	61e0      	str	r0, [r4, #28]
 800aff4:	b920      	cbnz	r0, 800b000 <_dtoa_r+0x38>
 800aff6:	4bae      	ldr	r3, [pc, #696]	; (800b2b0 <_dtoa_r+0x2e8>)
 800aff8:	21ef      	movs	r1, #239	; 0xef
 800affa:	48ae      	ldr	r0, [pc, #696]	; (800b2b4 <_dtoa_r+0x2ec>)
 800affc:	f001 fcd8 	bl	800c9b0 <__assert_func>
 800b000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b004:	6005      	str	r5, [r0, #0]
 800b006:	60c5      	str	r5, [r0, #12]
 800b008:	69e3      	ldr	r3, [r4, #28]
 800b00a:	6819      	ldr	r1, [r3, #0]
 800b00c:	b151      	cbz	r1, 800b024 <_dtoa_r+0x5c>
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	604a      	str	r2, [r1, #4]
 800b012:	2301      	movs	r3, #1
 800b014:	4093      	lsls	r3, r2
 800b016:	608b      	str	r3, [r1, #8]
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 ff07 	bl	800be2c <_Bfree>
 800b01e:	69e3      	ldr	r3, [r4, #28]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	1e3b      	subs	r3, r7, #0
 800b026:	bfbb      	ittet	lt
 800b028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b02c:	9303      	strlt	r3, [sp, #12]
 800b02e:	2300      	movge	r3, #0
 800b030:	2201      	movlt	r2, #1
 800b032:	bfac      	ite	ge
 800b034:	f8c8 3000 	strge.w	r3, [r8]
 800b038:	f8c8 2000 	strlt.w	r2, [r8]
 800b03c:	4b9e      	ldr	r3, [pc, #632]	; (800b2b8 <_dtoa_r+0x2f0>)
 800b03e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b042:	ea33 0308 	bics.w	r3, r3, r8
 800b046:	d11b      	bne.n	800b080 <_dtoa_r+0xb8>
 800b048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b04a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b054:	4333      	orrs	r3, r6
 800b056:	f000 8593 	beq.w	800bb80 <_dtoa_r+0xbb8>
 800b05a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b05c:	b963      	cbnz	r3, 800b078 <_dtoa_r+0xb0>
 800b05e:	4b97      	ldr	r3, [pc, #604]	; (800b2bc <_dtoa_r+0x2f4>)
 800b060:	e027      	b.n	800b0b2 <_dtoa_r+0xea>
 800b062:	4b97      	ldr	r3, [pc, #604]	; (800b2c0 <_dtoa_r+0x2f8>)
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	3308      	adds	r3, #8
 800b068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	9800      	ldr	r0, [sp, #0]
 800b06e:	b013      	add	sp, #76	; 0x4c
 800b070:	ecbd 8b04 	vpop	{d8-d9}
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	4b90      	ldr	r3, [pc, #576]	; (800b2bc <_dtoa_r+0x2f4>)
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	3303      	adds	r3, #3
 800b07e:	e7f3      	b.n	800b068 <_dtoa_r+0xa0>
 800b080:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b084:	2200      	movs	r2, #0
 800b086:	ec51 0b17 	vmov	r0, r1, d7
 800b08a:	eeb0 8a47 	vmov.f32	s16, s14
 800b08e:	eef0 8a67 	vmov.f32	s17, s15
 800b092:	2300      	movs	r3, #0
 800b094:	f7f5 fd28 	bl	8000ae8 <__aeabi_dcmpeq>
 800b098:	4681      	mov	r9, r0
 800b09a:	b160      	cbz	r0, 800b0b6 <_dtoa_r+0xee>
 800b09c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b09e:	2301      	movs	r3, #1
 800b0a0:	6013      	str	r3, [r2, #0]
 800b0a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8568 	beq.w	800bb7a <_dtoa_r+0xbb2>
 800b0aa:	4b86      	ldr	r3, [pc, #536]	; (800b2c4 <_dtoa_r+0x2fc>)
 800b0ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	e7da      	b.n	800b06c <_dtoa_r+0xa4>
 800b0b6:	aa10      	add	r2, sp, #64	; 0x40
 800b0b8:	a911      	add	r1, sp, #68	; 0x44
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b0c0:	eef0 0a68 	vmov.f32	s1, s17
 800b0c4:	f001 f994 	bl	800c3f0 <__d2b>
 800b0c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b0cc:	4682      	mov	sl, r0
 800b0ce:	2d00      	cmp	r5, #0
 800b0d0:	d07f      	beq.n	800b1d2 <_dtoa_r+0x20a>
 800b0d2:	ee18 3a90 	vmov	r3, s17
 800b0d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b0de:	ec51 0b18 	vmov	r0, r1, d8
 800b0e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b0e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4b75      	ldr	r3, [pc, #468]	; (800b2c8 <_dtoa_r+0x300>)
 800b0f4:	f7f5 f8d8 	bl	80002a8 <__aeabi_dsub>
 800b0f8:	a367      	add	r3, pc, #412	; (adr r3, 800b298 <_dtoa_r+0x2d0>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f7f5 fa8b 	bl	8000618 <__aeabi_dmul>
 800b102:	a367      	add	r3, pc, #412	; (adr r3, 800b2a0 <_dtoa_r+0x2d8>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 f8d0 	bl	80002ac <__adddf3>
 800b10c:	4606      	mov	r6, r0
 800b10e:	4628      	mov	r0, r5
 800b110:	460f      	mov	r7, r1
 800b112:	f7f5 fa17 	bl	8000544 <__aeabi_i2d>
 800b116:	a364      	add	r3, pc, #400	; (adr r3, 800b2a8 <_dtoa_r+0x2e0>)
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	f7f5 fa7c 	bl	8000618 <__aeabi_dmul>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 f8c0 	bl	80002ac <__adddf3>
 800b12c:	4606      	mov	r6, r0
 800b12e:	460f      	mov	r7, r1
 800b130:	f7f5 fd22 	bl	8000b78 <__aeabi_d2iz>
 800b134:	2200      	movs	r2, #0
 800b136:	4683      	mov	fp, r0
 800b138:	2300      	movs	r3, #0
 800b13a:	4630      	mov	r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	f7f5 fcdd 	bl	8000afc <__aeabi_dcmplt>
 800b142:	b148      	cbz	r0, 800b158 <_dtoa_r+0x190>
 800b144:	4658      	mov	r0, fp
 800b146:	f7f5 f9fd 	bl	8000544 <__aeabi_i2d>
 800b14a:	4632      	mov	r2, r6
 800b14c:	463b      	mov	r3, r7
 800b14e:	f7f5 fccb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b152:	b908      	cbnz	r0, 800b158 <_dtoa_r+0x190>
 800b154:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b158:	f1bb 0f16 	cmp.w	fp, #22
 800b15c:	d857      	bhi.n	800b20e <_dtoa_r+0x246>
 800b15e:	4b5b      	ldr	r3, [pc, #364]	; (800b2cc <_dtoa_r+0x304>)
 800b160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	ec51 0b18 	vmov	r0, r1, d8
 800b16c:	f7f5 fcc6 	bl	8000afc <__aeabi_dcmplt>
 800b170:	2800      	cmp	r0, #0
 800b172:	d04e      	beq.n	800b212 <_dtoa_r+0x24a>
 800b174:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b178:	2300      	movs	r3, #0
 800b17a:	930c      	str	r3, [sp, #48]	; 0x30
 800b17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b17e:	1b5b      	subs	r3, r3, r5
 800b180:	1e5a      	subs	r2, r3, #1
 800b182:	bf45      	ittet	mi
 800b184:	f1c3 0301 	rsbmi	r3, r3, #1
 800b188:	9305      	strmi	r3, [sp, #20]
 800b18a:	2300      	movpl	r3, #0
 800b18c:	2300      	movmi	r3, #0
 800b18e:	9206      	str	r2, [sp, #24]
 800b190:	bf54      	ite	pl
 800b192:	9305      	strpl	r3, [sp, #20]
 800b194:	9306      	strmi	r3, [sp, #24]
 800b196:	f1bb 0f00 	cmp.w	fp, #0
 800b19a:	db3c      	blt.n	800b216 <_dtoa_r+0x24e>
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b1a2:	445b      	add	r3, fp
 800b1a4:	9306      	str	r3, [sp, #24]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9308      	str	r3, [sp, #32]
 800b1aa:	9b07      	ldr	r3, [sp, #28]
 800b1ac:	2b09      	cmp	r3, #9
 800b1ae:	d868      	bhi.n	800b282 <_dtoa_r+0x2ba>
 800b1b0:	2b05      	cmp	r3, #5
 800b1b2:	bfc4      	itt	gt
 800b1b4:	3b04      	subgt	r3, #4
 800b1b6:	9307      	strgt	r3, [sp, #28]
 800b1b8:	9b07      	ldr	r3, [sp, #28]
 800b1ba:	f1a3 0302 	sub.w	r3, r3, #2
 800b1be:	bfcc      	ite	gt
 800b1c0:	2500      	movgt	r5, #0
 800b1c2:	2501      	movle	r5, #1
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	f200 8085 	bhi.w	800b2d4 <_dtoa_r+0x30c>
 800b1ca:	e8df f003 	tbb	[pc, r3]
 800b1ce:	3b2e      	.short	0x3b2e
 800b1d0:	5839      	.short	0x5839
 800b1d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1d6:	441d      	add	r5, r3
 800b1d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	bfc1      	itttt	gt
 800b1e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b1e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b1ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b1f0:	bfd6      	itet	le
 800b1f2:	f1c3 0320 	rsble	r3, r3, #32
 800b1f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b1fa:	fa06 f003 	lslle.w	r0, r6, r3
 800b1fe:	f7f5 f991 	bl	8000524 <__aeabi_ui2d>
 800b202:	2201      	movs	r2, #1
 800b204:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b208:	3d01      	subs	r5, #1
 800b20a:	920e      	str	r2, [sp, #56]	; 0x38
 800b20c:	e76f      	b.n	800b0ee <_dtoa_r+0x126>
 800b20e:	2301      	movs	r3, #1
 800b210:	e7b3      	b.n	800b17a <_dtoa_r+0x1b2>
 800b212:	900c      	str	r0, [sp, #48]	; 0x30
 800b214:	e7b2      	b.n	800b17c <_dtoa_r+0x1b4>
 800b216:	9b05      	ldr	r3, [sp, #20]
 800b218:	eba3 030b 	sub.w	r3, r3, fp
 800b21c:	9305      	str	r3, [sp, #20]
 800b21e:	f1cb 0300 	rsb	r3, fp, #0
 800b222:	9308      	str	r3, [sp, #32]
 800b224:	2300      	movs	r3, #0
 800b226:	930b      	str	r3, [sp, #44]	; 0x2c
 800b228:	e7bf      	b.n	800b1aa <_dtoa_r+0x1e2>
 800b22a:	2300      	movs	r3, #0
 800b22c:	9309      	str	r3, [sp, #36]	; 0x24
 800b22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b230:	2b00      	cmp	r3, #0
 800b232:	dc52      	bgt.n	800b2da <_dtoa_r+0x312>
 800b234:	2301      	movs	r3, #1
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	9304      	str	r3, [sp, #16]
 800b23a:	461a      	mov	r2, r3
 800b23c:	920a      	str	r2, [sp, #40]	; 0x28
 800b23e:	e00b      	b.n	800b258 <_dtoa_r+0x290>
 800b240:	2301      	movs	r3, #1
 800b242:	e7f3      	b.n	800b22c <_dtoa_r+0x264>
 800b244:	2300      	movs	r3, #0
 800b246:	9309      	str	r3, [sp, #36]	; 0x24
 800b248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24a:	445b      	add	r3, fp
 800b24c:	9301      	str	r3, [sp, #4]
 800b24e:	3301      	adds	r3, #1
 800b250:	2b01      	cmp	r3, #1
 800b252:	9304      	str	r3, [sp, #16]
 800b254:	bfb8      	it	lt
 800b256:	2301      	movlt	r3, #1
 800b258:	69e0      	ldr	r0, [r4, #28]
 800b25a:	2100      	movs	r1, #0
 800b25c:	2204      	movs	r2, #4
 800b25e:	f102 0614 	add.w	r6, r2, #20
 800b262:	429e      	cmp	r6, r3
 800b264:	d93d      	bls.n	800b2e2 <_dtoa_r+0x31a>
 800b266:	6041      	str	r1, [r0, #4]
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fd9f 	bl	800bdac <_Balloc>
 800b26e:	9000      	str	r0, [sp, #0]
 800b270:	2800      	cmp	r0, #0
 800b272:	d139      	bne.n	800b2e8 <_dtoa_r+0x320>
 800b274:	4b16      	ldr	r3, [pc, #88]	; (800b2d0 <_dtoa_r+0x308>)
 800b276:	4602      	mov	r2, r0
 800b278:	f240 11af 	movw	r1, #431	; 0x1af
 800b27c:	e6bd      	b.n	800affa <_dtoa_r+0x32>
 800b27e:	2301      	movs	r3, #1
 800b280:	e7e1      	b.n	800b246 <_dtoa_r+0x27e>
 800b282:	2501      	movs	r5, #1
 800b284:	2300      	movs	r3, #0
 800b286:	9307      	str	r3, [sp, #28]
 800b288:	9509      	str	r5, [sp, #36]	; 0x24
 800b28a:	f04f 33ff 	mov.w	r3, #4294967295
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	2200      	movs	r2, #0
 800b294:	2312      	movs	r3, #18
 800b296:	e7d1      	b.n	800b23c <_dtoa_r+0x274>
 800b298:	636f4361 	.word	0x636f4361
 800b29c:	3fd287a7 	.word	0x3fd287a7
 800b2a0:	8b60c8b3 	.word	0x8b60c8b3
 800b2a4:	3fc68a28 	.word	0x3fc68a28
 800b2a8:	509f79fb 	.word	0x509f79fb
 800b2ac:	3fd34413 	.word	0x3fd34413
 800b2b0:	0800e4bd 	.word	0x0800e4bd
 800b2b4:	0800e4d4 	.word	0x0800e4d4
 800b2b8:	7ff00000 	.word	0x7ff00000
 800b2bc:	0800e4b9 	.word	0x0800e4b9
 800b2c0:	0800e4b0 	.word	0x0800e4b0
 800b2c4:	0800e48d 	.word	0x0800e48d
 800b2c8:	3ff80000 	.word	0x3ff80000
 800b2cc:	0800e5c0 	.word	0x0800e5c0
 800b2d0:	0800e52c 	.word	0x0800e52c
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d8:	e7d7      	b.n	800b28a <_dtoa_r+0x2c2>
 800b2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	e7ba      	b.n	800b258 <_dtoa_r+0x290>
 800b2e2:	3101      	adds	r1, #1
 800b2e4:	0052      	lsls	r2, r2, #1
 800b2e6:	e7ba      	b.n	800b25e <_dtoa_r+0x296>
 800b2e8:	69e3      	ldr	r3, [r4, #28]
 800b2ea:	9a00      	ldr	r2, [sp, #0]
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	2b0e      	cmp	r3, #14
 800b2f2:	f200 80a8 	bhi.w	800b446 <_dtoa_r+0x47e>
 800b2f6:	2d00      	cmp	r5, #0
 800b2f8:	f000 80a5 	beq.w	800b446 <_dtoa_r+0x47e>
 800b2fc:	f1bb 0f00 	cmp.w	fp, #0
 800b300:	dd38      	ble.n	800b374 <_dtoa_r+0x3ac>
 800b302:	4bc0      	ldr	r3, [pc, #768]	; (800b604 <_dtoa_r+0x63c>)
 800b304:	f00b 020f 	and.w	r2, fp, #15
 800b308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b30c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b310:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b314:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b318:	d019      	beq.n	800b34e <_dtoa_r+0x386>
 800b31a:	4bbb      	ldr	r3, [pc, #748]	; (800b608 <_dtoa_r+0x640>)
 800b31c:	ec51 0b18 	vmov	r0, r1, d8
 800b320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b324:	f7f5 faa2 	bl	800086c <__aeabi_ddiv>
 800b328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b32c:	f008 080f 	and.w	r8, r8, #15
 800b330:	2503      	movs	r5, #3
 800b332:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b608 <_dtoa_r+0x640>
 800b336:	f1b8 0f00 	cmp.w	r8, #0
 800b33a:	d10a      	bne.n	800b352 <_dtoa_r+0x38a>
 800b33c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b340:	4632      	mov	r2, r6
 800b342:	463b      	mov	r3, r7
 800b344:	f7f5 fa92 	bl	800086c <__aeabi_ddiv>
 800b348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b34c:	e02b      	b.n	800b3a6 <_dtoa_r+0x3de>
 800b34e:	2502      	movs	r5, #2
 800b350:	e7ef      	b.n	800b332 <_dtoa_r+0x36a>
 800b352:	f018 0f01 	tst.w	r8, #1
 800b356:	d008      	beq.n	800b36a <_dtoa_r+0x3a2>
 800b358:	4630      	mov	r0, r6
 800b35a:	4639      	mov	r1, r7
 800b35c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b360:	f7f5 f95a 	bl	8000618 <__aeabi_dmul>
 800b364:	3501      	adds	r5, #1
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b36e:	f109 0908 	add.w	r9, r9, #8
 800b372:	e7e0      	b.n	800b336 <_dtoa_r+0x36e>
 800b374:	f000 809f 	beq.w	800b4b6 <_dtoa_r+0x4ee>
 800b378:	f1cb 0600 	rsb	r6, fp, #0
 800b37c:	4ba1      	ldr	r3, [pc, #644]	; (800b604 <_dtoa_r+0x63c>)
 800b37e:	4fa2      	ldr	r7, [pc, #648]	; (800b608 <_dtoa_r+0x640>)
 800b380:	f006 020f 	and.w	r2, r6, #15
 800b384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	ec51 0b18 	vmov	r0, r1, d8
 800b390:	f7f5 f942 	bl	8000618 <__aeabi_dmul>
 800b394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b398:	1136      	asrs	r6, r6, #4
 800b39a:	2300      	movs	r3, #0
 800b39c:	2502      	movs	r5, #2
 800b39e:	2e00      	cmp	r6, #0
 800b3a0:	d17e      	bne.n	800b4a0 <_dtoa_r+0x4d8>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1d0      	bne.n	800b348 <_dtoa_r+0x380>
 800b3a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 8084 	beq.w	800b4ba <_dtoa_r+0x4f2>
 800b3b2:	4b96      	ldr	r3, [pc, #600]	; (800b60c <_dtoa_r+0x644>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	f7f5 fb9f 	bl	8000afc <__aeabi_dcmplt>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d07b      	beq.n	800b4ba <_dtoa_r+0x4f2>
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d078      	beq.n	800b4ba <_dtoa_r+0x4f2>
 800b3c8:	9b01      	ldr	r3, [sp, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	dd39      	ble.n	800b442 <_dtoa_r+0x47a>
 800b3ce:	4b90      	ldr	r3, [pc, #576]	; (800b610 <_dtoa_r+0x648>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	f7f5 f91f 	bl	8000618 <__aeabi_dmul>
 800b3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3de:	9e01      	ldr	r6, [sp, #4]
 800b3e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b3e4:	3501      	adds	r5, #1
 800b3e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f7f5 f8aa 	bl	8000544 <__aeabi_i2d>
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	f7f5 f910 	bl	8000618 <__aeabi_dmul>
 800b3f8:	4b86      	ldr	r3, [pc, #536]	; (800b614 <_dtoa_r+0x64c>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f7f4 ff56 	bl	80002ac <__adddf3>
 800b400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b408:	9303      	str	r3, [sp, #12]
 800b40a:	2e00      	cmp	r6, #0
 800b40c:	d158      	bne.n	800b4c0 <_dtoa_r+0x4f8>
 800b40e:	4b82      	ldr	r3, [pc, #520]	; (800b618 <_dtoa_r+0x650>)
 800b410:	2200      	movs	r2, #0
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f4 ff47 	bl	80002a8 <__aeabi_dsub>
 800b41a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b41e:	4680      	mov	r8, r0
 800b420:	4689      	mov	r9, r1
 800b422:	f7f5 fb89 	bl	8000b38 <__aeabi_dcmpgt>
 800b426:	2800      	cmp	r0, #0
 800b428:	f040 8296 	bne.w	800b958 <_dtoa_r+0x990>
 800b42c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b430:	4640      	mov	r0, r8
 800b432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b436:	4649      	mov	r1, r9
 800b438:	f7f5 fb60 	bl	8000afc <__aeabi_dcmplt>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f040 8289 	bne.w	800b954 <_dtoa_r+0x98c>
 800b442:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f2c0 814e 	blt.w	800b6ea <_dtoa_r+0x722>
 800b44e:	f1bb 0f0e 	cmp.w	fp, #14
 800b452:	f300 814a 	bgt.w	800b6ea <_dtoa_r+0x722>
 800b456:	4b6b      	ldr	r3, [pc, #428]	; (800b604 <_dtoa_r+0x63c>)
 800b458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b45c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b462:	2b00      	cmp	r3, #0
 800b464:	f280 80dc 	bge.w	800b620 <_dtoa_r+0x658>
 800b468:	9b04      	ldr	r3, [sp, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f300 80d8 	bgt.w	800b620 <_dtoa_r+0x658>
 800b470:	f040 826f 	bne.w	800b952 <_dtoa_r+0x98a>
 800b474:	4b68      	ldr	r3, [pc, #416]	; (800b618 <_dtoa_r+0x650>)
 800b476:	2200      	movs	r2, #0
 800b478:	4640      	mov	r0, r8
 800b47a:	4649      	mov	r1, r9
 800b47c:	f7f5 f8cc 	bl	8000618 <__aeabi_dmul>
 800b480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b484:	f7f5 fb4e 	bl	8000b24 <__aeabi_dcmpge>
 800b488:	9e04      	ldr	r6, [sp, #16]
 800b48a:	4637      	mov	r7, r6
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f040 8245 	bne.w	800b91c <_dtoa_r+0x954>
 800b492:	9d00      	ldr	r5, [sp, #0]
 800b494:	2331      	movs	r3, #49	; 0x31
 800b496:	f805 3b01 	strb.w	r3, [r5], #1
 800b49a:	f10b 0b01 	add.w	fp, fp, #1
 800b49e:	e241      	b.n	800b924 <_dtoa_r+0x95c>
 800b4a0:	07f2      	lsls	r2, r6, #31
 800b4a2:	d505      	bpl.n	800b4b0 <_dtoa_r+0x4e8>
 800b4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a8:	f7f5 f8b6 	bl	8000618 <__aeabi_dmul>
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	1076      	asrs	r6, r6, #1
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	e773      	b.n	800b39e <_dtoa_r+0x3d6>
 800b4b6:	2502      	movs	r5, #2
 800b4b8:	e775      	b.n	800b3a6 <_dtoa_r+0x3de>
 800b4ba:	9e04      	ldr	r6, [sp, #16]
 800b4bc:	465f      	mov	r7, fp
 800b4be:	e792      	b.n	800b3e6 <_dtoa_r+0x41e>
 800b4c0:	9900      	ldr	r1, [sp, #0]
 800b4c2:	4b50      	ldr	r3, [pc, #320]	; (800b604 <_dtoa_r+0x63c>)
 800b4c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4c8:	4431      	add	r1, r6
 800b4ca:	9102      	str	r1, [sp, #8]
 800b4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ce:	eeb0 9a47 	vmov.f32	s18, s14
 800b4d2:	eef0 9a67 	vmov.f32	s19, s15
 800b4d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4de:	2900      	cmp	r1, #0
 800b4e0:	d044      	beq.n	800b56c <_dtoa_r+0x5a4>
 800b4e2:	494e      	ldr	r1, [pc, #312]	; (800b61c <_dtoa_r+0x654>)
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f7f5 f9c1 	bl	800086c <__aeabi_ddiv>
 800b4ea:	ec53 2b19 	vmov	r2, r3, d9
 800b4ee:	f7f4 fedb 	bl	80002a8 <__aeabi_dsub>
 800b4f2:	9d00      	ldr	r5, [sp, #0]
 800b4f4:	ec41 0b19 	vmov	d9, r0, r1
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	f7f5 fb3c 	bl	8000b78 <__aeabi_d2iz>
 800b500:	4606      	mov	r6, r0
 800b502:	f7f5 f81f 	bl	8000544 <__aeabi_i2d>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	4640      	mov	r0, r8
 800b50c:	4649      	mov	r1, r9
 800b50e:	f7f4 fecb 	bl	80002a8 <__aeabi_dsub>
 800b512:	3630      	adds	r6, #48	; 0x30
 800b514:	f805 6b01 	strb.w	r6, [r5], #1
 800b518:	ec53 2b19 	vmov	r2, r3, d9
 800b51c:	4680      	mov	r8, r0
 800b51e:	4689      	mov	r9, r1
 800b520:	f7f5 faec 	bl	8000afc <__aeabi_dcmplt>
 800b524:	2800      	cmp	r0, #0
 800b526:	d164      	bne.n	800b5f2 <_dtoa_r+0x62a>
 800b528:	4642      	mov	r2, r8
 800b52a:	464b      	mov	r3, r9
 800b52c:	4937      	ldr	r1, [pc, #220]	; (800b60c <_dtoa_r+0x644>)
 800b52e:	2000      	movs	r0, #0
 800b530:	f7f4 feba 	bl	80002a8 <__aeabi_dsub>
 800b534:	ec53 2b19 	vmov	r2, r3, d9
 800b538:	f7f5 fae0 	bl	8000afc <__aeabi_dcmplt>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f040 80b6 	bne.w	800b6ae <_dtoa_r+0x6e6>
 800b542:	9b02      	ldr	r3, [sp, #8]
 800b544:	429d      	cmp	r5, r3
 800b546:	f43f af7c 	beq.w	800b442 <_dtoa_r+0x47a>
 800b54a:	4b31      	ldr	r3, [pc, #196]	; (800b610 <_dtoa_r+0x648>)
 800b54c:	ec51 0b19 	vmov	r0, r1, d9
 800b550:	2200      	movs	r2, #0
 800b552:	f7f5 f861 	bl	8000618 <__aeabi_dmul>
 800b556:	4b2e      	ldr	r3, [pc, #184]	; (800b610 <_dtoa_r+0x648>)
 800b558:	ec41 0b19 	vmov	d9, r0, r1
 800b55c:	2200      	movs	r2, #0
 800b55e:	4640      	mov	r0, r8
 800b560:	4649      	mov	r1, r9
 800b562:	f7f5 f859 	bl	8000618 <__aeabi_dmul>
 800b566:	4680      	mov	r8, r0
 800b568:	4689      	mov	r9, r1
 800b56a:	e7c5      	b.n	800b4f8 <_dtoa_r+0x530>
 800b56c:	ec51 0b17 	vmov	r0, r1, d7
 800b570:	f7f5 f852 	bl	8000618 <__aeabi_dmul>
 800b574:	9b02      	ldr	r3, [sp, #8]
 800b576:	9d00      	ldr	r5, [sp, #0]
 800b578:	930f      	str	r3, [sp, #60]	; 0x3c
 800b57a:	ec41 0b19 	vmov	d9, r0, r1
 800b57e:	4649      	mov	r1, r9
 800b580:	4640      	mov	r0, r8
 800b582:	f7f5 faf9 	bl	8000b78 <__aeabi_d2iz>
 800b586:	4606      	mov	r6, r0
 800b588:	f7f4 ffdc 	bl	8000544 <__aeabi_i2d>
 800b58c:	3630      	adds	r6, #48	; 0x30
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f4 fe87 	bl	80002a8 <__aeabi_dsub>
 800b59a:	f805 6b01 	strb.w	r6, [r5], #1
 800b59e:	9b02      	ldr	r3, [sp, #8]
 800b5a0:	429d      	cmp	r5, r3
 800b5a2:	4680      	mov	r8, r0
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	f04f 0200 	mov.w	r2, #0
 800b5aa:	d124      	bne.n	800b5f6 <_dtoa_r+0x62e>
 800b5ac:	4b1b      	ldr	r3, [pc, #108]	; (800b61c <_dtoa_r+0x654>)
 800b5ae:	ec51 0b19 	vmov	r0, r1, d9
 800b5b2:	f7f4 fe7b 	bl	80002ac <__adddf3>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4649      	mov	r1, r9
 800b5be:	f7f5 fabb 	bl	8000b38 <__aeabi_dcmpgt>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d173      	bne.n	800b6ae <_dtoa_r+0x6e6>
 800b5c6:	ec53 2b19 	vmov	r2, r3, d9
 800b5ca:	4914      	ldr	r1, [pc, #80]	; (800b61c <_dtoa_r+0x654>)
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f7f4 fe6b 	bl	80002a8 <__aeabi_dsub>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	4649      	mov	r1, r9
 800b5da:	f7f5 fa8f 	bl	8000afc <__aeabi_dcmplt>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	f43f af2f 	beq.w	800b442 <_dtoa_r+0x47a>
 800b5e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5e6:	1e6b      	subs	r3, r5, #1
 800b5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5ee:	2b30      	cmp	r3, #48	; 0x30
 800b5f0:	d0f8      	beq.n	800b5e4 <_dtoa_r+0x61c>
 800b5f2:	46bb      	mov	fp, r7
 800b5f4:	e04a      	b.n	800b68c <_dtoa_r+0x6c4>
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <_dtoa_r+0x648>)
 800b5f8:	f7f5 f80e 	bl	8000618 <__aeabi_dmul>
 800b5fc:	4680      	mov	r8, r0
 800b5fe:	4689      	mov	r9, r1
 800b600:	e7bd      	b.n	800b57e <_dtoa_r+0x5b6>
 800b602:	bf00      	nop
 800b604:	0800e5c0 	.word	0x0800e5c0
 800b608:	0800e598 	.word	0x0800e598
 800b60c:	3ff00000 	.word	0x3ff00000
 800b610:	40240000 	.word	0x40240000
 800b614:	401c0000 	.word	0x401c0000
 800b618:	40140000 	.word	0x40140000
 800b61c:	3fe00000 	.word	0x3fe00000
 800b620:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b624:	9d00      	ldr	r5, [sp, #0]
 800b626:	4642      	mov	r2, r8
 800b628:	464b      	mov	r3, r9
 800b62a:	4630      	mov	r0, r6
 800b62c:	4639      	mov	r1, r7
 800b62e:	f7f5 f91d 	bl	800086c <__aeabi_ddiv>
 800b632:	f7f5 faa1 	bl	8000b78 <__aeabi_d2iz>
 800b636:	9001      	str	r0, [sp, #4]
 800b638:	f7f4 ff84 	bl	8000544 <__aeabi_i2d>
 800b63c:	4642      	mov	r2, r8
 800b63e:	464b      	mov	r3, r9
 800b640:	f7f4 ffea 	bl	8000618 <__aeabi_dmul>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f4 fe2c 	bl	80002a8 <__aeabi_dsub>
 800b650:	9e01      	ldr	r6, [sp, #4]
 800b652:	9f04      	ldr	r7, [sp, #16]
 800b654:	3630      	adds	r6, #48	; 0x30
 800b656:	f805 6b01 	strb.w	r6, [r5], #1
 800b65a:	9e00      	ldr	r6, [sp, #0]
 800b65c:	1bae      	subs	r6, r5, r6
 800b65e:	42b7      	cmp	r7, r6
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	d134      	bne.n	800b6d0 <_dtoa_r+0x708>
 800b666:	f7f4 fe21 	bl	80002ac <__adddf3>
 800b66a:	4642      	mov	r2, r8
 800b66c:	464b      	mov	r3, r9
 800b66e:	4606      	mov	r6, r0
 800b670:	460f      	mov	r7, r1
 800b672:	f7f5 fa61 	bl	8000b38 <__aeabi_dcmpgt>
 800b676:	b9c8      	cbnz	r0, 800b6ac <_dtoa_r+0x6e4>
 800b678:	4642      	mov	r2, r8
 800b67a:	464b      	mov	r3, r9
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f5 fa32 	bl	8000ae8 <__aeabi_dcmpeq>
 800b684:	b110      	cbz	r0, 800b68c <_dtoa_r+0x6c4>
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	07db      	lsls	r3, r3, #31
 800b68a:	d40f      	bmi.n	800b6ac <_dtoa_r+0x6e4>
 800b68c:	4651      	mov	r1, sl
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 fbcc 	bl	800be2c <_Bfree>
 800b694:	2300      	movs	r3, #0
 800b696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b698:	702b      	strb	r3, [r5, #0]
 800b69a:	f10b 0301 	add.w	r3, fp, #1
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f43f ace2 	beq.w	800b06c <_dtoa_r+0xa4>
 800b6a8:	601d      	str	r5, [r3, #0]
 800b6aa:	e4df      	b.n	800b06c <_dtoa_r+0xa4>
 800b6ac:	465f      	mov	r7, fp
 800b6ae:	462b      	mov	r3, r5
 800b6b0:	461d      	mov	r5, r3
 800b6b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6b6:	2a39      	cmp	r2, #57	; 0x39
 800b6b8:	d106      	bne.n	800b6c8 <_dtoa_r+0x700>
 800b6ba:	9a00      	ldr	r2, [sp, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d1f7      	bne.n	800b6b0 <_dtoa_r+0x6e8>
 800b6c0:	9900      	ldr	r1, [sp, #0]
 800b6c2:	2230      	movs	r2, #48	; 0x30
 800b6c4:	3701      	adds	r7, #1
 800b6c6:	700a      	strb	r2, [r1, #0]
 800b6c8:	781a      	ldrb	r2, [r3, #0]
 800b6ca:	3201      	adds	r2, #1
 800b6cc:	701a      	strb	r2, [r3, #0]
 800b6ce:	e790      	b.n	800b5f2 <_dtoa_r+0x62a>
 800b6d0:	4ba3      	ldr	r3, [pc, #652]	; (800b960 <_dtoa_r+0x998>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f7f4 ffa0 	bl	8000618 <__aeabi_dmul>
 800b6d8:	2200      	movs	r2, #0
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4606      	mov	r6, r0
 800b6de:	460f      	mov	r7, r1
 800b6e0:	f7f5 fa02 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d09e      	beq.n	800b626 <_dtoa_r+0x65e>
 800b6e8:	e7d0      	b.n	800b68c <_dtoa_r+0x6c4>
 800b6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	f000 80ca 	beq.w	800b886 <_dtoa_r+0x8be>
 800b6f2:	9a07      	ldr	r2, [sp, #28]
 800b6f4:	2a01      	cmp	r2, #1
 800b6f6:	f300 80ad 	bgt.w	800b854 <_dtoa_r+0x88c>
 800b6fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	f000 80a5 	beq.w	800b84c <_dtoa_r+0x884>
 800b702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b706:	9e08      	ldr	r6, [sp, #32]
 800b708:	9d05      	ldr	r5, [sp, #20]
 800b70a:	9a05      	ldr	r2, [sp, #20]
 800b70c:	441a      	add	r2, r3
 800b70e:	9205      	str	r2, [sp, #20]
 800b710:	9a06      	ldr	r2, [sp, #24]
 800b712:	2101      	movs	r1, #1
 800b714:	441a      	add	r2, r3
 800b716:	4620      	mov	r0, r4
 800b718:	9206      	str	r2, [sp, #24]
 800b71a:	f000 fc3d 	bl	800bf98 <__i2b>
 800b71e:	4607      	mov	r7, r0
 800b720:	b165      	cbz	r5, 800b73c <_dtoa_r+0x774>
 800b722:	9b06      	ldr	r3, [sp, #24]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd09      	ble.n	800b73c <_dtoa_r+0x774>
 800b728:	42ab      	cmp	r3, r5
 800b72a:	9a05      	ldr	r2, [sp, #20]
 800b72c:	bfa8      	it	ge
 800b72e:	462b      	movge	r3, r5
 800b730:	1ad2      	subs	r2, r2, r3
 800b732:	9205      	str	r2, [sp, #20]
 800b734:	9a06      	ldr	r2, [sp, #24]
 800b736:	1aed      	subs	r5, r5, r3
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	9306      	str	r3, [sp, #24]
 800b73c:	9b08      	ldr	r3, [sp, #32]
 800b73e:	b1f3      	cbz	r3, 800b77e <_dtoa_r+0x7b6>
 800b740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80a3 	beq.w	800b88e <_dtoa_r+0x8c6>
 800b748:	2e00      	cmp	r6, #0
 800b74a:	dd10      	ble.n	800b76e <_dtoa_r+0x7a6>
 800b74c:	4639      	mov	r1, r7
 800b74e:	4632      	mov	r2, r6
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fce1 	bl	800c118 <__pow5mult>
 800b756:	4652      	mov	r2, sl
 800b758:	4601      	mov	r1, r0
 800b75a:	4607      	mov	r7, r0
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fc31 	bl	800bfc4 <__multiply>
 800b762:	4651      	mov	r1, sl
 800b764:	4680      	mov	r8, r0
 800b766:	4620      	mov	r0, r4
 800b768:	f000 fb60 	bl	800be2c <_Bfree>
 800b76c:	46c2      	mov	sl, r8
 800b76e:	9b08      	ldr	r3, [sp, #32]
 800b770:	1b9a      	subs	r2, r3, r6
 800b772:	d004      	beq.n	800b77e <_dtoa_r+0x7b6>
 800b774:	4651      	mov	r1, sl
 800b776:	4620      	mov	r0, r4
 800b778:	f000 fcce 	bl	800c118 <__pow5mult>
 800b77c:	4682      	mov	sl, r0
 800b77e:	2101      	movs	r1, #1
 800b780:	4620      	mov	r0, r4
 800b782:	f000 fc09 	bl	800bf98 <__i2b>
 800b786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	4606      	mov	r6, r0
 800b78c:	f340 8081 	ble.w	800b892 <_dtoa_r+0x8ca>
 800b790:	461a      	mov	r2, r3
 800b792:	4601      	mov	r1, r0
 800b794:	4620      	mov	r0, r4
 800b796:	f000 fcbf 	bl	800c118 <__pow5mult>
 800b79a:	9b07      	ldr	r3, [sp, #28]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	4606      	mov	r6, r0
 800b7a0:	dd7a      	ble.n	800b898 <_dtoa_r+0x8d0>
 800b7a2:	f04f 0800 	mov.w	r8, #0
 800b7a6:	6933      	ldr	r3, [r6, #16]
 800b7a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7ac:	6918      	ldr	r0, [r3, #16]
 800b7ae:	f000 fba5 	bl	800befc <__hi0bits>
 800b7b2:	f1c0 0020 	rsb	r0, r0, #32
 800b7b6:	9b06      	ldr	r3, [sp, #24]
 800b7b8:	4418      	add	r0, r3
 800b7ba:	f010 001f 	ands.w	r0, r0, #31
 800b7be:	f000 8094 	beq.w	800b8ea <_dtoa_r+0x922>
 800b7c2:	f1c0 0320 	rsb	r3, r0, #32
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	f340 8085 	ble.w	800b8d6 <_dtoa_r+0x90e>
 800b7cc:	9b05      	ldr	r3, [sp, #20]
 800b7ce:	f1c0 001c 	rsb	r0, r0, #28
 800b7d2:	4403      	add	r3, r0
 800b7d4:	9305      	str	r3, [sp, #20]
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	4403      	add	r3, r0
 800b7da:	4405      	add	r5, r0
 800b7dc:	9306      	str	r3, [sp, #24]
 800b7de:	9b05      	ldr	r3, [sp, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dd05      	ble.n	800b7f0 <_dtoa_r+0x828>
 800b7e4:	4651      	mov	r1, sl
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f000 fcef 	bl	800c1cc <__lshift>
 800b7ee:	4682      	mov	sl, r0
 800b7f0:	9b06      	ldr	r3, [sp, #24]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	dd05      	ble.n	800b802 <_dtoa_r+0x83a>
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f000 fce6 	bl	800c1cc <__lshift>
 800b800:	4606      	mov	r6, r0
 800b802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b804:	2b00      	cmp	r3, #0
 800b806:	d072      	beq.n	800b8ee <_dtoa_r+0x926>
 800b808:	4631      	mov	r1, r6
 800b80a:	4650      	mov	r0, sl
 800b80c:	f000 fd4a 	bl	800c2a4 <__mcmp>
 800b810:	2800      	cmp	r0, #0
 800b812:	da6c      	bge.n	800b8ee <_dtoa_r+0x926>
 800b814:	2300      	movs	r3, #0
 800b816:	4651      	mov	r1, sl
 800b818:	220a      	movs	r2, #10
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 fb28 	bl	800be70 <__multadd>
 800b820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b822:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b826:	4682      	mov	sl, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 81b0 	beq.w	800bb8e <_dtoa_r+0xbc6>
 800b82e:	2300      	movs	r3, #0
 800b830:	4639      	mov	r1, r7
 800b832:	220a      	movs	r2, #10
 800b834:	4620      	mov	r0, r4
 800b836:	f000 fb1b 	bl	800be70 <__multadd>
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	4607      	mov	r7, r0
 800b840:	f300 8096 	bgt.w	800b970 <_dtoa_r+0x9a8>
 800b844:	9b07      	ldr	r3, [sp, #28]
 800b846:	2b02      	cmp	r3, #2
 800b848:	dc59      	bgt.n	800b8fe <_dtoa_r+0x936>
 800b84a:	e091      	b.n	800b970 <_dtoa_r+0x9a8>
 800b84c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b852:	e758      	b.n	800b706 <_dtoa_r+0x73e>
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	1e5e      	subs	r6, r3, #1
 800b858:	9b08      	ldr	r3, [sp, #32]
 800b85a:	42b3      	cmp	r3, r6
 800b85c:	bfbf      	itttt	lt
 800b85e:	9b08      	ldrlt	r3, [sp, #32]
 800b860:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b862:	9608      	strlt	r6, [sp, #32]
 800b864:	1af3      	sublt	r3, r6, r3
 800b866:	bfb4      	ite	lt
 800b868:	18d2      	addlt	r2, r2, r3
 800b86a:	1b9e      	subge	r6, r3, r6
 800b86c:	9b04      	ldr	r3, [sp, #16]
 800b86e:	bfbc      	itt	lt
 800b870:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b872:	2600      	movlt	r6, #0
 800b874:	2b00      	cmp	r3, #0
 800b876:	bfb7      	itett	lt
 800b878:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b87c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b880:	1a9d      	sublt	r5, r3, r2
 800b882:	2300      	movlt	r3, #0
 800b884:	e741      	b.n	800b70a <_dtoa_r+0x742>
 800b886:	9e08      	ldr	r6, [sp, #32]
 800b888:	9d05      	ldr	r5, [sp, #20]
 800b88a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b88c:	e748      	b.n	800b720 <_dtoa_r+0x758>
 800b88e:	9a08      	ldr	r2, [sp, #32]
 800b890:	e770      	b.n	800b774 <_dtoa_r+0x7ac>
 800b892:	9b07      	ldr	r3, [sp, #28]
 800b894:	2b01      	cmp	r3, #1
 800b896:	dc19      	bgt.n	800b8cc <_dtoa_r+0x904>
 800b898:	9b02      	ldr	r3, [sp, #8]
 800b89a:	b9bb      	cbnz	r3, 800b8cc <_dtoa_r+0x904>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8a2:	b99b      	cbnz	r3, 800b8cc <_dtoa_r+0x904>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8aa:	0d1b      	lsrs	r3, r3, #20
 800b8ac:	051b      	lsls	r3, r3, #20
 800b8ae:	b183      	cbz	r3, 800b8d2 <_dtoa_r+0x90a>
 800b8b0:	9b05      	ldr	r3, [sp, #20]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	9305      	str	r3, [sp, #20]
 800b8b6:	9b06      	ldr	r3, [sp, #24]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	9306      	str	r3, [sp, #24]
 800b8bc:	f04f 0801 	mov.w	r8, #1
 800b8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f47f af6f 	bne.w	800b7a6 <_dtoa_r+0x7de>
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	e774      	b.n	800b7b6 <_dtoa_r+0x7ee>
 800b8cc:	f04f 0800 	mov.w	r8, #0
 800b8d0:	e7f6      	b.n	800b8c0 <_dtoa_r+0x8f8>
 800b8d2:	4698      	mov	r8, r3
 800b8d4:	e7f4      	b.n	800b8c0 <_dtoa_r+0x8f8>
 800b8d6:	d082      	beq.n	800b7de <_dtoa_r+0x816>
 800b8d8:	9a05      	ldr	r2, [sp, #20]
 800b8da:	331c      	adds	r3, #28
 800b8dc:	441a      	add	r2, r3
 800b8de:	9205      	str	r2, [sp, #20]
 800b8e0:	9a06      	ldr	r2, [sp, #24]
 800b8e2:	441a      	add	r2, r3
 800b8e4:	441d      	add	r5, r3
 800b8e6:	9206      	str	r2, [sp, #24]
 800b8e8:	e779      	b.n	800b7de <_dtoa_r+0x816>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	e7f4      	b.n	800b8d8 <_dtoa_r+0x910>
 800b8ee:	9b04      	ldr	r3, [sp, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dc37      	bgt.n	800b964 <_dtoa_r+0x99c>
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	dd34      	ble.n	800b964 <_dtoa_r+0x99c>
 800b8fa:	9b04      	ldr	r3, [sp, #16]
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	b963      	cbnz	r3, 800b91c <_dtoa_r+0x954>
 800b902:	4631      	mov	r1, r6
 800b904:	2205      	movs	r2, #5
 800b906:	4620      	mov	r0, r4
 800b908:	f000 fab2 	bl	800be70 <__multadd>
 800b90c:	4601      	mov	r1, r0
 800b90e:	4606      	mov	r6, r0
 800b910:	4650      	mov	r0, sl
 800b912:	f000 fcc7 	bl	800c2a4 <__mcmp>
 800b916:	2800      	cmp	r0, #0
 800b918:	f73f adbb 	bgt.w	800b492 <_dtoa_r+0x4ca>
 800b91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91e:	9d00      	ldr	r5, [sp, #0]
 800b920:	ea6f 0b03 	mvn.w	fp, r3
 800b924:	f04f 0800 	mov.w	r8, #0
 800b928:	4631      	mov	r1, r6
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 fa7e 	bl	800be2c <_Bfree>
 800b930:	2f00      	cmp	r7, #0
 800b932:	f43f aeab 	beq.w	800b68c <_dtoa_r+0x6c4>
 800b936:	f1b8 0f00 	cmp.w	r8, #0
 800b93a:	d005      	beq.n	800b948 <_dtoa_r+0x980>
 800b93c:	45b8      	cmp	r8, r7
 800b93e:	d003      	beq.n	800b948 <_dtoa_r+0x980>
 800b940:	4641      	mov	r1, r8
 800b942:	4620      	mov	r0, r4
 800b944:	f000 fa72 	bl	800be2c <_Bfree>
 800b948:	4639      	mov	r1, r7
 800b94a:	4620      	mov	r0, r4
 800b94c:	f000 fa6e 	bl	800be2c <_Bfree>
 800b950:	e69c      	b.n	800b68c <_dtoa_r+0x6c4>
 800b952:	2600      	movs	r6, #0
 800b954:	4637      	mov	r7, r6
 800b956:	e7e1      	b.n	800b91c <_dtoa_r+0x954>
 800b958:	46bb      	mov	fp, r7
 800b95a:	4637      	mov	r7, r6
 800b95c:	e599      	b.n	800b492 <_dtoa_r+0x4ca>
 800b95e:	bf00      	nop
 800b960:	40240000 	.word	0x40240000
 800b964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 80c8 	beq.w	800bafc <_dtoa_r+0xb34>
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	2d00      	cmp	r5, #0
 800b972:	dd05      	ble.n	800b980 <_dtoa_r+0x9b8>
 800b974:	4639      	mov	r1, r7
 800b976:	462a      	mov	r2, r5
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 fc27 	bl	800c1cc <__lshift>
 800b97e:	4607      	mov	r7, r0
 800b980:	f1b8 0f00 	cmp.w	r8, #0
 800b984:	d05b      	beq.n	800ba3e <_dtoa_r+0xa76>
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 fa0f 	bl	800bdac <_Balloc>
 800b98e:	4605      	mov	r5, r0
 800b990:	b928      	cbnz	r0, 800b99e <_dtoa_r+0x9d6>
 800b992:	4b83      	ldr	r3, [pc, #524]	; (800bba0 <_dtoa_r+0xbd8>)
 800b994:	4602      	mov	r2, r0
 800b996:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b99a:	f7ff bb2e 	b.w	800affa <_dtoa_r+0x32>
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	3202      	adds	r2, #2
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	f107 010c 	add.w	r1, r7, #12
 800b9a8:	300c      	adds	r0, #12
 800b9aa:	f7ff fa77 	bl	800ae9c <memcpy>
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 fc0a 	bl	800c1cc <__lshift>
 800b9b8:	9b00      	ldr	r3, [sp, #0]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	9304      	str	r3, [sp, #16]
 800b9be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	9308      	str	r3, [sp, #32]
 800b9c6:	9b02      	ldr	r3, [sp, #8]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	46b8      	mov	r8, r7
 800b9ce:	9306      	str	r3, [sp, #24]
 800b9d0:	4607      	mov	r7, r0
 800b9d2:	9b04      	ldr	r3, [sp, #16]
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	4650      	mov	r0, sl
 800b9da:	9301      	str	r3, [sp, #4]
 800b9dc:	f7ff fa6c 	bl	800aeb8 <quorem>
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	9002      	str	r0, [sp, #8]
 800b9e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	f000 fc5b 	bl	800c2a4 <__mcmp>
 800b9ee:	463a      	mov	r2, r7
 800b9f0:	9005      	str	r0, [sp, #20]
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f000 fc71 	bl	800c2dc <__mdiff>
 800b9fa:	68c2      	ldr	r2, [r0, #12]
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	bb02      	cbnz	r2, 800ba42 <_dtoa_r+0xa7a>
 800ba00:	4601      	mov	r1, r0
 800ba02:	4650      	mov	r0, sl
 800ba04:	f000 fc4e 	bl	800c2a4 <__mcmp>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba10:	f000 fa0c 	bl	800be2c <_Bfree>
 800ba14:	9b07      	ldr	r3, [sp, #28]
 800ba16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba18:	9d04      	ldr	r5, [sp, #16]
 800ba1a:	ea43 0102 	orr.w	r1, r3, r2
 800ba1e:	9b06      	ldr	r3, [sp, #24]
 800ba20:	4319      	orrs	r1, r3
 800ba22:	d110      	bne.n	800ba46 <_dtoa_r+0xa7e>
 800ba24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba28:	d029      	beq.n	800ba7e <_dtoa_r+0xab6>
 800ba2a:	9b05      	ldr	r3, [sp, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	dd02      	ble.n	800ba36 <_dtoa_r+0xa6e>
 800ba30:	9b02      	ldr	r3, [sp, #8]
 800ba32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ba36:	9b01      	ldr	r3, [sp, #4]
 800ba38:	f883 9000 	strb.w	r9, [r3]
 800ba3c:	e774      	b.n	800b928 <_dtoa_r+0x960>
 800ba3e:	4638      	mov	r0, r7
 800ba40:	e7ba      	b.n	800b9b8 <_dtoa_r+0x9f0>
 800ba42:	2201      	movs	r2, #1
 800ba44:	e7e1      	b.n	800ba0a <_dtoa_r+0xa42>
 800ba46:	9b05      	ldr	r3, [sp, #20]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	db04      	blt.n	800ba56 <_dtoa_r+0xa8e>
 800ba4c:	9907      	ldr	r1, [sp, #28]
 800ba4e:	430b      	orrs	r3, r1
 800ba50:	9906      	ldr	r1, [sp, #24]
 800ba52:	430b      	orrs	r3, r1
 800ba54:	d120      	bne.n	800ba98 <_dtoa_r+0xad0>
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	dded      	ble.n	800ba36 <_dtoa_r+0xa6e>
 800ba5a:	4651      	mov	r1, sl
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fbb4 	bl	800c1cc <__lshift>
 800ba64:	4631      	mov	r1, r6
 800ba66:	4682      	mov	sl, r0
 800ba68:	f000 fc1c 	bl	800c2a4 <__mcmp>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	dc03      	bgt.n	800ba78 <_dtoa_r+0xab0>
 800ba70:	d1e1      	bne.n	800ba36 <_dtoa_r+0xa6e>
 800ba72:	f019 0f01 	tst.w	r9, #1
 800ba76:	d0de      	beq.n	800ba36 <_dtoa_r+0xa6e>
 800ba78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba7c:	d1d8      	bne.n	800ba30 <_dtoa_r+0xa68>
 800ba7e:	9a01      	ldr	r2, [sp, #4]
 800ba80:	2339      	movs	r3, #57	; 0x39
 800ba82:	7013      	strb	r3, [r2, #0]
 800ba84:	462b      	mov	r3, r5
 800ba86:	461d      	mov	r5, r3
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba8e:	2a39      	cmp	r2, #57	; 0x39
 800ba90:	d06c      	beq.n	800bb6c <_dtoa_r+0xba4>
 800ba92:	3201      	adds	r2, #1
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	e747      	b.n	800b928 <_dtoa_r+0x960>
 800ba98:	2a00      	cmp	r2, #0
 800ba9a:	dd07      	ble.n	800baac <_dtoa_r+0xae4>
 800ba9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800baa0:	d0ed      	beq.n	800ba7e <_dtoa_r+0xab6>
 800baa2:	9a01      	ldr	r2, [sp, #4]
 800baa4:	f109 0301 	add.w	r3, r9, #1
 800baa8:	7013      	strb	r3, [r2, #0]
 800baaa:	e73d      	b.n	800b928 <_dtoa_r+0x960>
 800baac:	9b04      	ldr	r3, [sp, #16]
 800baae:	9a08      	ldr	r2, [sp, #32]
 800bab0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d043      	beq.n	800bb40 <_dtoa_r+0xb78>
 800bab8:	4651      	mov	r1, sl
 800baba:	2300      	movs	r3, #0
 800babc:	220a      	movs	r2, #10
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 f9d6 	bl	800be70 <__multadd>
 800bac4:	45b8      	cmp	r8, r7
 800bac6:	4682      	mov	sl, r0
 800bac8:	f04f 0300 	mov.w	r3, #0
 800bacc:	f04f 020a 	mov.w	r2, #10
 800bad0:	4641      	mov	r1, r8
 800bad2:	4620      	mov	r0, r4
 800bad4:	d107      	bne.n	800bae6 <_dtoa_r+0xb1e>
 800bad6:	f000 f9cb 	bl	800be70 <__multadd>
 800bada:	4680      	mov	r8, r0
 800badc:	4607      	mov	r7, r0
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	3301      	adds	r3, #1
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	e775      	b.n	800b9d2 <_dtoa_r+0xa0a>
 800bae6:	f000 f9c3 	bl	800be70 <__multadd>
 800baea:	4639      	mov	r1, r7
 800baec:	4680      	mov	r8, r0
 800baee:	2300      	movs	r3, #0
 800baf0:	220a      	movs	r2, #10
 800baf2:	4620      	mov	r0, r4
 800baf4:	f000 f9bc 	bl	800be70 <__multadd>
 800baf8:	4607      	mov	r7, r0
 800bafa:	e7f0      	b.n	800bade <_dtoa_r+0xb16>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	9d00      	ldr	r5, [sp, #0]
 800bb02:	4631      	mov	r1, r6
 800bb04:	4650      	mov	r0, sl
 800bb06:	f7ff f9d7 	bl	800aeb8 <quorem>
 800bb0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bb0e:	9b00      	ldr	r3, [sp, #0]
 800bb10:	f805 9b01 	strb.w	r9, [r5], #1
 800bb14:	1aea      	subs	r2, r5, r3
 800bb16:	9b01      	ldr	r3, [sp, #4]
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	dd07      	ble.n	800bb2c <_dtoa_r+0xb64>
 800bb1c:	4651      	mov	r1, sl
 800bb1e:	2300      	movs	r3, #0
 800bb20:	220a      	movs	r2, #10
 800bb22:	4620      	mov	r0, r4
 800bb24:	f000 f9a4 	bl	800be70 <__multadd>
 800bb28:	4682      	mov	sl, r0
 800bb2a:	e7ea      	b.n	800bb02 <_dtoa_r+0xb3a>
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bfc8      	it	gt
 800bb32:	461d      	movgt	r5, r3
 800bb34:	9b00      	ldr	r3, [sp, #0]
 800bb36:	bfd8      	it	le
 800bb38:	2501      	movle	r5, #1
 800bb3a:	441d      	add	r5, r3
 800bb3c:	f04f 0800 	mov.w	r8, #0
 800bb40:	4651      	mov	r1, sl
 800bb42:	2201      	movs	r2, #1
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 fb41 	bl	800c1cc <__lshift>
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	4682      	mov	sl, r0
 800bb4e:	f000 fba9 	bl	800c2a4 <__mcmp>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	dc96      	bgt.n	800ba84 <_dtoa_r+0xabc>
 800bb56:	d102      	bne.n	800bb5e <_dtoa_r+0xb96>
 800bb58:	f019 0f01 	tst.w	r9, #1
 800bb5c:	d192      	bne.n	800ba84 <_dtoa_r+0xabc>
 800bb5e:	462b      	mov	r3, r5
 800bb60:	461d      	mov	r5, r3
 800bb62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb66:	2a30      	cmp	r2, #48	; 0x30
 800bb68:	d0fa      	beq.n	800bb60 <_dtoa_r+0xb98>
 800bb6a:	e6dd      	b.n	800b928 <_dtoa_r+0x960>
 800bb6c:	9a00      	ldr	r2, [sp, #0]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d189      	bne.n	800ba86 <_dtoa_r+0xabe>
 800bb72:	f10b 0b01 	add.w	fp, fp, #1
 800bb76:	2331      	movs	r3, #49	; 0x31
 800bb78:	e796      	b.n	800baa8 <_dtoa_r+0xae0>
 800bb7a:	4b0a      	ldr	r3, [pc, #40]	; (800bba4 <_dtoa_r+0xbdc>)
 800bb7c:	f7ff ba99 	b.w	800b0b2 <_dtoa_r+0xea>
 800bb80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f47f aa6d 	bne.w	800b062 <_dtoa_r+0x9a>
 800bb88:	4b07      	ldr	r3, [pc, #28]	; (800bba8 <_dtoa_r+0xbe0>)
 800bb8a:	f7ff ba92 	b.w	800b0b2 <_dtoa_r+0xea>
 800bb8e:	9b01      	ldr	r3, [sp, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dcb5      	bgt.n	800bb00 <_dtoa_r+0xb38>
 800bb94:	9b07      	ldr	r3, [sp, #28]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	f73f aeb1 	bgt.w	800b8fe <_dtoa_r+0x936>
 800bb9c:	e7b0      	b.n	800bb00 <_dtoa_r+0xb38>
 800bb9e:	bf00      	nop
 800bba0:	0800e52c 	.word	0x0800e52c
 800bba4:	0800e48c 	.word	0x0800e48c
 800bba8:	0800e4b0 	.word	0x0800e4b0

0800bbac <_free_r>:
 800bbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbae:	2900      	cmp	r1, #0
 800bbb0:	d044      	beq.n	800bc3c <_free_r+0x90>
 800bbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb6:	9001      	str	r0, [sp, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f1a1 0404 	sub.w	r4, r1, #4
 800bbbe:	bfb8      	it	lt
 800bbc0:	18e4      	addlt	r4, r4, r3
 800bbc2:	f000 f8e7 	bl	800bd94 <__malloc_lock>
 800bbc6:	4a1e      	ldr	r2, [pc, #120]	; (800bc40 <_free_r+0x94>)
 800bbc8:	9801      	ldr	r0, [sp, #4]
 800bbca:	6813      	ldr	r3, [r2, #0]
 800bbcc:	b933      	cbnz	r3, 800bbdc <_free_r+0x30>
 800bbce:	6063      	str	r3, [r4, #4]
 800bbd0:	6014      	str	r4, [r2, #0]
 800bbd2:	b003      	add	sp, #12
 800bbd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbd8:	f000 b8e2 	b.w	800bda0 <__malloc_unlock>
 800bbdc:	42a3      	cmp	r3, r4
 800bbde:	d908      	bls.n	800bbf2 <_free_r+0x46>
 800bbe0:	6825      	ldr	r5, [r4, #0]
 800bbe2:	1961      	adds	r1, r4, r5
 800bbe4:	428b      	cmp	r3, r1
 800bbe6:	bf01      	itttt	eq
 800bbe8:	6819      	ldreq	r1, [r3, #0]
 800bbea:	685b      	ldreq	r3, [r3, #4]
 800bbec:	1949      	addeq	r1, r1, r5
 800bbee:	6021      	streq	r1, [r4, #0]
 800bbf0:	e7ed      	b.n	800bbce <_free_r+0x22>
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	b10b      	cbz	r3, 800bbfc <_free_r+0x50>
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	d9fa      	bls.n	800bbf2 <_free_r+0x46>
 800bbfc:	6811      	ldr	r1, [r2, #0]
 800bbfe:	1855      	adds	r5, r2, r1
 800bc00:	42a5      	cmp	r5, r4
 800bc02:	d10b      	bne.n	800bc1c <_free_r+0x70>
 800bc04:	6824      	ldr	r4, [r4, #0]
 800bc06:	4421      	add	r1, r4
 800bc08:	1854      	adds	r4, r2, r1
 800bc0a:	42a3      	cmp	r3, r4
 800bc0c:	6011      	str	r1, [r2, #0]
 800bc0e:	d1e0      	bne.n	800bbd2 <_free_r+0x26>
 800bc10:	681c      	ldr	r4, [r3, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	6053      	str	r3, [r2, #4]
 800bc16:	440c      	add	r4, r1
 800bc18:	6014      	str	r4, [r2, #0]
 800bc1a:	e7da      	b.n	800bbd2 <_free_r+0x26>
 800bc1c:	d902      	bls.n	800bc24 <_free_r+0x78>
 800bc1e:	230c      	movs	r3, #12
 800bc20:	6003      	str	r3, [r0, #0]
 800bc22:	e7d6      	b.n	800bbd2 <_free_r+0x26>
 800bc24:	6825      	ldr	r5, [r4, #0]
 800bc26:	1961      	adds	r1, r4, r5
 800bc28:	428b      	cmp	r3, r1
 800bc2a:	bf04      	itt	eq
 800bc2c:	6819      	ldreq	r1, [r3, #0]
 800bc2e:	685b      	ldreq	r3, [r3, #4]
 800bc30:	6063      	str	r3, [r4, #4]
 800bc32:	bf04      	itt	eq
 800bc34:	1949      	addeq	r1, r1, r5
 800bc36:	6021      	streq	r1, [r4, #0]
 800bc38:	6054      	str	r4, [r2, #4]
 800bc3a:	e7ca      	b.n	800bbd2 <_free_r+0x26>
 800bc3c:	b003      	add	sp, #12
 800bc3e:	bd30      	pop	{r4, r5, pc}
 800bc40:	20001dc4 	.word	0x20001dc4

0800bc44 <malloc>:
 800bc44:	4b02      	ldr	r3, [pc, #8]	; (800bc50 <malloc+0xc>)
 800bc46:	4601      	mov	r1, r0
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	f000 b823 	b.w	800bc94 <_malloc_r>
 800bc4e:	bf00      	nop
 800bc50:	2000018c 	.word	0x2000018c

0800bc54 <sbrk_aligned>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4e0e      	ldr	r6, [pc, #56]	; (800bc90 <sbrk_aligned+0x3c>)
 800bc58:	460c      	mov	r4, r1
 800bc5a:	6831      	ldr	r1, [r6, #0]
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	b911      	cbnz	r1, 800bc66 <sbrk_aligned+0x12>
 800bc60:	f000 fe96 	bl	800c990 <_sbrk_r>
 800bc64:	6030      	str	r0, [r6, #0]
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 fe91 	bl	800c990 <_sbrk_r>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	d00a      	beq.n	800bc88 <sbrk_aligned+0x34>
 800bc72:	1cc4      	adds	r4, r0, #3
 800bc74:	f024 0403 	bic.w	r4, r4, #3
 800bc78:	42a0      	cmp	r0, r4
 800bc7a:	d007      	beq.n	800bc8c <sbrk_aligned+0x38>
 800bc7c:	1a21      	subs	r1, r4, r0
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 fe86 	bl	800c990 <_sbrk_r>
 800bc84:	3001      	adds	r0, #1
 800bc86:	d101      	bne.n	800bc8c <sbrk_aligned+0x38>
 800bc88:	f04f 34ff 	mov.w	r4, #4294967295
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
 800bc90:	20001dc8 	.word	0x20001dc8

0800bc94 <_malloc_r>:
 800bc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc98:	1ccd      	adds	r5, r1, #3
 800bc9a:	f025 0503 	bic.w	r5, r5, #3
 800bc9e:	3508      	adds	r5, #8
 800bca0:	2d0c      	cmp	r5, #12
 800bca2:	bf38      	it	cc
 800bca4:	250c      	movcc	r5, #12
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	4607      	mov	r7, r0
 800bcaa:	db01      	blt.n	800bcb0 <_malloc_r+0x1c>
 800bcac:	42a9      	cmp	r1, r5
 800bcae:	d905      	bls.n	800bcbc <_malloc_r+0x28>
 800bcb0:	230c      	movs	r3, #12
 800bcb2:	603b      	str	r3, [r7, #0]
 800bcb4:	2600      	movs	r6, #0
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd90 <_malloc_r+0xfc>
 800bcc0:	f000 f868 	bl	800bd94 <__malloc_lock>
 800bcc4:	f8d8 3000 	ldr.w	r3, [r8]
 800bcc8:	461c      	mov	r4, r3
 800bcca:	bb5c      	cbnz	r4, 800bd24 <_malloc_r+0x90>
 800bccc:	4629      	mov	r1, r5
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7ff ffc0 	bl	800bc54 <sbrk_aligned>
 800bcd4:	1c43      	adds	r3, r0, #1
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	d155      	bne.n	800bd86 <_malloc_r+0xf2>
 800bcda:	f8d8 4000 	ldr.w	r4, [r8]
 800bcde:	4626      	mov	r6, r4
 800bce0:	2e00      	cmp	r6, #0
 800bce2:	d145      	bne.n	800bd70 <_malloc_r+0xdc>
 800bce4:	2c00      	cmp	r4, #0
 800bce6:	d048      	beq.n	800bd7a <_malloc_r+0xe6>
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	4631      	mov	r1, r6
 800bcec:	4638      	mov	r0, r7
 800bcee:	eb04 0903 	add.w	r9, r4, r3
 800bcf2:	f000 fe4d 	bl	800c990 <_sbrk_r>
 800bcf6:	4581      	cmp	r9, r0
 800bcf8:	d13f      	bne.n	800bd7a <_malloc_r+0xe6>
 800bcfa:	6821      	ldr	r1, [r4, #0]
 800bcfc:	1a6d      	subs	r5, r5, r1
 800bcfe:	4629      	mov	r1, r5
 800bd00:	4638      	mov	r0, r7
 800bd02:	f7ff ffa7 	bl	800bc54 <sbrk_aligned>
 800bd06:	3001      	adds	r0, #1
 800bd08:	d037      	beq.n	800bd7a <_malloc_r+0xe6>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	442b      	add	r3, r5
 800bd0e:	6023      	str	r3, [r4, #0]
 800bd10:	f8d8 3000 	ldr.w	r3, [r8]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d038      	beq.n	800bd8a <_malloc_r+0xf6>
 800bd18:	685a      	ldr	r2, [r3, #4]
 800bd1a:	42a2      	cmp	r2, r4
 800bd1c:	d12b      	bne.n	800bd76 <_malloc_r+0xe2>
 800bd1e:	2200      	movs	r2, #0
 800bd20:	605a      	str	r2, [r3, #4]
 800bd22:	e00f      	b.n	800bd44 <_malloc_r+0xb0>
 800bd24:	6822      	ldr	r2, [r4, #0]
 800bd26:	1b52      	subs	r2, r2, r5
 800bd28:	d41f      	bmi.n	800bd6a <_malloc_r+0xd6>
 800bd2a:	2a0b      	cmp	r2, #11
 800bd2c:	d917      	bls.n	800bd5e <_malloc_r+0xca>
 800bd2e:	1961      	adds	r1, r4, r5
 800bd30:	42a3      	cmp	r3, r4
 800bd32:	6025      	str	r5, [r4, #0]
 800bd34:	bf18      	it	ne
 800bd36:	6059      	strne	r1, [r3, #4]
 800bd38:	6863      	ldr	r3, [r4, #4]
 800bd3a:	bf08      	it	eq
 800bd3c:	f8c8 1000 	streq.w	r1, [r8]
 800bd40:	5162      	str	r2, [r4, r5]
 800bd42:	604b      	str	r3, [r1, #4]
 800bd44:	4638      	mov	r0, r7
 800bd46:	f104 060b 	add.w	r6, r4, #11
 800bd4a:	f000 f829 	bl	800bda0 <__malloc_unlock>
 800bd4e:	f026 0607 	bic.w	r6, r6, #7
 800bd52:	1d23      	adds	r3, r4, #4
 800bd54:	1af2      	subs	r2, r6, r3
 800bd56:	d0ae      	beq.n	800bcb6 <_malloc_r+0x22>
 800bd58:	1b9b      	subs	r3, r3, r6
 800bd5a:	50a3      	str	r3, [r4, r2]
 800bd5c:	e7ab      	b.n	800bcb6 <_malloc_r+0x22>
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	6862      	ldr	r2, [r4, #4]
 800bd62:	d1dd      	bne.n	800bd20 <_malloc_r+0x8c>
 800bd64:	f8c8 2000 	str.w	r2, [r8]
 800bd68:	e7ec      	b.n	800bd44 <_malloc_r+0xb0>
 800bd6a:	4623      	mov	r3, r4
 800bd6c:	6864      	ldr	r4, [r4, #4]
 800bd6e:	e7ac      	b.n	800bcca <_malloc_r+0x36>
 800bd70:	4634      	mov	r4, r6
 800bd72:	6876      	ldr	r6, [r6, #4]
 800bd74:	e7b4      	b.n	800bce0 <_malloc_r+0x4c>
 800bd76:	4613      	mov	r3, r2
 800bd78:	e7cc      	b.n	800bd14 <_malloc_r+0x80>
 800bd7a:	230c      	movs	r3, #12
 800bd7c:	603b      	str	r3, [r7, #0]
 800bd7e:	4638      	mov	r0, r7
 800bd80:	f000 f80e 	bl	800bda0 <__malloc_unlock>
 800bd84:	e797      	b.n	800bcb6 <_malloc_r+0x22>
 800bd86:	6025      	str	r5, [r4, #0]
 800bd88:	e7dc      	b.n	800bd44 <_malloc_r+0xb0>
 800bd8a:	605b      	str	r3, [r3, #4]
 800bd8c:	deff      	udf	#255	; 0xff
 800bd8e:	bf00      	nop
 800bd90:	20001dc4 	.word	0x20001dc4

0800bd94 <__malloc_lock>:
 800bd94:	4801      	ldr	r0, [pc, #4]	; (800bd9c <__malloc_lock+0x8>)
 800bd96:	f7ff b87f 	b.w	800ae98 <__retarget_lock_acquire_recursive>
 800bd9a:	bf00      	nop
 800bd9c:	20001dc0 	.word	0x20001dc0

0800bda0 <__malloc_unlock>:
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <__malloc_unlock+0x8>)
 800bda2:	f7ff b87a 	b.w	800ae9a <__retarget_lock_release_recursive>
 800bda6:	bf00      	nop
 800bda8:	20001dc0 	.word	0x20001dc0

0800bdac <_Balloc>:
 800bdac:	b570      	push	{r4, r5, r6, lr}
 800bdae:	69c6      	ldr	r6, [r0, #28]
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	b976      	cbnz	r6, 800bdd4 <_Balloc+0x28>
 800bdb6:	2010      	movs	r0, #16
 800bdb8:	f7ff ff44 	bl	800bc44 <malloc>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	61e0      	str	r0, [r4, #28]
 800bdc0:	b920      	cbnz	r0, 800bdcc <_Balloc+0x20>
 800bdc2:	4b18      	ldr	r3, [pc, #96]	; (800be24 <_Balloc+0x78>)
 800bdc4:	4818      	ldr	r0, [pc, #96]	; (800be28 <_Balloc+0x7c>)
 800bdc6:	216b      	movs	r1, #107	; 0x6b
 800bdc8:	f000 fdf2 	bl	800c9b0 <__assert_func>
 800bdcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd0:	6006      	str	r6, [r0, #0]
 800bdd2:	60c6      	str	r6, [r0, #12]
 800bdd4:	69e6      	ldr	r6, [r4, #28]
 800bdd6:	68f3      	ldr	r3, [r6, #12]
 800bdd8:	b183      	cbz	r3, 800bdfc <_Balloc+0x50>
 800bdda:	69e3      	ldr	r3, [r4, #28]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bde2:	b9b8      	cbnz	r0, 800be14 <_Balloc+0x68>
 800bde4:	2101      	movs	r1, #1
 800bde6:	fa01 f605 	lsl.w	r6, r1, r5
 800bdea:	1d72      	adds	r2, r6, #5
 800bdec:	0092      	lsls	r2, r2, #2
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f000 fdfc 	bl	800c9ec <_calloc_r>
 800bdf4:	b160      	cbz	r0, 800be10 <_Balloc+0x64>
 800bdf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdfa:	e00e      	b.n	800be1a <_Balloc+0x6e>
 800bdfc:	2221      	movs	r2, #33	; 0x21
 800bdfe:	2104      	movs	r1, #4
 800be00:	4620      	mov	r0, r4
 800be02:	f000 fdf3 	bl	800c9ec <_calloc_r>
 800be06:	69e3      	ldr	r3, [r4, #28]
 800be08:	60f0      	str	r0, [r6, #12]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1e4      	bne.n	800bdda <_Balloc+0x2e>
 800be10:	2000      	movs	r0, #0
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	6802      	ldr	r2, [r0, #0]
 800be16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be1a:	2300      	movs	r3, #0
 800be1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be20:	e7f7      	b.n	800be12 <_Balloc+0x66>
 800be22:	bf00      	nop
 800be24:	0800e4bd 	.word	0x0800e4bd
 800be28:	0800e53d 	.word	0x0800e53d

0800be2c <_Bfree>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	69c6      	ldr	r6, [r0, #28]
 800be30:	4605      	mov	r5, r0
 800be32:	460c      	mov	r4, r1
 800be34:	b976      	cbnz	r6, 800be54 <_Bfree+0x28>
 800be36:	2010      	movs	r0, #16
 800be38:	f7ff ff04 	bl	800bc44 <malloc>
 800be3c:	4602      	mov	r2, r0
 800be3e:	61e8      	str	r0, [r5, #28]
 800be40:	b920      	cbnz	r0, 800be4c <_Bfree+0x20>
 800be42:	4b09      	ldr	r3, [pc, #36]	; (800be68 <_Bfree+0x3c>)
 800be44:	4809      	ldr	r0, [pc, #36]	; (800be6c <_Bfree+0x40>)
 800be46:	218f      	movs	r1, #143	; 0x8f
 800be48:	f000 fdb2 	bl	800c9b0 <__assert_func>
 800be4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be50:	6006      	str	r6, [r0, #0]
 800be52:	60c6      	str	r6, [r0, #12]
 800be54:	b13c      	cbz	r4, 800be66 <_Bfree+0x3a>
 800be56:	69eb      	ldr	r3, [r5, #28]
 800be58:	6862      	ldr	r2, [r4, #4]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be60:	6021      	str	r1, [r4, #0]
 800be62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	0800e4bd 	.word	0x0800e4bd
 800be6c:	0800e53d 	.word	0x0800e53d

0800be70 <__multadd>:
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	690d      	ldr	r5, [r1, #16]
 800be76:	4607      	mov	r7, r0
 800be78:	460c      	mov	r4, r1
 800be7a:	461e      	mov	r6, r3
 800be7c:	f101 0c14 	add.w	ip, r1, #20
 800be80:	2000      	movs	r0, #0
 800be82:	f8dc 3000 	ldr.w	r3, [ip]
 800be86:	b299      	uxth	r1, r3
 800be88:	fb02 6101 	mla	r1, r2, r1, r6
 800be8c:	0c1e      	lsrs	r6, r3, #16
 800be8e:	0c0b      	lsrs	r3, r1, #16
 800be90:	fb02 3306 	mla	r3, r2, r6, r3
 800be94:	b289      	uxth	r1, r1
 800be96:	3001      	adds	r0, #1
 800be98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be9c:	4285      	cmp	r5, r0
 800be9e:	f84c 1b04 	str.w	r1, [ip], #4
 800bea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bea6:	dcec      	bgt.n	800be82 <__multadd+0x12>
 800bea8:	b30e      	cbz	r6, 800beee <__multadd+0x7e>
 800beaa:	68a3      	ldr	r3, [r4, #8]
 800beac:	42ab      	cmp	r3, r5
 800beae:	dc19      	bgt.n	800bee4 <__multadd+0x74>
 800beb0:	6861      	ldr	r1, [r4, #4]
 800beb2:	4638      	mov	r0, r7
 800beb4:	3101      	adds	r1, #1
 800beb6:	f7ff ff79 	bl	800bdac <_Balloc>
 800beba:	4680      	mov	r8, r0
 800bebc:	b928      	cbnz	r0, 800beca <__multadd+0x5a>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <__multadd+0x84>)
 800bec2:	480d      	ldr	r0, [pc, #52]	; (800bef8 <__multadd+0x88>)
 800bec4:	21ba      	movs	r1, #186	; 0xba
 800bec6:	f000 fd73 	bl	800c9b0 <__assert_func>
 800beca:	6922      	ldr	r2, [r4, #16]
 800becc:	3202      	adds	r2, #2
 800bece:	f104 010c 	add.w	r1, r4, #12
 800bed2:	0092      	lsls	r2, r2, #2
 800bed4:	300c      	adds	r0, #12
 800bed6:	f7fe ffe1 	bl	800ae9c <memcpy>
 800beda:	4621      	mov	r1, r4
 800bedc:	4638      	mov	r0, r7
 800bede:	f7ff ffa5 	bl	800be2c <_Bfree>
 800bee2:	4644      	mov	r4, r8
 800bee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bee8:	3501      	adds	r5, #1
 800beea:	615e      	str	r6, [r3, #20]
 800beec:	6125      	str	r5, [r4, #16]
 800beee:	4620      	mov	r0, r4
 800bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef4:	0800e52c 	.word	0x0800e52c
 800bef8:	0800e53d 	.word	0x0800e53d

0800befc <__hi0bits>:
 800befc:	0c03      	lsrs	r3, r0, #16
 800befe:	041b      	lsls	r3, r3, #16
 800bf00:	b9d3      	cbnz	r3, 800bf38 <__hi0bits+0x3c>
 800bf02:	0400      	lsls	r0, r0, #16
 800bf04:	2310      	movs	r3, #16
 800bf06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf0a:	bf04      	itt	eq
 800bf0c:	0200      	lsleq	r0, r0, #8
 800bf0e:	3308      	addeq	r3, #8
 800bf10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf14:	bf04      	itt	eq
 800bf16:	0100      	lsleq	r0, r0, #4
 800bf18:	3304      	addeq	r3, #4
 800bf1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf1e:	bf04      	itt	eq
 800bf20:	0080      	lsleq	r0, r0, #2
 800bf22:	3302      	addeq	r3, #2
 800bf24:	2800      	cmp	r0, #0
 800bf26:	db05      	blt.n	800bf34 <__hi0bits+0x38>
 800bf28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf2c:	f103 0301 	add.w	r3, r3, #1
 800bf30:	bf08      	it	eq
 800bf32:	2320      	moveq	r3, #32
 800bf34:	4618      	mov	r0, r3
 800bf36:	4770      	bx	lr
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e7e4      	b.n	800bf06 <__hi0bits+0xa>

0800bf3c <__lo0bits>:
 800bf3c:	6803      	ldr	r3, [r0, #0]
 800bf3e:	f013 0207 	ands.w	r2, r3, #7
 800bf42:	d00c      	beq.n	800bf5e <__lo0bits+0x22>
 800bf44:	07d9      	lsls	r1, r3, #31
 800bf46:	d422      	bmi.n	800bf8e <__lo0bits+0x52>
 800bf48:	079a      	lsls	r2, r3, #30
 800bf4a:	bf49      	itett	mi
 800bf4c:	085b      	lsrmi	r3, r3, #1
 800bf4e:	089b      	lsrpl	r3, r3, #2
 800bf50:	6003      	strmi	r3, [r0, #0]
 800bf52:	2201      	movmi	r2, #1
 800bf54:	bf5c      	itt	pl
 800bf56:	6003      	strpl	r3, [r0, #0]
 800bf58:	2202      	movpl	r2, #2
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	4770      	bx	lr
 800bf5e:	b299      	uxth	r1, r3
 800bf60:	b909      	cbnz	r1, 800bf66 <__lo0bits+0x2a>
 800bf62:	0c1b      	lsrs	r3, r3, #16
 800bf64:	2210      	movs	r2, #16
 800bf66:	b2d9      	uxtb	r1, r3
 800bf68:	b909      	cbnz	r1, 800bf6e <__lo0bits+0x32>
 800bf6a:	3208      	adds	r2, #8
 800bf6c:	0a1b      	lsrs	r3, r3, #8
 800bf6e:	0719      	lsls	r1, r3, #28
 800bf70:	bf04      	itt	eq
 800bf72:	091b      	lsreq	r3, r3, #4
 800bf74:	3204      	addeq	r2, #4
 800bf76:	0799      	lsls	r1, r3, #30
 800bf78:	bf04      	itt	eq
 800bf7a:	089b      	lsreq	r3, r3, #2
 800bf7c:	3202      	addeq	r2, #2
 800bf7e:	07d9      	lsls	r1, r3, #31
 800bf80:	d403      	bmi.n	800bf8a <__lo0bits+0x4e>
 800bf82:	085b      	lsrs	r3, r3, #1
 800bf84:	f102 0201 	add.w	r2, r2, #1
 800bf88:	d003      	beq.n	800bf92 <__lo0bits+0x56>
 800bf8a:	6003      	str	r3, [r0, #0]
 800bf8c:	e7e5      	b.n	800bf5a <__lo0bits+0x1e>
 800bf8e:	2200      	movs	r2, #0
 800bf90:	e7e3      	b.n	800bf5a <__lo0bits+0x1e>
 800bf92:	2220      	movs	r2, #32
 800bf94:	e7e1      	b.n	800bf5a <__lo0bits+0x1e>
	...

0800bf98 <__i2b>:
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	f7ff ff05 	bl	800bdac <_Balloc>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	b928      	cbnz	r0, 800bfb2 <__i2b+0x1a>
 800bfa6:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <__i2b+0x24>)
 800bfa8:	4805      	ldr	r0, [pc, #20]	; (800bfc0 <__i2b+0x28>)
 800bfaa:	f240 1145 	movw	r1, #325	; 0x145
 800bfae:	f000 fcff 	bl	800c9b0 <__assert_func>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	6144      	str	r4, [r0, #20]
 800bfb6:	6103      	str	r3, [r0, #16]
 800bfb8:	bd10      	pop	{r4, pc}
 800bfba:	bf00      	nop
 800bfbc:	0800e52c 	.word	0x0800e52c
 800bfc0:	0800e53d 	.word	0x0800e53d

0800bfc4 <__multiply>:
 800bfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	4691      	mov	r9, r2
 800bfca:	690a      	ldr	r2, [r1, #16]
 800bfcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	bfb8      	it	lt
 800bfd4:	460b      	movlt	r3, r1
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	bfbc      	itt	lt
 800bfda:	464c      	movlt	r4, r9
 800bfdc:	4699      	movlt	r9, r3
 800bfde:	6927      	ldr	r7, [r4, #16]
 800bfe0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	6861      	ldr	r1, [r4, #4]
 800bfe8:	eb07 060a 	add.w	r6, r7, sl
 800bfec:	42b3      	cmp	r3, r6
 800bfee:	b085      	sub	sp, #20
 800bff0:	bfb8      	it	lt
 800bff2:	3101      	addlt	r1, #1
 800bff4:	f7ff feda 	bl	800bdac <_Balloc>
 800bff8:	b930      	cbnz	r0, 800c008 <__multiply+0x44>
 800bffa:	4602      	mov	r2, r0
 800bffc:	4b44      	ldr	r3, [pc, #272]	; (800c110 <__multiply+0x14c>)
 800bffe:	4845      	ldr	r0, [pc, #276]	; (800c114 <__multiply+0x150>)
 800c000:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c004:	f000 fcd4 	bl	800c9b0 <__assert_func>
 800c008:	f100 0514 	add.w	r5, r0, #20
 800c00c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c010:	462b      	mov	r3, r5
 800c012:	2200      	movs	r2, #0
 800c014:	4543      	cmp	r3, r8
 800c016:	d321      	bcc.n	800c05c <__multiply+0x98>
 800c018:	f104 0314 	add.w	r3, r4, #20
 800c01c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c020:	f109 0314 	add.w	r3, r9, #20
 800c024:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c028:	9202      	str	r2, [sp, #8]
 800c02a:	1b3a      	subs	r2, r7, r4
 800c02c:	3a15      	subs	r2, #21
 800c02e:	f022 0203 	bic.w	r2, r2, #3
 800c032:	3204      	adds	r2, #4
 800c034:	f104 0115 	add.w	r1, r4, #21
 800c038:	428f      	cmp	r7, r1
 800c03a:	bf38      	it	cc
 800c03c:	2204      	movcc	r2, #4
 800c03e:	9201      	str	r2, [sp, #4]
 800c040:	9a02      	ldr	r2, [sp, #8]
 800c042:	9303      	str	r3, [sp, #12]
 800c044:	429a      	cmp	r2, r3
 800c046:	d80c      	bhi.n	800c062 <__multiply+0x9e>
 800c048:	2e00      	cmp	r6, #0
 800c04a:	dd03      	ble.n	800c054 <__multiply+0x90>
 800c04c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c050:	2b00      	cmp	r3, #0
 800c052:	d05b      	beq.n	800c10c <__multiply+0x148>
 800c054:	6106      	str	r6, [r0, #16]
 800c056:	b005      	add	sp, #20
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05c:	f843 2b04 	str.w	r2, [r3], #4
 800c060:	e7d8      	b.n	800c014 <__multiply+0x50>
 800c062:	f8b3 a000 	ldrh.w	sl, [r3]
 800c066:	f1ba 0f00 	cmp.w	sl, #0
 800c06a:	d024      	beq.n	800c0b6 <__multiply+0xf2>
 800c06c:	f104 0e14 	add.w	lr, r4, #20
 800c070:	46a9      	mov	r9, r5
 800c072:	f04f 0c00 	mov.w	ip, #0
 800c076:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c07a:	f8d9 1000 	ldr.w	r1, [r9]
 800c07e:	fa1f fb82 	uxth.w	fp, r2
 800c082:	b289      	uxth	r1, r1
 800c084:	fb0a 110b 	mla	r1, sl, fp, r1
 800c088:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c08c:	f8d9 2000 	ldr.w	r2, [r9]
 800c090:	4461      	add	r1, ip
 800c092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c096:	fb0a c20b 	mla	r2, sl, fp, ip
 800c09a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c09e:	b289      	uxth	r1, r1
 800c0a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0a4:	4577      	cmp	r7, lr
 800c0a6:	f849 1b04 	str.w	r1, [r9], #4
 800c0aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0ae:	d8e2      	bhi.n	800c076 <__multiply+0xb2>
 800c0b0:	9a01      	ldr	r2, [sp, #4]
 800c0b2:	f845 c002 	str.w	ip, [r5, r2]
 800c0b6:	9a03      	ldr	r2, [sp, #12]
 800c0b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	f1b9 0f00 	cmp.w	r9, #0
 800c0c2:	d021      	beq.n	800c108 <__multiply+0x144>
 800c0c4:	6829      	ldr	r1, [r5, #0]
 800c0c6:	f104 0c14 	add.w	ip, r4, #20
 800c0ca:	46ae      	mov	lr, r5
 800c0cc:	f04f 0a00 	mov.w	sl, #0
 800c0d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c0d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0d8:	fb09 220b 	mla	r2, r9, fp, r2
 800c0dc:	4452      	add	r2, sl
 800c0de:	b289      	uxth	r1, r1
 800c0e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0e4:	f84e 1b04 	str.w	r1, [lr], #4
 800c0e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c0ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0f0:	f8be 1000 	ldrh.w	r1, [lr]
 800c0f4:	fb09 110a 	mla	r1, r9, sl, r1
 800c0f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c0fc:	4567      	cmp	r7, ip
 800c0fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c102:	d8e5      	bhi.n	800c0d0 <__multiply+0x10c>
 800c104:	9a01      	ldr	r2, [sp, #4]
 800c106:	50a9      	str	r1, [r5, r2]
 800c108:	3504      	adds	r5, #4
 800c10a:	e799      	b.n	800c040 <__multiply+0x7c>
 800c10c:	3e01      	subs	r6, #1
 800c10e:	e79b      	b.n	800c048 <__multiply+0x84>
 800c110:	0800e52c 	.word	0x0800e52c
 800c114:	0800e53d 	.word	0x0800e53d

0800c118 <__pow5mult>:
 800c118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c11c:	4615      	mov	r5, r2
 800c11e:	f012 0203 	ands.w	r2, r2, #3
 800c122:	4606      	mov	r6, r0
 800c124:	460f      	mov	r7, r1
 800c126:	d007      	beq.n	800c138 <__pow5mult+0x20>
 800c128:	4c25      	ldr	r4, [pc, #148]	; (800c1c0 <__pow5mult+0xa8>)
 800c12a:	3a01      	subs	r2, #1
 800c12c:	2300      	movs	r3, #0
 800c12e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c132:	f7ff fe9d 	bl	800be70 <__multadd>
 800c136:	4607      	mov	r7, r0
 800c138:	10ad      	asrs	r5, r5, #2
 800c13a:	d03d      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c13c:	69f4      	ldr	r4, [r6, #28]
 800c13e:	b97c      	cbnz	r4, 800c160 <__pow5mult+0x48>
 800c140:	2010      	movs	r0, #16
 800c142:	f7ff fd7f 	bl	800bc44 <malloc>
 800c146:	4602      	mov	r2, r0
 800c148:	61f0      	str	r0, [r6, #28]
 800c14a:	b928      	cbnz	r0, 800c158 <__pow5mult+0x40>
 800c14c:	4b1d      	ldr	r3, [pc, #116]	; (800c1c4 <__pow5mult+0xac>)
 800c14e:	481e      	ldr	r0, [pc, #120]	; (800c1c8 <__pow5mult+0xb0>)
 800c150:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c154:	f000 fc2c 	bl	800c9b0 <__assert_func>
 800c158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c15c:	6004      	str	r4, [r0, #0]
 800c15e:	60c4      	str	r4, [r0, #12]
 800c160:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c168:	b94c      	cbnz	r4, 800c17e <__pow5mult+0x66>
 800c16a:	f240 2171 	movw	r1, #625	; 0x271
 800c16e:	4630      	mov	r0, r6
 800c170:	f7ff ff12 	bl	800bf98 <__i2b>
 800c174:	2300      	movs	r3, #0
 800c176:	f8c8 0008 	str.w	r0, [r8, #8]
 800c17a:	4604      	mov	r4, r0
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	f04f 0900 	mov.w	r9, #0
 800c182:	07eb      	lsls	r3, r5, #31
 800c184:	d50a      	bpl.n	800c19c <__pow5mult+0x84>
 800c186:	4639      	mov	r1, r7
 800c188:	4622      	mov	r2, r4
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7ff ff1a 	bl	800bfc4 <__multiply>
 800c190:	4639      	mov	r1, r7
 800c192:	4680      	mov	r8, r0
 800c194:	4630      	mov	r0, r6
 800c196:	f7ff fe49 	bl	800be2c <_Bfree>
 800c19a:	4647      	mov	r7, r8
 800c19c:	106d      	asrs	r5, r5, #1
 800c19e:	d00b      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c1a0:	6820      	ldr	r0, [r4, #0]
 800c1a2:	b938      	cbnz	r0, 800c1b4 <__pow5mult+0x9c>
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff ff0b 	bl	800bfc4 <__multiply>
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	f8c0 9000 	str.w	r9, [r0]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	e7e4      	b.n	800c182 <__pow5mult+0x6a>
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1be:	bf00      	nop
 800c1c0:	0800e688 	.word	0x0800e688
 800c1c4:	0800e4bd 	.word	0x0800e4bd
 800c1c8:	0800e53d 	.word	0x0800e53d

0800c1cc <__lshift>:
 800c1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	6849      	ldr	r1, [r1, #4]
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	4607      	mov	r7, r0
 800c1de:	4691      	mov	r9, r2
 800c1e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1e4:	f108 0601 	add.w	r6, r8, #1
 800c1e8:	42b3      	cmp	r3, r6
 800c1ea:	db0b      	blt.n	800c204 <__lshift+0x38>
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	f7ff fddd 	bl	800bdac <_Balloc>
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	b948      	cbnz	r0, 800c20a <__lshift+0x3e>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	4b28      	ldr	r3, [pc, #160]	; (800c29c <__lshift+0xd0>)
 800c1fa:	4829      	ldr	r0, [pc, #164]	; (800c2a0 <__lshift+0xd4>)
 800c1fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c200:	f000 fbd6 	bl	800c9b0 <__assert_func>
 800c204:	3101      	adds	r1, #1
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	e7ee      	b.n	800c1e8 <__lshift+0x1c>
 800c20a:	2300      	movs	r3, #0
 800c20c:	f100 0114 	add.w	r1, r0, #20
 800c210:	f100 0210 	add.w	r2, r0, #16
 800c214:	4618      	mov	r0, r3
 800c216:	4553      	cmp	r3, sl
 800c218:	db33      	blt.n	800c282 <__lshift+0xb6>
 800c21a:	6920      	ldr	r0, [r4, #16]
 800c21c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c220:	f104 0314 	add.w	r3, r4, #20
 800c224:	f019 091f 	ands.w	r9, r9, #31
 800c228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c22c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c230:	d02b      	beq.n	800c28a <__lshift+0xbe>
 800c232:	f1c9 0e20 	rsb	lr, r9, #32
 800c236:	468a      	mov	sl, r1
 800c238:	2200      	movs	r2, #0
 800c23a:	6818      	ldr	r0, [r3, #0]
 800c23c:	fa00 f009 	lsl.w	r0, r0, r9
 800c240:	4310      	orrs	r0, r2
 800c242:	f84a 0b04 	str.w	r0, [sl], #4
 800c246:	f853 2b04 	ldr.w	r2, [r3], #4
 800c24a:	459c      	cmp	ip, r3
 800c24c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c250:	d8f3      	bhi.n	800c23a <__lshift+0x6e>
 800c252:	ebac 0304 	sub.w	r3, ip, r4
 800c256:	3b15      	subs	r3, #21
 800c258:	f023 0303 	bic.w	r3, r3, #3
 800c25c:	3304      	adds	r3, #4
 800c25e:	f104 0015 	add.w	r0, r4, #21
 800c262:	4584      	cmp	ip, r0
 800c264:	bf38      	it	cc
 800c266:	2304      	movcc	r3, #4
 800c268:	50ca      	str	r2, [r1, r3]
 800c26a:	b10a      	cbz	r2, 800c270 <__lshift+0xa4>
 800c26c:	f108 0602 	add.w	r6, r8, #2
 800c270:	3e01      	subs	r6, #1
 800c272:	4638      	mov	r0, r7
 800c274:	612e      	str	r6, [r5, #16]
 800c276:	4621      	mov	r1, r4
 800c278:	f7ff fdd8 	bl	800be2c <_Bfree>
 800c27c:	4628      	mov	r0, r5
 800c27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c282:	f842 0f04 	str.w	r0, [r2, #4]!
 800c286:	3301      	adds	r3, #1
 800c288:	e7c5      	b.n	800c216 <__lshift+0x4a>
 800c28a:	3904      	subs	r1, #4
 800c28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c290:	f841 2f04 	str.w	r2, [r1, #4]!
 800c294:	459c      	cmp	ip, r3
 800c296:	d8f9      	bhi.n	800c28c <__lshift+0xc0>
 800c298:	e7ea      	b.n	800c270 <__lshift+0xa4>
 800c29a:	bf00      	nop
 800c29c:	0800e52c 	.word	0x0800e52c
 800c2a0:	0800e53d 	.word	0x0800e53d

0800c2a4 <__mcmp>:
 800c2a4:	b530      	push	{r4, r5, lr}
 800c2a6:	6902      	ldr	r2, [r0, #16]
 800c2a8:	690c      	ldr	r4, [r1, #16]
 800c2aa:	1b12      	subs	r2, r2, r4
 800c2ac:	d10e      	bne.n	800c2cc <__mcmp+0x28>
 800c2ae:	f100 0314 	add.w	r3, r0, #20
 800c2b2:	3114      	adds	r1, #20
 800c2b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c2c4:	42a5      	cmp	r5, r4
 800c2c6:	d003      	beq.n	800c2d0 <__mcmp+0x2c>
 800c2c8:	d305      	bcc.n	800c2d6 <__mcmp+0x32>
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	bd30      	pop	{r4, r5, pc}
 800c2d0:	4283      	cmp	r3, r0
 800c2d2:	d3f3      	bcc.n	800c2bc <__mcmp+0x18>
 800c2d4:	e7fa      	b.n	800c2cc <__mcmp+0x28>
 800c2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2da:	e7f7      	b.n	800c2cc <__mcmp+0x28>

0800c2dc <__mdiff>:
 800c2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4690      	mov	r8, r2
 800c2ea:	f7ff ffdb 	bl	800c2a4 <__mcmp>
 800c2ee:	1e05      	subs	r5, r0, #0
 800c2f0:	d110      	bne.n	800c314 <__mdiff+0x38>
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f7ff fd59 	bl	800bdac <_Balloc>
 800c2fa:	b930      	cbnz	r0, 800c30a <__mdiff+0x2e>
 800c2fc:	4b3a      	ldr	r3, [pc, #232]	; (800c3e8 <__mdiff+0x10c>)
 800c2fe:	4602      	mov	r2, r0
 800c300:	f240 2137 	movw	r1, #567	; 0x237
 800c304:	4839      	ldr	r0, [pc, #228]	; (800c3ec <__mdiff+0x110>)
 800c306:	f000 fb53 	bl	800c9b0 <__assert_func>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c314:	bfa4      	itt	ge
 800c316:	4643      	movge	r3, r8
 800c318:	46a0      	movge	r8, r4
 800c31a:	4630      	mov	r0, r6
 800c31c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c320:	bfa6      	itte	ge
 800c322:	461c      	movge	r4, r3
 800c324:	2500      	movge	r5, #0
 800c326:	2501      	movlt	r5, #1
 800c328:	f7ff fd40 	bl	800bdac <_Balloc>
 800c32c:	b920      	cbnz	r0, 800c338 <__mdiff+0x5c>
 800c32e:	4b2e      	ldr	r3, [pc, #184]	; (800c3e8 <__mdiff+0x10c>)
 800c330:	4602      	mov	r2, r0
 800c332:	f240 2145 	movw	r1, #581	; 0x245
 800c336:	e7e5      	b.n	800c304 <__mdiff+0x28>
 800c338:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c33c:	6926      	ldr	r6, [r4, #16]
 800c33e:	60c5      	str	r5, [r0, #12]
 800c340:	f104 0914 	add.w	r9, r4, #20
 800c344:	f108 0514 	add.w	r5, r8, #20
 800c348:	f100 0e14 	add.w	lr, r0, #20
 800c34c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c350:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c354:	f108 0210 	add.w	r2, r8, #16
 800c358:	46f2      	mov	sl, lr
 800c35a:	2100      	movs	r1, #0
 800c35c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c360:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c364:	fa11 f88b 	uxtah	r8, r1, fp
 800c368:	b299      	uxth	r1, r3
 800c36a:	0c1b      	lsrs	r3, r3, #16
 800c36c:	eba8 0801 	sub.w	r8, r8, r1
 800c370:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c374:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c378:	fa1f f888 	uxth.w	r8, r8
 800c37c:	1419      	asrs	r1, r3, #16
 800c37e:	454e      	cmp	r6, r9
 800c380:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c384:	f84a 3b04 	str.w	r3, [sl], #4
 800c388:	d8e8      	bhi.n	800c35c <__mdiff+0x80>
 800c38a:	1b33      	subs	r3, r6, r4
 800c38c:	3b15      	subs	r3, #21
 800c38e:	f023 0303 	bic.w	r3, r3, #3
 800c392:	3304      	adds	r3, #4
 800c394:	3415      	adds	r4, #21
 800c396:	42a6      	cmp	r6, r4
 800c398:	bf38      	it	cc
 800c39a:	2304      	movcc	r3, #4
 800c39c:	441d      	add	r5, r3
 800c39e:	4473      	add	r3, lr
 800c3a0:	469e      	mov	lr, r3
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	4566      	cmp	r6, ip
 800c3a6:	d30e      	bcc.n	800c3c6 <__mdiff+0xea>
 800c3a8:	f10c 0203 	add.w	r2, ip, #3
 800c3ac:	1b52      	subs	r2, r2, r5
 800c3ae:	f022 0203 	bic.w	r2, r2, #3
 800c3b2:	3d03      	subs	r5, #3
 800c3b4:	45ac      	cmp	ip, r5
 800c3b6:	bf38      	it	cc
 800c3b8:	2200      	movcc	r2, #0
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3c0:	b17a      	cbz	r2, 800c3e2 <__mdiff+0x106>
 800c3c2:	6107      	str	r7, [r0, #16]
 800c3c4:	e7a4      	b.n	800c310 <__mdiff+0x34>
 800c3c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800c3ca:	fa11 f288 	uxtah	r2, r1, r8
 800c3ce:	1414      	asrs	r4, r2, #16
 800c3d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3d4:	b292      	uxth	r2, r2
 800c3d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c3da:	f84e 2b04 	str.w	r2, [lr], #4
 800c3de:	1421      	asrs	r1, r4, #16
 800c3e0:	e7e0      	b.n	800c3a4 <__mdiff+0xc8>
 800c3e2:	3f01      	subs	r7, #1
 800c3e4:	e7ea      	b.n	800c3bc <__mdiff+0xe0>
 800c3e6:	bf00      	nop
 800c3e8:	0800e52c 	.word	0x0800e52c
 800c3ec:	0800e53d 	.word	0x0800e53d

0800c3f0 <__d2b>:
 800c3f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	ec59 8b10 	vmov	r8, r9, d0
 800c3fc:	4616      	mov	r6, r2
 800c3fe:	f7ff fcd5 	bl	800bdac <_Balloc>
 800c402:	4604      	mov	r4, r0
 800c404:	b930      	cbnz	r0, 800c414 <__d2b+0x24>
 800c406:	4602      	mov	r2, r0
 800c408:	4b24      	ldr	r3, [pc, #144]	; (800c49c <__d2b+0xac>)
 800c40a:	4825      	ldr	r0, [pc, #148]	; (800c4a0 <__d2b+0xb0>)
 800c40c:	f240 310f 	movw	r1, #783	; 0x30f
 800c410:	f000 face 	bl	800c9b0 <__assert_func>
 800c414:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c41c:	bb2d      	cbnz	r5, 800c46a <__d2b+0x7a>
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	f1b8 0300 	subs.w	r3, r8, #0
 800c424:	d026      	beq.n	800c474 <__d2b+0x84>
 800c426:	4668      	mov	r0, sp
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	f7ff fd87 	bl	800bf3c <__lo0bits>
 800c42e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c432:	b1e8      	cbz	r0, 800c470 <__d2b+0x80>
 800c434:	f1c0 0320 	rsb	r3, r0, #32
 800c438:	fa02 f303 	lsl.w	r3, r2, r3
 800c43c:	430b      	orrs	r3, r1
 800c43e:	40c2      	lsrs	r2, r0
 800c440:	6163      	str	r3, [r4, #20]
 800c442:	9201      	str	r2, [sp, #4]
 800c444:	9b01      	ldr	r3, [sp, #4]
 800c446:	61a3      	str	r3, [r4, #24]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	bf14      	ite	ne
 800c44c:	2202      	movne	r2, #2
 800c44e:	2201      	moveq	r2, #1
 800c450:	6122      	str	r2, [r4, #16]
 800c452:	b1bd      	cbz	r5, 800c484 <__d2b+0x94>
 800c454:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c458:	4405      	add	r5, r0
 800c45a:	603d      	str	r5, [r7, #0]
 800c45c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c460:	6030      	str	r0, [r6, #0]
 800c462:	4620      	mov	r0, r4
 800c464:	b003      	add	sp, #12
 800c466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c46a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c46e:	e7d6      	b.n	800c41e <__d2b+0x2e>
 800c470:	6161      	str	r1, [r4, #20]
 800c472:	e7e7      	b.n	800c444 <__d2b+0x54>
 800c474:	a801      	add	r0, sp, #4
 800c476:	f7ff fd61 	bl	800bf3c <__lo0bits>
 800c47a:	9b01      	ldr	r3, [sp, #4]
 800c47c:	6163      	str	r3, [r4, #20]
 800c47e:	3020      	adds	r0, #32
 800c480:	2201      	movs	r2, #1
 800c482:	e7e5      	b.n	800c450 <__d2b+0x60>
 800c484:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c488:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c48c:	6038      	str	r0, [r7, #0]
 800c48e:	6918      	ldr	r0, [r3, #16]
 800c490:	f7ff fd34 	bl	800befc <__hi0bits>
 800c494:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c498:	e7e2      	b.n	800c460 <__d2b+0x70>
 800c49a:	bf00      	nop
 800c49c:	0800e52c 	.word	0x0800e52c
 800c4a0:	0800e53d 	.word	0x0800e53d

0800c4a4 <__sfputc_r>:
 800c4a4:	6893      	ldr	r3, [r2, #8]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	b410      	push	{r4}
 800c4ac:	6093      	str	r3, [r2, #8]
 800c4ae:	da08      	bge.n	800c4c2 <__sfputc_r+0x1e>
 800c4b0:	6994      	ldr	r4, [r2, #24]
 800c4b2:	42a3      	cmp	r3, r4
 800c4b4:	db01      	blt.n	800c4ba <__sfputc_r+0x16>
 800c4b6:	290a      	cmp	r1, #10
 800c4b8:	d103      	bne.n	800c4c2 <__sfputc_r+0x1e>
 800c4ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4be:	f7fe bbda 	b.w	800ac76 <__swbuf_r>
 800c4c2:	6813      	ldr	r3, [r2, #0]
 800c4c4:	1c58      	adds	r0, r3, #1
 800c4c6:	6010      	str	r0, [r2, #0]
 800c4c8:	7019      	strb	r1, [r3, #0]
 800c4ca:	4608      	mov	r0, r1
 800c4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <__sfputs_r>:
 800c4d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	4614      	mov	r4, r2
 800c4da:	18d5      	adds	r5, r2, r3
 800c4dc:	42ac      	cmp	r4, r5
 800c4de:	d101      	bne.n	800c4e4 <__sfputs_r+0x12>
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	e007      	b.n	800c4f4 <__sfputs_r+0x22>
 800c4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e8:	463a      	mov	r2, r7
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7ff ffda 	bl	800c4a4 <__sfputc_r>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d1f3      	bne.n	800c4dc <__sfputs_r+0xa>
 800c4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4f8 <_vfiprintf_r>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	460d      	mov	r5, r1
 800c4fe:	b09d      	sub	sp, #116	; 0x74
 800c500:	4614      	mov	r4, r2
 800c502:	4698      	mov	r8, r3
 800c504:	4606      	mov	r6, r0
 800c506:	b118      	cbz	r0, 800c510 <_vfiprintf_r+0x18>
 800c508:	6a03      	ldr	r3, [r0, #32]
 800c50a:	b90b      	cbnz	r3, 800c510 <_vfiprintf_r+0x18>
 800c50c:	f7fe facc 	bl	800aaa8 <__sinit>
 800c510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c512:	07d9      	lsls	r1, r3, #31
 800c514:	d405      	bmi.n	800c522 <_vfiprintf_r+0x2a>
 800c516:	89ab      	ldrh	r3, [r5, #12]
 800c518:	059a      	lsls	r2, r3, #22
 800c51a:	d402      	bmi.n	800c522 <_vfiprintf_r+0x2a>
 800c51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51e:	f7fe fcbb 	bl	800ae98 <__retarget_lock_acquire_recursive>
 800c522:	89ab      	ldrh	r3, [r5, #12]
 800c524:	071b      	lsls	r3, r3, #28
 800c526:	d501      	bpl.n	800c52c <_vfiprintf_r+0x34>
 800c528:	692b      	ldr	r3, [r5, #16]
 800c52a:	b99b      	cbnz	r3, 800c554 <_vfiprintf_r+0x5c>
 800c52c:	4629      	mov	r1, r5
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fe fbde 	bl	800acf0 <__swsetup_r>
 800c534:	b170      	cbz	r0, 800c554 <_vfiprintf_r+0x5c>
 800c536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c538:	07dc      	lsls	r4, r3, #31
 800c53a:	d504      	bpl.n	800c546 <_vfiprintf_r+0x4e>
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295
 800c540:	b01d      	add	sp, #116	; 0x74
 800c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c546:	89ab      	ldrh	r3, [r5, #12]
 800c548:	0598      	lsls	r0, r3, #22
 800c54a:	d4f7      	bmi.n	800c53c <_vfiprintf_r+0x44>
 800c54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c54e:	f7fe fca4 	bl	800ae9a <__retarget_lock_release_recursive>
 800c552:	e7f3      	b.n	800c53c <_vfiprintf_r+0x44>
 800c554:	2300      	movs	r3, #0
 800c556:	9309      	str	r3, [sp, #36]	; 0x24
 800c558:	2320      	movs	r3, #32
 800c55a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c55e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c562:	2330      	movs	r3, #48	; 0x30
 800c564:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c718 <_vfiprintf_r+0x220>
 800c568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c56c:	f04f 0901 	mov.w	r9, #1
 800c570:	4623      	mov	r3, r4
 800c572:	469a      	mov	sl, r3
 800c574:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c578:	b10a      	cbz	r2, 800c57e <_vfiprintf_r+0x86>
 800c57a:	2a25      	cmp	r2, #37	; 0x25
 800c57c:	d1f9      	bne.n	800c572 <_vfiprintf_r+0x7a>
 800c57e:	ebba 0b04 	subs.w	fp, sl, r4
 800c582:	d00b      	beq.n	800c59c <_vfiprintf_r+0xa4>
 800c584:	465b      	mov	r3, fp
 800c586:	4622      	mov	r2, r4
 800c588:	4629      	mov	r1, r5
 800c58a:	4630      	mov	r0, r6
 800c58c:	f7ff ffa1 	bl	800c4d2 <__sfputs_r>
 800c590:	3001      	adds	r0, #1
 800c592:	f000 80a9 	beq.w	800c6e8 <_vfiprintf_r+0x1f0>
 800c596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c598:	445a      	add	r2, fp
 800c59a:	9209      	str	r2, [sp, #36]	; 0x24
 800c59c:	f89a 3000 	ldrb.w	r3, [sl]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f000 80a1 	beq.w	800c6e8 <_vfiprintf_r+0x1f0>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5b0:	f10a 0a01 	add.w	sl, sl, #1
 800c5b4:	9304      	str	r3, [sp, #16]
 800c5b6:	9307      	str	r3, [sp, #28]
 800c5b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5bc:	931a      	str	r3, [sp, #104]	; 0x68
 800c5be:	4654      	mov	r4, sl
 800c5c0:	2205      	movs	r2, #5
 800c5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c6:	4854      	ldr	r0, [pc, #336]	; (800c718 <_vfiprintf_r+0x220>)
 800c5c8:	f7f3 fe12 	bl	80001f0 <memchr>
 800c5cc:	9a04      	ldr	r2, [sp, #16]
 800c5ce:	b9d8      	cbnz	r0, 800c608 <_vfiprintf_r+0x110>
 800c5d0:	06d1      	lsls	r1, r2, #27
 800c5d2:	bf44      	itt	mi
 800c5d4:	2320      	movmi	r3, #32
 800c5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5da:	0713      	lsls	r3, r2, #28
 800c5dc:	bf44      	itt	mi
 800c5de:	232b      	movmi	r3, #43	; 0x2b
 800c5e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ea:	d015      	beq.n	800c618 <_vfiprintf_r+0x120>
 800c5ec:	9a07      	ldr	r2, [sp, #28]
 800c5ee:	4654      	mov	r4, sl
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	f04f 0c0a 	mov.w	ip, #10
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5fc:	3b30      	subs	r3, #48	; 0x30
 800c5fe:	2b09      	cmp	r3, #9
 800c600:	d94d      	bls.n	800c69e <_vfiprintf_r+0x1a6>
 800c602:	b1b0      	cbz	r0, 800c632 <_vfiprintf_r+0x13a>
 800c604:	9207      	str	r2, [sp, #28]
 800c606:	e014      	b.n	800c632 <_vfiprintf_r+0x13a>
 800c608:	eba0 0308 	sub.w	r3, r0, r8
 800c60c:	fa09 f303 	lsl.w	r3, r9, r3
 800c610:	4313      	orrs	r3, r2
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	46a2      	mov	sl, r4
 800c616:	e7d2      	b.n	800c5be <_vfiprintf_r+0xc6>
 800c618:	9b03      	ldr	r3, [sp, #12]
 800c61a:	1d19      	adds	r1, r3, #4
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	9103      	str	r1, [sp, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	bfbb      	ittet	lt
 800c624:	425b      	neglt	r3, r3
 800c626:	f042 0202 	orrlt.w	r2, r2, #2
 800c62a:	9307      	strge	r3, [sp, #28]
 800c62c:	9307      	strlt	r3, [sp, #28]
 800c62e:	bfb8      	it	lt
 800c630:	9204      	strlt	r2, [sp, #16]
 800c632:	7823      	ldrb	r3, [r4, #0]
 800c634:	2b2e      	cmp	r3, #46	; 0x2e
 800c636:	d10c      	bne.n	800c652 <_vfiprintf_r+0x15a>
 800c638:	7863      	ldrb	r3, [r4, #1]
 800c63a:	2b2a      	cmp	r3, #42	; 0x2a
 800c63c:	d134      	bne.n	800c6a8 <_vfiprintf_r+0x1b0>
 800c63e:	9b03      	ldr	r3, [sp, #12]
 800c640:	1d1a      	adds	r2, r3, #4
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	9203      	str	r2, [sp, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	bfb8      	it	lt
 800c64a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c64e:	3402      	adds	r4, #2
 800c650:	9305      	str	r3, [sp, #20]
 800c652:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c728 <_vfiprintf_r+0x230>
 800c656:	7821      	ldrb	r1, [r4, #0]
 800c658:	2203      	movs	r2, #3
 800c65a:	4650      	mov	r0, sl
 800c65c:	f7f3 fdc8 	bl	80001f0 <memchr>
 800c660:	b138      	cbz	r0, 800c672 <_vfiprintf_r+0x17a>
 800c662:	9b04      	ldr	r3, [sp, #16]
 800c664:	eba0 000a 	sub.w	r0, r0, sl
 800c668:	2240      	movs	r2, #64	; 0x40
 800c66a:	4082      	lsls	r2, r0
 800c66c:	4313      	orrs	r3, r2
 800c66e:	3401      	adds	r4, #1
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c676:	4829      	ldr	r0, [pc, #164]	; (800c71c <_vfiprintf_r+0x224>)
 800c678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c67c:	2206      	movs	r2, #6
 800c67e:	f7f3 fdb7 	bl	80001f0 <memchr>
 800c682:	2800      	cmp	r0, #0
 800c684:	d03f      	beq.n	800c706 <_vfiprintf_r+0x20e>
 800c686:	4b26      	ldr	r3, [pc, #152]	; (800c720 <_vfiprintf_r+0x228>)
 800c688:	bb1b      	cbnz	r3, 800c6d2 <_vfiprintf_r+0x1da>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	3307      	adds	r3, #7
 800c68e:	f023 0307 	bic.w	r3, r3, #7
 800c692:	3308      	adds	r3, #8
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c698:	443b      	add	r3, r7
 800c69a:	9309      	str	r3, [sp, #36]	; 0x24
 800c69c:	e768      	b.n	800c570 <_vfiprintf_r+0x78>
 800c69e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	2001      	movs	r0, #1
 800c6a6:	e7a6      	b.n	800c5f6 <_vfiprintf_r+0xfe>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	3401      	adds	r4, #1
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f04f 0c0a 	mov.w	ip, #10
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6ba:	3a30      	subs	r2, #48	; 0x30
 800c6bc:	2a09      	cmp	r2, #9
 800c6be:	d903      	bls.n	800c6c8 <_vfiprintf_r+0x1d0>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d0c6      	beq.n	800c652 <_vfiprintf_r+0x15a>
 800c6c4:	9105      	str	r1, [sp, #20]
 800c6c6:	e7c4      	b.n	800c652 <_vfiprintf_r+0x15a>
 800c6c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e7f0      	b.n	800c6b4 <_vfiprintf_r+0x1bc>
 800c6d2:	ab03      	add	r3, sp, #12
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4b12      	ldr	r3, [pc, #72]	; (800c724 <_vfiprintf_r+0x22c>)
 800c6da:	a904      	add	r1, sp, #16
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f7fd fda3 	bl	800a228 <_printf_float>
 800c6e2:	4607      	mov	r7, r0
 800c6e4:	1c78      	adds	r0, r7, #1
 800c6e6:	d1d6      	bne.n	800c696 <_vfiprintf_r+0x19e>
 800c6e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ea:	07d9      	lsls	r1, r3, #31
 800c6ec:	d405      	bmi.n	800c6fa <_vfiprintf_r+0x202>
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	059a      	lsls	r2, r3, #22
 800c6f2:	d402      	bmi.n	800c6fa <_vfiprintf_r+0x202>
 800c6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6f6:	f7fe fbd0 	bl	800ae9a <__retarget_lock_release_recursive>
 800c6fa:	89ab      	ldrh	r3, [r5, #12]
 800c6fc:	065b      	lsls	r3, r3, #25
 800c6fe:	f53f af1d 	bmi.w	800c53c <_vfiprintf_r+0x44>
 800c702:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c704:	e71c      	b.n	800c540 <_vfiprintf_r+0x48>
 800c706:	ab03      	add	r3, sp, #12
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	462a      	mov	r2, r5
 800c70c:	4b05      	ldr	r3, [pc, #20]	; (800c724 <_vfiprintf_r+0x22c>)
 800c70e:	a904      	add	r1, sp, #16
 800c710:	4630      	mov	r0, r6
 800c712:	f7fe f82d 	bl	800a770 <_printf_i>
 800c716:	e7e4      	b.n	800c6e2 <_vfiprintf_r+0x1ea>
 800c718:	0800e694 	.word	0x0800e694
 800c71c:	0800e69e 	.word	0x0800e69e
 800c720:	0800a229 	.word	0x0800a229
 800c724:	0800c4d3 	.word	0x0800c4d3
 800c728:	0800e69a 	.word	0x0800e69a

0800c72c <__sflush_r>:
 800c72c:	898a      	ldrh	r2, [r1, #12]
 800c72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c732:	4605      	mov	r5, r0
 800c734:	0710      	lsls	r0, r2, #28
 800c736:	460c      	mov	r4, r1
 800c738:	d458      	bmi.n	800c7ec <__sflush_r+0xc0>
 800c73a:	684b      	ldr	r3, [r1, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dc05      	bgt.n	800c74c <__sflush_r+0x20>
 800c740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c742:	2b00      	cmp	r3, #0
 800c744:	dc02      	bgt.n	800c74c <__sflush_r+0x20>
 800c746:	2000      	movs	r0, #0
 800c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c74e:	2e00      	cmp	r6, #0
 800c750:	d0f9      	beq.n	800c746 <__sflush_r+0x1a>
 800c752:	2300      	movs	r3, #0
 800c754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c758:	682f      	ldr	r7, [r5, #0]
 800c75a:	6a21      	ldr	r1, [r4, #32]
 800c75c:	602b      	str	r3, [r5, #0]
 800c75e:	d032      	beq.n	800c7c6 <__sflush_r+0x9a>
 800c760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	075a      	lsls	r2, r3, #29
 800c766:	d505      	bpl.n	800c774 <__sflush_r+0x48>
 800c768:	6863      	ldr	r3, [r4, #4]
 800c76a:	1ac0      	subs	r0, r0, r3
 800c76c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c76e:	b10b      	cbz	r3, 800c774 <__sflush_r+0x48>
 800c770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c772:	1ac0      	subs	r0, r0, r3
 800c774:	2300      	movs	r3, #0
 800c776:	4602      	mov	r2, r0
 800c778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c77a:	6a21      	ldr	r1, [r4, #32]
 800c77c:	4628      	mov	r0, r5
 800c77e:	47b0      	blx	r6
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	89a3      	ldrh	r3, [r4, #12]
 800c784:	d106      	bne.n	800c794 <__sflush_r+0x68>
 800c786:	6829      	ldr	r1, [r5, #0]
 800c788:	291d      	cmp	r1, #29
 800c78a:	d82b      	bhi.n	800c7e4 <__sflush_r+0xb8>
 800c78c:	4a29      	ldr	r2, [pc, #164]	; (800c834 <__sflush_r+0x108>)
 800c78e:	410a      	asrs	r2, r1
 800c790:	07d6      	lsls	r6, r2, #31
 800c792:	d427      	bmi.n	800c7e4 <__sflush_r+0xb8>
 800c794:	2200      	movs	r2, #0
 800c796:	6062      	str	r2, [r4, #4]
 800c798:	04d9      	lsls	r1, r3, #19
 800c79a:	6922      	ldr	r2, [r4, #16]
 800c79c:	6022      	str	r2, [r4, #0]
 800c79e:	d504      	bpl.n	800c7aa <__sflush_r+0x7e>
 800c7a0:	1c42      	adds	r2, r0, #1
 800c7a2:	d101      	bne.n	800c7a8 <__sflush_r+0x7c>
 800c7a4:	682b      	ldr	r3, [r5, #0]
 800c7a6:	b903      	cbnz	r3, 800c7aa <__sflush_r+0x7e>
 800c7a8:	6560      	str	r0, [r4, #84]	; 0x54
 800c7aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7ac:	602f      	str	r7, [r5, #0]
 800c7ae:	2900      	cmp	r1, #0
 800c7b0:	d0c9      	beq.n	800c746 <__sflush_r+0x1a>
 800c7b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	d002      	beq.n	800c7c0 <__sflush_r+0x94>
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f7ff f9f6 	bl	800bbac <_free_r>
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	6360      	str	r0, [r4, #52]	; 0x34
 800c7c4:	e7c0      	b.n	800c748 <__sflush_r+0x1c>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	47b0      	blx	r6
 800c7cc:	1c41      	adds	r1, r0, #1
 800c7ce:	d1c8      	bne.n	800c762 <__sflush_r+0x36>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0c5      	beq.n	800c762 <__sflush_r+0x36>
 800c7d6:	2b1d      	cmp	r3, #29
 800c7d8:	d001      	beq.n	800c7de <__sflush_r+0xb2>
 800c7da:	2b16      	cmp	r3, #22
 800c7dc:	d101      	bne.n	800c7e2 <__sflush_r+0xb6>
 800c7de:	602f      	str	r7, [r5, #0]
 800c7e0:	e7b1      	b.n	800c746 <__sflush_r+0x1a>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e8:	81a3      	strh	r3, [r4, #12]
 800c7ea:	e7ad      	b.n	800c748 <__sflush_r+0x1c>
 800c7ec:	690f      	ldr	r7, [r1, #16]
 800c7ee:	2f00      	cmp	r7, #0
 800c7f0:	d0a9      	beq.n	800c746 <__sflush_r+0x1a>
 800c7f2:	0793      	lsls	r3, r2, #30
 800c7f4:	680e      	ldr	r6, [r1, #0]
 800c7f6:	bf08      	it	eq
 800c7f8:	694b      	ldreq	r3, [r1, #20]
 800c7fa:	600f      	str	r7, [r1, #0]
 800c7fc:	bf18      	it	ne
 800c7fe:	2300      	movne	r3, #0
 800c800:	eba6 0807 	sub.w	r8, r6, r7
 800c804:	608b      	str	r3, [r1, #8]
 800c806:	f1b8 0f00 	cmp.w	r8, #0
 800c80a:	dd9c      	ble.n	800c746 <__sflush_r+0x1a>
 800c80c:	6a21      	ldr	r1, [r4, #32]
 800c80e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c810:	4643      	mov	r3, r8
 800c812:	463a      	mov	r2, r7
 800c814:	4628      	mov	r0, r5
 800c816:	47b0      	blx	r6
 800c818:	2800      	cmp	r0, #0
 800c81a:	dc06      	bgt.n	800c82a <__sflush_r+0xfe>
 800c81c:	89a3      	ldrh	r3, [r4, #12]
 800c81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c822:	81a3      	strh	r3, [r4, #12]
 800c824:	f04f 30ff 	mov.w	r0, #4294967295
 800c828:	e78e      	b.n	800c748 <__sflush_r+0x1c>
 800c82a:	4407      	add	r7, r0
 800c82c:	eba8 0800 	sub.w	r8, r8, r0
 800c830:	e7e9      	b.n	800c806 <__sflush_r+0xda>
 800c832:	bf00      	nop
 800c834:	dfbffffe 	.word	0xdfbffffe

0800c838 <_fflush_r>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	690b      	ldr	r3, [r1, #16]
 800c83c:	4605      	mov	r5, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	b913      	cbnz	r3, 800c848 <_fflush_r+0x10>
 800c842:	2500      	movs	r5, #0
 800c844:	4628      	mov	r0, r5
 800c846:	bd38      	pop	{r3, r4, r5, pc}
 800c848:	b118      	cbz	r0, 800c852 <_fflush_r+0x1a>
 800c84a:	6a03      	ldr	r3, [r0, #32]
 800c84c:	b90b      	cbnz	r3, 800c852 <_fflush_r+0x1a>
 800c84e:	f7fe f92b 	bl	800aaa8 <__sinit>
 800c852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0f3      	beq.n	800c842 <_fflush_r+0xa>
 800c85a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c85c:	07d0      	lsls	r0, r2, #31
 800c85e:	d404      	bmi.n	800c86a <_fflush_r+0x32>
 800c860:	0599      	lsls	r1, r3, #22
 800c862:	d402      	bmi.n	800c86a <_fflush_r+0x32>
 800c864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c866:	f7fe fb17 	bl	800ae98 <__retarget_lock_acquire_recursive>
 800c86a:	4628      	mov	r0, r5
 800c86c:	4621      	mov	r1, r4
 800c86e:	f7ff ff5d 	bl	800c72c <__sflush_r>
 800c872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c874:	07da      	lsls	r2, r3, #31
 800c876:	4605      	mov	r5, r0
 800c878:	d4e4      	bmi.n	800c844 <_fflush_r+0xc>
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	059b      	lsls	r3, r3, #22
 800c87e:	d4e1      	bmi.n	800c844 <_fflush_r+0xc>
 800c880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c882:	f7fe fb0a 	bl	800ae9a <__retarget_lock_release_recursive>
 800c886:	e7dd      	b.n	800c844 <_fflush_r+0xc>

0800c888 <__swhatbuf_r>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	460c      	mov	r4, r1
 800c88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c890:	2900      	cmp	r1, #0
 800c892:	b096      	sub	sp, #88	; 0x58
 800c894:	4615      	mov	r5, r2
 800c896:	461e      	mov	r6, r3
 800c898:	da0d      	bge.n	800c8b6 <__swhatbuf_r+0x2e>
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8a0:	f04f 0100 	mov.w	r1, #0
 800c8a4:	bf0c      	ite	eq
 800c8a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c8aa:	2340      	movne	r3, #64	; 0x40
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	6031      	str	r1, [r6, #0]
 800c8b0:	602b      	str	r3, [r5, #0]
 800c8b2:	b016      	add	sp, #88	; 0x58
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
 800c8b6:	466a      	mov	r2, sp
 800c8b8:	f000 f848 	bl	800c94c <_fstat_r>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	dbec      	blt.n	800c89a <__swhatbuf_r+0x12>
 800c8c0:	9901      	ldr	r1, [sp, #4]
 800c8c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c8c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c8ca:	4259      	negs	r1, r3
 800c8cc:	4159      	adcs	r1, r3
 800c8ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8d2:	e7eb      	b.n	800c8ac <__swhatbuf_r+0x24>

0800c8d4 <__smakebuf_r>:
 800c8d4:	898b      	ldrh	r3, [r1, #12]
 800c8d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8d8:	079d      	lsls	r5, r3, #30
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460c      	mov	r4, r1
 800c8de:	d507      	bpl.n	800c8f0 <__smakebuf_r+0x1c>
 800c8e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	6123      	str	r3, [r4, #16]
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	6163      	str	r3, [r4, #20]
 800c8ec:	b002      	add	sp, #8
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}
 800c8f0:	ab01      	add	r3, sp, #4
 800c8f2:	466a      	mov	r2, sp
 800c8f4:	f7ff ffc8 	bl	800c888 <__swhatbuf_r>
 800c8f8:	9900      	ldr	r1, [sp, #0]
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f7ff f9c9 	bl	800bc94 <_malloc_r>
 800c902:	b948      	cbnz	r0, 800c918 <__smakebuf_r+0x44>
 800c904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c908:	059a      	lsls	r2, r3, #22
 800c90a:	d4ef      	bmi.n	800c8ec <__smakebuf_r+0x18>
 800c90c:	f023 0303 	bic.w	r3, r3, #3
 800c910:	f043 0302 	orr.w	r3, r3, #2
 800c914:	81a3      	strh	r3, [r4, #12]
 800c916:	e7e3      	b.n	800c8e0 <__smakebuf_r+0xc>
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	6020      	str	r0, [r4, #0]
 800c91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	9b00      	ldr	r3, [sp, #0]
 800c924:	6163      	str	r3, [r4, #20]
 800c926:	9b01      	ldr	r3, [sp, #4]
 800c928:	6120      	str	r0, [r4, #16]
 800c92a:	b15b      	cbz	r3, 800c944 <__smakebuf_r+0x70>
 800c92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c930:	4630      	mov	r0, r6
 800c932:	f000 f81d 	bl	800c970 <_isatty_r>
 800c936:	b128      	cbz	r0, 800c944 <__smakebuf_r+0x70>
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f023 0303 	bic.w	r3, r3, #3
 800c93e:	f043 0301 	orr.w	r3, r3, #1
 800c942:	81a3      	strh	r3, [r4, #12]
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	431d      	orrs	r5, r3
 800c948:	81a5      	strh	r5, [r4, #12]
 800c94a:	e7cf      	b.n	800c8ec <__smakebuf_r+0x18>

0800c94c <_fstat_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	4d07      	ldr	r5, [pc, #28]	; (800c96c <_fstat_r+0x20>)
 800c950:	2300      	movs	r3, #0
 800c952:	4604      	mov	r4, r0
 800c954:	4608      	mov	r0, r1
 800c956:	4611      	mov	r1, r2
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	f7f8 fb6e 	bl	800503a <_fstat>
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d102      	bne.n	800c968 <_fstat_r+0x1c>
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	b103      	cbz	r3, 800c968 <_fstat_r+0x1c>
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	bd38      	pop	{r3, r4, r5, pc}
 800c96a:	bf00      	nop
 800c96c:	20001dbc 	.word	0x20001dbc

0800c970 <_isatty_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4d06      	ldr	r5, [pc, #24]	; (800c98c <_isatty_r+0x1c>)
 800c974:	2300      	movs	r3, #0
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	602b      	str	r3, [r5, #0]
 800c97c:	f7f8 fb6d 	bl	800505a <_isatty>
 800c980:	1c43      	adds	r3, r0, #1
 800c982:	d102      	bne.n	800c98a <_isatty_r+0x1a>
 800c984:	682b      	ldr	r3, [r5, #0]
 800c986:	b103      	cbz	r3, 800c98a <_isatty_r+0x1a>
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	20001dbc 	.word	0x20001dbc

0800c990 <_sbrk_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4d06      	ldr	r5, [pc, #24]	; (800c9ac <_sbrk_r+0x1c>)
 800c994:	2300      	movs	r3, #0
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	602b      	str	r3, [r5, #0]
 800c99c:	f7f8 fb76 	bl	800508c <_sbrk>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d102      	bne.n	800c9aa <_sbrk_r+0x1a>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	b103      	cbz	r3, 800c9aa <_sbrk_r+0x1a>
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
 800c9ac:	20001dbc 	.word	0x20001dbc

0800c9b0 <__assert_func>:
 800c9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9b2:	4614      	mov	r4, r2
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4b09      	ldr	r3, [pc, #36]	; (800c9dc <__assert_func+0x2c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	68d8      	ldr	r0, [r3, #12]
 800c9be:	b14c      	cbz	r4, 800c9d4 <__assert_func+0x24>
 800c9c0:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <__assert_func+0x30>)
 800c9c2:	9100      	str	r1, [sp, #0]
 800c9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9c8:	4906      	ldr	r1, [pc, #24]	; (800c9e4 <__assert_func+0x34>)
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	f000 f844 	bl	800ca58 <fiprintf>
 800c9d0:	f000 f854 	bl	800ca7c <abort>
 800c9d4:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <__assert_func+0x38>)
 800c9d6:	461c      	mov	r4, r3
 800c9d8:	e7f3      	b.n	800c9c2 <__assert_func+0x12>
 800c9da:	bf00      	nop
 800c9dc:	2000018c 	.word	0x2000018c
 800c9e0:	0800e6af 	.word	0x0800e6af
 800c9e4:	0800e6bc 	.word	0x0800e6bc
 800c9e8:	0800e6ea 	.word	0x0800e6ea

0800c9ec <_calloc_r>:
 800c9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800c9f2:	b94c      	cbnz	r4, 800ca08 <_calloc_r+0x1c>
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	9201      	str	r2, [sp, #4]
 800c9f8:	f7ff f94c 	bl	800bc94 <_malloc_r>
 800c9fc:	9a01      	ldr	r2, [sp, #4]
 800c9fe:	4605      	mov	r5, r0
 800ca00:	b930      	cbnz	r0, 800ca10 <_calloc_r+0x24>
 800ca02:	4628      	mov	r0, r5
 800ca04:	b003      	add	sp, #12
 800ca06:	bd30      	pop	{r4, r5, pc}
 800ca08:	220c      	movs	r2, #12
 800ca0a:	6002      	str	r2, [r0, #0]
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	e7f8      	b.n	800ca02 <_calloc_r+0x16>
 800ca10:	4621      	mov	r1, r4
 800ca12:	f7fe f9c5 	bl	800ada0 <memset>
 800ca16:	e7f4      	b.n	800ca02 <_calloc_r+0x16>

0800ca18 <__ascii_mbtowc>:
 800ca18:	b082      	sub	sp, #8
 800ca1a:	b901      	cbnz	r1, 800ca1e <__ascii_mbtowc+0x6>
 800ca1c:	a901      	add	r1, sp, #4
 800ca1e:	b142      	cbz	r2, 800ca32 <__ascii_mbtowc+0x1a>
 800ca20:	b14b      	cbz	r3, 800ca36 <__ascii_mbtowc+0x1e>
 800ca22:	7813      	ldrb	r3, [r2, #0]
 800ca24:	600b      	str	r3, [r1, #0]
 800ca26:	7812      	ldrb	r2, [r2, #0]
 800ca28:	1e10      	subs	r0, r2, #0
 800ca2a:	bf18      	it	ne
 800ca2c:	2001      	movne	r0, #1
 800ca2e:	b002      	add	sp, #8
 800ca30:	4770      	bx	lr
 800ca32:	4610      	mov	r0, r2
 800ca34:	e7fb      	b.n	800ca2e <__ascii_mbtowc+0x16>
 800ca36:	f06f 0001 	mvn.w	r0, #1
 800ca3a:	e7f8      	b.n	800ca2e <__ascii_mbtowc+0x16>

0800ca3c <__ascii_wctomb>:
 800ca3c:	b149      	cbz	r1, 800ca52 <__ascii_wctomb+0x16>
 800ca3e:	2aff      	cmp	r2, #255	; 0xff
 800ca40:	bf85      	ittet	hi
 800ca42:	238a      	movhi	r3, #138	; 0x8a
 800ca44:	6003      	strhi	r3, [r0, #0]
 800ca46:	700a      	strbls	r2, [r1, #0]
 800ca48:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca4c:	bf98      	it	ls
 800ca4e:	2001      	movls	r0, #1
 800ca50:	4770      	bx	lr
 800ca52:	4608      	mov	r0, r1
 800ca54:	4770      	bx	lr
	...

0800ca58 <fiprintf>:
 800ca58:	b40e      	push	{r1, r2, r3}
 800ca5a:	b503      	push	{r0, r1, lr}
 800ca5c:	4601      	mov	r1, r0
 800ca5e:	ab03      	add	r3, sp, #12
 800ca60:	4805      	ldr	r0, [pc, #20]	; (800ca78 <fiprintf+0x20>)
 800ca62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca66:	6800      	ldr	r0, [r0, #0]
 800ca68:	9301      	str	r3, [sp, #4]
 800ca6a:	f7ff fd45 	bl	800c4f8 <_vfiprintf_r>
 800ca6e:	b002      	add	sp, #8
 800ca70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca74:	b003      	add	sp, #12
 800ca76:	4770      	bx	lr
 800ca78:	2000018c 	.word	0x2000018c

0800ca7c <abort>:
 800ca7c:	b508      	push	{r3, lr}
 800ca7e:	2006      	movs	r0, #6
 800ca80:	f000 f82c 	bl	800cadc <raise>
 800ca84:	2001      	movs	r0, #1
 800ca86:	f7f8 fa89 	bl	8004f9c <_exit>

0800ca8a <_raise_r>:
 800ca8a:	291f      	cmp	r1, #31
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4604      	mov	r4, r0
 800ca90:	460d      	mov	r5, r1
 800ca92:	d904      	bls.n	800ca9e <_raise_r+0x14>
 800ca94:	2316      	movs	r3, #22
 800ca96:	6003      	str	r3, [r0, #0]
 800ca98:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9c:	bd38      	pop	{r3, r4, r5, pc}
 800ca9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800caa0:	b112      	cbz	r2, 800caa8 <_raise_r+0x1e>
 800caa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800caa6:	b94b      	cbnz	r3, 800cabc <_raise_r+0x32>
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 f831 	bl	800cb10 <_getpid_r>
 800caae:	462a      	mov	r2, r5
 800cab0:	4601      	mov	r1, r0
 800cab2:	4620      	mov	r0, r4
 800cab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab8:	f000 b818 	b.w	800caec <_kill_r>
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d00a      	beq.n	800cad6 <_raise_r+0x4c>
 800cac0:	1c59      	adds	r1, r3, #1
 800cac2:	d103      	bne.n	800cacc <_raise_r+0x42>
 800cac4:	2316      	movs	r3, #22
 800cac6:	6003      	str	r3, [r0, #0]
 800cac8:	2001      	movs	r0, #1
 800caca:	e7e7      	b.n	800ca9c <_raise_r+0x12>
 800cacc:	2400      	movs	r4, #0
 800cace:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cad2:	4628      	mov	r0, r5
 800cad4:	4798      	blx	r3
 800cad6:	2000      	movs	r0, #0
 800cad8:	e7e0      	b.n	800ca9c <_raise_r+0x12>
	...

0800cadc <raise>:
 800cadc:	4b02      	ldr	r3, [pc, #8]	; (800cae8 <raise+0xc>)
 800cade:	4601      	mov	r1, r0
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	f7ff bfd2 	b.w	800ca8a <_raise_r>
 800cae6:	bf00      	nop
 800cae8:	2000018c 	.word	0x2000018c

0800caec <_kill_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4d07      	ldr	r5, [pc, #28]	; (800cb0c <_kill_r+0x20>)
 800caf0:	2300      	movs	r3, #0
 800caf2:	4604      	mov	r4, r0
 800caf4:	4608      	mov	r0, r1
 800caf6:	4611      	mov	r1, r2
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	f7f8 fa3f 	bl	8004f7c <_kill>
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	d102      	bne.n	800cb08 <_kill_r+0x1c>
 800cb02:	682b      	ldr	r3, [r5, #0]
 800cb04:	b103      	cbz	r3, 800cb08 <_kill_r+0x1c>
 800cb06:	6023      	str	r3, [r4, #0]
 800cb08:	bd38      	pop	{r3, r4, r5, pc}
 800cb0a:	bf00      	nop
 800cb0c:	20001dbc 	.word	0x20001dbc

0800cb10 <_getpid_r>:
 800cb10:	f7f8 ba2c 	b.w	8004f6c <_getpid>

0800cb14 <pow>:
 800cb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb16:	ed2d 8b02 	vpush	{d8}
 800cb1a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb1e:	eef0 8a60 	vmov.f32	s17, s1
 800cb22:	ec55 4b11 	vmov	r4, r5, d1
 800cb26:	f000 f87b 	bl	800cc20 <__ieee754_pow>
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	4620      	mov	r0, r4
 800cb30:	4629      	mov	r1, r5
 800cb32:	ec57 6b10 	vmov	r6, r7, d0
 800cb36:	f7f4 f809 	bl	8000b4c <__aeabi_dcmpun>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d13b      	bne.n	800cbb6 <pow+0xa2>
 800cb3e:	ec51 0b18 	vmov	r0, r1, d8
 800cb42:	2200      	movs	r2, #0
 800cb44:	2300      	movs	r3, #0
 800cb46:	f7f3 ffcf 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb4a:	b1b8      	cbz	r0, 800cb7c <pow+0x68>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	2300      	movs	r3, #0
 800cb50:	4620      	mov	r0, r4
 800cb52:	4629      	mov	r1, r5
 800cb54:	f7f3 ffc8 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d146      	bne.n	800cbea <pow+0xd6>
 800cb5c:	ec45 4b10 	vmov	d0, r4, r5
 800cb60:	f000 f851 	bl	800cc06 <finite>
 800cb64:	b338      	cbz	r0, 800cbb6 <pow+0xa2>
 800cb66:	2200      	movs	r2, #0
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	f7f3 ffc5 	bl	8000afc <__aeabi_dcmplt>
 800cb72:	b300      	cbz	r0, 800cbb6 <pow+0xa2>
 800cb74:	f7fe f966 	bl	800ae44 <__errno>
 800cb78:	2322      	movs	r3, #34	; 0x22
 800cb7a:	e01b      	b.n	800cbb4 <pow+0xa0>
 800cb7c:	ec47 6b10 	vmov	d0, r6, r7
 800cb80:	f000 f841 	bl	800cc06 <finite>
 800cb84:	b9e0      	cbnz	r0, 800cbc0 <pow+0xac>
 800cb86:	eeb0 0a48 	vmov.f32	s0, s16
 800cb8a:	eef0 0a68 	vmov.f32	s1, s17
 800cb8e:	f000 f83a 	bl	800cc06 <finite>
 800cb92:	b1a8      	cbz	r0, 800cbc0 <pow+0xac>
 800cb94:	ec45 4b10 	vmov	d0, r4, r5
 800cb98:	f000 f835 	bl	800cc06 <finite>
 800cb9c:	b180      	cbz	r0, 800cbc0 <pow+0xac>
 800cb9e:	4632      	mov	r2, r6
 800cba0:	463b      	mov	r3, r7
 800cba2:	4630      	mov	r0, r6
 800cba4:	4639      	mov	r1, r7
 800cba6:	f7f3 ffd1 	bl	8000b4c <__aeabi_dcmpun>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d0e2      	beq.n	800cb74 <pow+0x60>
 800cbae:	f7fe f949 	bl	800ae44 <__errno>
 800cbb2:	2321      	movs	r3, #33	; 0x21
 800cbb4:	6003      	str	r3, [r0, #0]
 800cbb6:	ecbd 8b02 	vpop	{d8}
 800cbba:	ec47 6b10 	vmov	d0, r6, r7
 800cbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	4639      	mov	r1, r7
 800cbc8:	f7f3 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d0f2      	beq.n	800cbb6 <pow+0xa2>
 800cbd0:	eeb0 0a48 	vmov.f32	s0, s16
 800cbd4:	eef0 0a68 	vmov.f32	s1, s17
 800cbd8:	f000 f815 	bl	800cc06 <finite>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d0ea      	beq.n	800cbb6 <pow+0xa2>
 800cbe0:	ec45 4b10 	vmov	d0, r4, r5
 800cbe4:	f000 f80f 	bl	800cc06 <finite>
 800cbe8:	e7c3      	b.n	800cb72 <pow+0x5e>
 800cbea:	4f01      	ldr	r7, [pc, #4]	; (800cbf0 <pow+0xdc>)
 800cbec:	2600      	movs	r6, #0
 800cbee:	e7e2      	b.n	800cbb6 <pow+0xa2>
 800cbf0:	3ff00000 	.word	0x3ff00000

0800cbf4 <fabs>:
 800cbf4:	ec51 0b10 	vmov	r0, r1, d0
 800cbf8:	ee10 2a10 	vmov	r2, s0
 800cbfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc00:	ec43 2b10 	vmov	d0, r2, r3
 800cc04:	4770      	bx	lr

0800cc06 <finite>:
 800cc06:	b082      	sub	sp, #8
 800cc08:	ed8d 0b00 	vstr	d0, [sp]
 800cc0c:	9801      	ldr	r0, [sp, #4]
 800cc0e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cc12:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cc16:	0fc0      	lsrs	r0, r0, #31
 800cc18:	b002      	add	sp, #8
 800cc1a:	4770      	bx	lr
 800cc1c:	0000      	movs	r0, r0
	...

0800cc20 <__ieee754_pow>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	ed2d 8b06 	vpush	{d8-d10}
 800cc28:	b089      	sub	sp, #36	; 0x24
 800cc2a:	ed8d 1b00 	vstr	d1, [sp]
 800cc2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cc32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cc36:	ea58 0102 	orrs.w	r1, r8, r2
 800cc3a:	ec57 6b10 	vmov	r6, r7, d0
 800cc3e:	d115      	bne.n	800cc6c <__ieee754_pow+0x4c>
 800cc40:	19b3      	adds	r3, r6, r6
 800cc42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800cc46:	4152      	adcs	r2, r2
 800cc48:	4299      	cmp	r1, r3
 800cc4a:	4b89      	ldr	r3, [pc, #548]	; (800ce70 <__ieee754_pow+0x250>)
 800cc4c:	4193      	sbcs	r3, r2
 800cc4e:	f080 84d1 	bcs.w	800d5f4 <__ieee754_pow+0x9d4>
 800cc52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc56:	4630      	mov	r0, r6
 800cc58:	4639      	mov	r1, r7
 800cc5a:	f7f3 fb27 	bl	80002ac <__adddf3>
 800cc5e:	ec41 0b10 	vmov	d0, r0, r1
 800cc62:	b009      	add	sp, #36	; 0x24
 800cc64:	ecbd 8b06 	vpop	{d8-d10}
 800cc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6c:	4b81      	ldr	r3, [pc, #516]	; (800ce74 <__ieee754_pow+0x254>)
 800cc6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cc72:	429c      	cmp	r4, r3
 800cc74:	ee10 aa10 	vmov	sl, s0
 800cc78:	463d      	mov	r5, r7
 800cc7a:	dc06      	bgt.n	800cc8a <__ieee754_pow+0x6a>
 800cc7c:	d101      	bne.n	800cc82 <__ieee754_pow+0x62>
 800cc7e:	2e00      	cmp	r6, #0
 800cc80:	d1e7      	bne.n	800cc52 <__ieee754_pow+0x32>
 800cc82:	4598      	cmp	r8, r3
 800cc84:	dc01      	bgt.n	800cc8a <__ieee754_pow+0x6a>
 800cc86:	d10f      	bne.n	800cca8 <__ieee754_pow+0x88>
 800cc88:	b172      	cbz	r2, 800cca8 <__ieee754_pow+0x88>
 800cc8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cc8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cc92:	ea55 050a 	orrs.w	r5, r5, sl
 800cc96:	d1dc      	bne.n	800cc52 <__ieee754_pow+0x32>
 800cc98:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cc9c:	18db      	adds	r3, r3, r3
 800cc9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cca2:	4152      	adcs	r2, r2
 800cca4:	429d      	cmp	r5, r3
 800cca6:	e7d0      	b.n	800cc4a <__ieee754_pow+0x2a>
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	da3b      	bge.n	800cd24 <__ieee754_pow+0x104>
 800ccac:	4b72      	ldr	r3, [pc, #456]	; (800ce78 <__ieee754_pow+0x258>)
 800ccae:	4598      	cmp	r8, r3
 800ccb0:	dc51      	bgt.n	800cd56 <__ieee754_pow+0x136>
 800ccb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ccb6:	4598      	cmp	r8, r3
 800ccb8:	f340 84ab 	ble.w	800d612 <__ieee754_pow+0x9f2>
 800ccbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ccc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ccc4:	2b14      	cmp	r3, #20
 800ccc6:	dd0f      	ble.n	800cce8 <__ieee754_pow+0xc8>
 800ccc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cccc:	fa22 f103 	lsr.w	r1, r2, r3
 800ccd0:	fa01 f303 	lsl.w	r3, r1, r3
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	f040 849c 	bne.w	800d612 <__ieee754_pow+0x9f2>
 800ccda:	f001 0101 	and.w	r1, r1, #1
 800ccde:	f1c1 0302 	rsb	r3, r1, #2
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	b182      	cbz	r2, 800cd08 <__ieee754_pow+0xe8>
 800cce6:	e05f      	b.n	800cda8 <__ieee754_pow+0x188>
 800cce8:	2a00      	cmp	r2, #0
 800ccea:	d15b      	bne.n	800cda4 <__ieee754_pow+0x184>
 800ccec:	f1c3 0314 	rsb	r3, r3, #20
 800ccf0:	fa48 f103 	asr.w	r1, r8, r3
 800ccf4:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf8:	4543      	cmp	r3, r8
 800ccfa:	f040 8487 	bne.w	800d60c <__ieee754_pow+0x9ec>
 800ccfe:	f001 0101 	and.w	r1, r1, #1
 800cd02:	f1c1 0302 	rsb	r3, r1, #2
 800cd06:	9304      	str	r3, [sp, #16]
 800cd08:	4b5c      	ldr	r3, [pc, #368]	; (800ce7c <__ieee754_pow+0x25c>)
 800cd0a:	4598      	cmp	r8, r3
 800cd0c:	d132      	bne.n	800cd74 <__ieee754_pow+0x154>
 800cd0e:	f1b9 0f00 	cmp.w	r9, #0
 800cd12:	f280 8477 	bge.w	800d604 <__ieee754_pow+0x9e4>
 800cd16:	4959      	ldr	r1, [pc, #356]	; (800ce7c <__ieee754_pow+0x25c>)
 800cd18:	4632      	mov	r2, r6
 800cd1a:	463b      	mov	r3, r7
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	f7f3 fda5 	bl	800086c <__aeabi_ddiv>
 800cd22:	e79c      	b.n	800cc5e <__ieee754_pow+0x3e>
 800cd24:	2300      	movs	r3, #0
 800cd26:	9304      	str	r3, [sp, #16]
 800cd28:	2a00      	cmp	r2, #0
 800cd2a:	d13d      	bne.n	800cda8 <__ieee754_pow+0x188>
 800cd2c:	4b51      	ldr	r3, [pc, #324]	; (800ce74 <__ieee754_pow+0x254>)
 800cd2e:	4598      	cmp	r8, r3
 800cd30:	d1ea      	bne.n	800cd08 <__ieee754_pow+0xe8>
 800cd32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cd36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cd3a:	ea53 030a 	orrs.w	r3, r3, sl
 800cd3e:	f000 8459 	beq.w	800d5f4 <__ieee754_pow+0x9d4>
 800cd42:	4b4f      	ldr	r3, [pc, #316]	; (800ce80 <__ieee754_pow+0x260>)
 800cd44:	429c      	cmp	r4, r3
 800cd46:	dd08      	ble.n	800cd5a <__ieee754_pow+0x13a>
 800cd48:	f1b9 0f00 	cmp.w	r9, #0
 800cd4c:	f2c0 8456 	blt.w	800d5fc <__ieee754_pow+0x9dc>
 800cd50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd54:	e783      	b.n	800cc5e <__ieee754_pow+0x3e>
 800cd56:	2302      	movs	r3, #2
 800cd58:	e7e5      	b.n	800cd26 <__ieee754_pow+0x106>
 800cd5a:	f1b9 0f00 	cmp.w	r9, #0
 800cd5e:	f04f 0000 	mov.w	r0, #0
 800cd62:	f04f 0100 	mov.w	r1, #0
 800cd66:	f6bf af7a 	bge.w	800cc5e <__ieee754_pow+0x3e>
 800cd6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cd6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd72:	e774      	b.n	800cc5e <__ieee754_pow+0x3e>
 800cd74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cd78:	d106      	bne.n	800cd88 <__ieee754_pow+0x168>
 800cd7a:	4632      	mov	r2, r6
 800cd7c:	463b      	mov	r3, r7
 800cd7e:	4630      	mov	r0, r6
 800cd80:	4639      	mov	r1, r7
 800cd82:	f7f3 fc49 	bl	8000618 <__aeabi_dmul>
 800cd86:	e76a      	b.n	800cc5e <__ieee754_pow+0x3e>
 800cd88:	4b3e      	ldr	r3, [pc, #248]	; (800ce84 <__ieee754_pow+0x264>)
 800cd8a:	4599      	cmp	r9, r3
 800cd8c:	d10c      	bne.n	800cda8 <__ieee754_pow+0x188>
 800cd8e:	2d00      	cmp	r5, #0
 800cd90:	db0a      	blt.n	800cda8 <__ieee754_pow+0x188>
 800cd92:	ec47 6b10 	vmov	d0, r6, r7
 800cd96:	b009      	add	sp, #36	; 0x24
 800cd98:	ecbd 8b06 	vpop	{d8-d10}
 800cd9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	f000 bd18 	b.w	800d7d4 <__ieee754_sqrt>
 800cda4:	2300      	movs	r3, #0
 800cda6:	9304      	str	r3, [sp, #16]
 800cda8:	ec47 6b10 	vmov	d0, r6, r7
 800cdac:	f7ff ff22 	bl	800cbf4 <fabs>
 800cdb0:	ec51 0b10 	vmov	r0, r1, d0
 800cdb4:	f1ba 0f00 	cmp.w	sl, #0
 800cdb8:	d129      	bne.n	800ce0e <__ieee754_pow+0x1ee>
 800cdba:	b124      	cbz	r4, 800cdc6 <__ieee754_pow+0x1a6>
 800cdbc:	4b2f      	ldr	r3, [pc, #188]	; (800ce7c <__ieee754_pow+0x25c>)
 800cdbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d123      	bne.n	800ce0e <__ieee754_pow+0x1ee>
 800cdc6:	f1b9 0f00 	cmp.w	r9, #0
 800cdca:	da05      	bge.n	800cdd8 <__ieee754_pow+0x1b8>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	492a      	ldr	r1, [pc, #168]	; (800ce7c <__ieee754_pow+0x25c>)
 800cdd4:	f7f3 fd4a 	bl	800086c <__aeabi_ddiv>
 800cdd8:	2d00      	cmp	r5, #0
 800cdda:	f6bf af40 	bge.w	800cc5e <__ieee754_pow+0x3e>
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cde4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cde8:	431c      	orrs	r4, r3
 800cdea:	d108      	bne.n	800cdfe <__ieee754_pow+0x1de>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f7f3 fa58 	bl	80002a8 <__aeabi_dsub>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	e78f      	b.n	800cd1e <__ieee754_pow+0xfe>
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	f47f af2c 	bne.w	800cc5e <__ieee754_pow+0x3e>
 800ce06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	e727      	b.n	800cc5e <__ieee754_pow+0x3e>
 800ce0e:	0feb      	lsrs	r3, r5, #31
 800ce10:	3b01      	subs	r3, #1
 800ce12:	9306      	str	r3, [sp, #24]
 800ce14:	9a06      	ldr	r2, [sp, #24]
 800ce16:	9b04      	ldr	r3, [sp, #16]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	d102      	bne.n	800ce22 <__ieee754_pow+0x202>
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	463b      	mov	r3, r7
 800ce20:	e7e6      	b.n	800cdf0 <__ieee754_pow+0x1d0>
 800ce22:	4b19      	ldr	r3, [pc, #100]	; (800ce88 <__ieee754_pow+0x268>)
 800ce24:	4598      	cmp	r8, r3
 800ce26:	f340 80fb 	ble.w	800d020 <__ieee754_pow+0x400>
 800ce2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ce2e:	4598      	cmp	r8, r3
 800ce30:	4b13      	ldr	r3, [pc, #76]	; (800ce80 <__ieee754_pow+0x260>)
 800ce32:	dd0c      	ble.n	800ce4e <__ieee754_pow+0x22e>
 800ce34:	429c      	cmp	r4, r3
 800ce36:	dc0f      	bgt.n	800ce58 <__ieee754_pow+0x238>
 800ce38:	f1b9 0f00 	cmp.w	r9, #0
 800ce3c:	da0f      	bge.n	800ce5e <__ieee754_pow+0x23e>
 800ce3e:	2000      	movs	r0, #0
 800ce40:	b009      	add	sp, #36	; 0x24
 800ce42:	ecbd 8b06 	vpop	{d8-d10}
 800ce46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4a:	f000 bcba 	b.w	800d7c2 <__math_oflow>
 800ce4e:	429c      	cmp	r4, r3
 800ce50:	dbf2      	blt.n	800ce38 <__ieee754_pow+0x218>
 800ce52:	4b0a      	ldr	r3, [pc, #40]	; (800ce7c <__ieee754_pow+0x25c>)
 800ce54:	429c      	cmp	r4, r3
 800ce56:	dd19      	ble.n	800ce8c <__ieee754_pow+0x26c>
 800ce58:	f1b9 0f00 	cmp.w	r9, #0
 800ce5c:	dcef      	bgt.n	800ce3e <__ieee754_pow+0x21e>
 800ce5e:	2000      	movs	r0, #0
 800ce60:	b009      	add	sp, #36	; 0x24
 800ce62:	ecbd 8b06 	vpop	{d8-d10}
 800ce66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	f000 bca1 	b.w	800d7b0 <__math_uflow>
 800ce6e:	bf00      	nop
 800ce70:	fff00000 	.word	0xfff00000
 800ce74:	7ff00000 	.word	0x7ff00000
 800ce78:	433fffff 	.word	0x433fffff
 800ce7c:	3ff00000 	.word	0x3ff00000
 800ce80:	3fefffff 	.word	0x3fefffff
 800ce84:	3fe00000 	.word	0x3fe00000
 800ce88:	41e00000 	.word	0x41e00000
 800ce8c:	4b60      	ldr	r3, [pc, #384]	; (800d010 <__ieee754_pow+0x3f0>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f7f3 fa0a 	bl	80002a8 <__aeabi_dsub>
 800ce94:	a354      	add	r3, pc, #336	; (adr r3, 800cfe8 <__ieee754_pow+0x3c8>)
 800ce96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	460d      	mov	r5, r1
 800ce9e:	f7f3 fbbb 	bl	8000618 <__aeabi_dmul>
 800cea2:	a353      	add	r3, pc, #332	; (adr r3, 800cff0 <__ieee754_pow+0x3d0>)
 800cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea8:	4606      	mov	r6, r0
 800ceaa:	460f      	mov	r7, r1
 800ceac:	4620      	mov	r0, r4
 800ceae:	4629      	mov	r1, r5
 800ceb0:	f7f3 fbb2 	bl	8000618 <__aeabi_dmul>
 800ceb4:	4b57      	ldr	r3, [pc, #348]	; (800d014 <__ieee754_pow+0x3f4>)
 800ceb6:	4682      	mov	sl, r0
 800ceb8:	468b      	mov	fp, r1
 800ceba:	2200      	movs	r2, #0
 800cebc:	4620      	mov	r0, r4
 800cebe:	4629      	mov	r1, r5
 800cec0:	f7f3 fbaa 	bl	8000618 <__aeabi_dmul>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	a14b      	add	r1, pc, #300	; (adr r1, 800cff8 <__ieee754_pow+0x3d8>)
 800ceca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cece:	f7f3 f9eb 	bl	80002a8 <__aeabi_dsub>
 800ced2:	4622      	mov	r2, r4
 800ced4:	462b      	mov	r3, r5
 800ced6:	f7f3 fb9f 	bl	8000618 <__aeabi_dmul>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	2000      	movs	r0, #0
 800cee0:	494d      	ldr	r1, [pc, #308]	; (800d018 <__ieee754_pow+0x3f8>)
 800cee2:	f7f3 f9e1 	bl	80002a8 <__aeabi_dsub>
 800cee6:	4622      	mov	r2, r4
 800cee8:	4680      	mov	r8, r0
 800ceea:	4689      	mov	r9, r1
 800ceec:	462b      	mov	r3, r5
 800ceee:	4620      	mov	r0, r4
 800cef0:	4629      	mov	r1, r5
 800cef2:	f7f3 fb91 	bl	8000618 <__aeabi_dmul>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	4640      	mov	r0, r8
 800cefc:	4649      	mov	r1, r9
 800cefe:	f7f3 fb8b 	bl	8000618 <__aeabi_dmul>
 800cf02:	a33f      	add	r3, pc, #252	; (adr r3, 800d000 <__ieee754_pow+0x3e0>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 fb86 	bl	8000618 <__aeabi_dmul>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	460b      	mov	r3, r1
 800cf10:	4650      	mov	r0, sl
 800cf12:	4659      	mov	r1, fp
 800cf14:	f7f3 f9c8 	bl	80002a8 <__aeabi_dsub>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	4689      	mov	r9, r1
 800cf20:	4630      	mov	r0, r6
 800cf22:	4639      	mov	r1, r7
 800cf24:	f7f3 f9c2 	bl	80002ac <__adddf3>
 800cf28:	2000      	movs	r0, #0
 800cf2a:	4632      	mov	r2, r6
 800cf2c:	463b      	mov	r3, r7
 800cf2e:	4604      	mov	r4, r0
 800cf30:	460d      	mov	r5, r1
 800cf32:	f7f3 f9b9 	bl	80002a8 <__aeabi_dsub>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4640      	mov	r0, r8
 800cf3c:	4649      	mov	r1, r9
 800cf3e:	f7f3 f9b3 	bl	80002a8 <__aeabi_dsub>
 800cf42:	9b04      	ldr	r3, [sp, #16]
 800cf44:	9a06      	ldr	r2, [sp, #24]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	4682      	mov	sl, r0
 800cf4c:	468b      	mov	fp, r1
 800cf4e:	f040 81e7 	bne.w	800d320 <__ieee754_pow+0x700>
 800cf52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d008 <__ieee754_pow+0x3e8>
 800cf56:	eeb0 8a47 	vmov.f32	s16, s14
 800cf5a:	eef0 8a67 	vmov.f32	s17, s15
 800cf5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf62:	2600      	movs	r6, #0
 800cf64:	4632      	mov	r2, r6
 800cf66:	463b      	mov	r3, r7
 800cf68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf6c:	f7f3 f99c 	bl	80002a8 <__aeabi_dsub>
 800cf70:	4622      	mov	r2, r4
 800cf72:	462b      	mov	r3, r5
 800cf74:	f7f3 fb50 	bl	8000618 <__aeabi_dmul>
 800cf78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf7c:	4680      	mov	r8, r0
 800cf7e:	4689      	mov	r9, r1
 800cf80:	4650      	mov	r0, sl
 800cf82:	4659      	mov	r1, fp
 800cf84:	f7f3 fb48 	bl	8000618 <__aeabi_dmul>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4640      	mov	r0, r8
 800cf8e:	4649      	mov	r1, r9
 800cf90:	f7f3 f98c 	bl	80002ac <__adddf3>
 800cf94:	4632      	mov	r2, r6
 800cf96:	463b      	mov	r3, r7
 800cf98:	4680      	mov	r8, r0
 800cf9a:	4689      	mov	r9, r1
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	f7f3 fb3a 	bl	8000618 <__aeabi_dmul>
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	4602      	mov	r2, r0
 800cfac:	4649      	mov	r1, r9
 800cfae:	4640      	mov	r0, r8
 800cfb0:	f7f3 f97c 	bl	80002ac <__adddf3>
 800cfb4:	4b19      	ldr	r3, [pc, #100]	; (800d01c <__ieee754_pow+0x3fc>)
 800cfb6:	4299      	cmp	r1, r3
 800cfb8:	ec45 4b19 	vmov	d9, r4, r5
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	460f      	mov	r7, r1
 800cfc0:	468b      	mov	fp, r1
 800cfc2:	f340 82f0 	ble.w	800d5a6 <__ieee754_pow+0x986>
 800cfc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cfca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cfce:	4303      	orrs	r3, r0
 800cfd0:	f000 81e4 	beq.w	800d39c <__ieee754_pow+0x77c>
 800cfd4:	ec51 0b18 	vmov	r0, r1, d8
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f7f3 fd8e 	bl	8000afc <__aeabi_dcmplt>
 800cfe0:	3800      	subs	r0, #0
 800cfe2:	bf18      	it	ne
 800cfe4:	2001      	movne	r0, #1
 800cfe6:	e72b      	b.n	800ce40 <__ieee754_pow+0x220>
 800cfe8:	60000000 	.word	0x60000000
 800cfec:	3ff71547 	.word	0x3ff71547
 800cff0:	f85ddf44 	.word	0xf85ddf44
 800cff4:	3e54ae0b 	.word	0x3e54ae0b
 800cff8:	55555555 	.word	0x55555555
 800cffc:	3fd55555 	.word	0x3fd55555
 800d000:	652b82fe 	.word	0x652b82fe
 800d004:	3ff71547 	.word	0x3ff71547
 800d008:	00000000 	.word	0x00000000
 800d00c:	bff00000 	.word	0xbff00000
 800d010:	3ff00000 	.word	0x3ff00000
 800d014:	3fd00000 	.word	0x3fd00000
 800d018:	3fe00000 	.word	0x3fe00000
 800d01c:	408fffff 	.word	0x408fffff
 800d020:	4bd5      	ldr	r3, [pc, #852]	; (800d378 <__ieee754_pow+0x758>)
 800d022:	402b      	ands	r3, r5
 800d024:	2200      	movs	r2, #0
 800d026:	b92b      	cbnz	r3, 800d034 <__ieee754_pow+0x414>
 800d028:	4bd4      	ldr	r3, [pc, #848]	; (800d37c <__ieee754_pow+0x75c>)
 800d02a:	f7f3 faf5 	bl	8000618 <__aeabi_dmul>
 800d02e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d032:	460c      	mov	r4, r1
 800d034:	1523      	asrs	r3, r4, #20
 800d036:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d03a:	4413      	add	r3, r2
 800d03c:	9305      	str	r3, [sp, #20]
 800d03e:	4bd0      	ldr	r3, [pc, #832]	; (800d380 <__ieee754_pow+0x760>)
 800d040:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d044:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d048:	429c      	cmp	r4, r3
 800d04a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d04e:	dd08      	ble.n	800d062 <__ieee754_pow+0x442>
 800d050:	4bcc      	ldr	r3, [pc, #816]	; (800d384 <__ieee754_pow+0x764>)
 800d052:	429c      	cmp	r4, r3
 800d054:	f340 8162 	ble.w	800d31c <__ieee754_pow+0x6fc>
 800d058:	9b05      	ldr	r3, [sp, #20]
 800d05a:	3301      	adds	r3, #1
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d062:	2400      	movs	r4, #0
 800d064:	00e3      	lsls	r3, r4, #3
 800d066:	9307      	str	r3, [sp, #28]
 800d068:	4bc7      	ldr	r3, [pc, #796]	; (800d388 <__ieee754_pow+0x768>)
 800d06a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d06e:	ed93 7b00 	vldr	d7, [r3]
 800d072:	4629      	mov	r1, r5
 800d074:	ec53 2b17 	vmov	r2, r3, d7
 800d078:	eeb0 9a47 	vmov.f32	s18, s14
 800d07c:	eef0 9a67 	vmov.f32	s19, s15
 800d080:	4682      	mov	sl, r0
 800d082:	f7f3 f911 	bl	80002a8 <__aeabi_dsub>
 800d086:	4652      	mov	r2, sl
 800d088:	4606      	mov	r6, r0
 800d08a:	460f      	mov	r7, r1
 800d08c:	462b      	mov	r3, r5
 800d08e:	ec51 0b19 	vmov	r0, r1, d9
 800d092:	f7f3 f90b 	bl	80002ac <__adddf3>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	2000      	movs	r0, #0
 800d09c:	49bb      	ldr	r1, [pc, #748]	; (800d38c <__ieee754_pow+0x76c>)
 800d09e:	f7f3 fbe5 	bl	800086c <__aeabi_ddiv>
 800d0a2:	ec41 0b1a 	vmov	d10, r0, r1
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	4639      	mov	r1, r7
 800d0ae:	f7f3 fab3 	bl	8000618 <__aeabi_dmul>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0b8:	9302      	str	r3, [sp, #8]
 800d0ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d0be:	46ab      	mov	fp, r5
 800d0c0:	106d      	asrs	r5, r5, #1
 800d0c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d0c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d0ca:	ec41 0b18 	vmov	d8, r0, r1
 800d0ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	4614      	mov	r4, r2
 800d0da:	461d      	mov	r5, r3
 800d0dc:	f7f3 fa9c 	bl	8000618 <__aeabi_dmul>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	f7f3 f8de 	bl	80002a8 <__aeabi_dsub>
 800d0ec:	ec53 2b19 	vmov	r2, r3, d9
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	f7f3 f8d6 	bl	80002a8 <__aeabi_dsub>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4650      	mov	r0, sl
 800d102:	4659      	mov	r1, fp
 800d104:	f7f3 f8d0 	bl	80002a8 <__aeabi_dsub>
 800d108:	4642      	mov	r2, r8
 800d10a:	464b      	mov	r3, r9
 800d10c:	f7f3 fa84 	bl	8000618 <__aeabi_dmul>
 800d110:	4602      	mov	r2, r0
 800d112:	460b      	mov	r3, r1
 800d114:	4630      	mov	r0, r6
 800d116:	4639      	mov	r1, r7
 800d118:	f7f3 f8c6 	bl	80002a8 <__aeabi_dsub>
 800d11c:	ec53 2b1a 	vmov	r2, r3, d10
 800d120:	f7f3 fa7a 	bl	8000618 <__aeabi_dmul>
 800d124:	ec53 2b18 	vmov	r2, r3, d8
 800d128:	ec41 0b19 	vmov	d9, r0, r1
 800d12c:	ec51 0b18 	vmov	r0, r1, d8
 800d130:	f7f3 fa72 	bl	8000618 <__aeabi_dmul>
 800d134:	a37c      	add	r3, pc, #496	; (adr r3, 800d328 <__ieee754_pow+0x708>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	4604      	mov	r4, r0
 800d13c:	460d      	mov	r5, r1
 800d13e:	f7f3 fa6b 	bl	8000618 <__aeabi_dmul>
 800d142:	a37b      	add	r3, pc, #492	; (adr r3, 800d330 <__ieee754_pow+0x710>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 f8b0 	bl	80002ac <__adddf3>
 800d14c:	4622      	mov	r2, r4
 800d14e:	462b      	mov	r3, r5
 800d150:	f7f3 fa62 	bl	8000618 <__aeabi_dmul>
 800d154:	a378      	add	r3, pc, #480	; (adr r3, 800d338 <__ieee754_pow+0x718>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	f7f3 f8a7 	bl	80002ac <__adddf3>
 800d15e:	4622      	mov	r2, r4
 800d160:	462b      	mov	r3, r5
 800d162:	f7f3 fa59 	bl	8000618 <__aeabi_dmul>
 800d166:	a376      	add	r3, pc, #472	; (adr r3, 800d340 <__ieee754_pow+0x720>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f89e 	bl	80002ac <__adddf3>
 800d170:	4622      	mov	r2, r4
 800d172:	462b      	mov	r3, r5
 800d174:	f7f3 fa50 	bl	8000618 <__aeabi_dmul>
 800d178:	a373      	add	r3, pc, #460	; (adr r3, 800d348 <__ieee754_pow+0x728>)
 800d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17e:	f7f3 f895 	bl	80002ac <__adddf3>
 800d182:	4622      	mov	r2, r4
 800d184:	462b      	mov	r3, r5
 800d186:	f7f3 fa47 	bl	8000618 <__aeabi_dmul>
 800d18a:	a371      	add	r3, pc, #452	; (adr r3, 800d350 <__ieee754_pow+0x730>)
 800d18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d190:	f7f3 f88c 	bl	80002ac <__adddf3>
 800d194:	4622      	mov	r2, r4
 800d196:	4606      	mov	r6, r0
 800d198:	460f      	mov	r7, r1
 800d19a:	462b      	mov	r3, r5
 800d19c:	4620      	mov	r0, r4
 800d19e:	4629      	mov	r1, r5
 800d1a0:	f7f3 fa3a 	bl	8000618 <__aeabi_dmul>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	f7f3 fa34 	bl	8000618 <__aeabi_dmul>
 800d1b0:	4642      	mov	r2, r8
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	464b      	mov	r3, r9
 800d1b8:	ec51 0b18 	vmov	r0, r1, d8
 800d1bc:	f7f3 f876 	bl	80002ac <__adddf3>
 800d1c0:	ec53 2b19 	vmov	r2, r3, d9
 800d1c4:	f7f3 fa28 	bl	8000618 <__aeabi_dmul>
 800d1c8:	4622      	mov	r2, r4
 800d1ca:	462b      	mov	r3, r5
 800d1cc:	f7f3 f86e 	bl	80002ac <__adddf3>
 800d1d0:	4642      	mov	r2, r8
 800d1d2:	4682      	mov	sl, r0
 800d1d4:	468b      	mov	fp, r1
 800d1d6:	464b      	mov	r3, r9
 800d1d8:	4640      	mov	r0, r8
 800d1da:	4649      	mov	r1, r9
 800d1dc:	f7f3 fa1c 	bl	8000618 <__aeabi_dmul>
 800d1e0:	4b6b      	ldr	r3, [pc, #428]	; (800d390 <__ieee754_pow+0x770>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	460f      	mov	r7, r1
 800d1e8:	f7f3 f860 	bl	80002ac <__adddf3>
 800d1ec:	4652      	mov	r2, sl
 800d1ee:	465b      	mov	r3, fp
 800d1f0:	f7f3 f85c 	bl	80002ac <__adddf3>
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	460d      	mov	r5, r1
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4640      	mov	r0, r8
 800d200:	4649      	mov	r1, r9
 800d202:	f7f3 fa09 	bl	8000618 <__aeabi_dmul>
 800d206:	4b62      	ldr	r3, [pc, #392]	; (800d390 <__ieee754_pow+0x770>)
 800d208:	4680      	mov	r8, r0
 800d20a:	4689      	mov	r9, r1
 800d20c:	2200      	movs	r2, #0
 800d20e:	4620      	mov	r0, r4
 800d210:	4629      	mov	r1, r5
 800d212:	f7f3 f849 	bl	80002a8 <__aeabi_dsub>
 800d216:	4632      	mov	r2, r6
 800d218:	463b      	mov	r3, r7
 800d21a:	f7f3 f845 	bl	80002a8 <__aeabi_dsub>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4650      	mov	r0, sl
 800d224:	4659      	mov	r1, fp
 800d226:	f7f3 f83f 	bl	80002a8 <__aeabi_dsub>
 800d22a:	ec53 2b18 	vmov	r2, r3, d8
 800d22e:	f7f3 f9f3 	bl	8000618 <__aeabi_dmul>
 800d232:	4622      	mov	r2, r4
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	462b      	mov	r3, r5
 800d23a:	ec51 0b19 	vmov	r0, r1, d9
 800d23e:	f7f3 f9eb 	bl	8000618 <__aeabi_dmul>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4630      	mov	r0, r6
 800d248:	4639      	mov	r1, r7
 800d24a:	f7f3 f82f 	bl	80002ac <__adddf3>
 800d24e:	4606      	mov	r6, r0
 800d250:	460f      	mov	r7, r1
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	4640      	mov	r0, r8
 800d258:	4649      	mov	r1, r9
 800d25a:	f7f3 f827 	bl	80002ac <__adddf3>
 800d25e:	a33e      	add	r3, pc, #248	; (adr r3, 800d358 <__ieee754_pow+0x738>)
 800d260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d264:	2000      	movs	r0, #0
 800d266:	4604      	mov	r4, r0
 800d268:	460d      	mov	r5, r1
 800d26a:	f7f3 f9d5 	bl	8000618 <__aeabi_dmul>
 800d26e:	4642      	mov	r2, r8
 800d270:	ec41 0b18 	vmov	d8, r0, r1
 800d274:	464b      	mov	r3, r9
 800d276:	4620      	mov	r0, r4
 800d278:	4629      	mov	r1, r5
 800d27a:	f7f3 f815 	bl	80002a8 <__aeabi_dsub>
 800d27e:	4602      	mov	r2, r0
 800d280:	460b      	mov	r3, r1
 800d282:	4630      	mov	r0, r6
 800d284:	4639      	mov	r1, r7
 800d286:	f7f3 f80f 	bl	80002a8 <__aeabi_dsub>
 800d28a:	a335      	add	r3, pc, #212	; (adr r3, 800d360 <__ieee754_pow+0x740>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	f7f3 f9c2 	bl	8000618 <__aeabi_dmul>
 800d294:	a334      	add	r3, pc, #208	; (adr r3, 800d368 <__ieee754_pow+0x748>)
 800d296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29a:	4606      	mov	r6, r0
 800d29c:	460f      	mov	r7, r1
 800d29e:	4620      	mov	r0, r4
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	f7f3 f9b9 	bl	8000618 <__aeabi_dmul>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	f7f2 fffd 	bl	80002ac <__adddf3>
 800d2b2:	9a07      	ldr	r2, [sp, #28]
 800d2b4:	4b37      	ldr	r3, [pc, #220]	; (800d394 <__ieee754_pow+0x774>)
 800d2b6:	4413      	add	r3, r2
 800d2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2bc:	f7f2 fff6 	bl	80002ac <__adddf3>
 800d2c0:	4682      	mov	sl, r0
 800d2c2:	9805      	ldr	r0, [sp, #20]
 800d2c4:	468b      	mov	fp, r1
 800d2c6:	f7f3 f93d 	bl	8000544 <__aeabi_i2d>
 800d2ca:	9a07      	ldr	r2, [sp, #28]
 800d2cc:	4b32      	ldr	r3, [pc, #200]	; (800d398 <__ieee754_pow+0x778>)
 800d2ce:	4413      	add	r3, r2
 800d2d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	460f      	mov	r7, r1
 800d2d8:	4652      	mov	r2, sl
 800d2da:	465b      	mov	r3, fp
 800d2dc:	ec51 0b18 	vmov	r0, r1, d8
 800d2e0:	f7f2 ffe4 	bl	80002ac <__adddf3>
 800d2e4:	4642      	mov	r2, r8
 800d2e6:	464b      	mov	r3, r9
 800d2e8:	f7f2 ffe0 	bl	80002ac <__adddf3>
 800d2ec:	4632      	mov	r2, r6
 800d2ee:	463b      	mov	r3, r7
 800d2f0:	f7f2 ffdc 	bl	80002ac <__adddf3>
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	4632      	mov	r2, r6
 800d2f8:	463b      	mov	r3, r7
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	460d      	mov	r5, r1
 800d2fe:	f7f2 ffd3 	bl	80002a8 <__aeabi_dsub>
 800d302:	4642      	mov	r2, r8
 800d304:	464b      	mov	r3, r9
 800d306:	f7f2 ffcf 	bl	80002a8 <__aeabi_dsub>
 800d30a:	ec53 2b18 	vmov	r2, r3, d8
 800d30e:	f7f2 ffcb 	bl	80002a8 <__aeabi_dsub>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	4650      	mov	r0, sl
 800d318:	4659      	mov	r1, fp
 800d31a:	e610      	b.n	800cf3e <__ieee754_pow+0x31e>
 800d31c:	2401      	movs	r4, #1
 800d31e:	e6a1      	b.n	800d064 <__ieee754_pow+0x444>
 800d320:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d370 <__ieee754_pow+0x750>
 800d324:	e617      	b.n	800cf56 <__ieee754_pow+0x336>
 800d326:	bf00      	nop
 800d328:	4a454eef 	.word	0x4a454eef
 800d32c:	3fca7e28 	.word	0x3fca7e28
 800d330:	93c9db65 	.word	0x93c9db65
 800d334:	3fcd864a 	.word	0x3fcd864a
 800d338:	a91d4101 	.word	0xa91d4101
 800d33c:	3fd17460 	.word	0x3fd17460
 800d340:	518f264d 	.word	0x518f264d
 800d344:	3fd55555 	.word	0x3fd55555
 800d348:	db6fabff 	.word	0xdb6fabff
 800d34c:	3fdb6db6 	.word	0x3fdb6db6
 800d350:	33333303 	.word	0x33333303
 800d354:	3fe33333 	.word	0x3fe33333
 800d358:	e0000000 	.word	0xe0000000
 800d35c:	3feec709 	.word	0x3feec709
 800d360:	dc3a03fd 	.word	0xdc3a03fd
 800d364:	3feec709 	.word	0x3feec709
 800d368:	145b01f5 	.word	0x145b01f5
 800d36c:	be3e2fe0 	.word	0xbe3e2fe0
 800d370:	00000000 	.word	0x00000000
 800d374:	3ff00000 	.word	0x3ff00000
 800d378:	7ff00000 	.word	0x7ff00000
 800d37c:	43400000 	.word	0x43400000
 800d380:	0003988e 	.word	0x0003988e
 800d384:	000bb679 	.word	0x000bb679
 800d388:	0800e7f0 	.word	0x0800e7f0
 800d38c:	3ff00000 	.word	0x3ff00000
 800d390:	40080000 	.word	0x40080000
 800d394:	0800e810 	.word	0x0800e810
 800d398:	0800e800 	.word	0x0800e800
 800d39c:	a3b3      	add	r3, pc, #716	; (adr r3, 800d66c <__ieee754_pow+0xa4c>)
 800d39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a2:	4640      	mov	r0, r8
 800d3a4:	4649      	mov	r1, r9
 800d3a6:	f7f2 ff81 	bl	80002ac <__adddf3>
 800d3aa:	4622      	mov	r2, r4
 800d3ac:	ec41 0b1a 	vmov	d10, r0, r1
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f2 ff77 	bl	80002a8 <__aeabi_dsub>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	460b      	mov	r3, r1
 800d3be:	ec51 0b1a 	vmov	r0, r1, d10
 800d3c2:	f7f3 fbb9 	bl	8000b38 <__aeabi_dcmpgt>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f47f ae04 	bne.w	800cfd4 <__ieee754_pow+0x3b4>
 800d3cc:	4aa2      	ldr	r2, [pc, #648]	; (800d658 <__ieee754_pow+0xa38>)
 800d3ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	f340 8107 	ble.w	800d5e6 <__ieee754_pow+0x9c6>
 800d3d8:	151b      	asrs	r3, r3, #20
 800d3da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d3de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d3e2:	fa4a fa03 	asr.w	sl, sl, r3
 800d3e6:	44da      	add	sl, fp
 800d3e8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d3ec:	489b      	ldr	r0, [pc, #620]	; (800d65c <__ieee754_pow+0xa3c>)
 800d3ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d3f2:	4108      	asrs	r0, r1
 800d3f4:	ea00 030a 	and.w	r3, r0, sl
 800d3f8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d3fc:	f1c1 0114 	rsb	r1, r1, #20
 800d400:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d404:	fa4a fa01 	asr.w	sl, sl, r1
 800d408:	f1bb 0f00 	cmp.w	fp, #0
 800d40c:	f04f 0200 	mov.w	r2, #0
 800d410:	4620      	mov	r0, r4
 800d412:	4629      	mov	r1, r5
 800d414:	bfb8      	it	lt
 800d416:	f1ca 0a00 	rsblt	sl, sl, #0
 800d41a:	f7f2 ff45 	bl	80002a8 <__aeabi_dsub>
 800d41e:	ec41 0b19 	vmov	d9, r0, r1
 800d422:	4642      	mov	r2, r8
 800d424:	464b      	mov	r3, r9
 800d426:	ec51 0b19 	vmov	r0, r1, d9
 800d42a:	f7f2 ff3f 	bl	80002ac <__adddf3>
 800d42e:	a37a      	add	r3, pc, #488	; (adr r3, 800d618 <__ieee754_pow+0x9f8>)
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	2000      	movs	r0, #0
 800d436:	4604      	mov	r4, r0
 800d438:	460d      	mov	r5, r1
 800d43a:	f7f3 f8ed 	bl	8000618 <__aeabi_dmul>
 800d43e:	ec53 2b19 	vmov	r2, r3, d9
 800d442:	4606      	mov	r6, r0
 800d444:	460f      	mov	r7, r1
 800d446:	4620      	mov	r0, r4
 800d448:	4629      	mov	r1, r5
 800d44a:	f7f2 ff2d 	bl	80002a8 <__aeabi_dsub>
 800d44e:	4602      	mov	r2, r0
 800d450:	460b      	mov	r3, r1
 800d452:	4640      	mov	r0, r8
 800d454:	4649      	mov	r1, r9
 800d456:	f7f2 ff27 	bl	80002a8 <__aeabi_dsub>
 800d45a:	a371      	add	r3, pc, #452	; (adr r3, 800d620 <__ieee754_pow+0xa00>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f7f3 f8da 	bl	8000618 <__aeabi_dmul>
 800d464:	a370      	add	r3, pc, #448	; (adr r3, 800d628 <__ieee754_pow+0xa08>)
 800d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46a:	4680      	mov	r8, r0
 800d46c:	4689      	mov	r9, r1
 800d46e:	4620      	mov	r0, r4
 800d470:	4629      	mov	r1, r5
 800d472:	f7f3 f8d1 	bl	8000618 <__aeabi_dmul>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	4640      	mov	r0, r8
 800d47c:	4649      	mov	r1, r9
 800d47e:	f7f2 ff15 	bl	80002ac <__adddf3>
 800d482:	4604      	mov	r4, r0
 800d484:	460d      	mov	r5, r1
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	4630      	mov	r0, r6
 800d48c:	4639      	mov	r1, r7
 800d48e:	f7f2 ff0d 	bl	80002ac <__adddf3>
 800d492:	4632      	mov	r2, r6
 800d494:	463b      	mov	r3, r7
 800d496:	4680      	mov	r8, r0
 800d498:	4689      	mov	r9, r1
 800d49a:	f7f2 ff05 	bl	80002a8 <__aeabi_dsub>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	f7f2 feff 	bl	80002a8 <__aeabi_dsub>
 800d4aa:	4642      	mov	r2, r8
 800d4ac:	4606      	mov	r6, r0
 800d4ae:	460f      	mov	r7, r1
 800d4b0:	464b      	mov	r3, r9
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	f7f3 f8af 	bl	8000618 <__aeabi_dmul>
 800d4ba:	a35d      	add	r3, pc, #372	; (adr r3, 800d630 <__ieee754_pow+0xa10>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	460d      	mov	r5, r1
 800d4c4:	f7f3 f8a8 	bl	8000618 <__aeabi_dmul>
 800d4c8:	a35b      	add	r3, pc, #364	; (adr r3, 800d638 <__ieee754_pow+0xa18>)
 800d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ce:	f7f2 feeb 	bl	80002a8 <__aeabi_dsub>
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	462b      	mov	r3, r5
 800d4d6:	f7f3 f89f 	bl	8000618 <__aeabi_dmul>
 800d4da:	a359      	add	r3, pc, #356	; (adr r3, 800d640 <__ieee754_pow+0xa20>)
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	f7f2 fee4 	bl	80002ac <__adddf3>
 800d4e4:	4622      	mov	r2, r4
 800d4e6:	462b      	mov	r3, r5
 800d4e8:	f7f3 f896 	bl	8000618 <__aeabi_dmul>
 800d4ec:	a356      	add	r3, pc, #344	; (adr r3, 800d648 <__ieee754_pow+0xa28>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	f7f2 fed9 	bl	80002a8 <__aeabi_dsub>
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	462b      	mov	r3, r5
 800d4fa:	f7f3 f88d 	bl	8000618 <__aeabi_dmul>
 800d4fe:	a354      	add	r3, pc, #336	; (adr r3, 800d650 <__ieee754_pow+0xa30>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f2 fed2 	bl	80002ac <__adddf3>
 800d508:	4622      	mov	r2, r4
 800d50a:	462b      	mov	r3, r5
 800d50c:	f7f3 f884 	bl	8000618 <__aeabi_dmul>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4640      	mov	r0, r8
 800d516:	4649      	mov	r1, r9
 800d518:	f7f2 fec6 	bl	80002a8 <__aeabi_dsub>
 800d51c:	4604      	mov	r4, r0
 800d51e:	460d      	mov	r5, r1
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	4640      	mov	r0, r8
 800d526:	4649      	mov	r1, r9
 800d528:	f7f3 f876 	bl	8000618 <__aeabi_dmul>
 800d52c:	2200      	movs	r2, #0
 800d52e:	ec41 0b19 	vmov	d9, r0, r1
 800d532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d536:	4620      	mov	r0, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	f7f2 feb5 	bl	80002a8 <__aeabi_dsub>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	ec51 0b19 	vmov	r0, r1, d9
 800d546:	f7f3 f991 	bl	800086c <__aeabi_ddiv>
 800d54a:	4632      	mov	r2, r6
 800d54c:	4604      	mov	r4, r0
 800d54e:	460d      	mov	r5, r1
 800d550:	463b      	mov	r3, r7
 800d552:	4640      	mov	r0, r8
 800d554:	4649      	mov	r1, r9
 800d556:	f7f3 f85f 	bl	8000618 <__aeabi_dmul>
 800d55a:	4632      	mov	r2, r6
 800d55c:	463b      	mov	r3, r7
 800d55e:	f7f2 fea5 	bl	80002ac <__adddf3>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	4620      	mov	r0, r4
 800d568:	4629      	mov	r1, r5
 800d56a:	f7f2 fe9d 	bl	80002a8 <__aeabi_dsub>
 800d56e:	4642      	mov	r2, r8
 800d570:	464b      	mov	r3, r9
 800d572:	f7f2 fe99 	bl	80002a8 <__aeabi_dsub>
 800d576:	460b      	mov	r3, r1
 800d578:	4602      	mov	r2, r0
 800d57a:	4939      	ldr	r1, [pc, #228]	; (800d660 <__ieee754_pow+0xa40>)
 800d57c:	2000      	movs	r0, #0
 800d57e:	f7f2 fe93 	bl	80002a8 <__aeabi_dsub>
 800d582:	ec41 0b10 	vmov	d0, r0, r1
 800d586:	ee10 3a90 	vmov	r3, s1
 800d58a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d58e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d592:	da2b      	bge.n	800d5ec <__ieee754_pow+0x9cc>
 800d594:	4650      	mov	r0, sl
 800d596:	f000 f86f 	bl	800d678 <scalbn>
 800d59a:	ec51 0b10 	vmov	r0, r1, d0
 800d59e:	ec53 2b18 	vmov	r2, r3, d8
 800d5a2:	f7ff bbee 	b.w	800cd82 <__ieee754_pow+0x162>
 800d5a6:	4b2f      	ldr	r3, [pc, #188]	; (800d664 <__ieee754_pow+0xa44>)
 800d5a8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d5ac:	429e      	cmp	r6, r3
 800d5ae:	f77f af0d 	ble.w	800d3cc <__ieee754_pow+0x7ac>
 800d5b2:	4b2d      	ldr	r3, [pc, #180]	; (800d668 <__ieee754_pow+0xa48>)
 800d5b4:	440b      	add	r3, r1
 800d5b6:	4303      	orrs	r3, r0
 800d5b8:	d009      	beq.n	800d5ce <__ieee754_pow+0x9ae>
 800d5ba:	ec51 0b18 	vmov	r0, r1, d8
 800d5be:	2200      	movs	r2, #0
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f7f3 fa9b 	bl	8000afc <__aeabi_dcmplt>
 800d5c6:	3800      	subs	r0, #0
 800d5c8:	bf18      	it	ne
 800d5ca:	2001      	movne	r0, #1
 800d5cc:	e448      	b.n	800ce60 <__ieee754_pow+0x240>
 800d5ce:	4622      	mov	r2, r4
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	f7f2 fe69 	bl	80002a8 <__aeabi_dsub>
 800d5d6:	4642      	mov	r2, r8
 800d5d8:	464b      	mov	r3, r9
 800d5da:	f7f3 faa3 	bl	8000b24 <__aeabi_dcmpge>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f43f aef4 	beq.w	800d3cc <__ieee754_pow+0x7ac>
 800d5e4:	e7e9      	b.n	800d5ba <__ieee754_pow+0x99a>
 800d5e6:	f04f 0a00 	mov.w	sl, #0
 800d5ea:	e71a      	b.n	800d422 <__ieee754_pow+0x802>
 800d5ec:	ec51 0b10 	vmov	r0, r1, d0
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	e7d4      	b.n	800d59e <__ieee754_pow+0x97e>
 800d5f4:	491a      	ldr	r1, [pc, #104]	; (800d660 <__ieee754_pow+0xa40>)
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	f7ff bb31 	b.w	800cc5e <__ieee754_pow+0x3e>
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	2100      	movs	r1, #0
 800d600:	f7ff bb2d 	b.w	800cc5e <__ieee754_pow+0x3e>
 800d604:	4630      	mov	r0, r6
 800d606:	4639      	mov	r1, r7
 800d608:	f7ff bb29 	b.w	800cc5e <__ieee754_pow+0x3e>
 800d60c:	9204      	str	r2, [sp, #16]
 800d60e:	f7ff bb7b 	b.w	800cd08 <__ieee754_pow+0xe8>
 800d612:	2300      	movs	r3, #0
 800d614:	f7ff bb65 	b.w	800cce2 <__ieee754_pow+0xc2>
 800d618:	00000000 	.word	0x00000000
 800d61c:	3fe62e43 	.word	0x3fe62e43
 800d620:	fefa39ef 	.word	0xfefa39ef
 800d624:	3fe62e42 	.word	0x3fe62e42
 800d628:	0ca86c39 	.word	0x0ca86c39
 800d62c:	be205c61 	.word	0xbe205c61
 800d630:	72bea4d0 	.word	0x72bea4d0
 800d634:	3e663769 	.word	0x3e663769
 800d638:	c5d26bf1 	.word	0xc5d26bf1
 800d63c:	3ebbbd41 	.word	0x3ebbbd41
 800d640:	af25de2c 	.word	0xaf25de2c
 800d644:	3f11566a 	.word	0x3f11566a
 800d648:	16bebd93 	.word	0x16bebd93
 800d64c:	3f66c16c 	.word	0x3f66c16c
 800d650:	5555553e 	.word	0x5555553e
 800d654:	3fc55555 	.word	0x3fc55555
 800d658:	3fe00000 	.word	0x3fe00000
 800d65c:	fff00000 	.word	0xfff00000
 800d660:	3ff00000 	.word	0x3ff00000
 800d664:	4090cbff 	.word	0x4090cbff
 800d668:	3f6f3400 	.word	0x3f6f3400
 800d66c:	652b82fe 	.word	0x652b82fe
 800d670:	3c971547 	.word	0x3c971547
 800d674:	00000000 	.word	0x00000000

0800d678 <scalbn>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	ec55 4b10 	vmov	r4, r5, d0
 800d67e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d682:	4606      	mov	r6, r0
 800d684:	462b      	mov	r3, r5
 800d686:	b999      	cbnz	r1, 800d6b0 <scalbn+0x38>
 800d688:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d68c:	4323      	orrs	r3, r4
 800d68e:	d03f      	beq.n	800d710 <scalbn+0x98>
 800d690:	4b35      	ldr	r3, [pc, #212]	; (800d768 <scalbn+0xf0>)
 800d692:	4629      	mov	r1, r5
 800d694:	ee10 0a10 	vmov	r0, s0
 800d698:	2200      	movs	r2, #0
 800d69a:	f7f2 ffbd 	bl	8000618 <__aeabi_dmul>
 800d69e:	4b33      	ldr	r3, [pc, #204]	; (800d76c <scalbn+0xf4>)
 800d6a0:	429e      	cmp	r6, r3
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	da10      	bge.n	800d6ca <scalbn+0x52>
 800d6a8:	a327      	add	r3, pc, #156	; (adr r3, 800d748 <scalbn+0xd0>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	e01f      	b.n	800d6f0 <scalbn+0x78>
 800d6b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d6b4:	4291      	cmp	r1, r2
 800d6b6:	d10c      	bne.n	800d6d2 <scalbn+0x5a>
 800d6b8:	ee10 2a10 	vmov	r2, s0
 800d6bc:	4620      	mov	r0, r4
 800d6be:	4629      	mov	r1, r5
 800d6c0:	f7f2 fdf4 	bl	80002ac <__adddf3>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	460d      	mov	r5, r1
 800d6c8:	e022      	b.n	800d710 <scalbn+0x98>
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6d0:	3936      	subs	r1, #54	; 0x36
 800d6d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d6d6:	4296      	cmp	r6, r2
 800d6d8:	dd0d      	ble.n	800d6f6 <scalbn+0x7e>
 800d6da:	2d00      	cmp	r5, #0
 800d6dc:	a11c      	add	r1, pc, #112	; (adr r1, 800d750 <scalbn+0xd8>)
 800d6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e2:	da02      	bge.n	800d6ea <scalbn+0x72>
 800d6e4:	a11c      	add	r1, pc, #112	; (adr r1, 800d758 <scalbn+0xe0>)
 800d6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ea:	a319      	add	r3, pc, #100	; (adr r3, 800d750 <scalbn+0xd8>)
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	f7f2 ff92 	bl	8000618 <__aeabi_dmul>
 800d6f4:	e7e6      	b.n	800d6c4 <scalbn+0x4c>
 800d6f6:	1872      	adds	r2, r6, r1
 800d6f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d6fc:	428a      	cmp	r2, r1
 800d6fe:	dcec      	bgt.n	800d6da <scalbn+0x62>
 800d700:	2a00      	cmp	r2, #0
 800d702:	dd08      	ble.n	800d716 <scalbn+0x9e>
 800d704:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d708:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d70c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d710:	ec45 4b10 	vmov	d0, r4, r5
 800d714:	bd70      	pop	{r4, r5, r6, pc}
 800d716:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d71a:	da08      	bge.n	800d72e <scalbn+0xb6>
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	a10a      	add	r1, pc, #40	; (adr r1, 800d748 <scalbn+0xd0>)
 800d720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d724:	dac0      	bge.n	800d6a8 <scalbn+0x30>
 800d726:	a10e      	add	r1, pc, #56	; (adr r1, 800d760 <scalbn+0xe8>)
 800d728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d72c:	e7bc      	b.n	800d6a8 <scalbn+0x30>
 800d72e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d732:	3236      	adds	r2, #54	; 0x36
 800d734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d738:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d73c:	4620      	mov	r0, r4
 800d73e:	4b0c      	ldr	r3, [pc, #48]	; (800d770 <scalbn+0xf8>)
 800d740:	2200      	movs	r2, #0
 800d742:	e7d5      	b.n	800d6f0 <scalbn+0x78>
 800d744:	f3af 8000 	nop.w
 800d748:	c2f8f359 	.word	0xc2f8f359
 800d74c:	01a56e1f 	.word	0x01a56e1f
 800d750:	8800759c 	.word	0x8800759c
 800d754:	7e37e43c 	.word	0x7e37e43c
 800d758:	8800759c 	.word	0x8800759c
 800d75c:	fe37e43c 	.word	0xfe37e43c
 800d760:	c2f8f359 	.word	0xc2f8f359
 800d764:	81a56e1f 	.word	0x81a56e1f
 800d768:	43500000 	.word	0x43500000
 800d76c:	ffff3cb0 	.word	0xffff3cb0
 800d770:	3c900000 	.word	0x3c900000

0800d774 <with_errno>:
 800d774:	b570      	push	{r4, r5, r6, lr}
 800d776:	4604      	mov	r4, r0
 800d778:	460d      	mov	r5, r1
 800d77a:	4616      	mov	r6, r2
 800d77c:	f7fd fb62 	bl	800ae44 <__errno>
 800d780:	4629      	mov	r1, r5
 800d782:	6006      	str	r6, [r0, #0]
 800d784:	4620      	mov	r0, r4
 800d786:	bd70      	pop	{r4, r5, r6, pc}

0800d788 <xflow>:
 800d788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d78a:	4614      	mov	r4, r2
 800d78c:	461d      	mov	r5, r3
 800d78e:	b108      	cbz	r0, 800d794 <xflow+0xc>
 800d790:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d794:	e9cd 2300 	strd	r2, r3, [sp]
 800d798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d79c:	4620      	mov	r0, r4
 800d79e:	4629      	mov	r1, r5
 800d7a0:	f7f2 ff3a 	bl	8000618 <__aeabi_dmul>
 800d7a4:	2222      	movs	r2, #34	; 0x22
 800d7a6:	b003      	add	sp, #12
 800d7a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7ac:	f7ff bfe2 	b.w	800d774 <with_errno>

0800d7b0 <__math_uflow>:
 800d7b0:	b508      	push	{r3, lr}
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7b8:	f7ff ffe6 	bl	800d788 <xflow>
 800d7bc:	ec41 0b10 	vmov	d0, r0, r1
 800d7c0:	bd08      	pop	{r3, pc}

0800d7c2 <__math_oflow>:
 800d7c2:	b508      	push	{r3, lr}
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d7ca:	f7ff ffdd 	bl	800d788 <xflow>
 800d7ce:	ec41 0b10 	vmov	d0, r0, r1
 800d7d2:	bd08      	pop	{r3, pc}

0800d7d4 <__ieee754_sqrt>:
 800d7d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	ec55 4b10 	vmov	r4, r5, d0
 800d7dc:	4e67      	ldr	r6, [pc, #412]	; (800d97c <__ieee754_sqrt+0x1a8>)
 800d7de:	43ae      	bics	r6, r5
 800d7e0:	ee10 0a10 	vmov	r0, s0
 800d7e4:	ee10 2a10 	vmov	r2, s0
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	462b      	mov	r3, r5
 800d7ec:	d10d      	bne.n	800d80a <__ieee754_sqrt+0x36>
 800d7ee:	f7f2 ff13 	bl	8000618 <__aeabi_dmul>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	f7f2 fd57 	bl	80002ac <__adddf3>
 800d7fe:	4604      	mov	r4, r0
 800d800:	460d      	mov	r5, r1
 800d802:	ec45 4b10 	vmov	d0, r4, r5
 800d806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80a:	2d00      	cmp	r5, #0
 800d80c:	dc0b      	bgt.n	800d826 <__ieee754_sqrt+0x52>
 800d80e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d812:	4326      	orrs	r6, r4
 800d814:	d0f5      	beq.n	800d802 <__ieee754_sqrt+0x2e>
 800d816:	b135      	cbz	r5, 800d826 <__ieee754_sqrt+0x52>
 800d818:	f7f2 fd46 	bl	80002a8 <__aeabi_dsub>
 800d81c:	4602      	mov	r2, r0
 800d81e:	460b      	mov	r3, r1
 800d820:	f7f3 f824 	bl	800086c <__aeabi_ddiv>
 800d824:	e7eb      	b.n	800d7fe <__ieee754_sqrt+0x2a>
 800d826:	1509      	asrs	r1, r1, #20
 800d828:	f000 808d 	beq.w	800d946 <__ieee754_sqrt+0x172>
 800d82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d830:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d838:	07c9      	lsls	r1, r1, #31
 800d83a:	bf5c      	itt	pl
 800d83c:	005b      	lslpl	r3, r3, #1
 800d83e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d842:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d846:	bf58      	it	pl
 800d848:	0052      	lslpl	r2, r2, #1
 800d84a:	2500      	movs	r5, #0
 800d84c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d850:	1076      	asrs	r6, r6, #1
 800d852:	0052      	lsls	r2, r2, #1
 800d854:	f04f 0e16 	mov.w	lr, #22
 800d858:	46ac      	mov	ip, r5
 800d85a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d85e:	eb0c 0001 	add.w	r0, ip, r1
 800d862:	4298      	cmp	r0, r3
 800d864:	bfde      	ittt	le
 800d866:	1a1b      	suble	r3, r3, r0
 800d868:	eb00 0c01 	addle.w	ip, r0, r1
 800d86c:	186d      	addle	r5, r5, r1
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	f1be 0e01 	subs.w	lr, lr, #1
 800d874:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d878:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d87c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d880:	d1ed      	bne.n	800d85e <__ieee754_sqrt+0x8a>
 800d882:	4674      	mov	r4, lr
 800d884:	2720      	movs	r7, #32
 800d886:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d88a:	4563      	cmp	r3, ip
 800d88c:	eb01 000e 	add.w	r0, r1, lr
 800d890:	dc02      	bgt.n	800d898 <__ieee754_sqrt+0xc4>
 800d892:	d113      	bne.n	800d8bc <__ieee754_sqrt+0xe8>
 800d894:	4290      	cmp	r0, r2
 800d896:	d811      	bhi.n	800d8bc <__ieee754_sqrt+0xe8>
 800d898:	2800      	cmp	r0, #0
 800d89a:	eb00 0e01 	add.w	lr, r0, r1
 800d89e:	da57      	bge.n	800d950 <__ieee754_sqrt+0x17c>
 800d8a0:	f1be 0f00 	cmp.w	lr, #0
 800d8a4:	db54      	blt.n	800d950 <__ieee754_sqrt+0x17c>
 800d8a6:	f10c 0801 	add.w	r8, ip, #1
 800d8aa:	eba3 030c 	sub.w	r3, r3, ip
 800d8ae:	4290      	cmp	r0, r2
 800d8b0:	bf88      	it	hi
 800d8b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d8b6:	1a12      	subs	r2, r2, r0
 800d8b8:	440c      	add	r4, r1
 800d8ba:	46c4      	mov	ip, r8
 800d8bc:	005b      	lsls	r3, r3, #1
 800d8be:	3f01      	subs	r7, #1
 800d8c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d8c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8cc:	d1dd      	bne.n	800d88a <__ieee754_sqrt+0xb6>
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	d01b      	beq.n	800d90a <__ieee754_sqrt+0x136>
 800d8d2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d980 <__ieee754_sqrt+0x1ac>
 800d8d6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d984 <__ieee754_sqrt+0x1b0>
 800d8da:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8de:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8e2:	f7f2 fce1 	bl	80002a8 <__aeabi_dsub>
 800d8e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	4640      	mov	r0, r8
 800d8f0:	4649      	mov	r1, r9
 800d8f2:	f7f3 f90d 	bl	8000b10 <__aeabi_dcmple>
 800d8f6:	b140      	cbz	r0, 800d90a <__ieee754_sqrt+0x136>
 800d8f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d8fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800d900:	e9db 2300 	ldrd	r2, r3, [fp]
 800d904:	d126      	bne.n	800d954 <__ieee754_sqrt+0x180>
 800d906:	3501      	adds	r5, #1
 800d908:	463c      	mov	r4, r7
 800d90a:	106a      	asrs	r2, r5, #1
 800d90c:	0863      	lsrs	r3, r4, #1
 800d90e:	07e9      	lsls	r1, r5, #31
 800d910:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d914:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d918:	bf48      	it	mi
 800d91a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d91e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d922:	461c      	mov	r4, r3
 800d924:	e76d      	b.n	800d802 <__ieee754_sqrt+0x2e>
 800d926:	0ad3      	lsrs	r3, r2, #11
 800d928:	3815      	subs	r0, #21
 800d92a:	0552      	lsls	r2, r2, #21
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d0fa      	beq.n	800d926 <__ieee754_sqrt+0x152>
 800d930:	02dc      	lsls	r4, r3, #11
 800d932:	d50a      	bpl.n	800d94a <__ieee754_sqrt+0x176>
 800d934:	f1c1 0420 	rsb	r4, r1, #32
 800d938:	fa22 f404 	lsr.w	r4, r2, r4
 800d93c:	1e4d      	subs	r5, r1, #1
 800d93e:	408a      	lsls	r2, r1
 800d940:	4323      	orrs	r3, r4
 800d942:	1b41      	subs	r1, r0, r5
 800d944:	e772      	b.n	800d82c <__ieee754_sqrt+0x58>
 800d946:	4608      	mov	r0, r1
 800d948:	e7f0      	b.n	800d92c <__ieee754_sqrt+0x158>
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	3101      	adds	r1, #1
 800d94e:	e7ef      	b.n	800d930 <__ieee754_sqrt+0x15c>
 800d950:	46e0      	mov	r8, ip
 800d952:	e7aa      	b.n	800d8aa <__ieee754_sqrt+0xd6>
 800d954:	f7f2 fcaa 	bl	80002ac <__adddf3>
 800d958:	e9da 8900 	ldrd	r8, r9, [sl]
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	4640      	mov	r0, r8
 800d962:	4649      	mov	r1, r9
 800d964:	f7f3 f8ca 	bl	8000afc <__aeabi_dcmplt>
 800d968:	b120      	cbz	r0, 800d974 <__ieee754_sqrt+0x1a0>
 800d96a:	1ca0      	adds	r0, r4, #2
 800d96c:	bf08      	it	eq
 800d96e:	3501      	addeq	r5, #1
 800d970:	3402      	adds	r4, #2
 800d972:	e7ca      	b.n	800d90a <__ieee754_sqrt+0x136>
 800d974:	3401      	adds	r4, #1
 800d976:	f024 0401 	bic.w	r4, r4, #1
 800d97a:	e7c6      	b.n	800d90a <__ieee754_sqrt+0x136>
 800d97c:	7ff00000 	.word	0x7ff00000
 800d980:	20000300 	.word	0x20000300
 800d984:	20000308 	.word	0x20000308

0800d988 <_init>:
 800d988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98a:	bf00      	nop
 800d98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d98e:	bc08      	pop	{r3}
 800d990:	469e      	mov	lr, r3
 800d992:	4770      	bx	lr

0800d994 <_fini>:
 800d994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d996:	bf00      	nop
 800d998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d99a:	bc08      	pop	{r3}
 800d99c:	469e      	mov	lr, r3
 800d99e:	4770      	bx	lr
