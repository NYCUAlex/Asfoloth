
FC_SPI_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  0800d360  0800d360  0001d360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1d0  0800e1d0  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1d0  0800e1d0  0001e1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1d8  0800e1d8  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1d8  0800e1d8  0001e1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1dc  0800e1dc  0001e1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800e1e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f8  2**0
                  CONTENTS
 10 .bss          00001a94  200002f8  200002f8  000202f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d8c  20001d8c  000202f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015516  00000000  00000000  0002036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ae3  00000000  00000000  00035881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff0  00000000  00000000  00039368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c07  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028d01  00000000  00000000  0003af5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017cb4  00000000  00000000  00063c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eafd7  00000000  00000000  0007b914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005230  00000000  00000000  001668ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0016bb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d348 	.word	0x0800d348

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	0800d348 	.word	0x0800d348

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <IMU_UART_CB>:
#define IMU_DMA_TX hdma_usart3_tx


IMU imu;

void IMU_UART_CB(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <IMU_UART_CB+0x90>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d11b      	bne.n	8000ff2 <IMU_UART_CB+0x4e>
		imu.IMU_got_data = true;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <IMU_UART_CB+0x94>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		imu.IMU_data_Size = Size;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <IMU_UART_CB+0x94>)
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	f8a2 3802 	strh.w	r3, [r2, #2050]	; 0x802
		imu.no_stuck=true;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <IMU_UART_CB+0x94>)
 8000fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 8000fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fda:	4917      	ldr	r1, [pc, #92]	; (8001038 <IMU_UART_CB+0x94>)
 8000fdc:	4817      	ldr	r0, [pc, #92]	; (800103c <IMU_UART_CB+0x98>)
 8000fde:	f007 fba5 	bl	800872c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <IMU_UART_CB+0x9c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <IMU_UART_CB+0x9c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0208 	bic.w	r2, r2, #8
 8000ff0:	601a      	str	r2, [r3, #0]
//		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, IMU_dma_buffer, IMU_BUFFER_SIZE);
//		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);

	}
	//for uart data overflow safety
	if (Size >= 1024) {
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d317      	bcc.n	800102a <IMU_UART_CB+0x86>
		memset(imu.IMU_buffer, 0, IMU_BUFFER_SIZE);
 8000ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ffe:	2100      	movs	r1, #0
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <IMU_UART_CB+0x94>)
 8001002:	f009 fbab 	bl	800a75c <memset>
		imu.IMU_data_Size=0;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <IMU_UART_CB+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 800100e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <IMU_UART_CB+0x94>)
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <IMU_UART_CB+0x98>)
 8001016:	f007 fb89 	bl	800872c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <IMU_UART_CB+0x9c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <IMU_UART_CB+0x9c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0208 	bic.w	r2, r2, #8
 8001028:	601a      	str	r2, [r3, #0]

	}
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40004800 	.word	0x40004800
 8001038:	20000314 	.word	0x20000314
 800103c:	20001a78 	.word	0x20001a78
 8001040:	20001b7c 	.word	0x20001b7c

08001044 <IMU_Init>:
void imu_callback( XsensEventFlag_t event, XsensEventData_t *mtdata );
void IMU_Init() {
 8001044:	b580      	push	{r7, lr}
 8001046:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 800104a:	af00      	add	r7, sp, #0
	printf("IMU initializing......\n");
 800104c:	482c      	ldr	r0, [pc, #176]	; (8001100 <IMU_Init+0xbc>)
 800104e:	f009 faa5 	bl	800a59c <puts>
	//setup DMA
	HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 8001052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001056:	492b      	ldr	r1, [pc, #172]	; (8001104 <IMU_Init+0xc0>)
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <IMU_Init+0xc4>)
 800105a:	f007 fb67 	bl	800872c <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <IMU_Init+0xc8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <IMU_Init+0xc8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0208 	bic.w	r2, r2, #8
 800106c:	601a      	str	r2, [r3, #0]

	// Setup custom handler callbacks to catch acknowledgements from IMU
	xsens_mti_override_id_handler(MT_ACK_GOTOCONFIG, 					&handle_ack_gotoconfig);
 800106e:	4928      	ldr	r1, [pc, #160]	; (8001110 <IMU_Init+0xcc>)
 8001070:	2031      	movs	r0, #49	; 0x31
 8001072:	f001 f965 	bl	8002340 <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_GOTOMEASUREMENT,			&handle_ack_gotomeasurement);
 8001076:	4927      	ldr	r1, [pc, #156]	; (8001114 <IMU_Init+0xd0>)
 8001078:	2011      	movs	r0, #17
 800107a:	f001 f961 	bl	8002340 <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_OUTPUTCONFIGURATION, &handle_ack_outputconfiguration);
 800107e:	4926      	ldr	r1, [pc, #152]	; (8001118 <IMU_Init+0xd4>)
 8001080:	20c1      	movs	r0, #193	; 0xc1
 8001082:	f001 f95d 	bl	8002340 <xsens_mti_override_id_handler>
	xsens_mti_override_id_handler(MT_ACK_RESET, 							&myHandle_WAKEUP_cb);
 8001086:	4925      	ldr	r1, [pc, #148]	; (800111c <IMU_Init+0xd8>)
 8001088:	2041      	movs	r0, #65	; 0x41
 800108a:	f001 f959 	bl	8002340 <xsens_mti_override_id_handler>

	xsens_interface_t imu_interface_S = XSENS_INTERFACE_RX_TX( &imu_callback, &imu_send_data );
 800108e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001092:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001096:	4a22      	ldr	r2, [pc, #136]	; (8001120 <IMU_Init+0xdc>)
 8001098:	4618      	mov	r0, r3
 800109a:	4611      	mov	r1, r2
 800109c:	f640 0314 	movw	r3, #2068	; 0x814
 80010a0:	461a      	mov	r2, r3
 80010a2:	f009 fbd9 	bl	800a858 <memcpy>
	imu.imu_interface = imu_interface_S;
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <IMU_Init+0xc0>)
 80010a8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80010ac:	f6a3 0114 	subw	r1, r3, #2068	; 0x814
 80010b0:	f602 0308 	addw	r3, r2, #2056	; 0x808
 80010b4:	f640 0214 	movw	r2, #2068	; 0x814
 80010b8:	4618      	mov	r0, r3
 80010ba:	f009 fbcd 	bl	800a858 <memcpy>

	imu.ack_flag = ACK_NONE;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <IMU_Init+0xc0>)
 80010c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]

	imu.output_Hz = 100;   // Hz acceleration message rate
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <IMU_Init+0xc0>)
 80010ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ce:	2264      	movs	r2, #100	; 0x64
 80010d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	imu.imu_state = STATE_STARTUP;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <IMU_Init+0xc0>)
 80010d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010da:	2200      	movs	r2, #0
 80010dc:	775a      	strb	r2, [r3, #29]
	imu.calided = false;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <IMU_Init+0xc0>)
 80010e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	IMU_State_mechine();
 80010ea:	f000 f81d 	bl	8001128 <IMU_State_mechine>
	printf("IMU:initialization finish.\n");
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <IMU_Init+0xe0>)
 80010f0:	f009 fa54 	bl	800a59c <puts>
}
 80010f4:	bf00      	nop
 80010f6:	f607 0718 	addw	r7, r7, #2072	; 0x818
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800d360 	.word	0x0800d360
 8001104:	20000314 	.word	0x20000314
 8001108:	20001a78 	.word	0x20001a78
 800110c:	20001b7c 	.word	0x20001b7c
 8001110:	0800166d 	.word	0x0800166d
 8001114:	08001691 	.word	0x08001691
 8001118:	080016b5 	.word	0x080016b5
 800111c:	080016d9 	.word	0x080016d9
 8001120:	0800d394 	.word	0x0800d394
 8001124:	0800d378 	.word	0x0800d378

08001128 <IMU_State_mechine>:
		imu.IMU_data_Size = 0;
		imu.IMU_prc_data = true;
	}
}

void IMU_State_mechine(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

	switch (imu.imu_state) {
 800112c:	4ba8      	ldr	r3, [pc, #672]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800112e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001132:	7f5b      	ldrb	r3, [r3, #29]
 8001134:	2b08      	cmp	r3, #8
 8001136:	f200 8139 	bhi.w	80013ac <IMU_State_mechine+0x284>
 800113a:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <IMU_State_mechine+0x18>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	08001165 	.word	0x08001165
 8001144:	08001193 	.word	0x08001193
 8001148:	080011bd 	.word	0x080011bd
 800114c:	080011e5 	.word	0x080011e5
 8001150:	08001245 	.word	0x08001245
 8001154:	08001279 	.word	0x08001279
 8001158:	080012a3 	.word	0x080012a3
 800115c:	080012bd 	.word	0x080012bd
 8001160:	080012ff 	.word	0x080012ff
	case STATE_STARTUP:
		printf("IMU:Start up...\n");
 8001164:	489b      	ldr	r0, [pc, #620]	; (80013d4 <IMU_State_mechine+0x2ac>)
 8001166:	f009 fa19 	bl	800a59c <puts>
//		xsens_mti_request(&imu.imu_interface, MT_RESET);
		HAL_UARTEx_ReceiveToIdle_DMA(&IMU_uart, imu.IMU_buffer, IMU_BUFFER_SIZE);
 800116a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116e:	4998      	ldr	r1, [pc, #608]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001170:	4899      	ldr	r0, [pc, #612]	; (80013d8 <IMU_State_mechine+0x2b0>)
 8001172:	f007 fadb 	bl	800872c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&IMU_DMA_RX, DMA_IT_HT);
 8001176:	4b99      	ldr	r3, [pc, #612]	; (80013dc <IMU_State_mechine+0x2b4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b97      	ldr	r3, [pc, #604]	; (80013dc <IMU_State_mechine+0x2b4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0208 	bic.w	r2, r2, #8
 8001184:	601a      	str	r2, [r3, #0]

		imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 8001186:	4b92      	ldr	r3, [pc, #584]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118c:	2202      	movs	r2, #2
 800118e:	775a      	strb	r2, [r3, #29]
//			imu.imu_state = STATE_ACK_WAKEUP;
	break;
 8001190:	e11b      	b.n	80013ca <IMU_State_mechine+0x2a2>

	case STATE_ACK_WAKEUP:
		// Read configuration packet response
		// TODO: MDATA2 odd input handling?

		if (imu.ack_flag == ACK_WAKEUP) {
 8001192:	4b8f      	ldr	r3, [pc, #572]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001198:	7f1b      	ldrb	r3, [r3, #28]
 800119a:	2b04      	cmp	r3, #4
 800119c:	f040 810c 	bne.w	80013b8 <IMU_State_mechine+0x290>
			printf("IMU:IMU is wake...\n");
 80011a0:	488f      	ldr	r0, [pc, #572]	; (80013e0 <IMU_State_mechine+0x2b8>)
 80011a2:	f009 f9fb 	bl	800a59c <puts>
			imu.ack_flag = ACK_NONE;
 80011a6:	4b8a      	ldr	r3, [pc, #552]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80011a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ac:	2200      	movs	r2, #0
 80011ae:	771a      	strb	r2, [r3, #28]
			imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 80011b0:	4b87      	ldr	r3, [pc, #540]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80011b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b6:	2202      	movs	r2, #2
 80011b8:	775a      	strb	r2, [r3, #29]
		}
	break;
 80011ba:	e0fd      	b.n	80013b8 <IMU_State_mechine+0x290>

	case STATE_REQUEST_CONFIG_MODE:
		printf("IMU:Requesting config mode...\n");
 80011bc:	4889      	ldr	r0, [pc, #548]	; (80013e4 <IMU_State_mechine+0x2bc>)
 80011be:	f009 f9ed 	bl	800a59c <puts>
		xsens_mti_request(&imu.imu_interface, MT_GOTOCONFIG);
 80011c2:	2130      	movs	r1, #48	; 0x30
 80011c4:	4888      	ldr	r0, [pc, #544]	; (80013e8 <IMU_State_mechine+0x2c0>)
 80011c6:	f001 fa20 	bl	800260a <xsens_mti_request>
		imu.imu_state = STATE_ACK_CONFIG_MODE;
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80011cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d0:	2203      	movs	r2, #3
 80011d2:	775a      	strb	r2, [r3, #29]
//		HAL_Delay(100);
		imu.timer_timeOut = HAL_GetTick();
 80011d4:	f003 febc 	bl	8004f50 <HAL_GetTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a7d      	ldr	r2, [pc, #500]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80011dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011e0:	6213      	str	r3, [r2, #32]
	break;
 80011e2:	e0f2      	b.n	80013ca <IMU_State_mechine+0x2a2>

	case STATE_ACK_CONFIG_MODE:
		// Wait for GoToConfigAck to return
		// handle_gotoconfigack will fire when it does, and set our flag
		if (imu.ack_flag == ACK_CONFIG) {
 80011e4:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80011e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d10d      	bne.n	800120c <IMU_State_mechine+0xe4>
			printf("IMU:IMU in config mode\n");
 80011f0:	487e      	ldr	r0, [pc, #504]	; (80013ec <IMU_State_mechine+0x2c4>)
 80011f2:	f009 f9d3 	bl	800a59c <puts>
			imu.ack_flag = ACK_NONE;
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80011f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fc:	2200      	movs	r2, #0
 80011fe:	771a      	strb	r2, [r3, #28]
			imu.imu_state = STATE_SET_OUTPUT_CONFIG;
 8001200:	4b73      	ldr	r3, [pc, #460]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001206:	2204      	movs	r2, #4
 8001208:	775a      	strb	r2, [r3, #29]
		} else if (HAL_GetTick() - imu.timer_timeOut > 2000) {
			imu.timer_timeOut = HAL_GetTick();
			imu.imu_state = STATE_STARTUP;
			printf("IMU:again: ");
		}
	break;
 800120a:	e0d7      	b.n	80013bc <IMU_State_mechine+0x294>
		} else if (HAL_GetTick() - imu.timer_timeOut > 2000) {
 800120c:	f003 fea0 	bl	8004f50 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001220:	f240 80cc 	bls.w	80013bc <IMU_State_mechine+0x294>
			imu.timer_timeOut = HAL_GetTick();
 8001224:	f003 fe94 	bl	8004f50 <HAL_GetTick>
 8001228:	4603      	mov	r3, r0
 800122a:	4a69      	ldr	r2, [pc, #420]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800122c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001230:	6213      	str	r3, [r2, #32]
			imu.imu_state = STATE_STARTUP;
 8001232:	4b67      	ldr	r3, [pc, #412]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001238:	2200      	movs	r2, #0
 800123a:	775a      	strb	r2, [r3, #29]
			printf("IMU:again: ");
 800123c:	486c      	ldr	r0, [pc, #432]	; (80013f0 <IMU_State_mechine+0x2c8>)
 800123e:	f009 f947 	bl	800a4d0 <iprintf>
	break;
 8001242:	e0bb      	b.n	80013bc <IMU_State_mechine+0x294>

	case STATE_SET_OUTPUT_CONFIG:
		printf("IMU:change Rot Setting\n");
 8001244:	486b      	ldr	r0, [pc, #428]	; (80013f4 <IMU_State_mechine+0x2cc>)
 8001246:	f009 f9a9 	bl	800a59c <puts>
//			changeRotMatrix(imu, bool Frame, float x, float y, float z);
//		changeRotMatrix(1, 0, 0, 0);
		}
//		changeRotMatrix(0, 0, 1.570795, 0);

		printf("IMU:Setting output rate to %d Hz\n", imu.output_Hz);
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800124c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001250:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001254:	4619      	mov	r1, r3
 8001256:	4868      	ldr	r0, [pc, #416]	; (80013f8 <IMU_State_mechine+0x2d0>)
 8001258:	f009 f93a 	bl	800a4d0 <iprintf>
		changeOutputRate(imu.output_Hz);
 800125c:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800125e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001262:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fa5c 	bl	8001724 <changeOutputRate>



		imu.imu_state = STATE_ACK_OUTPUT_CONFIG;
 800126c:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800126e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001272:	2205      	movs	r2, #5
 8001274:	775a      	strb	r2, [r3, #29]
	break;
 8001276:	e0a8      	b.n	80013ca <IMU_State_mechine+0x2a2>

	case STATE_ACK_OUTPUT_CONFIG:
		// Read configuration packet response
		// TODO: MDATA2 odd input handling?

		if (imu.ack_flag == ACK_CONFIGURED) {
 8001278:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800127a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127e:	7f1b      	ldrb	r3, [r3, #28]
 8001280:	2b03      	cmp	r3, #3
 8001282:	f040 809d 	bne.w	80013c0 <IMU_State_mechine+0x298>
			printf("IMU:IMU confirmed config...\n");
 8001286:	485d      	ldr	r0, [pc, #372]	; (80013fc <IMU_State_mechine+0x2d4>)
 8001288:	f009 f988 	bl	800a59c <puts>
			imu.imu_state = STATE_REQUEST_MEASUREMENT_MODE;
 800128c:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800128e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001292:	2206      	movs	r2, #6
 8001294:	775a      	strb	r2, [r3, #29]
			imu.ack_flag = ACK_NONE;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129c:	2200      	movs	r2, #0
 800129e:	771a      	strb	r2, [r3, #28]
		}
	break;
 80012a0:	e08e      	b.n	80013c0 <IMU_State_mechine+0x298>

	case STATE_REQUEST_MEASUREMENT_MODE:
		printf("IMU:Requesting measurement mode...\n");
 80012a2:	4857      	ldr	r0, [pc, #348]	; (8001400 <IMU_State_mechine+0x2d8>)
 80012a4:	f009 f97a 	bl	800a59c <puts>
		xsens_mti_request(&imu.imu_interface, MT_GOTOMEASUREMENT);
 80012a8:	2110      	movs	r1, #16
 80012aa:	484f      	ldr	r0, [pc, #316]	; (80013e8 <IMU_State_mechine+0x2c0>)
 80012ac:	f001 f9ad 	bl	800260a <xsens_mti_request>
		imu.imu_state = STATE_ACK_MEASUREMENT_MODE;
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80012b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b6:	2207      	movs	r2, #7
 80012b8:	775a      	strb	r2, [r3, #29]
		break;
 80012ba:	e086      	b.n	80013ca <IMU_State_mechine+0x2a2>

	case STATE_ACK_MEASUREMENT_MODE:
		// Wait x in this mode before attempting to configure different settings

		if (imu.ack_flag == ACK_MEASUREMENT) {
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80012be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c2:	7f1b      	ldrb	r3, [r3, #28]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d17d      	bne.n	80013c4 <IMU_State_mechine+0x29c>
			// Go back to the start of the settings flow
			imu.imu_state = STATE_RUNNING;
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80012ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ce:	2208      	movs	r2, #8
 80012d0:	775a      	strb	r2, [r3, #29]
			imu.ack_flag = ACK_NONE;
 80012d2:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80012d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d8:	2200      	movs	r2, #0
 80012da:	771a      	strb	r2, [r3, #28]
			printf("start running\n");
 80012dc:	4849      	ldr	r0, [pc, #292]	; (8001404 <IMU_State_mechine+0x2dc>)
 80012de:	f009 f95d 	bl	800a59c <puts>
			imu.timer_timeOut = HAL_GetTick();
 80012e2:	f003 fe35 	bl	8004f50 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a39      	ldr	r2, [pc, #228]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80012ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ee:	6213      	str	r3, [r2, #32]
			imu.no_stuck=true;
 80012f0:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80012f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
	break;
 80012fc:	e062      	b.n	80013c4 <IMU_State_mechine+0x29c>

	case STATE_RUNNING:
		if(imu.IMU_prc_data == true){
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001300:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8001304:	2b00      	cmp	r3, #0
 8001306:	d011      	beq.n	800132c <IMU_State_mechine+0x204>
			imu.timer_timeOut = HAL_GetTick();
 8001308:	f003 fe22 	bl	8004f50 <HAL_GetTick>
 800130c:	4603      	mov	r3, r0
 800130e:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001310:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001314:	6213      	str	r3, [r2, #32]
			imu.no_stuck=true;
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			imu.IMU_prc_data = false;
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 800132a:	e02a      	b.n	8001382 <IMU_State_mechine+0x25a>
		}else if((imu.no_stuck == false) && (HAL_GetTick() - imu.timer_timeOut > 2000)){
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800132e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001336:	f083 0301 	eor.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01a      	beq.n	8001376 <IMU_State_mechine+0x24e>
 8001340:	f003 fe06 	bl	8004f50 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001354:	d90f      	bls.n	8001376 <IMU_State_mechine+0x24e>

			printf("recieve error\n");
 8001356:	482c      	ldr	r0, [pc, #176]	; (8001408 <IMU_State_mechine+0x2e0>)
 8001358:	f009 f920 	bl	800a59c <puts>
			imu.imu_state = STATE_REQUEST_CONFIG_MODE;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800135e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001362:	2202      	movs	r2, #2
 8001364:	775a      	strb	r2, [r3, #29]
			imu.timer_timeOut = HAL_GetTick();
 8001366:	f003 fdf3 	bl	8004f50 <HAL_GetTick>
 800136a:	4603      	mov	r3, r0
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <IMU_State_mechine+0x2a8>)
 800136e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e005      	b.n	8001382 <IMU_State_mechine+0x25a>

		}else{
			imu.no_stuck=false;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}

		if(imu.calided == false){
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <IMU_State_mechine+0x2a8>)
 8001384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001388:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d018      	beq.n	80013c8 <IMU_State_mechine+0x2a0>
			xsens_mti_reset_orientation(&imu.imu_interface, XSENS_ORIENTATION_ALIGNMENT_RESET);
 8001396:	2104      	movs	r1, #4
 8001398:	4813      	ldr	r0, [pc, #76]	; (80013e8 <IMU_State_mechine+0x2c0>)
 800139a:	f001 f975 	bl	8002688 <xsens_mti_reset_orientation>
			imu.calided = true;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80013a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
//				imu.changeRotSetting = true;
//				imu.imu_state = STATE_REQUEST_CONFIG_MODE;
//			}
//
//		}
	break;
 80013aa:	e00d      	b.n	80013c8 <IMU_State_mechine+0x2a0>
	default:
		// Oops!
		imu.imu_state = STATE_STARTUP;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <IMU_State_mechine+0x2a8>)
 80013ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b2:	2200      	movs	r2, #0
 80013b4:	775a      	strb	r2, [r3, #29]
		break;
 80013b6:	e008      	b.n	80013ca <IMU_State_mechine+0x2a2>
	break;
 80013b8:	bf00      	nop
 80013ba:	e006      	b.n	80013ca <IMU_State_mechine+0x2a2>
	break;
 80013bc:	bf00      	nop
 80013be:	e004      	b.n	80013ca <IMU_State_mechine+0x2a2>
	break;
 80013c0:	bf00      	nop
 80013c2:	e002      	b.n	80013ca <IMU_State_mechine+0x2a2>
	break;
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <IMU_State_mechine+0x2a2>
	break;
 80013c8:	bf00      	nop
	}
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000314 	.word	0x20000314
 80013d4:	0800dba8 	.word	0x0800dba8
 80013d8:	20001a78 	.word	0x20001a78
 80013dc:	20001b7c 	.word	0x20001b7c
 80013e0:	0800dbb8 	.word	0x0800dbb8
 80013e4:	0800dbcc 	.word	0x0800dbcc
 80013e8:	20000b1c 	.word	0x20000b1c
 80013ec:	0800dbec 	.word	0x0800dbec
 80013f0:	0800dc04 	.word	0x0800dc04
 80013f4:	0800dc10 	.word	0x0800dc10
 80013f8:	0800dc28 	.word	0x0800dc28
 80013fc:	0800dc4c 	.word	0x0800dc4c
 8001400:	0800dc68 	.word	0x0800dc68
 8001404:	0800dc8c 	.word	0x0800dc8c
 8001408:	0800dc9c 	.word	0x0800dc9c

0800140c <imu_callback>:

void imu_callback(XsensEventFlag_t event, XsensEventData_t *mtdata) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b09b      	sub	sp, #108	; 0x6c
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6639      	str	r1, [r7, #96]	; 0x60
 8001416:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	switch (event) {
 800141a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800141e:	2b1c      	cmp	r3, #28
 8001420:	f200 811e 	bhi.w	8001660 <imu_callback+0x254>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <imu_callback+0x20>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	080014a1 	.word	0x080014a1
 8001430:	08001661 	.word	0x08001661
 8001434:	08001661 	.word	0x08001661
 8001438:	08001661 	.word	0x08001661
 800143c:	08001661 	.word	0x08001661
 8001440:	080014b9 	.word	0x080014b9
 8001444:	08001661 	.word	0x08001661
 8001448:	08001661 	.word	0x08001661
 800144c:	08001661 	.word	0x08001661
 8001450:	08001661 	.word	0x08001661
 8001454:	08001661 	.word	0x08001661
 8001458:	08001555 	.word	0x08001555
 800145c:	08001525 	.word	0x08001525
 8001460:	08001661 	.word	0x08001661
 8001464:	080014f5 	.word	0x080014f5
 8001468:	08001661 	.word	0x08001661
 800146c:	08001661 	.word	0x08001661
 8001470:	08001661 	.word	0x08001661
 8001474:	08001661 	.word	0x08001661
 8001478:	08001661 	.word	0x08001661
 800147c:	08001661 	.word	0x08001661
 8001480:	080015b1 	.word	0x080015b1
 8001484:	08001661 	.word	0x08001661
 8001488:	08001661 	.word	0x08001661
 800148c:	08001661 	.word	0x08001661
 8001490:	080015c9 	.word	0x080015c9
 8001494:	080015ef 	.word	0x080015ef
 8001498:	08001607 	.word	0x08001607
 800149c:	08001583 	.word	0x08001583
	case XSENS_EVT_TEMPERATURE:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT) {
 80014a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	f040 80c8 	bne.w	800163a <imu_callback+0x22e>
			imu.temp = mtdata->data.f4;
 80014aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <imu_callback+0x25c>)
 80014b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b4:	6293      	str	r3, [r2, #40]	; 0x28
//			printf("get Temp\n");
		}
	break;
 80014b6:	e0c0      	b.n	800163a <imu_callback+0x22e>

	case XSENS_EVT_QUATERNION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT4) {
 80014b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b0d      	cmp	r3, #13
 80014be:	f040 80be 	bne.w	800163e <imu_callback+0x232>
			imu.quaternionWXYZ[0] = mtdata->data.f4x4[0];
 80014c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014c6:	4a68      	ldr	r2, [pc, #416]	; (8001668 <imu_callback+0x25c>)
 80014c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014cc:	62d3      	str	r3, [r2, #44]	; 0x2c
			imu.quaternionWXYZ[1] = mtdata->data.f4x4[1];
 80014ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <imu_callback+0x25c>)
 80014d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
			imu.quaternionWXYZ[2] = mtdata->data.f4x4[2];
 80014da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a62      	ldr	r2, [pc, #392]	; (8001668 <imu_callback+0x25c>)
 80014e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014e4:	6353      	str	r3, [r2, #52]	; 0x34
			imu.quaternionWXYZ[3] = mtdata->data.f4x4[3];
 80014e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ea:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <imu_callback+0x25c>)
 80014ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f0:	6393      	str	r3, [r2, #56]	; 0x38
//			printf("get Quat\n");
		}
	break;
 80014f2:	e0a4      	b.n	800163e <imu_callback+0x232>

	case XSENS_EVT_RATE_OF_TURN:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 80014f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	f040 80a2 	bne.w	8001642 <imu_callback+0x236>
			imu.rateOfTurnXYZ[0] = mtdata->data.f4x3[0];
 80014fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001502:	4a59      	ldr	r2, [pc, #356]	; (8001668 <imu_callback+0x25c>)
 8001504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001508:	63d3      	str	r3, [r2, #60]	; 0x3c
			imu.rateOfTurnXYZ[1] = mtdata->data.f4x3[1];
 800150a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800150c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800150e:	4a56      	ldr	r2, [pc, #344]	; (8001668 <imu_callback+0x25c>)
 8001510:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
			imu.rateOfTurnXYZ[2] = mtdata->data.f4x3[2];
 8001516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a53      	ldr	r2, [pc, #332]	; (8001668 <imu_callback+0x25c>)
 800151c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
//      printf("get Rot\n");
		}
	break;
 8001522:	e08e      	b.n	8001642 <imu_callback+0x236>

	case XSENS_EVT_FREE_ACCELERATION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b0c      	cmp	r3, #12
 800152a:	f040 808c 	bne.w	8001646 <imu_callback+0x23a>
			imu.freeAccelerationXYZ[0] = mtdata->data.f4x3[0];
 800152e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001532:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <imu_callback+0x25c>)
 8001534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001538:	6493      	str	r3, [r2, #72]	; 0x48
			imu.freeAccelerationXYZ[1] = mtdata->data.f4x3[1];
 800153a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800153c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800153e:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <imu_callback+0x25c>)
 8001540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
			imu.freeAccelerationXYZ[2] = mtdata->data.f4x3[2];
 8001546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a47      	ldr	r2, [pc, #284]	; (8001668 <imu_callback+0x25c>)
 800154c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001550:	6513      	str	r3, [r2, #80]	; 0x50
//      printf("get Facc\n");
		}
	break;
 8001552:	e078      	b.n	8001646 <imu_callback+0x23a>

	case XSENS_EVT_ACCELERATION:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d176      	bne.n	800164a <imu_callback+0x23e>
			imu.accelerationXYZ[0] = mtdata->data.f4x3[0];
 800155c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800155e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001560:	4a41      	ldr	r2, [pc, #260]	; (8001668 <imu_callback+0x25c>)
 8001562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001566:	6553      	str	r3, [r2, #84]	; 0x54
			imu.accelerationXYZ[1] = mtdata->data.f4x3[1];
 8001568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800156a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800156c:	4a3e      	ldr	r2, [pc, #248]	; (8001668 <imu_callback+0x25c>)
 800156e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001572:	6593      	str	r3, [r2, #88]	; 0x58
			imu.accelerationXYZ[2] = mtdata->data.f4x3[2];
 8001574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <imu_callback+0x25c>)
 800157a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800157e:	65d3      	str	r3, [r2, #92]	; 0x5c
//       printf("get Facc\n");
		}
	break;
 8001580:	e063      	b.n	800164a <imu_callback+0x23e>

	case XSENS_EVT_GNSS_PVT_DATA:
		if (mtdata->type == XSENS_EVT_TYPE_GNSS_DATA) {
 8001582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b2d      	cmp	r3, #45	; 0x2d
 8001588:	d161      	bne.n	800164e <imu_callback+0x242>
			imu.myGnssData = gnssPvt_parse(mtdata->gnssPvtData);
 800158a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800158c:	1c9a      	adds	r2, r3, #2
 800158e:	4b36      	ldr	r3, [pc, #216]	; (8001668 <imu_callback+0x25c>)
 8001590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001594:	461c      	mov	r4, r3
 8001596:	463b      	mov	r3, r7
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f991 	bl	80018c2 <gnssPvt_parse>
 80015a0:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80015a4:	4639      	mov	r1, r7
 80015a6:	2260      	movs	r2, #96	; 0x60
 80015a8:	4618      	mov	r0, r3
 80015aa:	f009 f955 	bl	800a858 <memcpy>
//       printf("get Gnss data\n");
		}
	break;
 80015ae:	e04e      	b.n	800164e <imu_callback+0x242>

	case XSENS_EVT_STATUS_WORD:
		if (mtdata->type == XSENS_EVT_TYPE_U32) {
 80015b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d14c      	bne.n	8001652 <imu_callback+0x246>
			imu.status = mtdata->data.u4;
 80015b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015bc:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <imu_callback+0x25c>)
 80015be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
//			printf("get Sword\n");
		}
	break;
 80015c6:	e044      	b.n	8001652 <imu_callback+0x246>
//      printf("get Facc\n");
		}
	break;

	case XSENS_EVT_LAT_LON:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT2) {
 80015c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b0b      	cmp	r3, #11
 80015ce:	d142      	bne.n	8001656 <imu_callback+0x24a>
			imu.latitude = mtdata->data.f4x2[0];
 80015d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015d4:	4a24      	ldr	r2, [pc, #144]	; (8001668 <imu_callback+0x25c>)
 80015d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015da:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			imu.longitude = mtdata->data.f4x2[1];
 80015de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <imu_callback+0x25c>)
 80015e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015e8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
//			printf("get LatLon\n");
		}
	break;
 80015ec:	e033      	b.n	8001656 <imu_callback+0x24a>

	case XSENS_EVT_ALTITUDE_ELLIPSOID:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT) {
 80015ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b0a      	cmp	r3, #10
 80015f4:	d131      	bne.n	800165a <imu_callback+0x24e>
			imu.altitudeEllip = mtdata->data.f4;
 80015f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <imu_callback+0x25c>)
 80015fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001600:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
//			printf("get Alt\n");
		}
	break;
 8001604:	e029      	b.n	800165a <imu_callback+0x24e>

	case XSENS_EVT_VELOCITY_XYZ:
		if (mtdata->type == XSENS_EVT_TYPE_FLOAT3) {
 8001606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d127      	bne.n	800165e <imu_callback+0x252>
			imu.velocityXYZ[0] = mtdata->data.f4x3[0];
 800160e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <imu_callback+0x25c>)
 8001614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001618:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
			imu.velocityXYZ[1] = mtdata->data.f4x3[1];
 800161c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800161e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <imu_callback+0x25c>)
 8001622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
			imu.velocityXYZ[2] = mtdata->data.f4x3[2];
 800162a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <imu_callback+0x25c>)
 8001630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001634:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
//			printf("get Vel\n");
		}
	break;
 8001638:	e011      	b.n	800165e <imu_callback+0x252>
	break;
 800163a:	bf00      	nop
 800163c:	e010      	b.n	8001660 <imu_callback+0x254>
	break;
 800163e:	bf00      	nop
 8001640:	e00e      	b.n	8001660 <imu_callback+0x254>
	break;
 8001642:	bf00      	nop
 8001644:	e00c      	b.n	8001660 <imu_callback+0x254>
	break;
 8001646:	bf00      	nop
 8001648:	e00a      	b.n	8001660 <imu_callback+0x254>
	break;
 800164a:	bf00      	nop
 800164c:	e008      	b.n	8001660 <imu_callback+0x254>
	break;
 800164e:	bf00      	nop
 8001650:	e006      	b.n	8001660 <imu_callback+0x254>
	break;
 8001652:	bf00      	nop
 8001654:	e004      	b.n	8001660 <imu_callback+0x254>
	break;
 8001656:	bf00      	nop
 8001658:	e002      	b.n	8001660 <imu_callback+0x254>
	break;
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <imu_callback+0x254>
	break;
 800165e:	bf00      	nop

	}
}
 8001660:	bf00      	nop
 8001662:	376c      	adds	r7, #108	; 0x6c
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	20000314 	.word	0x20000314

0800166c <handle_ack_gotoconfig>:

// Command ACK callback functions
void handle_ack_gotoconfig(xsens_packet_buffer_t *packet) {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_CONFIG;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <handle_ack_gotoconfig+0x20>)
 8001676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167a:	2201      	movs	r2, #1
 800167c:	771a      	strb	r2, [r3, #28]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000314 	.word	0x20000314

08001690 <handle_ack_gotomeasurement>:

void handle_ack_gotomeasurement(xsens_packet_buffer_t *packet) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_MEASUREMENT;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <handle_ack_gotomeasurement+0x20>)
 800169a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169e:	2202      	movs	r2, #2
 80016a0:	771a      	strb	r2, [r3, #28]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000314 	.word	0x20000314

080016b4 <handle_ack_outputconfiguration>:

void handle_ack_outputconfiguration(xsens_packet_buffer_t *packet) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_CONFIGURED;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <handle_ack_outputconfiguration+0x20>)
 80016be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c2:	2203      	movs	r2, #3
 80016c4:	771a      	strb	r2, [r3, #28]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000314 	.word	0x20000314

080016d8 <myHandle_WAKEUP_cb>:

void myHandle_WAKEUP_cb(xsens_packet_buffer_t *packet) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	imu.ack_flag = ACK_WAKEUP;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <myHandle_WAKEUP_cb+0x20>)
 80016e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e6:	2204      	movs	r2, #4
 80016e8:	771a      	strb	r2, [r3, #28]
	printf("get Wake up\n");
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <myHandle_WAKEUP_cb+0x24>)
 80016ec:	f008 ff56 	bl	800a59c <puts>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000314 	.word	0x20000314
 80016fc:	0800dcac 	.word	0x0800dcac

08001700 <imu_send_data>:

// The library calls this function to send packets to the IMU
void imu_send_data( uint8_t *data, uint16_t length ) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&IMU_uart, data, length);
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	461a      	mov	r2, r3
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <imu_send_data+0x20>)
 8001714:	f006 ff8c 	bl	8008630 <HAL_UART_Transmit_DMA>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20001a78 	.word	0x20001a78

08001724 <changeOutputRate>:
		rotPacket.payload[i + 3] = rotData.data.u4;
	}
	xsens_mti_send(&imu.imu_interface, &rotPacket);
}

void changeOutputRate(int output_rate){
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	XsensFrequencyConfig_t settings[] = {
 800172c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001730:	81bb      	strh	r3, [r7, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	b29b      	uxth	r3, r3
 8001736:	81fb      	strh	r3, [r7, #14]
 8001738:	f242 0310 	movw	r3, #8208	; 0x2010
 800173c:	823b      	strh	r3, [r7, #16]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	b29b      	uxth	r3, r3
 8001742:	827b      	strh	r3, [r7, #18]
 8001744:	f248 0320 	movw	r3, #32800	; 0x8020
 8001748:	82bb      	strh	r3, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
 8001750:	f244 0330 	movw	r3, #16432	; 0x4030
 8001754:	833b      	strh	r3, [r7, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b29b      	uxth	r3, r3
 800175a:	837b      	strh	r3, [r7, #26]
 800175c:	f244 0320 	movw	r3, #16416	; 0x4020
 8001760:	83bb      	strh	r3, [r7, #28]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	b29b      	uxth	r3, r3
 8001766:	83fb      	strh	r3, [r7, #30]
 8001768:	f247 0310 	movw	r3, #28688	; 0x7010
 800176c:	843b      	strh	r3, [r7, #32]
 800176e:	2304      	movs	r3, #4
 8001770:	847b      	strh	r3, [r7, #34]	; 0x22
 8001772:	f24e 0320 	movw	r3, #57376	; 0xe020
 8001776:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	b29b      	uxth	r3, r3
 800177c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800177e:	f245 0330 	movw	r3, #20528	; 0x5030
 8001782:	853b      	strh	r3, [r7, #40]	; 0x28
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	b29b      	uxth	r3, r3
 8001788:	857b      	strh	r3, [r7, #42]	; 0x2a
 800178a:	f245 0340 	movw	r3, #20544	; 0x5040
 800178e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001790:	2304      	movs	r3, #4
 8001792:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001794:	f245 0320 	movw	r3, #20512	; 0x5020
 8001798:	863b      	strh	r3, [r7, #48]	; 0x30
 800179a:	2304      	movs	r3, #4
 800179c:	867b      	strh	r3, [r7, #50]	; 0x32
 800179e:	f24d 0310 	movw	r3, #53264	; 0xd010
 80017a2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	86fb      	strh	r3, [r7, #54]	; 0x36
		{ .id = XDI_ALTITUDE_ELLIPSOID, .frequency = 4 },
		{ .id =	XDI_VELOCITY_XYZ, 			.frequency = output_rate },
//		  { .id = XSENS_IDENTIFIER_FORMAT(XDI_QUATERNION, XSENS_FLOAT_FIXED1220, XSENS_COORD_ENU), .frequency = 100 },
	};

	xsens_mti_set_configuration(&imu.imu_interface, settings, XSENS_ARR_ELEM(settings));
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	220b      	movs	r2, #11
 80017b0:	4619      	mov	r1, r3
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <changeOutputRate+0x9c>)
 80017b4:	f000 ffad 	bl	8002712 <xsens_mti_set_configuration>

}
 80017b8:	bf00      	nop
 80017ba:	3738      	adds	r7, #56	; 0x38
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000b1c 	.word	0x20000b1c

080017c4 <f32_to_f16>:
 *      Author: liu willy
 */

#include "IMU_rel/float16Tool.h"

void f32_to_f16(f32_t *fIn, f16_t *u){
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
    f32_t f32inf = { 255UL << 23 };
 80017ce:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80017d2:	617b      	str	r3, [r7, #20]
    f32_t f16inf = { 31UL << 23 };
 80017d4:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 80017d8:	613b      	str	r3, [r7, #16]
    f32_t magic = { 15UL << 23 };
 80017da:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 80017de:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000U;
 80017e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017e4:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = ~0xFFFU;
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <f32_to_f16+0xb0>)
 80017e8:	61fb      	str	r3, [r7, #28]

    f32_t in;
    in.f = fIn->f;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u32 & sign_mask;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	6a3a      	ldr	r2, [r7, #32]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
    in.u32 ^= sign;
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4053      	eors	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (in.u32 >= f32inf.u32)
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	d30a      	bcc.n	8001822 <f32_to_f16+0x5e>
    {
        out = (in.u32 > f32inf.u32) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	d902      	bls.n	800181a <f32_to_f16+0x56>
 8001814:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001818:	e001      	b.n	800181e <f32_to_f16+0x5a>
 800181a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800181e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001820:	e018      	b.n	8001854 <f32_to_f16+0x90>
    }
    else
    {
        in.u32 &= round_mask;
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4013      	ands	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 800182a:	ed97 7a02 	vldr	s14, [r7, #8]
 800182e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u32 -= round_mask;
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	60bb      	str	r3, [r7, #8]
        if (in.u32 > f16inf.u32)
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	429a      	cmp	r2, r3
 8001848:	d901      	bls.n	800184e <f32_to_f16+0x8a>
        {
            in.u32 = f16inf.u32;
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u32 >> 13);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	0b5b      	lsrs	r3, r3, #13
 8001852:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    out |= (uint16_t)(sign >> 16);
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	b29a      	uxth	r2, r3
 800185a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800185c:	4313      	orrs	r3, r2
 800185e:	84fb      	strh	r3, [r7, #38]	; 0x26
    u->u16 = out;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001864:	801a      	strh	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	372c      	adds	r7, #44	; 0x2c
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	fffff000 	.word	0xfffff000

08001878 <makeNum>:
 *      Author: liu willy
 */

#include "IMU_rel/gnssPvtDataParser.h"

uint32_t makeNum(const uint8_t pvtDataStr[], uint8_t num, uint8_t offset){
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
 8001884:	4613      	mov	r3, r2
 8001886:	70bb      	strb	r3, [r7, #2]
    uint32_t result=0;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < num; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	e00c      	b.n	80018ac <makeNum+0x34>
    {
        result = (result<<8) | pvtDataStr[i+offset];
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	78b9      	ldrb	r1, [r7, #2]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	440a      	add	r2, r1
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	440a      	add	r2, r1
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < num; i++)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3ee      	bcc.n	8001892 <makeNum+0x1a>
    }
    return result;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <gnssPvt_parse>:

GnssPvtData_t gnssPvt_parse(const uint8_t pvtDataStr[]){
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b09a      	sub	sp, #104	; 0x68
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
    GnssPvtData_t pvtDataOut={0};
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	2260      	movs	r2, #96	; 0x60
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f008 ff41 	bl	800a75c <memset>
    pvtDataOut.itow         = (makeNum(pvtDataStr, 4, 0));
 80018da:	2200      	movs	r2, #0
 80018dc:	2104      	movs	r1, #4
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f7ff ffca 	bl	8001878 <makeNum>
 80018e4:	4603      	mov	r3, r0
 80018e6:	60bb      	str	r3, [r7, #8]
    pvtDataOut.year         = (makeNum(pvtDataStr, 2, 4));
 80018e8:	2204      	movs	r2, #4
 80018ea:	2102      	movs	r1, #2
 80018ec:	6838      	ldr	r0, [r7, #0]
 80018ee:	f7ff ffc3 	bl	8001878 <makeNum>
 80018f2:	4603      	mov	r3, r0
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	81bb      	strh	r3, [r7, #12]
    pvtDataOut.month        = (makeNum(pvtDataStr, 1, 6));
 80018f8:	2206      	movs	r2, #6
 80018fa:	2101      	movs	r1, #1
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f7ff ffbb 	bl	8001878 <makeNum>
 8001902:	4603      	mov	r3, r0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	73bb      	strb	r3, [r7, #14]
    pvtDataOut.day          = (makeNum(pvtDataStr, 1, 7));
 8001908:	2207      	movs	r2, #7
 800190a:	2101      	movs	r1, #1
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f7ff ffb3 	bl	8001878 <makeNum>
 8001912:	4603      	mov	r3, r0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	73fb      	strb	r3, [r7, #15]
    pvtDataOut.hour         = (makeNum(pvtDataStr, 1, 8));
 8001918:	2208      	movs	r2, #8
 800191a:	2101      	movs	r1, #1
 800191c:	6838      	ldr	r0, [r7, #0]
 800191e:	f7ff ffab 	bl	8001878 <makeNum>
 8001922:	4603      	mov	r3, r0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	743b      	strb	r3, [r7, #16]
    pvtDataOut.minute       = (makeNum(pvtDataStr, 1, 9));
 8001928:	2209      	movs	r2, #9
 800192a:	2101      	movs	r1, #1
 800192c:	6838      	ldr	r0, [r7, #0]
 800192e:	f7ff ffa3 	bl	8001878 <makeNum>
 8001932:	4603      	mov	r3, r0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	747b      	strb	r3, [r7, #17]
    pvtDataOut.second       = (makeNum(pvtDataStr, 1, 10));
 8001938:	220a      	movs	r2, #10
 800193a:	2101      	movs	r1, #1
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f7ff ff9b 	bl	8001878 <makeNum>
 8001942:	4603      	mov	r3, r0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	74bb      	strb	r3, [r7, #18]
    pvtDataOut.valid        = (makeNum(pvtDataStr, 1, 11));
 8001948:	220b      	movs	r2, #11
 800194a:	2101      	movs	r1, #1
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f7ff ff93 	bl	8001878 <makeNum>
 8001952:	4603      	mov	r3, r0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	74fb      	strb	r3, [r7, #19]
    pvtDataOut.tAcc         = (makeNum(pvtDataStr, 4, 12));
 8001958:	220c      	movs	r2, #12
 800195a:	2104      	movs	r1, #4
 800195c:	6838      	ldr	r0, [r7, #0]
 800195e:	f7ff ff8b 	bl	8001878 <makeNum>
 8001962:	4603      	mov	r3, r0
 8001964:	617b      	str	r3, [r7, #20]
    pvtDataOut.nano         = (makeNum(pvtDataStr, 4, 16));
 8001966:	2210      	movs	r2, #16
 8001968:	2104      	movs	r1, #4
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f7ff ff84 	bl	8001878 <makeNum>
 8001970:	4603      	mov	r3, r0
 8001972:	61bb      	str	r3, [r7, #24]
    pvtDataOut.fixtype      = (makeNum(pvtDataStr, 1, 20));
 8001974:	2214      	movs	r2, #20
 8001976:	2101      	movs	r1, #1
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7ff ff7d 	bl	8001878 <makeNum>
 800197e:	4603      	mov	r3, r0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	773b      	strb	r3, [r7, #28]
    pvtDataOut.flags        = (makeNum(pvtDataStr, 1, 21));
 8001984:	2215      	movs	r2, #21
 8001986:	2101      	movs	r1, #1
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7ff ff75 	bl	8001878 <makeNum>
 800198e:	4603      	mov	r3, r0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	777b      	strb	r3, [r7, #29]
    pvtDataOut.numSV        = (makeNum(pvtDataStr, 1, 22));
 8001994:	2216      	movs	r2, #22
 8001996:	2101      	movs	r1, #1
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7ff ff6d 	bl	8001878 <makeNum>
 800199e:	4603      	mov	r3, r0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	77bb      	strb	r3, [r7, #30]
    pvtDataOut.Reserved1    = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	77fb      	strb	r3, [r7, #31]
    pvtDataOut.longitude    = (makeNum(pvtDataStr, 4, 24));
 80019a8:	2218      	movs	r2, #24
 80019aa:	2104      	movs	r1, #4
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f7ff ff63 	bl	8001878 <makeNum>
 80019b2:	4603      	mov	r3, r0
 80019b4:	623b      	str	r3, [r7, #32]
    pvtDataOut.latitude     = (makeNum(pvtDataStr, 4, 28));
 80019b6:	221c      	movs	r2, #28
 80019b8:	2104      	movs	r1, #4
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f7ff ff5c 	bl	8001878 <makeNum>
 80019c0:	4603      	mov	r3, r0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    pvtDataOut.height       = (makeNum(pvtDataStr, 4, 32));
 80019c4:	2220      	movs	r2, #32
 80019c6:	2104      	movs	r1, #4
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7ff ff55 	bl	8001878 <makeNum>
 80019ce:	4603      	mov	r3, r0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    pvtDataOut.hMSL         = (makeNum(pvtDataStr, 4, 36));
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	2104      	movs	r1, #4
 80019d6:	6838      	ldr	r0, [r7, #0]
 80019d8:	f7ff ff4e 	bl	8001878 <makeNum>
 80019dc:	4603      	mov	r3, r0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    pvtDataOut.hAcc         = (makeNum(pvtDataStr, 4, 40));
 80019e0:	2228      	movs	r2, #40	; 0x28
 80019e2:	2104      	movs	r1, #4
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff ff47 	bl	8001878 <makeNum>
 80019ea:	4603      	mov	r3, r0
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
    pvtDataOut.vAcc         = (makeNum(pvtDataStr, 4, 44));
 80019ee:	222c      	movs	r2, #44	; 0x2c
 80019f0:	2104      	movs	r1, #4
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f7ff ff40 	bl	8001878 <makeNum>
 80019f8:	4603      	mov	r3, r0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
    pvtDataOut.velN         = (makeNum(pvtDataStr, 4, 48));
 80019fc:	2230      	movs	r2, #48	; 0x30
 80019fe:	2104      	movs	r1, #4
 8001a00:	6838      	ldr	r0, [r7, #0]
 8001a02:	f7ff ff39 	bl	8001878 <makeNum>
 8001a06:	4603      	mov	r3, r0
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
    pvtDataOut.velE         = (makeNum(pvtDataStr, 4, 52));
 8001a0a:	2234      	movs	r2, #52	; 0x34
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	6838      	ldr	r0, [r7, #0]
 8001a10:	f7ff ff32 	bl	8001878 <makeNum>
 8001a14:	4603      	mov	r3, r0
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
    pvtDataOut.velD         = (makeNum(pvtDataStr, 4, 56));
 8001a18:	2238      	movs	r2, #56	; 0x38
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	6838      	ldr	r0, [r7, #0]
 8001a1e:	f7ff ff2b 	bl	8001878 <makeNum>
 8001a22:	4603      	mov	r3, r0
 8001a24:	643b      	str	r3, [r7, #64]	; 0x40
    pvtDataOut.gSpeed       = (makeNum(pvtDataStr, 4, 60));
 8001a26:	223c      	movs	r2, #60	; 0x3c
 8001a28:	2104      	movs	r1, #4
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f7ff ff24 	bl	8001878 <makeNum>
 8001a30:	4603      	mov	r3, r0
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
    pvtDataOut.headMot      = (makeNum(pvtDataStr, 4, 64));
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	2104      	movs	r1, #4
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f7ff ff1d 	bl	8001878 <makeNum>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
    pvtDataOut.sAcc         = (makeNum(pvtDataStr, 4, 68));
 8001a42:	2244      	movs	r2, #68	; 0x44
 8001a44:	2104      	movs	r1, #4
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f7ff ff16 	bl	8001878 <makeNum>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    pvtDataOut.headAcc      = (makeNum(pvtDataStr, 4, 72));
 8001a50:	2248      	movs	r2, #72	; 0x48
 8001a52:	2104      	movs	r1, #4
 8001a54:	6838      	ldr	r0, [r7, #0]
 8001a56:	f7ff ff0f 	bl	8001878 <makeNum>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	653b      	str	r3, [r7, #80]	; 0x50
    pvtDataOut.headVeh      = (makeNum(pvtDataStr, 4, 76));
 8001a5e:	224c      	movs	r2, #76	; 0x4c
 8001a60:	2104      	movs	r1, #4
 8001a62:	6838      	ldr	r0, [r7, #0]
 8001a64:	f7ff ff08 	bl	8001878 <makeNum>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	657b      	str	r3, [r7, #84]	; 0x54
    pvtDataOut.gdop         = (makeNum(pvtDataStr, 2, 80));
 8001a6c:	2250      	movs	r2, #80	; 0x50
 8001a6e:	2102      	movs	r1, #2
 8001a70:	6838      	ldr	r0, [r7, #0]
 8001a72:	f7ff ff01 	bl	8001878 <makeNum>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    pvtDataOut.pdop         = (makeNum(pvtDataStr, 2, 82));
 8001a7e:	2252      	movs	r2, #82	; 0x52
 8001a80:	2102      	movs	r1, #2
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	f7ff fef8 	bl	8001878 <makeNum>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    pvtDataOut.tdop         = (makeNum(pvtDataStr, 2, 84));
 8001a90:	2254      	movs	r2, #84	; 0x54
 8001a92:	2102      	movs	r1, #2
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff feef 	bl	8001878 <makeNum>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    pvtDataOut.vdop         = (makeNum(pvtDataStr, 2, 86));
 8001aa2:	2256      	movs	r2, #86	; 0x56
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f7ff fee6 	bl	8001878 <makeNum>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pvtDataOut.hdop         = (makeNum(pvtDataStr, 2, 88));
 8001ab4:	2258      	movs	r2, #88	; 0x58
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f7ff fedd 	bl	8001878 <makeNum>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    pvtDataOut.ndop         = (makeNum(pvtDataStr, 2, 90));
 8001ac6:	225a      	movs	r2, #90	; 0x5a
 8001ac8:	2102      	movs	r1, #2
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f7ff fed4 	bl	8001878 <makeNum>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    pvtDataOut.edop         = (makeNum(pvtDataStr, 2, 92));
 8001ad8:	225c      	movs	r2, #92	; 0x5c
 8001ada:	2102      	movs	r1, #2
 8001adc:	6838      	ldr	r0, [r7, #0]
 8001ade:	f7ff fecb 	bl	8001878 <makeNum>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    return pvtDataOut;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	2260      	movs	r2, #96	; 0x60
 8001af4:	4619      	mov	r1, r3
 8001af6:	f008 feaf 	bl	800a858 <memcpy>
}
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	3768      	adds	r7, #104	; 0x68
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <xsens_mdata2_process>:
// MData2 packets have a series of smaller structures of data
// This handler walks through the buffer, identifies the XDA type from two bytes
// Then applies relevant conversions back into native types/structures as necessary
// Packets don't have a fixed number of child elements
void xsens_mdata2_process( xsens_packet_buffer_t *packet, callback_event_t evt_cb )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0c4      	sub	sp, #272	; 0x110
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b12:	6018      	str	r0, [r3, #0]
 8001b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b1c:	6019      	str	r1, [r3, #0]
    mdata2_parser_state_t md2_state      = XDI_PARSE_ID_B1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    mdata2_packet_t       output         = { 0 };
 8001b24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001b32:	461a      	mov	r2, r3
 8001b34:	2100      	movs	r1, #0
 8001b36:	f008 fe11 	bl	800a75c <memset>
    uint8_t               bytes_consumed = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

    // Walk through the packet and run a tiny statemachine
    // to parse the sub-fields
    for( uint16_t i = 0; i < packet->length; i++ )
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001b46:	e09e      	b.n	8001c86 <xsens_mdata2_process+0x182>
    {
        switch( md2_state )
 8001b48:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	f200 8085 	bhi.w	8001c5c <xsens_mdata2_process+0x158>
 8001b52:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <xsens_mdata2_process+0x54>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001b93 	.word	0x08001b93
 8001b60:	08001bc7 	.word	0x08001bc7
 8001b64:	08001beb 	.word	0x08001beb
        {
            case XDI_PARSE_ID_B1:
                // High byte
                output.id = ( uint16_t )( (uint16_t)packet->payload[i] << 8u );
 8001b68:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001b6c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b70:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	791b      	ldrb	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b88:	801a      	strh	r2, [r3, #0]
                md2_state = XDI_PARSE_ID_B2;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001b90:	e074      	b.n	8001c7c <xsens_mdata2_process+0x178>

            case XDI_PARSE_ID_B2:
                // Low byte
                output.id |= ( uint16_t )( (uint16_t)packet->payload[i] );
 8001b92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001ba0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001ba4:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001ba8:	6809      	ldr	r1, [r1, #0]
 8001baa:	440b      	add	r3, r1
 8001bac:	791b      	ldrb	r3, [r3, #4]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bbc:	801a      	strh	r2, [r3, #0]
                md2_state = XDI_PARSE_LENGTH;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001bc4:	e05a      	b.n	8001c7c <xsens_mdata2_process+0x178>

            case XDI_PARSE_LENGTH:
                // Length is one byte
                output.length = packet->payload[i];
 8001bc6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001bca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bce:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	791a      	ldrb	r2, [r3, #4]
 8001bd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001be0:	709a      	strb	r2, [r3, #2]
                md2_state     = XDI_PARSE_DATA;
 8001be2:	2303      	movs	r3, #3
 8001be4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                break;
 8001be8:	e048      	b.n	8001c7c <xsens_mdata2_process+0x178>

            case XDI_PARSE_DATA:
                // Copy data across
                output.payload[bytes_consumed] = packet->payload[i];
 8001bea:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001bee:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001bf2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001bf6:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	440a      	add	r2, r1
 8001bfe:	7911      	ldrb	r1, [r2, #4]
 8001c00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c04:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001c08:	4413      	add	r3, r2
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	70da      	strb	r2, [r3, #3]
                bytes_consumed++;
 8001c0e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001c12:	3301      	adds	r3, #1
 8001c14:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

                // Once the field's data been copied to our sub-buffer,
                // handle it
                if( bytes_consumed >= output.length )
 8001c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c20:	789b      	ldrb	r3, [r3, #2]
 8001c22:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d327      	bcc.n	8001c7a <xsens_mdata2_process+0x176>
                {
                    // Using the isolated field, search for matching XID
                    // and then convert payloads to LE & structured data
                    xsens_mdata2_decode_field( &output, evt_cb );
 8001c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c32:	f107 0208 	add.w	r2, r7, #8
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f000 f835 	bl	8001ca8 <xsens_mdata2_decode_field>

                    // Cleanup our state before parsing remaining fields
                    md2_state      = XDI_PARSE_ID_B1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                    bytes_consumed = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
                    memset( &output, 0, sizeof( mdata2_packet_t ) );
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f008 fd81 	bl	800a75c <memset>
                }
                break;
 8001c5a:	e00e      	b.n	8001c7a <xsens_mdata2_process+0x176>

            default:
                // Case switch should be an exhaustive match?
                // Reset state?
                md2_state      = XDI_PARSE_ID_B1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                bytes_consumed = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
                memset( &output, 0, sizeof( mdata2_packet_t ) );
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 fd72 	bl	800a75c <memset>
                break;
 8001c78:	e000      	b.n	8001c7c <xsens_mdata2_process+0x178>
                break;
 8001c7a:	bf00      	nop
    for( uint16_t i = 0; i < packet->length; i++ )
 8001c7c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001c80:	3301      	adds	r3, #1
 8001c82:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001c86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	885b      	ldrh	r3, [r3, #2]
 8001c92:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8001c96:	429a      	cmp	r2, r3
 8001c98:	f4ff af56 	bcc.w	8001b48 <xsens_mdata2_process+0x44>
        }
    }

    // Finished MData2 parsing in payload
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <xsens_mdata2_decode_field>:
};

// With the 'isolated' field from the rest of the payload,
// convert to LE and pass to user cb in a union
void xsens_mdata2_decode_field( mdata2_packet_t *output, callback_event_t evt_cb )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0b2      	sub	sp, #200	; 0xc8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
    XsensEventData_t             value       = { 0 };
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	22b0      	movs	r2, #176	; 0xb0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f008 fd4e 	bl	800a75c <memset>
    const mdata2_decode_rules_t *decode_rule = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    enum XSENS_FLOAT_TYPE number_precision = XSENS_IDENTIFIER_FORMAT_GET_PRECISION( output->id );
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
    enum XSENS_COORDINATE_SYSTEM coordinate_system = XSENS_IDENTIFIER_FORMAT_GET_COORD_SYSTEM( output->id );
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
    uint16_t id_simplifed = XSENS_IDENTIFIER_FORMAT_SIMPLIFY( output->id );
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f023 030f 	bic.w	r3, r3, #15
 8001cea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    
    // Find the matching XID in the table
    uint8_t table_length = sizeof( xid_decode_table ) / sizeof( mdata2_decode_rules_t );
 8001cee:	231d      	movs	r3, #29
 8001cf0:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
    for( uint8_t i = 0; i < table_length; i++ )
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001cfa:	e015      	b.n	8001d28 <xsens_mdata2_decode_field+0x80>
    {
        if( xid_decode_table[i].xid == id_simplifed )
 8001cfc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001d00:	4ad6      	ldr	r2, [pc, #856]	; (800205c <xsens_mdata2_decode_field+0x3b4>)
 8001d02:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d107      	bne.n	8001d1e <xsens_mdata2_decode_field+0x76>
        {
            decode_rule = &xid_decode_table[i];
 8001d0e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4ad1      	ldr	r2, [pc, #836]	; (800205c <xsens_mdata2_decode_field+0x3b4>)
 8001d16:	4413      	add	r3, r2
 8001d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            break;
 8001d1c:	e00a      	b.n	8001d34 <xsens_mdata2_decode_field+0x8c>
    for( uint8_t i = 0; i < table_length; i++ )
 8001d1e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001d28:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8001d2c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3e3      	bcc.n	8001cfc <xsens_mdata2_decode_field+0x54>
        }
    }

    // Apply post-processing (BE->LE) strategy specific to the packet type
    if( decode_rule )
 8001d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 82fd 	beq.w	8002338 <xsens_mdata2_decode_field+0x690>
    {


    	if(decode_rule->xid == XDI_GNSS_PVT_DATA){
 8001d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f247 0210 	movw	r2, #28688	; 0x7010
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d11b      	bne.n	8001d84 <xsens_mdata2_decode_field+0xdc>
    		value.type = decode_rule->type;
 8001d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d50:	78db      	ldrb	r3, [r3, #3]
 8001d52:	723b      	strb	r3, [r7, #8]
				value.coord_ref = coordinate_system;
 8001d54:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001d58:	727b      	strb	r3, [r7, #9]
    		memcpy(value.gnssPvtData, output->payload, 94);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	1cd9      	adds	r1, r3, #3
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	3302      	adds	r3, #2
 8001d64:	225e      	movs	r2, #94	; 0x5e
 8001d66:	4618      	mov	r0, r3
 8001d68:	f008 fd76 	bl	800a858 <memcpy>

				// Call the user-callback with the transformed data
				if( evt_cb )
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <xsens_mdata2_decode_field+0xdc>
				{
						evt_cb( decode_rule->event, &value );
 8001d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d76:	789a      	ldrb	r2, [r3, #2]
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4798      	blx	r3
 8001d82:	e2d9      	b.n	8002338 <xsens_mdata2_decode_field+0x690>
						return;
				}
    	}

        // The structure describes the typical type
        value.type = decode_rule->type;
 8001d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d88:	78db      	ldrb	r3, [r3, #3]
 8001d8a:	723b      	strb	r3, [r7, #8]

        //  For situations where non-single precision is used, apply an offset to the enum
        //  to correctly describe the type as fixed-precision or double, etc
        if( number_precision )
 8001d8c:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01c      	beq.n	8001dce <xsens_mdata2_decode_field+0x126>
        {
            if( decode_rule->type < XSENS_EVT_TYPE_FLOAT )
 8001d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d98:	78db      	ldrb	r3, [r3, #3]
 8001d9a:	2b09      	cmp	r3, #9
 8001d9c:	d80a      	bhi.n	8001db4 <xsens_mdata2_decode_field+0x10c>
            {
                // Enum offset doesn't apply cleanly for non-float default values
                // So we 'zero' out the table's value, and use the precision offset to get
                // the single-value type field of that type
                value.type = XSENS_EVT_TYPE_FLOAT + ( number_precision * 10 );
 8001d9e:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001da2:	3301      	adds	r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	723b      	strb	r3, [r7, #8]
 8001db2:	e00c      	b.n	8001dce <xsens_mdata2_decode_field+0x126>
            }
            else
            {
                value.type = decode_rule->type + ( number_precision * 10 );
 8001db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db8:	78da      	ldrb	r2, [r3, #3]
 8001dba:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	0089      	lsls	r1, r1, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	723b      	strb	r3, [r7, #8]
            }
        }

        // Provide the local tangent plane coordinate scheme in the callback
        value.coord_ref = coordinate_system;
 8001dce:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001dd2:	727b      	strb	r3, [r7, #9]

        // Convert BE data to LE, put it in the right union field
        switch( value.type )
 8001dd4:	7a3b      	ldrb	r3, [r7, #8]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8001dda:	f200 829f 	bhi.w	800231c <xsens_mdata2_decode_field+0x674>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <xsens_mdata2_decode_field+0x13c>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e95 	.word	0x08001e95
 8001de8:	08001e9f 	.word	0x08001e9f
 8001dec:	08001eb1 	.word	0x08001eb1
 8001df0:	0800231d 	.word	0x0800231d
 8001df4:	0800231d 	.word	0x0800231d
 8001df8:	0800231d 	.word	0x0800231d
 8001dfc:	0800231d 	.word	0x0800231d
 8001e00:	0800231d 	.word	0x0800231d
 8001e04:	0800231d 	.word	0x0800231d
 8001e08:	08001ec1 	.word	0x08001ec1
 8001e0c:	08001ed5 	.word	0x08001ed5
 8001e10:	08001efb 	.word	0x08001efb
 8001e14:	08001f33 	.word	0x08001f33
 8001e18:	08001f7d 	.word	0x08001f7d
 8001e1c:	0800231d 	.word	0x0800231d
 8001e20:	0800231d 	.word	0x0800231d
 8001e24:	0800231d 	.word	0x0800231d
 8001e28:	0800231d 	.word	0x0800231d
 8001e2c:	0800231d 	.word	0x0800231d
 8001e30:	08001ec1 	.word	0x08001ec1
 8001e34:	08001ed5 	.word	0x08001ed5
 8001e38:	08001efb 	.word	0x08001efb
 8001e3c:	08001f33 	.word	0x08001f33
 8001e40:	08001f7d 	.word	0x08001f7d
 8001e44:	0800231d 	.word	0x0800231d
 8001e48:	0800231d 	.word	0x0800231d
 8001e4c:	0800231d 	.word	0x0800231d
 8001e50:	0800231d 	.word	0x0800231d
 8001e54:	0800231d 	.word	0x0800231d
 8001e58:	08002021 	.word	0x08002021
 8001e5c:	08002035 	.word	0x08002035
 8001e60:	08002061 	.word	0x08002061
 8001e64:	0800209d 	.word	0x0800209d
 8001e68:	080020ed 	.word	0x080020ed
 8001e6c:	0800231d 	.word	0x0800231d
 8001e70:	0800231d 	.word	0x0800231d
 8001e74:	0800231d 	.word	0x0800231d
 8001e78:	0800231d 	.word	0x0800231d
 8001e7c:	0800231d 	.word	0x0800231d
 8001e80:	080021a1 	.word	0x080021a1
 8001e84:	080021b5 	.word	0x080021b5
 8001e88:	080021dd 	.word	0x080021dd
 8001e8c:	08002219 	.word	0x08002219
 8001e90:	08002269 	.word	0x08002269
        {
            case XSENS_EVT_TYPE_U8:
                value.data.u1 = output->payload[0];
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                break;
 8001e9c:	e241      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_U16:
                value.data.u2 = xsens_coalesce_16BE_16LE( &output->payload[0] );
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fda6 	bl	80029f4 <xsens_coalesce_16BE_16LE>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                break;
 8001eae:	e238      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_U32:
                value.data.u4 = xsens_coalesce_32BE_32LE( &output->payload[0] );
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3303      	adds	r3, #3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fdb2 	bl	8002a1e <xsens_coalesce_32BE_32LE>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8001ebe:	e230      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT:
            case XSENS_EVT_TYPE_1220FP:
                value.data.f4 = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fdc6 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001eca:	eef0 7a40 	vmov.f32	s15, s0
 8001ece:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                break;
 8001ed2:	e226      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT2:
            case XSENS_EVT_TYPE_1220FP2:
                value.data.f4x2[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fdbc 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001ede:	eef0 7a40 	vmov.f32	s15, s0
 8001ee2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x2[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3307      	adds	r3, #7
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fdb3 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001ef0:	eef0 7a40 	vmov.f32	s15, s0
 8001ef4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                break;
 8001ef8:	e213      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT3:
            case XSENS_EVT_TYPE_1220FP3:
                value.data.f4x3[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3303      	adds	r3, #3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fda9 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f04:	eef0 7a40 	vmov.f32	s15, s0
 8001f08:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x3[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3307      	adds	r3, #7
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fda0 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f16:	eef0 7a40 	vmov.f32	s15, s0
 8001f1a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x3[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	330b      	adds	r3, #11
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fd97 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f28:	eef0 7a40 	vmov.f32	s15, s0
 8001f2c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                break;
 8001f30:	e1f7      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT4:
            case XSENS_EVT_TYPE_1220FP4:
                value.data.f4x4[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3303      	adds	r3, #3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fd8d 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f3c:	eef0 7a40 	vmov.f32	s15, s0
 8001f40:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x4[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3307      	adds	r3, #7
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fd84 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
 8001f52:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x4[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	330b      	adds	r3, #11
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fd7b 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f60:	eef0 7a40 	vmov.f32	s15, s0
 8001f64:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                value.data.f4x4[3] = xsens_coalesce_32BE_F32LE( &output->payload[12] );
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	330f      	adds	r3, #15
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fd72 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f72:	eef0 7a40 	vmov.f32	s15, s0
 8001f76:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                break;
 8001f7a:	e1d2      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_FLOAT9:
            case XSENS_EVT_TYPE_1220FP9:
                value.data.f4x9[0] = xsens_coalesce_32BE_F32LE( &output->payload[0] );
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3303      	adds	r3, #3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fd68 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f86:	eef0 7a40 	vmov.f32	s15, s0
 8001f8a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
                value.data.f4x9[1] = xsens_coalesce_32BE_F32LE( &output->payload[4] );
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3307      	adds	r3, #7
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fd5f 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001f98:	eef0 7a40 	vmov.f32	s15, s0
 8001f9c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                value.data.f4x9[2] = xsens_coalesce_32BE_F32LE( &output->payload[8] );
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	330b      	adds	r3, #11
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fd56 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001faa:	eef0 7a40 	vmov.f32	s15, s0
 8001fae:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                value.data.f4x9[3] = xsens_coalesce_32BE_F32LE( &output->payload[12] );
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	330f      	adds	r3, #15
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fd4d 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001fbc:	eef0 7a40 	vmov.f32	s15, s0
 8001fc0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                value.data.f4x9[4] = xsens_coalesce_32BE_F32LE( &output->payload[16] );
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3313      	adds	r3, #19
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fd44 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001fce:	eef0 7a40 	vmov.f32	s15, s0
 8001fd2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
                value.data.f4x9[5] = xsens_coalesce_32BE_F32LE( &output->payload[20] );
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3317      	adds	r3, #23
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fd3b 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001fe0:	eef0 7a40 	vmov.f32	s15, s0
 8001fe4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
                value.data.f4x9[6] = xsens_coalesce_32BE_F32LE( &output->payload[24] );
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	331b      	adds	r3, #27
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fd32 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8001ff2:	eef0 7a40 	vmov.f32	s15, s0
 8001ff6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
                value.data.f4x9[7] = xsens_coalesce_32BE_F32LE( &output->payload[28] );
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	331f      	adds	r3, #31
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fd29 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
 8002008:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                value.data.f4x9[8] = xsens_coalesce_32BE_F32LE( &output->payload[32] );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3323      	adds	r3, #35	; 0x23
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fd20 	bl	8002a56 <xsens_coalesce_32BE_F32LE>
 8002016:	eef0 7a40 	vmov.f32	s15, s0
 800201a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
                break;
 800201e:	e180      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP:
                xsens_coalesce_48BE_48LE( &value.data.fp1632, &output->payload[0] );
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	1cda      	adds	r2, r3, #3
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	3368      	adds	r3, #104	; 0x68
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fd36 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                break;
 8002032:	e176      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP2:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x2[0], &output->payload[0] );
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1cda      	adds	r2, r3, #3
 8002038:	f107 0308 	add.w	r3, r7, #8
 800203c:	3368      	adds	r3, #104	; 0x68
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fd2c 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x2[1], &output->payload[6] );
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f103 0209 	add.w	r2, r3, #9
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	3370      	adds	r3, #112	; 0x70
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fd22 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                break;
 800205a:	e162      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>
 800205c:	0800dd94 	.word	0x0800dd94

            case XSENS_EVT_TYPE_1632FP3:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[0], &output->payload[0] );
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1cda      	adds	r2, r3, #3
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	3368      	adds	r3, #104	; 0x68
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fd16 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[1], &output->payload[6] );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f103 0209 	add.w	r2, r3, #9
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	3370      	adds	r3, #112	; 0x70
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fd0c 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x3[2], &output->payload[12] );
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f103 020f 	add.w	r2, r3, #15
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	3378      	adds	r3, #120	; 0x78
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fd02 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                break;
 800209a:	e142      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP4:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[0], &output->payload[0] );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1cda      	adds	r2, r3, #3
 80020a0:	f107 0308 	add.w	r3, r7, #8
 80020a4:	3368      	adds	r3, #104	; 0x68
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fcf8 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[1], &output->payload[6] );
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f103 0209 	add.w	r2, r3, #9
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	3370      	adds	r3, #112	; 0x70
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fcee 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[2], &output->payload[12] );
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f103 020f 	add.w	r2, r3, #15
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	3378      	adds	r3, #120	; 0x78
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fce4 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x4[3], &output->payload[18] );
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f103 0215 	add.w	r2, r3, #21
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	3380      	adds	r3, #128	; 0x80
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fcda 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                break;
 80020ea:	e11a      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_1632FP9:
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[0], &output->payload[0] );
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1cda      	adds	r2, r3, #3
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	3368      	adds	r3, #104	; 0x68
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fcd0 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[1], &output->payload[6] );
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 0209 	add.w	r2, r3, #9
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	3370      	adds	r3, #112	; 0x70
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fcc6 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[2], &output->payload[12] );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 020f 	add.w	r2, r3, #15
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	3378      	adds	r3, #120	; 0x78
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fcbc 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[3], &output->payload[18] );
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f103 0215 	add.w	r2, r3, #21
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	3380      	adds	r3, #128	; 0x80
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fcb2 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[4], &output->payload[24] );
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 021b 	add.w	r2, r3, #27
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	3388      	adds	r3, #136	; 0x88
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fca8 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[5], &output->payload[30] );
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	3390      	adds	r3, #144	; 0x90
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fc9e 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[6], &output->payload[36] );
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f103 0227 	add.w	r2, r3, #39	; 0x27
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	3398      	adds	r3, #152	; 0x98
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fc94 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[7], &output->payload[42] );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	33a0      	adds	r3, #160	; 0xa0
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fc8a 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                xsens_coalesce_48BE_48LE( &value.data.fp1632x9[8], &output->payload[48] );
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f103 0233 	add.w	r2, r3, #51	; 0x33
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	33a8      	adds	r3, #168	; 0xa8
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fc80 	bl	8002a9e <xsens_coalesce_48BE_48LE>
                break;
 800219e:	e0c0      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE:
                xsens_swap_endian_u64( &value.data.f8, &output->payload[0] );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	1cda      	adds	r2, r3, #3
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	3368      	adds	r3, #104	; 0x68
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fbef 	bl	8002990 <xsens_swap_endian_u64>
                break;
 80021b2:	e0b6      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE2:
                xsens_swap_endian_u64( &value.data.f8x2[0], &output->payload[0] );
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1cda      	adds	r2, r3, #3
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	3368      	adds	r3, #104	; 0x68
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fbe5 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x2[1], &output->payload[8] );
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f103 020b 	add.w	r2, r3, #11
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	3370      	adds	r3, #112	; 0x70
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fbdb 	bl	8002990 <xsens_swap_endian_u64>
                break;
 80021da:	e0a2      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE3:
                xsens_swap_endian_u64( &value.data.f8x3[0], &output->payload[0] );
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	1cda      	adds	r2, r3, #3
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	3368      	adds	r3, #104	; 0x68
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fbd1 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x3[1], &output->payload[8] );
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 020b 	add.w	r2, r3, #11
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	3370      	adds	r3, #112	; 0x70
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fbc7 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x3[2], &output->payload[16] );
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0213 	add.w	r2, r3, #19
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	3378      	adds	r3, #120	; 0x78
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fbbd 	bl	8002990 <xsens_swap_endian_u64>
                break;
 8002216:	e084      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE4:
                xsens_swap_endian_u64( &value.data.f8x4[0], &output->payload[0] );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	1cda      	adds	r2, r3, #3
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	3368      	adds	r3, #104	; 0x68
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fbb3 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[1], &output->payload[8] );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f103 020b 	add.w	r2, r3, #11
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	3370      	adds	r3, #112	; 0x70
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fba9 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[2], &output->payload[16] );
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f103 0213 	add.w	r2, r3, #19
 8002244:	f107 0308 	add.w	r3, r7, #8
 8002248:	3378      	adds	r3, #120	; 0x78
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fb9f 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x4[3], &output->payload[24] );
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f103 021b 	add.w	r2, r3, #27
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	3380      	adds	r3, #128	; 0x80
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fb95 	bl	8002990 <xsens_swap_endian_u64>
                break;
 8002266:	e05c      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            case XSENS_EVT_TYPE_DOUBLE9:
                xsens_swap_endian_u64( &value.data.f8x9[0], &output->payload[0] );
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1cda      	adds	r2, r3, #3
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	3368      	adds	r3, #104	; 0x68
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fb8b 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[1], &output->payload[8] );
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f103 020b 	add.w	r2, r3, #11
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	3370      	adds	r3, #112	; 0x70
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fb81 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[2], &output->payload[16] );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0213 	add.w	r2, r3, #19
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	3378      	adds	r3, #120	; 0x78
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fb77 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[3], &output->payload[24] );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 021b 	add.w	r2, r3, #27
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	3380      	adds	r3, #128	; 0x80
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fb6d 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[4], &output->payload[32] );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	3388      	adds	r3, #136	; 0x88
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fb63 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[5], &output->payload[40] );
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	3390      	adds	r3, #144	; 0x90
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fb59 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[6], &output->payload[48] );
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f103 0233 	add.w	r2, r3, #51	; 0x33
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	3398      	adds	r3, #152	; 0x98
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fb4f 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[7], &output->payload[56] );
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	33a0      	adds	r3, #160	; 0xa0
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fb45 	bl	8002990 <xsens_swap_endian_u64>
                xsens_swap_endian_u64( &value.data.f8x9[8], &output->payload[64] );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f103 0243 	add.w	r2, r3, #67	; 0x43
 800230c:	f107 0308 	add.w	r3, r7, #8
 8002310:	33a8      	adds	r3, #168	; 0xa8
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fb3b 	bl	8002990 <xsens_swap_endian_u64>
                break;
 800231a:	e002      	b.n	8002322 <xsens_mdata2_decode_field+0x67a>

            default:
                // There's an error or not supported, return a 'null' type?
                value.type = XSENS_EVT_TYPE_NONE;
 800231c:	2300      	movs	r3, #0
 800231e:	723b      	strb	r3, [r7, #8]
                break;
 8002320:	bf00      	nop
        }

        // Call the user-callback with the transformed data
        if( evt_cb )
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <xsens_mdata2_decode_field+0x690>
        {
            evt_cb( decode_rule->event, &value );
 8002328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800232c:	789a      	ldrb	r2, [r3, #2]
 800232e:	f107 0108 	add.w	r1, r7, #8
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	4610      	mov	r0, r2
 8002336:	4798      	blx	r3
        }
    }
}
 8002338:	37c8      	adds	r7, #200	; 0xc8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <xsens_mti_override_id_handler>:
        }
    }
}

bool xsens_mti_override_id_handler( uint8_t id, callback_payload_t user_fn )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
    if( user_fn )
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <xsens_mti_override_id_handler+0x2c>
    {
        // Find the ID in the inbound handler 'jump table'
        message_handler_ref_t *handler = xsens_mti_find_inbound_handler_entry( id );
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f80f 	bl	8002378 <xsens_mti_find_inbound_handler_entry>
 800235a:	60f8      	str	r0, [r7, #12]

        if( handler )
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <xsens_mti_override_id_handler+0x2c>
        {
            handler->handler_fn = user_fn;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	605a      	str	r2, [r3, #4]
            return true;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <xsens_mti_override_id_handler+0x2e>
        }
    }

    return false;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <xsens_mti_find_inbound_handler_entry>:

message_handler_ref_t *xsens_mti_find_inbound_handler_entry( uint8_t find_id )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
    uint8_t table_length = sizeof( inbound_handler_table ) / sizeof( message_handler_ref_t );
 8002382:	2322      	movs	r3, #34	; 0x22
 8002384:	73fb      	strb	r3, [r7, #15]

    return xsens_mti_find_handler_entry(find_id, inbound_handler_table, table_length );
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	4904      	ldr	r1, [pc, #16]	; (800239c <xsens_mti_find_inbound_handler_entry+0x24>)
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f807 	bl	80023a0 <xsens_mti_find_handler_entry>
 8002392:	4603      	mov	r3, r0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000000 	.word	0x20000000

080023a0 <xsens_mti_find_handler_entry>:

message_handler_ref_t *xsens_mti_find_handler_entry( uint8_t find_id, message_handler_ref_t *entry_table, uint8_t entry_count )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71bb      	strb	r3, [r7, #6]
    for( uint8_t i = 0; i < entry_count; i++ )
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00f      	b.n	80023d6 <xsens_mti_find_handler_entry+0x36>
    {
        if( entry_table[i].id == find_id )
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	79fa      	ldrb	r2, [r7, #7]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d104      	bne.n	80023d0 <xsens_mti_find_handler_entry+0x30>
        {
            return &entry_table[i];
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	e007      	b.n	80023e0 <xsens_mti_find_handler_entry+0x40>
    for( uint8_t i = 0; i < entry_count; i++ )
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3eb      	bcc.n	80023b6 <xsens_mti_find_handler_entry+0x16>
        }
    }

    return (message_handler_ref_t *)NULL;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <xsens_mti_buffer_crc>:

uint8_t xsens_mti_buffer_crc( uint8_t *buffer, uint16_t size )
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]

    for( uint16_t i = 0; i < size; i++ )
 80023fc:	2300      	movs	r3, #0
 80023fe:	81bb      	strh	r3, [r7, #12]
 8002400:	e009      	b.n	8002416 <xsens_mti_buffer_crc+0x2a>
    {
        crc -= buffer[i];
 8002402:	89bb      	ldrh	r3, [r7, #12]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	73fb      	strb	r3, [r7, #15]
    for( uint16_t i = 0; i < size; i++ )
 8002410:	89bb      	ldrh	r3, [r7, #12]
 8002412:	3301      	adds	r3, #1
 8002414:	81bb      	strh	r3, [r7, #12]
 8002416:	89ba      	ldrh	r2, [r7, #12]
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3f1      	bcc.n	8002402 <xsens_mti_buffer_crc+0x16>
    }

    return crc;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <xsens_mti_send>:

void xsens_mti_send( xsens_interface_t *interface, xsens_packet_buffer_t *packet )
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8002432:	af00      	add	r7, sp, #0
 8002434:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002438:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800243c:	6018      	str	r0, [r3, #0]
 800243e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002442:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002446:	6019      	str	r1, [r3, #0]
    if( interface && packet )
 8002448:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800244c:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80d4 	beq.w	8002600 <xsens_mti_send+0x1d4>
 8002458:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800245c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80cc 	beq.w	8002600 <xsens_mti_send+0x1d4>
    {
        uint8_t buffer[2048] = { 0 };
 8002468:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800246c:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	3304      	adds	r3, #4
 8002476:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f008 f96d 	bl	800a75c <memset>
        uint16_t buffer_pos = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        uint8_t crc = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d

        // Preamble
        buffer[buffer_pos++] = PREAMBLE_BYTE;
 800248e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 8002498:	461a      	mov	r2, r3
 800249a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800249e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80024a2:	21fa      	movs	r1, #250	; 0xfa
 80024a4:	5499      	strb	r1, [r3, r2]

        // Device Address
        buffer[buffer_pos++] = ADDRESS_BYTE;
 80024a6:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 80024b0:	461a      	mov	r2, r3
 80024b2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80024b6:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80024ba:	21ff      	movs	r1, #255	; 0xff
 80024bc:	5499      	strb	r1, [r3, r2]

        // Message ID
        buffer[buffer_pos++] = packet->message_id;
 80024be:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 80024c8:	461a      	mov	r2, r3
 80024ca:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80024ce:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	7819      	ldrb	r1, [r3, #0]
 80024d6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80024da:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80024de:	5499      	strb	r1, [r3, r2]

        // Payload Length
        if( packet->length < 0xFF )
 80024e0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80024e4:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	885b      	ldrh	r3, [r3, #2]
 80024ec:	2bfe      	cmp	r3, #254	; 0xfe
 80024ee:	d812      	bhi.n	8002516 <xsens_mti_send+0xea>
        {
            buffer[buffer_pos++] = packet->length;
 80024f0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80024f4:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	8859      	ldrh	r1, [r3, #2]
 80024fc:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 8002506:	461a      	mov	r2, r3
 8002508:	b2c9      	uxtb	r1, r1
 800250a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800250e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002512:	5499      	strb	r1, [r3, r2]
 8002514:	e01e      	b.n	8002554 <xsens_mti_send+0x128>
        }
        else
        {
            // Extended packet handling sets the normal length byte to 255,
            // followed by two bytes of payload data
            buffer[buffer_pos++] = 0xFF;
 8002516:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	f8a7 280e 	strh.w	r2, [r7, #2062]	; 0x80e
 8002520:	461a      	mov	r2, r3
 8002522:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002526:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800252a:	21ff      	movs	r1, #255	; 0xff
 800252c:	5499      	strb	r1, [r3, r2]

            memcpy( &buffer[buffer_pos], &packet->length, 2 );
 800252e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002532:	f107 020c 	add.w	r2, r7, #12
 8002536:	4413      	add	r3, r2
 8002538:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800253c:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	3202      	adds	r2, #2
 8002544:	8812      	ldrh	r2, [r2, #0]
 8002546:	b292      	uxth	r2, r2
 8002548:	801a      	strh	r2, [r3, #0]
            buffer_pos += 2;
 800254a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800254e:	3302      	adds	r3, #2
 8002550:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        }

        // Payload Data
        if( packet->length != 0 )
 8002554:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002558:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	885b      	ldrh	r3, [r3, #2]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01e      	beq.n	80025a2 <xsens_mti_send+0x176>
        {
            memcpy( &buffer[buffer_pos], (uint8_t *)packet->payload, packet->length );
 8002564:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8002568:	f107 020c 	add.w	r2, r7, #12
 800256c:	18d0      	adds	r0, r2, r3
 800256e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002572:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	1d19      	adds	r1, r3, #4
 800257a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800257e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	885b      	ldrh	r3, [r3, #2]
 8002586:	461a      	mov	r2, r3
 8002588:	f008 f966 	bl	800a858 <memcpy>
            buffer_pos += packet->length;
 800258c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002590:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	885a      	ldrh	r2, [r3, #2]
 8002598:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800259c:	4413      	add	r3, r2
 800259e:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
        }

        // Calculate the CRC of the packet, exluding the preamble
        buffer[buffer_pos] = xsens_mti_buffer_crc( &buffer[1], buffer_pos-1 );
 80025a2:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	f8b7 480e 	ldrh.w	r4, [r7, #2062]	; 0x80e
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	3301      	adds	r3, #1
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff18 	bl	80023ec <xsens_mti_buffer_crc>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80025c4:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80025c8:	551a      	strb	r2, [r3, r4]
        buffer_pos += 1;
 80025ca:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80025ce:	3301      	adds	r3, #1
 80025d0:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e

        // Pass the buffer to the user so they can send to hardware
        if( interface->output_cb )
 80025d4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80025d8:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <xsens_mti_send+0x1d4>
        {
            interface->output_cb( buffer, buffer_pos );
 80025e6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80025ea:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80025f4:	f8b7 180e 	ldrh.w	r1, [r7, #2062]	; 0x80e
 80025f8:	f107 020c 	add.w	r2, r7, #12
 80025fc:	4610      	mov	r0, r2
 80025fe:	4798      	blx	r3
        }
    }
}
 8002600:	bf00      	nop
 8002602:	f607 0714 	addw	r7, r7, #2068	; 0x814
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <xsens_mti_request>:

void xsens_mti_request( xsens_interface_t *interface, uint8_t id )
{
 800260a:	b580      	push	{r7, lr}
 800260c:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8002610:	af00      	add	r7, sp, #0
 8002612:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002616:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800261a:	6018      	str	r0, [r3, #0]
 800261c:	460a      	mov	r2, r1
 800261e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002622:	f6a3 030d 	subw	r3, r3, #2061	; 0x80d
 8002626:	701a      	strb	r2, [r3, #0]
    xsens_packet_buffer_t packet = { 0 };
 8002628:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800262c:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002630:	4618      	mov	r0, r3
 8002632:	f640 0304 	movw	r3, #2052	; 0x804
 8002636:	461a      	mov	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f008 f88f 	bl	800a75c <memset>

    packet.message_id = id;
 800263e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002642:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002646:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800264a:	f6a2 020d 	subw	r2, r2, #2061	; 0x80d
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	701a      	strb	r2, [r3, #0]
    packet.length = 0;
 8002652:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002656:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800265a:	2200      	movs	r2, #0
 800265c:	805a      	strh	r2, [r3, #2]
    packet.payload[0] = 0;
 800265e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002662:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002666:	2200      	movs	r2, #0
 8002668:	711a      	strb	r2, [r3, #4]

    xsens_mti_send( interface, &packet );
 800266a:	f107 020c 	add.w	r2, r7, #12
 800266e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002672:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002676:	4611      	mov	r1, r2
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	f7ff fed7 	bl	800242c <xsens_mti_send>
}
 800267e:	bf00      	nop
 8002680:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <xsens_mti_reset_orientation>:
    xsens_mti_send( interface, &packet );
}


void xsens_mti_reset_orientation( xsens_interface_t *interface, XsensOrientationSetting_t code )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 800268e:	af00      	add	r7, sp, #0
 8002690:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002694:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002698:	6018      	str	r0, [r3, #0]
 800269a:	460a      	mov	r2, r1
 800269c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026a0:	f6a3 030d 	subw	r3, r3, #2061	; 0x80d
 80026a4:	701a      	strb	r2, [r3, #0]
    xsens_packet_buffer_t packet = { 0 };
 80026a6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026aa:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80026ae:	4618      	mov	r0, r3
 80026b0:	f640 0304 	movw	r3, #2052	; 0x804
 80026b4:	461a      	mov	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f008 f850 	bl	800a75c <memset>
    
    packet.message_id = MT_RESETORIENTATION;
 80026bc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026c0:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80026c4:	22a4      	movs	r2, #164	; 0xa4
 80026c6:	701a      	strb	r2, [r3, #0]
    packet.length = 2;
 80026c8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026cc:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80026d0:	2202      	movs	r2, #2
 80026d2:	805a      	strh	r2, [r3, #2]
    packet.payload[0] = 0x00;
 80026d4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026d8:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80026dc:	2200      	movs	r2, #0
 80026de:	711a      	strb	r2, [r3, #4]
    packet.payload[1] = code;
 80026e0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026e4:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80026e8:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80026ec:	f6a2 020d 	subw	r2, r2, #2061	; 0x80d
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	715a      	strb	r2, [r3, #5]

    xsens_mti_send( interface, &packet );
 80026f4:	f107 020c 	add.w	r2, r7, #12
 80026f8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80026fc:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002700:	4611      	mov	r1, r2
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	f7ff fe92 	bl	800242c <xsens_mti_send>
}
 8002708:	bf00      	nop
 800270a:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <xsens_mti_set_configuration>:

void xsens_mti_set_configuration( xsens_interface_t *interface, XsensFrequencyConfig_t config[], uint8_t num_config )
{
 8002712:	b580      	push	{r7, lr}
 8002714:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8002718:	af00      	add	r7, sp, #0
 800271a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800271e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002722:	6018      	str	r0, [r3, #0]
 8002724:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002728:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800272c:	6019      	str	r1, [r3, #0]
 800272e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002732:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002736:	701a      	strb	r2, [r3, #0]
    // No more than 32 values can be configured
    if( interface && config && num_config && num_config <= 32 )
 8002738:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800273c:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d074      	beq.n	8002830 <xsens_mti_set_configuration+0x11e>
 8002746:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800274a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d06d      	beq.n	8002830 <xsens_mti_set_configuration+0x11e>
 8002754:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002758:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d066      	beq.n	8002830 <xsens_mti_set_configuration+0x11e>
 8002762:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002766:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b20      	cmp	r3, #32
 800276e:	d85f      	bhi.n	8002830 <xsens_mti_set_configuration+0x11e>
    {
        xsens_packet_buffer_t packet = { 0 };
 8002770:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002774:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8002778:	4618      	mov	r0, r3
 800277a:	f640 0304 	movw	r3, #2052	; 0x804
 800277e:	461a      	mov	r2, r3
 8002780:	2100      	movs	r1, #0
 8002782:	f007 ffeb 	bl	800a75c <memset>
        packet.message_id = MT_SETOUTPUTCONFIGURATION;
 8002786:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800278a:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 800278e:	22c0      	movs	r2, #192	; 0xc0
 8002790:	701a      	strb	r2, [r3, #0]

        // Form a big-endian MData2 style 'packet' for each field
        //  2 bytes for ID
        //  2 bytes for frequency
        for( uint8_t i = 0; i <= num_config; i++ )
 8002792:	2300      	movs	r3, #0
 8002794:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 8002798:	e037      	b.n	800280a <xsens_mti_set_configuration+0xf8>
        {
            uint8_t buff_pos = i * 4;
 800279a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
            
            // LE to BE conversion directly into the output buffer...
            xsens_swap_endian_u16( &packet.payload[buff_pos],   (uint8_t*)&config[i].id );
 80027a4:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80027a8:	f107 0210 	add.w	r2, r7, #16
 80027ac:	4413      	add	r3, r2
 80027ae:	1d18      	adds	r0, r3, #4
 80027b0:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80027ba:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	f000 f8d0 	bl	8002968 <xsens_swap_endian_u16>
            xsens_swap_endian_u16( &packet.payload[buff_pos+2], (uint8_t*)&config[i].frequency );
 80027c8:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80027cc:	3302      	adds	r3, #2
 80027ce:	f107 0210 	add.w	r2, r7, #16
 80027d2:	4413      	add	r3, r2
 80027d4:	1d18      	adds	r0, r3, #4
 80027d6:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80027e0:	f5a2 6201 	sub.w	r2, r2, #2064	; 0x810
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	3302      	adds	r3, #2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f000 f8bc 	bl	8002968 <xsens_swap_endian_u16>
            packet.length = buff_pos;
 80027f0:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80027fa:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 80027fe:	805a      	strh	r2, [r3, #2]
        for( uint8_t i = 0; i <= num_config; i++ )
 8002800:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8002804:	3301      	adds	r3, #1
 8002806:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 800280a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800280e:	f6a3 0311 	subw	r3, r3, #2065	; 0x811
 8002812:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d9be      	bls.n	800279a <xsens_mti_set_configuration+0x88>
        }

        // TODO: refactor as a MDATA2 output problem once generation fns are implemented?
        xsens_mti_send( interface, &packet );
 800281c:	f107 0210 	add.w	r2, r7, #16
 8002820:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002824:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002828:	4611      	mov	r1, r2
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	f7ff fdfe 	bl	800242c <xsens_mti_send>
    }
}
 8002830:	bf00      	nop
 8002832:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <xsens_internal_handle_device_id>:



void xsens_internal_handle_device_id( xsens_packet_buffer_t *packet )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0ae      	sub	sp, #184	; 0xb8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    XsensEventData_t value = { 0 };
 8002844:	f107 0308 	add.w	r3, r7, #8
 8002848:	22b0      	movs	r2, #176	; 0xb0
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f007 ff85 	bl	800a75c <memset>

    if( packet->length == 4 )    // MTi 1, 10, 100
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	885b      	ldrh	r3, [r3, #2]
 8002856:	2b04      	cmp	r3, #4
 8002858:	d109      	bne.n	800286e <xsens_internal_handle_device_id+0x32>
    {
        value.type    = XSENS_EVT_TYPE_U32;
 800285a:	2303      	movs	r3, #3
 800285c:	723b      	strb	r3, [r7, #8]
        value.data.u4 = xsens_coalesce_32BE_32LE( &packet->payload[0] );
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f8db 	bl	8002a1e <xsens_coalesce_32BE_32LE>
 8002868:	4603      	mov	r3, r0
 800286a:	673b      	str	r3, [r7, #112]	; 0x70
 800286c:	e00c      	b.n	8002888 <xsens_internal_handle_device_id+0x4c>
    }
    else if( packet->length == 8 )    // MTi-600
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	885b      	ldrh	r3, [r3, #2]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d108      	bne.n	8002888 <xsens_internal_handle_device_id+0x4c>
    {
        // TODO: untested 8-byte device ID
        value.type    = XSENS_EVT_TYPE_U32;
 8002876:	2303      	movs	r3, #3
 8002878:	723b      	strb	r3, [r7, #8]
        value.data.u4 = xsens_coalesce_32BE_32LE( &packet->payload[4] );
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3308      	adds	r3, #8
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f8cd 	bl	8002a1e <xsens_coalesce_32BE_32LE>
 8002884:	4603      	mov	r3, r0
 8002886:	673b      	str	r3, [r7, #112]	; 0x70
    }

    if( most_recent_interface->event_cb )
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <xsens_internal_handle_device_id+0x74>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <xsens_internal_handle_device_id+0x6a>
    {
        most_recent_interface->event_cb( XSENS_EVT_DEVICE_ID, &value );
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <xsens_internal_handle_device_id+0x74>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800289c:	f107 0208 	add.w	r2, r7, #8
 80028a0:	4611      	mov	r1, r2
 80028a2:	2016      	movs	r0, #22
 80028a4:	4798      	blx	r3
    }
}
 80028a6:	bf00      	nop
 80028a8:	37b8      	adds	r7, #184	; 0xb8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200013fc 	.word	0x200013fc

080028b4 <xsens_internal_handle_product_code>:

void xsens_internal_handle_product_code( xsens_packet_buffer_t *packet )
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    // ASCII formatted code max 20 bytes
    // TODO: handle product code
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <xsens_internal_handle_hardware_version>:

void xsens_internal_handle_hardware_version( xsens_packet_buffer_t *packet )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    // TODO: handle product code

    //    uint8_t hw_version[2];
    //    uint16_t *hw_ptr = (uint16_t *)&hw_version;
    //    hw_ptr           = xsens_coalesce_16BE_16LE( &packet->payload[0] );
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <xsens_internal_handle_firmware_version>:

void xsens_internal_handle_firmware_version( xsens_packet_buffer_t *packet )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    // TODO: handle firmware version

    uint8_t  major    = packet->payload[0];
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	75fb      	strb	r3, [r7, #23]
    uint8_t  minor    = packet->payload[1];
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	795b      	ldrb	r3, [r3, #5]
 80028ee:	75bb      	strb	r3, [r7, #22]
    uint8_t  revision = packet->payload[2];
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	799b      	ldrb	r3, [r3, #6]
 80028f4:	757b      	strb	r3, [r7, #21]
    uint32_t build    = xsens_coalesce_32BE_32LE( &packet->payload[3] );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3307      	adds	r3, #7
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f88f 	bl	8002a1e <xsens_coalesce_32BE_32LE>
 8002900:	6138      	str	r0, [r7, #16]
    uint32_t scm      = xsens_coalesce_32BE_32LE( &packet->payload[7] );
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	330b      	adds	r3, #11
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f889 	bl	8002a1e <xsens_coalesce_32BE_32LE>
 800290c:	60f8      	str	r0, [r7, #12]
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <xsens_internal_handle_selftest_results>:

void xsens_internal_handle_selftest_results( xsens_packet_buffer_t *packet )
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
    // TODO: handle selftest results
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <xsens_internal_handle_error>:

void xsens_internal_handle_error( xsens_packet_buffer_t *packet )
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
    uint8_t error_code = packet->payload[0];
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	791b      	ldrb	r3, [r3, #4]
 8002936:	73fb      	strb	r3, [r7, #15]

        default:
            break;
    }
     */
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <xsens_internal_handle_mdata2>:

void xsens_internal_handle_mdata2( xsens_packet_buffer_t *packet )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    // MData2 packets contain 1 to n smaller packets
    // with variable length fields, see xsens_mdata2.c/.h
    xsens_mdata2_process( packet, most_recent_interface->event_cb );
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <xsens_internal_handle_mdata2+0x20>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff f8d4 	bl	8001b04 <xsens_mdata2_process>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200013fc 	.word	0x200013fc

08002968 <xsens_swap_endian_u16>:
#include "IMU_rel/xsens_utility.h"
#include "math.h"
#include "stdlib.h"

void xsens_swap_endian_u16( uint8_t *dest, uint8_t *source )
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
    dest[1] = source[0];
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3301      	adds	r3, #1
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	701a      	strb	r2, [r3, #0]
    dest[0] = source[1];
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	785a      	ldrb	r2, [r3, #1]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	701a      	strb	r2, [r3, #0]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <xsens_swap_endian_u64>:
    dest[1] = source[2];
    dest[0] = source[3];
}

void xsens_swap_endian_u64( uint8_t *dest, uint8_t *source )
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
    dest[7] = source[0];
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3307      	adds	r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	701a      	strb	r2, [r3, #0]
    dest[6] = source[1];
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3306      	adds	r3, #6
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	7852      	ldrb	r2, [r2, #1]
 80029ac:	701a      	strb	r2, [r3, #0]
    dest[5] = source[2];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3305      	adds	r3, #5
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	7892      	ldrb	r2, [r2, #2]
 80029b6:	701a      	strb	r2, [r3, #0]
    dest[4] = source[3];
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	78d2      	ldrb	r2, [r2, #3]
 80029c0:	701a      	strb	r2, [r3, #0]
    dest[3] = source[4];
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3303      	adds	r3, #3
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	7912      	ldrb	r2, [r2, #4]
 80029ca:	701a      	strb	r2, [r3, #0]
    dest[2] = source[5];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3302      	adds	r3, #2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	7952      	ldrb	r2, [r2, #5]
 80029d4:	701a      	strb	r2, [r3, #0]
    dest[1] = source[6];
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3301      	adds	r3, #1
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	7992      	ldrb	r2, [r2, #6]
 80029de:	701a      	strb	r2, [r3, #0]
    dest[0] = source[7];
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	79da      	ldrb	r2, [r3, #7]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	701a      	strb	r2, [r3, #0]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <xsens_coalesce_16BE_16LE>:

uint16_t xsens_coalesce_16BE_16LE( uint8_t *source )
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    return ( source[1] << 0 | source[0] << 8 );
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3301      	adds	r3, #1
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	b29b      	uxth	r3, r3
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <xsens_coalesce_32BE_32LE>:

uint32_t xsens_coalesce_32BE_32LE( uint8_t *source )
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
    return ( ( source[3] << 0 )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3303      	adds	r3, #3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
             | ( source[2] << 8 )
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3302      	adds	r3, #2
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	431a      	orrs	r2, r3
             | ( source[1] << 16 )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	431a      	orrs	r2, r3
             | ( source[0] << 24 ) );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	4313      	orrs	r3, r2
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <xsens_coalesce_32BE_F32LE>:

float xsens_coalesce_32BE_F32LE( uint8_t *source )
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
    float    f;
    uint8_t *f_ptr = (uint8_t *)&f;
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	60fb      	str	r3, [r7, #12]

    f_ptr[3] = source[0];
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3303      	adds	r3, #3
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	7812      	ldrb	r2, [r2, #0]
 8002a6c:	701a      	strb	r2, [r3, #0]
    f_ptr[2] = source[1];
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3302      	adds	r3, #2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	7852      	ldrb	r2, [r2, #1]
 8002a76:	701a      	strb	r2, [r3, #0]
    f_ptr[1] = source[2];
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	7892      	ldrb	r2, [r2, #2]
 8002a80:	701a      	strb	r2, [r3, #0]
    f_ptr[0] = source[3];
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	78da      	ldrb	r2, [r3, #3]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	701a      	strb	r2, [r3, #0]

    return f;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	ee07 3a90 	vmov	s15, r3
}
 8002a90:	eeb0 0a67 	vmov.f32	s0, s15
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <xsens_coalesce_48BE_48LE>:

// As per manual, big-endian 32-bit first, then BE 16-bit part i.e [b3, b2, b1, b0, b5, b4]
void xsens_coalesce_48BE_48LE( uint8_t *dest, uint8_t *source )
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
    dest[0] = source[3];
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	78da      	ldrb	r2, [r3, #3]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	701a      	strb	r2, [r3, #0]
    dest[1] = source[2];
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	7892      	ldrb	r2, [r2, #2]
 8002ab8:	701a      	strb	r2, [r3, #0]
    dest[2] = source[1];
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3302      	adds	r3, #2
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	7852      	ldrb	r2, [r2, #1]
 8002ac2:	701a      	strb	r2, [r3, #0]
    dest[3] = source[0];
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3303      	adds	r3, #3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	701a      	strb	r2, [r3, #0]
    dest[4] = source[5];
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	7952      	ldrb	r2, [r2, #5]
 8002ad6:	701a      	strb	r2, [r3, #0]
    dest[5] = source[4];
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3305      	adds	r3, #5
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	7912      	ldrb	r2, [r2, #4]
 8002ae0:	701a      	strb	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8002aee:	b4b0      	push	{r4, r5, r7}
 8002af0:	b091      	sub	sp, #68	; 0x44
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8002af6:	f240 13b1 	movw	r3, #433	; 0x1b1
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8002afc:	2307      	movs	r3, #7
 8002afe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8002b02:	2307      	movs	r3, #7
 8002b04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
//	new_LoRa.power				   = POWER_20db;
	new_LoRa.overCurrentProtection = 100       ;
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	new_LoRa.preamble			   = 8         ;
 8002b14:	2308      	movs	r3, #8
 8002b16:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	461d      	mov	r5, r3
 8002b1c:	f107 0408 	add.w	r4, r7, #8
 8002b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b30:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	3744      	adds	r7, #68	; 0x44
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bcb0      	pop	{r4, r5, r7}
 8002b3c:	4770      	bx	lr

08002b3e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f97a 	bl	8002e44 <LoRa_read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	73bb      	strb	r3, [r7, #14]
	data = read;
 8002b54:	7bbb      	ldrb	r3, [r7, #14]
 8002b56:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d107      	bne.n	8002b6e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8002b5e:	7bbb      	ldrb	r3, [r7, #14]
 8002b60:	f023 0307 	bic.w	r3, r3, #7
 8002b64:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
 8002b6c:	e03e      	b.n	8002bec <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d10c      	bne.n	8002b8e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8002b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b78:	f023 0307 	bic.w	r3, r3, #7
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	621a      	str	r2, [r3, #32]
 8002b8c:	e02e      	b.n	8002bec <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d10c      	bne.n	8002bae <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8002b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b98:	f023 0307 	bic.w	r3, r3, #7
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	f043 0303 	orr.w	r3, r3, #3
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	621a      	str	r2, [r3, #32]
 8002bac:	e01e      	b.n	8002bec <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10c      	bne.n	8002bce <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8002bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bb8:	f023 0307 	bic.w	r3, r3, #7
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	f043 0305 	orr.w	r3, r3, #5
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2205      	movs	r2, #5
 8002bca:	621a      	str	r2, [r3, #32]
 8002bcc:	e00e      	b.n	8002bec <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d10b      	bne.n	8002bec <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8002bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bd8:	f023 0307 	bic.w	r3, r3, #7
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	f043 0306 	orr.w	r3, r3, #6
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2206      	movs	r2, #6
 8002bea:	621a      	str	r2, [r3, #32]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f940 	bl	8002e78 <LoRa_write>
	//HAL_Delay(10);
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	889b      	ldrh	r3, [r3, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f003 fbf2 	bl	8006404 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6998      	ldr	r0, [r3, #24]
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	f004 fde1 	bl	80077f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002c30:	bf00      	nop
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 fac8 	bl	80081cc <HAL_SPI_GetState>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d1f7      	bne.n	8002c32 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6998      	ldr	r0, [r3, #24]
 8002c46:	8b3a      	ldrh	r2, [r7, #24]
 8002c48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	f004 ff0c 	bl	8007a6a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002c52:	bf00      	nop
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f005 fab7 	bl	80081cc <HAL_SPI_GetState>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d1f7      	bne.n	8002c54 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	889b      	ldrh	r3, [r3, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f003 fbc8 	bl	8006404 <HAL_GPIO_WritePin>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	889b      	ldrh	r3, [r3, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	4619      	mov	r1, r3
 8002c98:	f003 fbb4 	bl	8006404 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6998      	ldr	r0, [r3, #24]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	f004 fda3 	bl	80077f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002cac:	bf00      	nop
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 fa8a 	bl	80081cc <HAL_SPI_GetState>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d1f7      	bne.n	8002cae <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6998      	ldr	r0, [r3, #24]
 8002cc2:	8b3a      	ldrh	r2, [r7, #24]
 8002cc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	f004 fd92 	bl	80077f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002cce:	bf00      	nop
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f005 fa79 	bl	80081cc <HAL_SPI_GetState>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d1f7      	bne.n	8002cd0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	889b      	ldrh	r3, [r3, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4619      	mov	r1, r3
 8002cec:	f003 fb8a 	bl	8006404 <HAL_GPIO_WritePin>
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	04db      	lsls	r3, r3, #19
 8002d06:	115b      	asrs	r3, r3, #5
 8002d08:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	461a      	mov	r2, r3
 8002d14:	2106      	movs	r1, #6
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8ae 	bl	8002e78 <LoRa_write>
	HAL_Delay(5);
 8002d1c:	2005      	movs	r0, #5
 8002d1e:	f002 f923 	bl	8004f68 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2107      	movs	r1, #7
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8a2 	bl	8002e78 <LoRa_write>
	HAL_Delay(5);
 8002d34:	2005      	movs	r0, #5
 8002d36:	f002 f917 	bl	8004f68 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	461a      	mov	r2, r3
 8002d42:	2108      	movs	r1, #8
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f897 	bl	8002e78 <LoRa_write>
	HAL_Delay(5);
 8002d4a:	2005      	movs	r0, #5
 8002d4c:	f002 f90c 	bl	8004f68 <HAL_Delay>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	dd01      	ble.n	8002d6c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8002d68:	230c      	movs	r3, #12
 8002d6a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	dc01      	bgt.n	8002d76 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8002d72:	2307      	movs	r3, #7
 8002d74:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8002d76:	211e      	movs	r1, #30
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f863 	bl	8002e44 <LoRa_read>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8002d82:	200a      	movs	r0, #10
 8002d84:	f002 f8f0 	bl	8004f68 <HAL_Delay>

	data = (SF << 4) | (_LoRa->CRCon << 2) | (read & 0x03);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	b25a      	sxtb	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b25a      	sxtb	r2, r3
 8002d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	4313      	orrs	r3, r2
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	461a      	mov	r2, r3
 8002db0:	211e      	movs	r1, #30
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f860 	bl	8002e78 <LoRa_write>
	HAL_Delay(10);
 8002db8:	200a      	movs	r0, #10
 8002dba:	f002 f8d5 	bl	8004f68 <HAL_Delay>
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	2b2c      	cmp	r3, #44	; 0x2c
 8002ddc:	d801      	bhi.n	8002de2 <LoRa_setOCP+0x1a>
		current = 45;
 8002dde:	232d      	movs	r3, #45	; 0x2d
 8002de0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	2bf0      	cmp	r3, #240	; 0xf0
 8002de6:	d901      	bls.n	8002dec <LoRa_setOCP+0x24>
		current = 240;
 8002de8:	23f0      	movs	r3, #240	; 0xf0
 8002dea:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	2b78      	cmp	r3, #120	; 0x78
 8002df0:	d809      	bhi.n	8002e06 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	3b2d      	subs	r3, #45	; 0x2d
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <LoRa_setOCP+0x78>)
 8002df8:	fb82 1203 	smull	r1, r2, r2, r3
 8002dfc:	1052      	asrs	r2, r2, #1
 8002dfe:	17db      	asrs	r3, r3, #31
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e00b      	b.n	8002e1e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	2bf0      	cmp	r3, #240	; 0xf0
 8002e0a:	d808      	bhi.n	8002e1e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	331e      	adds	r3, #30
 8002e10:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <LoRa_setOCP+0x78>)
 8002e12:	fb82 1203 	smull	r1, r2, r2, r3
 8002e16:	1092      	asrs	r2, r2, #2
 8002e18:	17db      	asrs	r3, r3, #31
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	3320      	adds	r3, #32
 8002e22:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	461a      	mov	r2, r3
 8002e28:	210b      	movs	r1, #11
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f824 	bl	8002e78 <LoRa_write>
	HAL_Delay(10);
 8002e30:	200a      	movs	r0, #10
 8002e32:	f002 f899 	bl	8004f68 <HAL_Delay>
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	66666667 	.word	0x66666667

08002e44 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002e5a:	f107 030f 	add.w	r3, r7, #15
 8002e5e:	f107 010e 	add.w	r1, r7, #14
 8002e62:	2201      	movs	r2, #1
 8002e64:	9200      	str	r2, [sp, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fec9 	bl	8002c00 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
 8002e84:	4613      	mov	r3, r2
 8002e86:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	73bb      	strb	r3, [r7, #14]
	data = value;
 8002e92:	78bb      	ldrb	r3, [r7, #2]
 8002e94:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8002e96:	f107 030f 	add.w	r3, r7, #15
 8002e9a:	f107 010e 	add.w	r1, r7, #14
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	9200      	str	r2, [sp, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fee9 	bl	8002c7c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	72fb      	strb	r3, [r7, #11]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
 8002ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	889b      	ldrh	r3, [r3, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4619      	mov	r1, r3
 8002edc:	f003 fa92 	bl	8006404 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6998      	ldr	r0, [r3, #24]
 8002ee4:	f107 0117 	add.w	r1, r7, #23
 8002ee8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002eec:	2201      	movs	r2, #1
 8002eee:	f004 fc80 	bl	80077f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002ef2:	bf00      	nop
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 f967 	bl	80081cc <HAL_SPI_GetState>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d1f7      	bne.n	8002ef4 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6998      	ldr	r0, [r3, #24]
 8002f08:	7abb      	ldrb	r3, [r7, #10]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	f004 fc6e 	bl	80077f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002f16:	bf00      	nop
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 f955 	bl	80081cc <HAL_SPI_GetState>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d1f7      	bne.n	8002f18 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	889b      	ldrh	r3, [r3, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	4619      	mov	r1, r3
 8002f34:	f003 fa66 	bl	8006404 <HAL_GPIO_WritePin>
}
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

	return 1;
 8002f48:	2301      	movs	r3, #1
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	4611      	mov	r1, r2
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002f72:	2101      	movs	r1, #1
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff fde2 	bl	8002b3e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8002f7a:	210e      	movs	r1, #14
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ff61 	bl	8002e44 <LoRa_read>
 8002f82:	4603      	mov	r3, r0
 8002f84:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	210d      	movs	r1, #13
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ff73 	bl	8002e78 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	461a      	mov	r2, r3
 8002f96:	2122      	movs	r1, #34	; 0x22
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff ff6d 	bl	8002e78 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff ff84 	bl	8002eb2 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8002faa:	2103      	movs	r1, #3
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fdc6 	bl	8002b3e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002fb2:	2112      	movs	r1, #18
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff ff45 	bl	8002e44 <LoRa_read>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	2112      	movs	r1, #18
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff ff53 	bl	8002e78 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fdb2 	bl	8002b3e <LoRa_gotoMode>
			return 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8002fde:	88bb      	ldrh	r3, [r7, #4]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	80bb      	strh	r3, [r7, #4]
 8002fe4:	88bb      	ldrh	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8002fea:	6979      	ldr	r1, [r7, #20]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff fda6 	bl	8002b3e <LoRa_gotoMode>
				return 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e003      	b.n	8002ffe <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f001 ffb6 	bl	8004f68 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002ffc:	e7d9      	b.n	8002fb2 <LoRa_transmit+0x5c>
	}
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800300e:	2105      	movs	r1, #5
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff fd94 	bl	8002b3e <LoRa_gotoMode>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <LoRa_receive_single>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive_single(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800301e:	b590      	push	{r4, r7, lr}
 8003020:	b089      	sub	sp, #36	; 0x24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	4613      	mov	r3, r2
 800302a:	71fb      	strb	r3, [r7, #7]
	//condition 5: Return to standby mode, IRQ flag: ValidHeader(0x10)&RX done=1(0x40) ==> Clear IRQ flag, start read FIFO ,then go to RX single mode again

	uint8_t cur_mode;
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]

	//read current mode
	cur_mode = LoRa_read(_LoRa, RegOpMode)&0x07;//0x07 mask:0000 0111
 8003030:	2101      	movs	r1, #1
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff ff06 	bl	8002e44 <LoRa_read>
 8003038:	4603      	mov	r3, r0
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	75fb      	strb	r3, [r7, #23]
	//read IRQ
	read = LoRa_read(_LoRa, RegIrqFlags);
 8003040:	2112      	movs	r1, #18
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fefe 	bl	8002e44 <LoRa_read>
 8003048:	4603      	mov	r3, r0
 800304a:	75bb      	strb	r3, [r7, #22]

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800304c:	2101      	movs	r1, #1
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff fd75 	bl	8002b3e <LoRa_gotoMode>

	if((cur_mode!=RXSINGLE_MODE)&&(read==0)){ // condition 1
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b06      	cmp	r3, #6
 8003058:	d00c      	beq.n	8003074 <LoRa_receive_single+0x56>
 800305a:	7dbb      	ldrb	r3, [r7, #22]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <LoRa_receive_single+0x56>
		//Rx init
		LoRa_write(_LoRa, RegFiFoAddPtr, 0); //set FiFoAddPtr to FiFoRxBaseAddr
 8003060:	2200      	movs	r2, #0
 8003062:	210d      	movs	r1, #13
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff ff07 	bl	8002e78 <LoRa_write>
		//Rx mode request
		LoRa_gotoMode(_LoRa, RXSINGLE_MODE);
 800306a:	2106      	movs	r1, #6
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fd66 	bl	8002b3e <LoRa_gotoMode>
 8003072:	e064      	b.n	800313e <LoRa_receive_single+0x120>
	}
	else if((cur_mode==RXSINGLE_MODE) && (read==0)){ //condition 2
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d102      	bne.n	8003080 <LoRa_receive_single+0x62>
 800307a:	7dbb      	ldrb	r3, [r7, #22]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05e      	beq.n	800313e <LoRa_receive_single+0x120>
	}
	else if((cur_mode!=RXSINGLE_MODE)&&((read&0x80)||(read&0x20))){// condition 3,4
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d013      	beq.n	80030ae <LoRa_receive_single+0x90>
 8003086:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db04      	blt.n	8003098 <LoRa_receive_single+0x7a>
 800308e:	7dbb      	ldrb	r3, [r7, #22]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <LoRa_receive_single+0x90>
		LoRa_write(_LoRa, RegIrqFlags, read);  //clear IRQ
 8003098:	7dbb      	ldrb	r3, [r7, #22]
 800309a:	461a      	mov	r2, r3
 800309c:	2112      	movs	r1, #18
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff feea 	bl	8002e78 <LoRa_write>
		LoRa_gotoMode(_LoRa, RXSINGLE_MODE);   //Rx mode request
 80030a4:	2106      	movs	r1, #6
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff fd49 	bl	8002b3e <LoRa_gotoMode>
 80030ac:	e047      	b.n	800313e <LoRa_receive_single+0x120>
	}
	else if((cur_mode!=RXSINGLE_MODE)&&(read&0x40)&&(read&0x10)){// condition 5
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d044      	beq.n	800313e <LoRa_receive_single+0x120>
 80030b4:	7dbb      	ldrb	r3, [r7, #22]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03f      	beq.n	800313e <LoRa_receive_single+0x120>
 80030be:	7dbb      	ldrb	r3, [r7, #22]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03a      	beq.n	800313e <LoRa_receive_single+0x120>
		LoRa_write(_LoRa, RegIrqFlags, read);    //clear IRQ
 80030c8:	7dbb      	ldrb	r3, [r7, #22]
 80030ca:	461a      	mov	r2, r3
 80030cc:	2112      	movs	r1, #18
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fed2 	bl	8002e78 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);  //Read packet size(FifoRxBytesNb 0x13) in explicit mode
 80030d4:	2113      	movs	r1, #19
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff feb4 	bl	8002e44 <LoRa_read>
 80030dc:	4603      	mov	r3, r0
 80030de:	757b      	strb	r3, [r7, #21]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80030e0:	2110      	movs	r1, #16
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff feae 	bl	8002e44 <LoRa_read>
 80030e8:	4603      	mov	r3, r0
 80030ea:	75bb      	strb	r3, [r7, #22]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80030ec:	7dbb      	ldrb	r3, [r7, #22]
 80030ee:	461a      	mov	r2, r3
 80030f0:	210d      	movs	r1, #13
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff fec0 	bl	8002e78 <LoRa_write>
		read = LoRa_read(_LoRa, RegIrqFlags);//test
 80030f8:	2112      	movs	r1, #18
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7ff fea2 	bl	8002e44 <LoRa_read>
 8003100:	4603      	mov	r3, r0
 8003102:	75bb      	strb	r3, [r7, #22]

		min = length >= number_of_bytes ? number_of_bytes : length;// if setted length>read NB,choose read NB
 8003104:	7d7a      	ldrb	r2, [r7, #21]
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	4293      	cmp	r3, r2
 800310a:	bf28      	it	cs
 800310c:	4613      	movcs	r3, r2
 800310e:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++){
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e00b      	b.n	800312e <LoRa_receive_single+0x110>
			data[i] = LoRa_read(_LoRa, RegFiFo); //read data FIFO
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	18d4      	adds	r4, r2, r3
 800311c:	2100      	movs	r1, #0
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff fe90 	bl	8002e44 <LoRa_read>
 8003124:	4603      	mov	r3, r0
 8003126:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++){
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3301      	adds	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	7ffb      	ldrb	r3, [r7, #31]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	429a      	cmp	r2, r3
 8003134:	dbef      	blt.n	8003116 <LoRa_receive_single+0xf8>
		}
		LoRa_gotoMode(_LoRa, RXSINGLE_MODE);   //Rx mode request
 8003136:	2106      	movs	r1, #6
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fd00 	bl	8002b3e <LoRa_gotoMode>
	}
    return min;
 800313e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3724      	adds	r7, #36	; 0x24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd90      	pop	{r4, r7, pc}

08003148 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fef5 	bl	8002f40 <LoRa_isvalid>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80d2 	beq.w	8003302 <LoRa_init+0x1ba>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800315e:	2100      	movs	r1, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fcec 	bl	8002b3e <LoRa_gotoMode>
			_LoRa->current_mode = SLEEP_MODE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	621a      	str	r2, [r3, #32]
			HAL_Delay(10);
 800316c:	200a      	movs	r0, #10
 800316e:	f001 fefb 	bl	8004f68 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8003172:	2101      	movs	r1, #1
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe65 	bl	8002e44 <LoRa_read>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800317e:	200a      	movs	r0, #10
 8003180:	f001 fef2 	bl	8004f68 <HAL_Delay>
			data = read | (LORA_MODEM<<7);
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800318a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800318c:	7bbb      	ldrb	r3, [r7, #14]
 800318e:	461a      	mov	r2, r3
 8003190:	2101      	movs	r1, #1
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fe70 	bl	8002e78 <LoRa_write>
			HAL_Delay(100);
 8003198:	2064      	movs	r0, #100	; 0x64
 800319a:	f001 fee5 	bl	8004f68 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fda7 	bl	8002cf8 <LoRa_setFrequency>
			if(_LoRa->frequency<525){ //if freq<525MHz, set low freq mode on
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80031b2:	dc0f      	bgt.n	80031d4 <LoRa_init+0x8c>
				read = LoRa_read(_LoRa, RegOpMode);
 80031b4:	2101      	movs	r1, #1
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fe44 	bl	8002e44 <LoRa_read>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]
				data = read | (1<<3);
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	f043 0308 	orr.w	r3, r3, #8
 80031c6:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 80031c8:	7bbb      	ldrb	r3, [r7, #14]
 80031ca:	461a      	mov	r2, r3
 80031cc:	2101      	movs	r1, #1
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fe52 	bl	8002e78 <LoRa_write>
			}

		// set output power gain:
		data = (_LoRa->paselect << 7) | (_LoRa->maxpower << 4) | (_LoRa->outputpower);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80031da:	01db      	lsls	r3, r3, #7
 80031dc:	b25a      	sxtb	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b25a      	sxtb	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegPaConfig, data);
 80031fa:	7bbb      	ldrb	r3, [r7, #14]
 80031fc:	461a      	mov	r2, r3
 80031fe:	2109      	movs	r1, #9
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fe39 	bl	8002e78 <LoRa_write>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fdda 	bl	8002dc8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x20);
 8003214:	2220      	movs	r2, #32
 8003216:	210c      	movs	r1, #12
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fe2d 	bl	8002e78 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = (_LoRa->bandWidth << 4) | (_LoRa->crcRate << 1) | (_LoRa->implicit_on);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	b25a      	sxtb	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	b25b      	sxtb	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b25a      	sxtb	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800323c:	b25b      	sxtb	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b25b      	sxtb	r3, r3
 8003242:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8003244:	7bbb      	ldrb	r3, [r7, #14]
 8003246:	461a      	mov	r2, r3
 8003248:	211d      	movs	r1, #29
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fe14 	bl	8002e78 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fd7d 	bl	8002d58 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0x64);
 800325e:	2264      	movs	r2, #100	; 0x64
 8003260:	211f      	movs	r1, #31
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fe08 	bl	8002e78 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	b29b      	uxth	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	2120      	movs	r1, #32
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fdfe 	bl	8002e78 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	2121      	movs	r1, #33	; 0x21
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fdf6 	bl	8002e78 <LoRa_write>
//			read = LoRa_read(_LoRa, RegDioMapping1);
//			data = read | 0x3F;
//			LoRa_write(_LoRa, RegDioMapping1, data);

			//Set base address
			LoRa_write(_LoRa, RegFiFoRxBaseAddr, 0x00);
 800328c:	2200      	movs	r2, #0
 800328e:	210f      	movs	r1, #15
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fdf1 	bl	8002e78 <LoRa_write>
			LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);
 8003296:	2200      	movs	r2, #0
 8003298:	210e      	movs	r1, #14
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fdec 	bl	8002e78 <LoRa_write>

			//Setting in errata note
			read = LoRa_read(_LoRa, 0x31);
 80032a0:	2131      	movs	r1, #49	; 0x31
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fdce 	bl	8002e44 <LoRa_read>
 80032a8:	4603      	mov	r3, r0
 80032aa:	73fb      	strb	r3, [r7, #15]
			LoRa_write(_LoRa, 0x31, read&0x7F);
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	2131      	movs	r1, #49	; 0x31
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fddd 	bl	8002e78 <LoRa_write>
			LoRa_write(_LoRa, 0x2F, 0x40);
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	212f      	movs	r1, #47	; 0x2f
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fdd8 	bl	8002e78 <LoRa_write>
			LoRa_write(_LoRa, 0x30, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2130      	movs	r1, #48	; 0x30
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fdd3 	bl	8002e78 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80032d2:	2101      	movs	r1, #1
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff fc32 	bl	8002b3e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	621a      	str	r2, [r3, #32]
			HAL_Delay(10);
 80032e0:	200a      	movs	r0, #10
 80032e2:	f001 fe41 	bl	8004f68 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80032e6:	2142      	movs	r1, #66	; 0x42
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fdab 	bl	8002e44 <LoRa_read>
 80032ee:	4603      	mov	r3, r0
 80032f0:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b12      	cmp	r3, #18
 80032f6:	d101      	bne.n	80032fc <LoRa_init+0x1b4>
				return LORA_OK;
 80032f8:	23c8      	movs	r3, #200	; 0xc8
 80032fa:	e004      	b.n	8003306 <LoRa_init+0x1be>
			else
				return LORA_NOT_FOUND;
 80032fc:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003300:	e001      	b.n	8003306 <LoRa_init+0x1be>
	}
	else {
		return LORA_UNAVAILABLE;
 8003302:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003316:	463b      	mov	r3, r7
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <MX_ADC1_Init+0x9c>)
 8003326:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <MX_ADC1_Init+0x98>)
 800332a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800332e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <MX_ADC1_Init+0x98>)
 800333e:	2201      	movs	r2, #1
 8003340:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <MX_ADC1_Init+0x98>)
 800334c:	2200      	movs	r2, #0
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003350:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <MX_ADC1_Init+0xa0>)
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <MX_ADC1_Init+0x98>)
 800335e:	2201      	movs	r2, #1
 8003360:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <MX_ADC1_Init+0x98>)
 800336c:	2201      	movs	r2, #1
 800336e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003370:	480d      	ldr	r0, [pc, #52]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003372:	f001 fe1d 	bl	8004fb0 <HAL_ADC_Init>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800337c:	f001 f8b2 	bl	80044e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003380:	2305      	movs	r3, #5
 8003382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003384:	2301      	movs	r3, #1
 8003386:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800338c:	463b      	mov	r3, r7
 800338e:	4619      	mov	r1, r3
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <MX_ADC1_Init+0x98>)
 8003392:	f001 ff31 	bl	80051f8 <HAL_ADC_ConfigChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800339c:	f001 f8a2 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20001400 	.word	0x20001400
 80033ac:	40012000 	.word	0x40012000
 80033b0:	0f000001 	.word	0x0f000001

080033b4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033ba:	463b      	mov	r3, r7
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <MX_ADC3_Init+0xa0>)
 80033ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80033dc:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033f8:	4a17      	ldr	r2, [pc, #92]	; (8003458 <MX_ADC3_Init+0xa4>)
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <MX_ADC3_Init+0x9c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <MX_ADC3_Init+0x9c>)
 8003404:	2201      	movs	r2, #1
 8003406:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_ADC3_Init+0x9c>)
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <MX_ADC3_Init+0x9c>)
 8003412:	2201      	movs	r2, #1
 8003414:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003416:	480e      	ldr	r0, [pc, #56]	; (8003450 <MX_ADC3_Init+0x9c>)
 8003418:	f001 fdca 	bl	8004fb0 <HAL_ADC_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8003422:	f001 f85f 	bl	80044e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003426:	2304      	movs	r3, #4
 8003428:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003432:	463b      	mov	r3, r7
 8003434:	4619      	mov	r1, r3
 8003436:	4806      	ldr	r0, [pc, #24]	; (8003450 <MX_ADC3_Init+0x9c>)
 8003438:	f001 fede 	bl	80051f8 <HAL_ADC_ConfigChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8003442:	f001 f84f 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20001448 	.word	0x20001448
 8003454:	40012200 	.word	0x40012200
 8003458:	0f000001 	.word	0x0f000001

0800345c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	; 0x30
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 031c 	add.w	r3, r7, #28
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2e      	ldr	r2, [pc, #184]	; (8003534 <HAL_ADC_MspInit+0xd8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d128      	bne.n	80034d0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a25      	ldr	r2, [pc, #148]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034b6:	2320      	movs	r3, #32
 80034b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ba:	2303      	movs	r3, #3
 80034bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	4619      	mov	r1, r3
 80034c8:	481c      	ldr	r0, [pc, #112]	; (800353c <HAL_ADC_MspInit+0xe0>)
 80034ca:	f002 fdd7 	bl	800607c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80034ce:	e02c      	b.n	800352a <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_ADC_MspInit+0xe4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d127      	bne.n	800352a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 80034e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 8003500:	f043 0320 	orr.w	r3, r3, #32
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_ADC_MspInit+0xdc>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003512:	2340      	movs	r3, #64	; 0x40
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003516:	2303      	movs	r3, #3
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800351e:	f107 031c 	add.w	r3, r7, #28
 8003522:	4619      	mov	r1, r3
 8003524:	4807      	ldr	r0, [pc, #28]	; (8003544 <HAL_ADC_MspInit+0xe8>)
 8003526:	f002 fda9 	bl	800607c <HAL_GPIO_Init>
}
 800352a:	bf00      	nop
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40012000 	.word	0x40012000
 8003538:	40023800 	.word	0x40023800
 800353c:	40020000 	.word	0x40020000
 8003540:	40012200 	.word	0x40012200
 8003544:	40021400 	.word	0x40021400

08003548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <MX_DMA_Init+0xa8>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <MX_DMA_Init+0xa8>)
 8003558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <MX_DMA_Init+0xa8>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <MX_DMA_Init+0xa8>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <MX_DMA_Init+0xa8>)
 8003574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003578:	6313      	str	r3, [r2, #48]	; 0x30
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <MX_DMA_Init+0xa8>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	200c      	movs	r0, #12
 800358c:	f002 f93d 	bl	800580a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003590:	200c      	movs	r0, #12
 8003592:	f002 f956 	bl	8005842 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2100      	movs	r1, #0
 800359a:	200e      	movs	r0, #14
 800359c:	f002 f935 	bl	800580a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80035a0:	200e      	movs	r0, #14
 80035a2:	f002 f94e 	bl	8005842 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2100      	movs	r1, #0
 80035aa:	2038      	movs	r0, #56	; 0x38
 80035ac:	f002 f92d 	bl	800580a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80035b0:	2038      	movs	r0, #56	; 0x38
 80035b2:	f002 f946 	bl	8005842 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2100      	movs	r1, #0
 80035ba:	2039      	movs	r0, #57	; 0x39
 80035bc:	f002 f925 	bl	800580a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80035c0:	2039      	movs	r0, #57	; 0x39
 80035c2:	f002 f93e 	bl	8005842 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	203a      	movs	r0, #58	; 0x3a
 80035cc:	f002 f91d 	bl	800580a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80035d0:	203a      	movs	r0, #58	; 0x3a
 80035d2:	f002 f936 	bl	8005842 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	2046      	movs	r0, #70	; 0x46
 80035dc:	f002 f915 	bl	800580a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80035e0:	2046      	movs	r0, #70	; 0x46
 80035e2:	f002 f92e 	bl	8005842 <HAL_NVIC_EnableIRQ>

}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
 8003608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a64      	ldr	r2, [pc, #400]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003614:	f043 0310 	orr.w	r3, r3, #16
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a5d      	ldr	r2, [pc, #372]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003630:	f043 0304 	orr.w	r3, r3, #4
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	4b57      	ldr	r3, [pc, #348]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a56      	ldr	r2, [pc, #344]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 800364c:	f043 0320 	orr.w	r3, r3, #32
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4a4f      	ldr	r2, [pc, #316]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366c:	6313      	str	r3, [r2, #48]	; 0x30
 800366e:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	4b49      	ldr	r3, [pc, #292]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a48      	ldr	r2, [pc, #288]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a41      	ldr	r2, [pc, #260]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a3a      	ldr	r2, [pc, #232]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <MX_GPIO_Init+0x1b0>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80036ce:	2201      	movs	r2, #1
 80036d0:	2110      	movs	r1, #16
 80036d2:	4835      	ldr	r0, [pc, #212]	; (80037a8 <MX_GPIO_Init+0x1b4>)
 80036d4:	f002 fe96 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FEM_CTX_Pin|FEM_CPS_Pin, GPIO_PIN_RESET);
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80036de:	4833      	ldr	r0, [pc, #204]	; (80037ac <MX_GPIO_Init+0x1b8>)
 80036e0:	f002 fe90 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_SET);
 80036e4:	2201      	movs	r2, #1
 80036e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ea:	4830      	ldr	r0, [pc, #192]	; (80037ac <MX_GPIO_Init+0x1b8>)
 80036ec:	f002 fe8a 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80036f0:	2310      	movs	r3, #16
 80036f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f4:	2301      	movs	r3, #1
 80036f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	4619      	mov	r1, r3
 8003706:	4828      	ldr	r0, [pc, #160]	; (80037a8 <MX_GPIO_Init+0x1b4>)
 8003708:	f002 fcb8 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO0_Pin;
 800370c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800371c:	f107 031c 	add.w	r3, r7, #28
 8003720:	4619      	mov	r1, r3
 8003722:	4823      	ldr	r0, [pc, #140]	; (80037b0 <MX_GPIO_Init+0x1bc>)
 8003724:	f002 fcaa 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mode_Switch_Pin;
 8003728:	2340      	movs	r3, #64	; 0x40
 800372a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800372c:	2300      	movs	r3, #0
 800372e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003730:	2301      	movs	r3, #1
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Mode_Switch_GPIO_Port, &GPIO_InitStruct);
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	4619      	mov	r1, r3
 800373a:	481e      	ldr	r0, [pc, #120]	; (80037b4 <MX_GPIO_Init+0x1c0>)
 800373c:	f002 fc9e 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FEM_CTX_Pin|LoRa_RST_Pin|FEM_CPS_Pin;
 8003740:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003746:	2301      	movs	r3, #1
 8003748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	4619      	mov	r1, r3
 8003758:	4814      	ldr	r0, [pc, #80]	; (80037ac <MX_GPIO_Init+0x1b8>)
 800375a:	f002 fc8f 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 800376e:	f107 031c 	add.w	r3, r7, #28
 8003772:	4619      	mov	r1, r3
 8003774:	480d      	ldr	r0, [pc, #52]	; (80037ac <MX_GPIO_Init+0x1b8>)
 8003776:	f002 fc81 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800377a:	2320      	movs	r3, #32
 800377c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800378a:	2305      	movs	r3, #5
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4619      	mov	r1, r3
 8003794:	4808      	ldr	r0, [pc, #32]	; (80037b8 <MX_GPIO_Init+0x1c4>)
 8003796:	f002 fc71 	bl	800607c <HAL_GPIO_Init>

}
 800379a:	bf00      	nop
 800379c:	3730      	adds	r7, #48	; 0x30
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40020c00 	.word	0x40020c00
 80037b0:	40021400 	.word	0x40021400
 80037b4:	40020000 	.word	0x40020000
 80037b8:	40020400 	.word	0x40020400

080037bc <__io_putchar>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

PUTCHAR_PROTOTYPE {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&EXT_uart, (uint8_t*) &ch, 1, 0xFFFF);
 80037c4:	1d39      	adds	r1, r7, #4
 80037c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ca:	2201      	movs	r2, #1
 80037cc:	4803      	ldr	r0, [pc, #12]	; (80037dc <__io_putchar+0x20>)
 80037ce:	f004 fe9c 	bl	800850a <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(&EXT_DMA_TX, (uint8_t *)&ch, 1);
	return ch;
 80037d2:	687b      	ldr	r3, [r7, #4]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20001a34 	.word	0x20001a34

080037e0 <HAL_UARTEx_RxEventCallback>:
bool EXT_got_data;
uint16_t EXT_data_Size;

extern IMU imu;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
	IMU_UART_CB(huart, Size);
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fd fbd7 	bl	8000fa4 <IMU_UART_CB>

	if (huart->Instance == USART1) {
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <HAL_UARTEx_RxEventCallback+0x50>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d113      	bne.n	8003828 <HAL_UARTEx_RxEventCallback+0x48>
		EXT_got_data = true;
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <HAL_UARTEx_RxEventCallback+0x54>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
		EXT_data_Size = Size;
 8003806:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <HAL_UARTEx_RxEventCallback+0x58>)
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	8013      	strh	r3, [r2, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(&EXT_uart, EXT_buffer, EXT_BUFFER_SIZE);
 800380c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003810:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_UARTEx_RxEventCallback+0x5c>)
 8003812:	480b      	ldr	r0, [pc, #44]	; (8003840 <HAL_UARTEx_RxEventCallback+0x60>)
 8003814:	f004 ff8a 	bl	800872c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_UARTEx_RxEventCallback+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_UARTEx_RxEventCallback+0x64>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0208 	bic.w	r2, r2, #8
 8003826:	601a      	str	r2, [r3, #0]
	}

}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40011000 	.word	0x40011000
 8003834:	200018ec 	.word	0x200018ec
 8003838:	200018ee 	.word	0x200018ee
 800383c:	200014ec 	.word	0x200014ec
 8003840:	20001a34 	.word	0x20001a34
 8003844:	20001abc 	.word	0x20001abc

08003848 <proc_data_4>:
	uint8_t datas[1024];
	int length;
} IMU_DATA_TO_SEND_t;
//typedef struct IMU_DATA_TO_SEND IMU_DATA_TO_SEND_t;

void proc_data_4(IMU_DATA_TO_SEND_t *data, float value) {
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	ed87 0a00 	vstr	s0, [r7]
	f32_t f32_value;
	f32_value.f = value;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	60fb      	str	r3, [r7, #12]
	data->datas[data->length] = f32_value.u8[3];
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800385e:	7bf9      	ldrb	r1, [r7, #15]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[2];
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003878:	7bb9      	ldrb	r1, [r7, #14]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[1];
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003892:	7b79      	ldrb	r1, [r7, #13]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f32_value.u8[0];
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038ac:	7b39      	ldrb	r1, [r7, #12]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <proc_data_2>:

void proc_data_2(IMU_DATA_TO_SEND_t *data, float value) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	ed87 0a00 	vstr	s0, [r7]
	f16_t f16_value;
	f32_t temp;
	temp.f = value;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	60bb      	str	r3, [r7, #8]
	f32_to_f16(&temp, &f16_value);
 80038dc:	f107 020c 	add.w	r2, r7, #12
 80038e0:	f107 0308 	add.w	r3, r7, #8
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd ff6c 	bl	80017c4 <f32_to_f16>
	data->datas[data->length] = f16_value.u8[1];
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038f2:	7b79      	ldrb	r1, [r7, #13]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = f16_value.u8[0];
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800390c:	7b39      	ldrb	r1, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <proc_data_2_uint16>:

void proc_data_2_uint16(IMU_DATA_TO_SEND_t *data, uint16_t value) {
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
	f16_t temp;
	temp.u16 = value;
 8003934:	887b      	ldrh	r3, [r7, #2]
 8003936:	81bb      	strh	r3, [r7, #12]
	data->datas[data->length] = temp.u8[1];
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800393e:	7b79      	ldrb	r1, [r7, #13]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	data->datas[data->length] = temp.u8[0];
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003958:	7b39      	ldrb	r1, [r7, #12]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <proc_data_1_uint8>:

void proc_data_1_uint8(IMU_DATA_TO_SEND_t *data, uint8_t value) {
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
	data->datas[data->length] = value;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	78f9      	ldrb	r1, [r7, #3]
 800398e:	54d1      	strb	r1, [r2, r3]
	data->length += 1;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <imu_data_conv_config>:

void imu_data_conv_config(IMU *imu, IMU_DATA_TO_SEND_t *out) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	out->length = 0;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	proc_data_1_uint8(out, data_hour);
 80039be:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <imu_data_conv_config+0x234>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	6838      	ldr	r0, [r7, #0]
 80039c6:	f7ff ffd7 	bl	8003978 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_min);
 80039ca:	4b86      	ldr	r3, [pc, #536]	; (8003be4 <imu_data_conv_config+0x238>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4619      	mov	r1, r3
 80039d0:	6838      	ldr	r0, [r7, #0]
 80039d2:	f7ff ffd1 	bl	8003978 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_sec);
 80039d6:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <imu_data_conv_config+0x23c>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f7ff ffcb 	bl	8003978 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_subSec);
 80039e2:	4b82      	ldr	r3, [pc, #520]	; (8003bec <imu_data_conv_config+0x240>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	4619      	mov	r1, r3
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	f7ff ffc5 	bl	8003978 <proc_data_1_uint8>
	proc_data_2_uint16(out, data_counter);
 80039ee:	4b80      	ldr	r3, [pc, #512]	; (8003bf0 <imu_data_conv_config+0x244>)
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	6838      	ldr	r0, [r7, #0]
 80039f6:	f7ff ff97 	bl	8003928 <proc_data_2_uint16>
	proc_data_2(out, imu->temp);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a00:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a04:	eeb0 0a67 	vmov.f32	s0, s15
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7ff ff5f 	bl	80038cc <proc_data_2>
	proc_data_4(out, imu->quaternionWXYZ[0]);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a14:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003a18:	eeb0 0a67 	vmov.f32	s0, s15
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	f7ff ff13 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[1]);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a30:	6838      	ldr	r0, [r7, #0]
 8003a32:	f7ff ff09 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[2]);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a40:	eeb0 0a67 	vmov.f32	s0, s15
 8003a44:	6838      	ldr	r0, [r7, #0]
 8003a46:	f7ff feff 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[3]);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a50:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003a54:	eeb0 0a67 	vmov.f32	s0, s15
 8003a58:	6838      	ldr	r0, [r7, #0]
 8003a5a:	f7ff fef5 	bl	8003848 <proc_data_4>
	proc_data_2(out, imu->rateOfTurnXYZ[0]);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a64:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003a68:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	f7ff ff2d 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[1]);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a78:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a80:	6838      	ldr	r0, [r7, #0]
 8003a82:	f7ff ff23 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[2]);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a90:	eeb0 0a67 	vmov.f32	s0, s15
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	f7ff ff19 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[0]);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa8:	6838      	ldr	r0, [r7, #0]
 8003aaa:	f7ff ff0f 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[1]);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	f7ff ff05 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[2]);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003acc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad0:	6838      	ldr	r0, [r7, #0]
 8003ad2:	f7ff fefb 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->accelerationXYZ[0]);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003adc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae4:	6838      	ldr	r0, [r7, #0]
 8003ae6:	f7ff fef1 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->accelerationXYZ[1]);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003af4:	eeb0 0a67 	vmov.f32	s0, s15
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f7ff fee7 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->accelerationXYZ[2]);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003b08:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0c:	6838      	ldr	r0, [r7, #0]
 8003b0e:	f7ff fedd 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[0]);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b18:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f7ff fed3 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[1]);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2c:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003b30:	eeb0 0a67 	vmov.f32	s0, s15
 8003b34:	6838      	ldr	r0, [r7, #0]
 8003b36:	f7ff fec9 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[2]);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b40:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b44:	eeb0 0a67 	vmov.f32	s0, s15
 8003b48:	6838      	ldr	r0, [r7, #0]
 8003b4a:	f7ff febf 	bl	80038cc <proc_data_2>
	proc_data_4(out, imu->latitude);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b58:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5c:	6838      	ldr	r0, [r7, #0]
 8003b5e:	f7ff fe73 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->longitude);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b68:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b70:	6838      	ldr	r0, [r7, #0]
 8003b72:	f7ff fe69 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->altitudeEllip);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003b80:	eeb0 0a67 	vmov.f32	s0, s15
 8003b84:	6838      	ldr	r0, [r7, #0]
 8003b86:	f7ff fe5f 	bl	8003848 <proc_data_4>
	proc_data_2(out, imu->velocityXYZ[0]);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b90:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003b94:	eeb0 0a67 	vmov.f32	s0, s15
 8003b98:	6838      	ldr	r0, [r7, #0]
 8003b9a:	f7ff fe97 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[1]);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba4:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bac:	6838      	ldr	r0, [r7, #0]
 8003bae:	f7ff fe8d 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[2]);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb8:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc0:	6838      	ldr	r0, [r7, #0]
 8003bc2:	f7ff fe83 	bl	80038cc <proc_data_2>
	proc_data_4(out, data_PA_temp);
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <imu_data_conv_config+0x248>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd0:	6838      	ldr	r0, [r7, #0]
 8003bd2:	f7ff fe39 	bl	8003848 <proc_data_4>

}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200014e2 	.word	0x200014e2
 8003be4:	200014e3 	.word	0x200014e3
 8003be8:	200014e4 	.word	0x200014e4
 8003bec:	200014e5 	.word	0x200014e5
 8003bf0:	200014e0 	.word	0x200014e0
 8003bf4:	200014e8 	.word	0x200014e8

08003bf8 <imu_data_conv_onFly>:
	proc_data_2(out, 3);
	proc_data_4(out, 60);

}

void imu_data_conv_onFly(IMU *imu, IMU_DATA_TO_SEND_t *out) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	out->length = 0;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	proc_data_1_uint8(out, data_hour);
 8003c0a:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <imu_data_conv_onFly+0x198>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6838      	ldr	r0, [r7, #0]
 8003c12:	f7ff feb1 	bl	8003978 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_min);
 8003c16:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <imu_data_conv_onFly+0x19c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f7ff feab 	bl	8003978 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_sec);
 8003c22:	4b5d      	ldr	r3, [pc, #372]	; (8003d98 <imu_data_conv_onFly+0x1a0>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	6838      	ldr	r0, [r7, #0]
 8003c2a:	f7ff fea5 	bl	8003978 <proc_data_1_uint8>
	proc_data_1_uint8(out, data_subSec);
 8003c2e:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <imu_data_conv_onFly+0x1a4>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	6838      	ldr	r0, [r7, #0]
 8003c36:	f7ff fe9f 	bl	8003978 <proc_data_1_uint8>
	proc_data_2_uint16(out, data_counter);
 8003c3a:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <imu_data_conv_onFly+0x1a8>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6838      	ldr	r0, [r7, #0]
 8003c42:	f7ff fe71 	bl	8003928 <proc_data_2_uint16>
	proc_data_4(out, imu->quaternionWXYZ[0]);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c50:	eeb0 0a67 	vmov.f32	s0, s15
 8003c54:	6838      	ldr	r0, [r7, #0]
 8003c56:	f7ff fdf7 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[1]);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c64:	eeb0 0a67 	vmov.f32	s0, s15
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f7ff fded 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[2]);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c74:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003c78:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7c:	6838      	ldr	r0, [r7, #0]
 8003c7e:	f7ff fde3 	bl	8003848 <proc_data_4>
	proc_data_4(out, imu->quaternionWXYZ[3]);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c88:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c90:	6838      	ldr	r0, [r7, #0]
 8003c92:	f7ff fdd9 	bl	8003848 <proc_data_4>
	proc_data_2(out, imu->rateOfTurnXYZ[0]);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	f7ff fe11 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[1]);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f7ff fe07 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->rateOfTurnXYZ[2]);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f7ff fdfd 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[0]);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	f7ff fdf3 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[1]);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	f7ff fde9 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->freeAccelerationXYZ[2]);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d00:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003d04:	eeb0 0a67 	vmov.f32	s0, s15
 8003d08:	6838      	ldr	r0, [r7, #0]
 8003d0a:	f7ff fddf 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[0]);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d14:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003d18:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1c:	6838      	ldr	r0, [r7, #0]
 8003d1e:	f7ff fdd5 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[1]);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d30:	6838      	ldr	r0, [r7, #0]
 8003d32:	f7ff fdcb 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->positionEcefXYZ[2]);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d40:	eeb0 0a67 	vmov.f32	s0, s15
 8003d44:	6838      	ldr	r0, [r7, #0]
 8003d46:	f7ff fdc1 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[0]);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d50:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003d54:	eeb0 0a67 	vmov.f32	s0, s15
 8003d58:	6838      	ldr	r0, [r7, #0]
 8003d5a:	f7ff fdb7 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[1]);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d64:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003d68:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	f7ff fdad 	bl	80038cc <proc_data_2>
	proc_data_2(out, imu->velocityXYZ[2]);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d78:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d80:	6838      	ldr	r0, [r7, #0]
 8003d82:	f7ff fda3 	bl	80038cc <proc_data_2>

}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200014e2 	.word	0x200014e2
 8003d94:	200014e3 	.word	0x200014e3
 8003d98:	200014e4 	.word	0x200014e4
 8003d9c:	200014e5 	.word	0x200014e5
 8003da0:	200014e0 	.word	0x200014e0
 8003da4:	00000000 	.word	0x00000000

08003da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003db0:	f001 f868 	bl	8004e84 <HAL_Init>

  /* USER CODE BEGIN Init */

	HAL_UARTEx_ReceiveToIdle_DMA(&EXT_uart, EXT_buffer, EXT_BUFFER_SIZE);
 8003db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003db8:	4946      	ldr	r1, [pc, #280]	; (8003ed4 <main+0x12c>)
 8003dba:	4847      	ldr	r0, [pc, #284]	; (8003ed8 <main+0x130>)
 8003dbc:	f004 fcb6 	bl	800872c <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&EXT_DMA_RX, DMA_IT_HT);
 8003dc0:	4b46      	ldr	r3, [pc, #280]	; (8003edc <main+0x134>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b45      	ldr	r3, [pc, #276]	; (8003edc <main+0x134>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0208 	bic.w	r2, r2, #8
 8003dce:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dd0:	f000 fb1c 	bl	800440c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dd4:	f7ff fc0e 	bl	80035f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003dd8:	f7ff fbb6 	bl	8003548 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003ddc:	f000 fe7c 	bl	8004ad8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003de0:	f000 fea4 	bl	8004b2c <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8003de4:	f000 fc08 	bl	80045f8 <MX_SPI4_Init>
  MX_RTC_Init();
 8003de8:	f000 fb82 	bl	80044f0 <MX_RTC_Init>
  MX_ADC3_Init();
 8003dec:	f7ff fae2 	bl	80033b4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8003df0:	f7ff fa8e 	bl	8003310 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	/*Lora init==============================================================*/
	myLoRa = newLoRa();
 8003df4:	4c3a      	ldr	r4, [pc, #232]	; (8003ee0 <main+0x138>)
 8003df6:	463b      	mov	r3, r7
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fe78 	bl	8002aee <newLoRa>
 8003dfe:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003e02:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003e06:	461d      	mov	r5, r3
 8003e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003e18:	e884 0003 	stmia.w	r4, {r0, r1}

	myLoRa.CS_port = SPI4_CS_GPIO_Port;
 8003e1c:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <main+0x138>)
 8003e1e:	4a31      	ldr	r2, [pc, #196]	; (8003ee4 <main+0x13c>)
 8003e20:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = SPI4_CS_Pin;
 8003e22:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <main+0x138>)
 8003e24:	2210      	movs	r2, #16
 8003e26:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = LoRa_RST_GPIO_Port;
 8003e28:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <main+0x138>)
 8003e2a:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <main+0x140>)
 8003e2c:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = LoRa_RST_Pin;
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <main+0x138>)
 8003e30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e34:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <main+0x138>)
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <main+0x144>)
 8003e3a:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <main+0x138>)
 8003e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e42:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi4;
 8003e44:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <main+0x138>)
 8003e46:	4a2a      	ldr	r2, [pc, #168]	; (8003ef0 <main+0x148>)
 8003e48:	619a      	str	r2, [r3, #24]
	myLoRa.LoRa_modem = LORA_MODEM;
 8003e4a:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <main+0x138>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	771a      	strb	r2, [r3, #28]
	myLoRa.frequency = 433;             	// default = 433 		MHz
 8003e50:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <main+0x138>)
 8003e52:	f240 12b1 	movw	r2, #433	; 0x1b1
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
	myLoRa.paselect = RFO;
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <main+0x138>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	myLoRa.maxpower = 7;                    // 0~7 Pmax = 10.8+0.6*maxpower
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <main+0x138>)
 8003e62:	2207      	movs	r2, #7
 8003e64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	myLoRa.outputpower = 10;                // 0~15, Pout(RFO) = Pmax-(15-outputpower), Pout(PA_BOOST) = = 17-(15-outputpower)
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <main+0x138>)
 8003e6a:	220a      	movs	r2, #10
 8003e6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	myLoRa.PaDac = 0x84;                    // 0x84:max power = 17dBm   0x87:max power = 20dBm in PA_BOOST pin//-4~15
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <main+0x138>)
 8003e72:	2284      	movs	r2, #132	; 0x84
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	myLoRa.overCurrentProtection = 100;     // default = 100 		mA
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <main+0x138>)
 8003e7a:	2264      	movs	r2, #100	; 0x64
 8003e7c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	myLoRa.bandWidth = BW_125KHz;       	// default = BW_125	KHz
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <main+0x138>)
 8003e82:	2207      	movs	r2, #7
 8003e84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	myLoRa.crcRate = CR_4_5;          		// default = CR_4_5
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <main+0x138>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.implicit_on = EXPLICIT;          // default = EXPLICIT
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <main+0x138>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	myLoRa.spredingFactor = SF_7;           // default = SF_7
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <main+0x138>)
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	myLoRa.CRCon = 0;
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <main+0x138>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	myLoRa.preamble = 10;              		// default = 8;
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <main+0x138>)
 8003eaa:	220a      	movs	r2, #10
 8003eac:	859a      	strh	r2, [r3, #44]	; 0x2c
	myLoRa.TCXOon = 0;
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <main+0x138>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	uint16_t LoRa_status = LoRa_init(&myLoRa);
 8003eb6:	480a      	ldr	r0, [pc, #40]	; (8003ee0 <main+0x138>)
 8003eb8:	f7ff f946 	bl	8003148 <LoRa_init>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f8a7 3484 	strh.w	r3, [r7, #1156]	; 0x484
	if (LoRa_status == LORA_OK) {            //initialize LoRa configuration
 8003ec2:	f8b7 3484 	ldrh.w	r3, [r7, #1156]	; 0x484
 8003ec6:	2bc8      	cmp	r3, #200	; 0xc8
 8003ec8:	d116      	bne.n	8003ef8 <main+0x150>
		printf("LoRa is running... \n");
 8003eca:	480a      	ldr	r0, [pc, #40]	; (8003ef4 <main+0x14c>)
 8003ecc:	f006 fb66 	bl	800a59c <puts>
 8003ed0:	e018      	b.n	8003f04 <main+0x15c>
 8003ed2:	bf00      	nop
 8003ed4:	200014ec 	.word	0x200014ec
 8003ed8:	20001a34 	.word	0x20001a34
 8003edc:	20001abc 	.word	0x20001abc
 8003ee0:	200014a8 	.word	0x200014a8
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40020c00 	.word	0x40020c00
 8003eec:	40021400 	.word	0x40021400
 8003ef0:	20001918 	.word	0x20001918
 8003ef4:	0800dcb8 	.word	0x0800dcb8
	} else {
		printf("LoRa failed :( \n Error code: %d \n", LoRa_status);
 8003ef8:	f8b7 3484 	ldrh.w	r3, [r7, #1156]	; 0x484
 8003efc:	4619      	mov	r1, r3
 8003efe:	4884      	ldr	r0, [pc, #528]	; (8004110 <main+0x368>)
 8003f00:	f006 fae6 	bl	800a4d0 <iprintf>
	}
//	LoRa_setLowDaraRateOptimization(&myLoRa, 1);
	LoRa_startReceiving(&myLoRa);
 8003f04:	4883      	ldr	r0, [pc, #524]	; (8004114 <main+0x36c>)
 8003f06:	f7ff f87e 	bl	8003006 <LoRa_startReceiving>
	uint8_t received_data[8];
	uint8_t packet_size = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
	/*Lora init end===========================================================*/

	IMU_Init();
 8003f10:	f7fd f898 	bl	8001044 <IMU_Init>

	/*temp init ##############################################################*/
	uint32_t ADC_read;
	int ADC_resolution=12;
 8003f14:	230c      	movs	r3, #12
 8003f16:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	int Vin_temp = 3300;
 8003f1a:	f640 43e4 	movw	r3, #3300	; 0xce4
 8003f1e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	float Vout;//Vout,Vin_temp:in mV
	float Vbias = 500;//TMP36 0 degree bias=500mV
 8003f22:	4b7d      	ldr	r3, [pc, #500]	; (8004118 <main+0x370>)
 8003f24:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8003f28:	6013      	str	r3, [r2, #0]
	float OutV_Temp_ratio=10;//OutV:mV,Temp:Celsius
 8003f2a:	4b7c      	ldr	r3, [pc, #496]	; (800411c <main+0x374>)
 8003f2c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8003f30:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t timer = HAL_GetTick();
 8003f32:	f001 f80d 	bl	8004f50 <HAL_GetTick>
 8003f36:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
	uint32_t loopRunTime = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	bool GPS_no_calied = true;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487

	IMU_DATA_TO_SEND_t data2Lora;

	data_counter = 0;
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <main+0x378>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	801a      	strh	r2, [r3, #0]

	printf("init finish!!!!!!!!!!!!\n");
 8003f4c:	4875      	ldr	r0, [pc, #468]	; (8004124 <main+0x37c>)
 8003f4e:	f006 fb25 	bl	800a59c <puts>
//		IMU_process_data();
//
//		IMU_State_mechine();

		/* Get the RTC current Time */
		HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8003f52:	2200      	movs	r2, #0
 8003f54:	4974      	ldr	r1, [pc, #464]	; (8004128 <main+0x380>)
 8003f56:	4875      	ldr	r0, [pc, #468]	; (800412c <main+0x384>)
 8003f58:	f003 f9d4 	bl	8007304 <HAL_RTC_GetTime>
		/* Get the RTC current Date */
		HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4974      	ldr	r1, [pc, #464]	; (8004130 <main+0x388>)
 8003f60:	4872      	ldr	r0, [pc, #456]	; (800412c <main+0x384>)
 8003f62:	f003 fab1 	bl	80074c8 <HAL_RTC_GetDate>

		//Calibrate date ,only run once
		if (	(imu.myGnssData.numSV >= 4)
 8003f66:	4b73      	ldr	r3, [pc, #460]	; (8004134 <main+0x38c>)
 8003f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	f240 80a3 	bls.w	80040bc <main+0x314>
				&& ((GetDate.Year + 2000) != imu.myGnssData.year)
 8003f76:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <main+0x388>)
 8003f78:	78db      	ldrb	r3, [r3, #3]
 8003f7a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003f7e:	4a6d      	ldr	r2, [pc, #436]	; (8004134 <main+0x38c>)
 8003f80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f84:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	f000 8097 	beq.w	80040bc <main+0x314>
				&& (GPS_no_calied)) {
 8003f8e:	f897 3487 	ldrb.w	r3, [r7, #1159]	; 0x487
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8092 	beq.w	80040bc <main+0x314>
			printf("Reset RTC timer\n");
 8003f98:	4867      	ldr	r0, [pc, #412]	; (8004138 <main+0x390>)
 8003f9a:	f006 faff 	bl	800a59c <puts>
			RTC_TimeTypeDef IMU_time;
			RTC_DateTypeDef IMU_date;

			IMU_date.Year = imu.myGnssData.year - 2000;
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <main+0x38c>)
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	3330      	adds	r3, #48	; 0x30
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003fb2:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8003fb6:	70da      	strb	r2, [r3, #3]
			IMU_date.Month = imu.myGnssData.month;
 8003fb8:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <main+0x38c>)
 8003fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbe:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8003fc2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003fc6:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8003fca:	705a      	strb	r2, [r3, #1]
			IMU_date.Date = imu.myGnssData.day;
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <main+0x38c>)
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8003fd6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003fda:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8003fde:	709a      	strb	r2, [r3, #2]
			IMU_time.Hours = imu.myGnssData.hour;
 8003fe0:	4b54      	ldr	r3, [pc, #336]	; (8004134 <main+0x38c>)
 8003fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003fea:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003fee:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8003ff2:	701a      	strb	r2, [r3, #0]
			IMU_time.Minutes = imu.myGnssData.minute;
 8003ff4:	4b4f      	ldr	r3, [pc, #316]	; (8004134 <main+0x38c>)
 8003ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffa:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8003ffe:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004002:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8004006:	705a      	strb	r2, [r3, #1]
			IMU_time.Seconds = imu.myGnssData.second;
 8004008:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <main+0x38c>)
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8004012:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004016:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800401a:	709a      	strb	r2, [r3, #2]

			IMU_date.Year = imu.myGnssData.year - 2000;
 800401c:	4b45      	ldr	r3, [pc, #276]	; (8004134 <main+0x38c>)
 800401e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004022:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004026:	b2db      	uxtb	r3, r3
 8004028:	3330      	adds	r3, #48	; 0x30
 800402a:	b2da      	uxtb	r2, r3
 800402c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004030:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8004034:	70da      	strb	r2, [r3, #3]
			IMU_date.Month = imu.myGnssData.month;
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <main+0x38c>)
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8004040:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004044:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8004048:	705a      	strb	r2, [r3, #1]
			IMU_date.Date = imu.myGnssData.day;
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <main+0x38c>)
 800404c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004050:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8004054:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004058:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800405c:	709a      	strb	r2, [r3, #2]
			IMU_time.Hours = imu.myGnssData.hour;
 800405e:	4b35      	ldr	r3, [pc, #212]	; (8004134 <main+0x38c>)
 8004060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004064:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8004068:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800406c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8004070:	701a      	strb	r2, [r3, #0]
			IMU_time.Minutes = imu.myGnssData.minute;
 8004072:	4b30      	ldr	r3, [pc, #192]	; (8004134 <main+0x38c>)
 8004074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004078:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800407c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004080:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8004084:	705a      	strb	r2, [r3, #1]
			IMU_time.Seconds = imu.myGnssData.second;
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <main+0x38c>)
 8004088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8004090:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004094:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8004098:	709a      	strb	r2, [r3, #2]

			HAL_RTC_SetTime(&hrtc, &IMU_time, RTC_FORMAT_BIN);
 800409a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800409e:	2200      	movs	r2, #0
 80040a0:	4619      	mov	r1, r3
 80040a2:	4822      	ldr	r0, [pc, #136]	; (800412c <main+0x384>)
 80040a4:	f003 f894 	bl	80071d0 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &IMU_date, RTC_FORMAT_BIN);
 80040a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040ac:	2200      	movs	r2, #0
 80040ae:	4619      	mov	r1, r3
 80040b0:	481e      	ldr	r0, [pc, #120]	; (800412c <main+0x384>)
 80040b2:	f003 f985 	bl	80073c0 <HAL_RTC_SetDate>

			GPS_no_calied = false;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
		}

		/*check fly mode switch*/
		modeSwitch = HAL_GPIO_ReadPin(Mode_Switch_GPIO_Port,
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	481f      	ldr	r0, [pc, #124]	; (800413c <main+0x394>)
 80040c0:	f002 f988 	bl	80063d4 <HAL_GPIO_ReadPin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <main+0x398>)
 80040ca:	701a      	strb	r2, [r3, #0]
		Mode_Switch_Pin);
		if (modeSwitch == GPIO_PIN_RESET && prevModeSwitch == GPIO_PIN_SET
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <main+0x398>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d145      	bne.n	8004160 <main+0x3b8>
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <main+0x39c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d141      	bne.n	8004160 <main+0x3b8>
				&& HAL_GetTick() > flyModeDebounce) {
 80040dc:	f000 ff38 	bl	8004f50 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b19      	ldr	r3, [pc, #100]	; (8004148 <main+0x3a0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d93a      	bls.n	8004160 <main+0x3b8>
			flyModeDebounce = HAL_GetTick() + 1000;
 80040ea:	f000 ff31 	bl	8004f50 <HAL_GetTick>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80040f4:	4a14      	ldr	r2, [pc, #80]	; (8004148 <main+0x3a0>)
 80040f6:	6013      	str	r3, [r2, #0]
			if (curFlyMode == config) {
 80040f8:	4b14      	ldr	r3, [pc, #80]	; (800414c <main+0x3a4>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d129      	bne.n	8004154 <main+0x3ac>
				curFlyMode = onFly;
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <main+0x3a4>)
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
				printf("fly mode now --> on fly\n");
 8004106:	4812      	ldr	r0, [pc, #72]	; (8004150 <main+0x3a8>)
 8004108:	f006 fa48 	bl	800a59c <puts>
 800410c:	e028      	b.n	8004160 <main+0x3b8>
 800410e:	bf00      	nop
 8004110:	0800dccc 	.word	0x0800dccc
 8004114:	200014a8 	.word	0x200014a8
 8004118:	43fa0000 	.word	0x43fa0000
 800411c:	41200000 	.word	0x41200000
 8004120:	200014e0 	.word	0x200014e0
 8004124:	0800dcf0 	.word	0x0800dcf0
 8004128:	20001494 	.word	0x20001494
 800412c:	200018f8 	.word	0x200018f8
 8004130:	20001490 	.word	0x20001490
 8004134:	20000314 	.word	0x20000314
 8004138:	0800dd08 	.word	0x0800dd08
 800413c:	40020000 	.word	0x40020000
 8004140:	200018f0 	.word	0x200018f0
 8004144:	200018f1 	.word	0x200018f1
 8004148:	200018f4 	.word	0x200018f4
 800414c:	200018f2 	.word	0x200018f2
 8004150:	0800dd18 	.word	0x0800dd18
			} else {
				curFlyMode = config;
 8004154:	4b98      	ldr	r3, [pc, #608]	; (80043b8 <main+0x610>)
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
				printf("fly mode now --> config\n");
 800415a:	4898      	ldr	r0, [pc, #608]	; (80043bc <main+0x614>)
 800415c:	f006 fa1e 	bl	800a59c <puts>
			}
		}
		prevModeSwitch = modeSwitch;
 8004160:	4b97      	ldr	r3, [pc, #604]	; (80043c0 <main+0x618>)
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	4b97      	ldr	r3, [pc, #604]	; (80043c4 <main+0x61c>)
 8004166:	701a      	strb	r2, [r3, #0]

		//LoRa_receive()
		HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_SET); //low frequency port switch, RESET for transmit, SET for receive
 8004168:	2201      	movs	r2, #1
 800416a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800416e:	4896      	ldr	r0, [pc, #600]	; (80043c8 <main+0x620>)
 8004170:	f002 f948 	bl	8006404 <HAL_GPIO_WritePin>

//		packet_size = LoRa_receive(&myLoRa, received_data, 10);
		packet_size = LoRa_receive_single(&myLoRa, received_data, sizeof(received_data)/sizeof(received_data[0]));
 8004174:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004178:	2208      	movs	r2, #8
 800417a:	4619      	mov	r1, r3
 800417c:	4893      	ldr	r0, [pc, #588]	; (80043cc <main+0x624>)
 800417e:	f7fe ff4e 	bl	800301e <LoRa_receive_single>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
		/*Process data*/
		if (packet_size != 0) {
 8004188:	f897 3483 	ldrb.w	r3, [r7, #1155]	; 0x483
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00f      	beq.n	80041b0 <main+0x408>
			printf("LoRa get: %s", received_data);
 8004190:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004194:	4619      	mov	r1, r3
 8004196:	488e      	ldr	r0, [pc, #568]	; (80043d0 <main+0x628>)
 8004198:	f006 f99a 	bl	800a4d0 <iprintf>
			if(received_data[0] == 1){ //reset frame

			}
			if(received_data[0] == 3){ //switch to flight mode
 800419c:	f897 3458 	ldrb.w	r3, [r7, #1112]	; 0x458
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d105      	bne.n	80041b0 <main+0x408>
				curFlyMode = onFly;
 80041a4:	4b84      	ldr	r3, [pc, #528]	; (80043b8 <main+0x610>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
				printf("fly mode now --> on fly\n");
 80041aa:	488a      	ldr	r0, [pc, #552]	; (80043d4 <main+0x62c>)
 80041ac:	f006 f9f6 	bl	800a59c <puts>
			}
		}

		/*temp sensor*/
		HAL_ADC_Start(&hadc1);
 80041b0:	4889      	ldr	r0, [pc, #548]	; (80043d8 <main+0x630>)
 80041b2:	f000 ff41 	bl	8005038 <HAL_ADC_Start>
		ADC_read = HAL_ADC_GetValue(&hadc1);
 80041b6:	4888      	ldr	r0, [pc, #544]	; (80043d8 <main+0x630>)
 80041b8:	f001 f810 	bl	80051dc <HAL_ADC_GetValue>
 80041bc:	f8c7 046c 	str.w	r0, [r7, #1132]	; 0x46c
		Vout = ADC_read/(pow(2,ADC_resolution)-1)*Vin_temp;
 80041c0:	f8d7 046c 	ldr.w	r0, [r7, #1132]	; 0x46c
 80041c4:	f7fc f9ae 	bl	8000524 <__aeabi_ui2d>
 80041c8:	4604      	mov	r4, r0
 80041ca:	460d      	mov	r5, r1
 80041cc:	f8d7 047c 	ldr.w	r0, [r7, #1148]	; 0x47c
 80041d0:	f7fc f9b8 	bl	8000544 <__aeabi_i2d>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	ec43 2b11 	vmov	d1, r2, r3
 80041dc:	ed9f 0b74 	vldr	d0, [pc, #464]	; 80043b0 <main+0x608>
 80041e0:	f008 f978 	bl	800c4d4 <pow>
 80041e4:	ec51 0b10 	vmov	r0, r1, d0
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	4b7b      	ldr	r3, [pc, #492]	; (80043dc <main+0x634>)
 80041ee:	f7fc f85b 	bl	80002a8 <__aeabi_dsub>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4620      	mov	r0, r4
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7fc fb37 	bl	800086c <__aeabi_ddiv>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4614      	mov	r4, r2
 8004204:	461d      	mov	r5, r3
 8004206:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800420a:	f7fc f99b 	bl	8000544 <__aeabi_i2d>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f7fc f9ff 	bl	8000618 <__aeabi_dmul>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	f7fc fcf1 	bl	8000c08 <__aeabi_d2f>
 8004226:	4603      	mov	r3, r0
 8004228:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800422c:	6013      	str	r3, [r2, #0]
		data_PA_temp = (Vout-Vbias)/OutV_Temp_ratio;//temp:in Celsius
 800422e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004232:	ed93 7a00 	vldr	s14, [r3]
 8004236:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004242:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004246:	ed93 7a00 	vldr	s14, [r3]
 800424a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424e:	f207 4364 	addw	r3, r7, #1124	; 0x464
 8004252:	edc3 7a00 	vstr	s15, [r3]
		printf("temp: %f\n", data_PA_temp);
 8004256:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	f7fc f984 	bl	8000568 <__aeabi_f2d>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	485e      	ldr	r0, [pc, #376]	; (80043e0 <main+0x638>)
 8004266:	f006 f933 	bl	800a4d0 <iprintf>

		//====================================================================
		if (HAL_GetTick() - timer > 333) {
 800426a:	f000 fe71 	bl	8004f50 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 800427a:	f4ff ae6a 	bcc.w	8003f52 <main+0x1aa>

			data_hour = GetTime.Hours;
 800427e:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <main+0x63c>)
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <main+0x640>)
 8004284:	701a      	strb	r2, [r3, #0]
			data_min = GetTime.Minutes;
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <main+0x63c>)
 8004288:	785a      	ldrb	r2, [r3, #1]
 800428a:	4b58      	ldr	r3, [pc, #352]	; (80043ec <main+0x644>)
 800428c:	701a      	strb	r2, [r3, #0]
			data_sec = GetTime.Seconds;
 800428e:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <main+0x63c>)
 8004290:	789a      	ldrb	r2, [r3, #2]
 8004292:	4b57      	ldr	r3, [pc, #348]	; (80043f0 <main+0x648>)
 8004294:	701a      	strb	r2, [r3, #0]
			data_subSec = ((float) (255 - GetTime.SubSeconds)) * 1.
 8004296:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <main+0x63c>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	ee17 0a90 	vmov	r0, s15
 80042aa:	f7fc f95d 	bl	8000568 <__aeabi_f2d>
 80042ae:	4604      	mov	r4, r0
 80042b0:	460d      	mov	r5, r1
					/ ((float) (GetTime.SecondFraction + 1)) * 100;
 80042b2:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <main+0x63c>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	3301      	adds	r3, #1
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c0:	ee17 0a90 	vmov	r0, s15
 80042c4:	f7fc f950 	bl	8000568 <__aeabi_f2d>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fc facc 	bl	800086c <__aeabi_ddiv>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <main+0x64c>)
 80042e2:	f7fc f999 	bl	8000618 <__aeabi_dmul>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
			data_subSec = ((float) (255 - GetTime.SubSeconds)) * 1.
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	f7fc fc6b 	bl	8000bc8 <__aeabi_d2uiz>
 80042f2:	4603      	mov	r3, r0
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <main+0x650>)
 80042f8:	701a      	strb	r2, [r3, #0]

			//packing data from IMU to send via Lora
			if (curFlyMode == config) {
 80042fa:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <main+0x610>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <main+0x568>
				imu_data_conv_config(&imu, &data2Lora);
 8004302:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004306:	4619      	mov	r1, r3
 8004308:	483c      	ldr	r0, [pc, #240]	; (80043fc <main+0x654>)
 800430a:	f7ff fb4f 	bl	80039ac <imu_data_conv_config>
 800430e:	e009      	b.n	8004324 <main+0x57c>
//				imu_data_conv_config_test(&imu, &data2Lora);
			} else if (curFlyMode == onFly) {
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <main+0x610>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d105      	bne.n	8004324 <main+0x57c>
				imu_data_conv_onFly(&imu, &data2Lora);
 8004318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800431c:	4619      	mov	r1, r3
 800431e:	4837      	ldr	r0, [pc, #220]	; (80043fc <main+0x654>)
 8004320:	f7ff fc6a 	bl	8003bf8 <imu_data_conv_onFly>
			}

			//LoRa_transmit()
#if 1
			HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_RESET);
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800432a:	4827      	ldr	r0, [pc, #156]	; (80043c8 <main+0x620>)
 800432c:	f002 f86a 	bl	8006404 <HAL_GPIO_WritePin>
			uint8_t err = LoRa_transmit(&myLoRa, data2Lora.datas, data2Lora.length, TRANSMIT_TIMEOUT);
 8004330:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004334:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004338:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800433c:	b2da      	uxtb	r2, r3
 800433e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8004342:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004346:	4821      	ldr	r0, [pc, #132]	; (80043cc <main+0x624>)
 8004348:	f7fe fe05 	bl	8002f56 <LoRa_transmit>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
			if (err == 0) {
 8004352:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <main+0x5ba>
				printf("LoRa_transmit timed out\n");
 800435a:	4829      	ldr	r0, [pc, #164]	; (8004400 <main+0x658>)
 800435c:	f006 f91e 	bl	800a59c <puts>
 8004360:	e006      	b.n	8004370 <main+0x5c8>
			} else {
				printf("LoRa_transmit seccessed\n");
 8004362:	4828      	ldr	r0, [pc, #160]	; (8004404 <main+0x65c>)
 8004364:	f006 f91a 	bl	800a59c <puts>
				HAL_Delay(1000);
 8004368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800436c:	f000 fdfc 	bl	8004f68 <HAL_Delay>
			}
			HAL_GPIO_WritePin(FEM_CPS_GPIO_Port, FEM_CPS_Pin, GPIO_PIN_SET);
 8004370:	2201      	movs	r2, #1
 8004372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004376:	4814      	ldr	r0, [pc, #80]	; (80043c8 <main+0x620>)
 8004378:	f002 f844 	bl	8006404 <HAL_GPIO_WritePin>
#endif

			loopRunTime = HAL_GetTick() - loopRunTime;
 800437c:	f000 fde8 	bl	8004f50 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
//					imu.quaternionWXYZ[1], imu.quaternionWXYZ[2],
//					imu.quaternionWXYZ[3], data_PA_temp, data2Lora.length,
//					loopRunTime, data_counter);


			timer = HAL_GetTick();
 800438c:	f000 fde0 	bl	8004f50 <HAL_GetTick>
 8004390:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
			data_counter += 1;
 8004394:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <main+0x660>)
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <main+0x660>)
 800439e:	801a      	strh	r2, [r3, #0]
			loopRunTime = HAL_GetTick();
 80043a0:	f000 fdd6 	bl	8004f50 <HAL_GetTick>
 80043a4:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
		HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80043a8:	e5d3      	b.n	8003f52 <main+0x1aa>
 80043aa:	bf00      	nop
 80043ac:	f3af 8000 	nop.w
 80043b0:	00000000 	.word	0x00000000
 80043b4:	40000000 	.word	0x40000000
 80043b8:	200018f2 	.word	0x200018f2
 80043bc:	0800dd30 	.word	0x0800dd30
 80043c0:	200018f0 	.word	0x200018f0
 80043c4:	200018f1 	.word	0x200018f1
 80043c8:	40020c00 	.word	0x40020c00
 80043cc:	200014a8 	.word	0x200014a8
 80043d0:	0800dd48 	.word	0x0800dd48
 80043d4:	0800dd18 	.word	0x0800dd18
 80043d8:	20001400 	.word	0x20001400
 80043dc:	3ff00000 	.word	0x3ff00000
 80043e0:	0800dd58 	.word	0x0800dd58
 80043e4:	20001494 	.word	0x20001494
 80043e8:	200014e2 	.word	0x200014e2
 80043ec:	200014e3 	.word	0x200014e3
 80043f0:	200014e4 	.word	0x200014e4
 80043f4:	40590000 	.word	0x40590000
 80043f8:	200014e5 	.word	0x200014e5
 80043fc:	20000314 	.word	0x20000314
 8004400:	0800dd64 	.word	0x0800dd64
 8004404:	0800dd7c 	.word	0x0800dd7c
 8004408:	200014e0 	.word	0x200014e0

0800440c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b094      	sub	sp, #80	; 0x50
 8004410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004412:	f107 0320 	add.w	r3, r7, #32
 8004416:	2230      	movs	r2, #48	; 0x30
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f006 f99e 	bl	800a75c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <SystemClock_Config+0xd0>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	4a28      	ldr	r2, [pc, #160]	; (80044dc <SystemClock_Config+0xd0>)
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443e:	6413      	str	r3, [r2, #64]	; 0x40
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <SystemClock_Config+0xd0>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800444c:	2300      	movs	r3, #0
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <SystemClock_Config+0xd4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004458:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <SystemClock_Config+0xd4>)
 800445a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <SystemClock_Config+0xd4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800446c:	2305      	movs	r3, #5
 800446e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004476:	2301      	movs	r3, #1
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800447a:	2302      	movs	r3, #2
 800447c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800447e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004484:	2308      	movs	r3, #8
 8004486:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004488:	2354      	movs	r3, #84	; 0x54
 800448a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800448c:	2302      	movs	r3, #2
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004490:	2304      	movs	r3, #4
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004494:	f107 0320 	add.w	r3, r7, #32
 8004498:	4618      	mov	r0, r3
 800449a:	f001 ffcd 	bl	8006438 <HAL_RCC_OscConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80044a4:	f000 f81e 	bl	80044e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044a8:	230f      	movs	r3, #15
 80044aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044ac:	2302      	movs	r3, #2
 80044ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80044be:	f107 030c 	add.w	r3, r7, #12
 80044c2:	2102      	movs	r1, #2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f002 fa2f 	bl	8006928 <HAL_RCC_ClockConfig>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80044d0:	f000 f808 	bl	80044e4 <Error_Handler>
  }
}
 80044d4:	bf00      	nop
 80044d6:	3750      	adds	r7, #80	; 0x50
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40007000 	.word	0x40007000

080044e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044e8:	b672      	cpsid	i
}
 80044ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80044ec:	e7fe      	b.n	80044ec <Error_Handler+0x8>
	...

080044f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80044f6:	1d3b      	adds	r3, r7, #4
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004504:	2300      	movs	r3, #0
 8004506:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <MX_RTC_Init+0xac>)
 800450a:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <MX_RTC_Init+0xb0>)
 800450c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <MX_RTC_Init+0xac>)
 8004510:	2200      	movs	r2, #0
 8004512:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004514:	4b21      	ldr	r3, [pc, #132]	; (800459c <MX_RTC_Init+0xac>)
 8004516:	227f      	movs	r2, #127	; 0x7f
 8004518:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <MX_RTC_Init+0xac>)
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004520:	4b1e      	ldr	r3, [pc, #120]	; (800459c <MX_RTC_Init+0xac>)
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <MX_RTC_Init+0xac>)
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <MX_RTC_Init+0xac>)
 800452e:	2200      	movs	r2, #0
 8004530:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004532:	481a      	ldr	r0, [pc, #104]	; (800459c <MX_RTC_Init+0xac>)
 8004534:	f002 fdd6 	bl	80070e4 <HAL_RTC_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800453e:	f7ff ffd1 	bl	80044e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004542:	2300      	movs	r3, #0
 8004544:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004546:	2300      	movs	r3, #0
 8004548:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800454a:	2300      	movs	r3, #0
 800454c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	2201      	movs	r2, #1
 800455a:	4619      	mov	r1, r3
 800455c:	480f      	ldr	r0, [pc, #60]	; (800459c <MX_RTC_Init+0xac>)
 800455e:	f002 fe37 	bl	80071d0 <HAL_RTC_SetTime>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004568:	f7ff ffbc 	bl	80044e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800456c:	2301      	movs	r3, #1
 800456e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004570:	2301      	movs	r3, #1
 8004572:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004574:	2301      	movs	r3, #1
 8004576:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004578:	2300      	movs	r3, #0
 800457a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800457c:	463b      	mov	r3, r7
 800457e:	2201      	movs	r2, #1
 8004580:	4619      	mov	r1, r3
 8004582:	4806      	ldr	r0, [pc, #24]	; (800459c <MX_RTC_Init+0xac>)
 8004584:	f002 ff1c 	bl	80073c0 <HAL_RTC_SetDate>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800458e:	f7ff ffa9 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200018f8 	.word	0x200018f8
 80045a0:	40002800 	.word	0x40002800

080045a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	; 0x38
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	2230      	movs	r2, #48	; 0x30
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f006 f8d1 	bl	800a75c <memset>
  if(rtcHandle->Instance==RTC)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <HAL_RTC_MspInit+0x4c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045c4:	2320      	movs	r3, #32
 80045c6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80045c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	4618      	mov	r0, r3
 80045d4:	f002 fbc6 	bl	8006d64 <HAL_RCCEx_PeriphCLKConfig>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80045de:	f7ff ff81 	bl	80044e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_RTC_MspInit+0x50>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80045e8:	bf00      	nop
 80045ea:	3738      	adds	r7, #56	; 0x38
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40002800 	.word	0x40002800
 80045f4:	42470e3c 	.word	0x42470e3c

080045f8 <MX_SPI4_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <MX_SPI4_Init+0x64>)
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <MX_SPI4_Init+0x68>)
 8004600:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <MX_SPI4_Init+0x64>)
 8004604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004608:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <MX_SPI4_Init+0x64>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <MX_SPI4_Init+0x64>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <MX_SPI4_Init+0x64>)
 8004618:	2200      	movs	r2, #0
 800461a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <MX_SPI4_Init+0x64>)
 800461e:	2200      	movs	r2, #0
 8004620:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004622:	4b0e      	ldr	r3, [pc, #56]	; (800465c <MX_SPI4_Init+0x64>)
 8004624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004628:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <MX_SPI4_Init+0x64>)
 800462c:	2210      	movs	r2, #16
 800462e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <MX_SPI4_Init+0x64>)
 8004632:	2200      	movs	r2, #0
 8004634:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <MX_SPI4_Init+0x64>)
 8004638:	2200      	movs	r2, #0
 800463a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <MX_SPI4_Init+0x64>)
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <MX_SPI4_Init+0x64>)
 8004644:	220a      	movs	r2, #10
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004648:	4804      	ldr	r0, [pc, #16]	; (800465c <MX_SPI4_Init+0x64>)
 800464a:	f003 f849 	bl	80076e0 <HAL_SPI_Init>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004654:	f7ff ff46 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20001918 	.word	0x20001918
 8004660:	40013400 	.word	0x40013400

08004664 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a4c      	ldr	r2, [pc, #304]	; (80047b4 <HAL_SPI_MspInit+0x150>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f040 8091 	bne.w	80047aa <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	4b4a      	ldr	r3, [pc, #296]	; (80047b8 <HAL_SPI_MspInit+0x154>)
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	4a49      	ldr	r2, [pc, #292]	; (80047b8 <HAL_SPI_MspInit+0x154>)
 8004692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004696:	6453      	str	r3, [r2, #68]	; 0x44
 8004698:	4b47      	ldr	r3, [pc, #284]	; (80047b8 <HAL_SPI_MspInit+0x154>)
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	4b43      	ldr	r3, [pc, #268]	; (80047b8 <HAL_SPI_MspInit+0x154>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4a42      	ldr	r2, [pc, #264]	; (80047b8 <HAL_SPI_MspInit+0x154>)
 80046ae:	f043 0310 	orr.w	r3, r3, #16
 80046b2:	6313      	str	r3, [r2, #48]	; 0x30
 80046b4:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <HAL_SPI_MspInit+0x154>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80046c0:	2364      	movs	r3, #100	; 0x64
 80046c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c4:	2302      	movs	r3, #2
 80046c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046cc:	2303      	movs	r3, #3
 80046ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80046d0:	2305      	movs	r3, #5
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	4619      	mov	r1, r3
 80046da:	4838      	ldr	r0, [pc, #224]	; (80047bc <HAL_SPI_MspInit+0x158>)
 80046dc:	f001 fcce 	bl	800607c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80046e0:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 80046e2:	4a38      	ldr	r2, [pc, #224]	; (80047c4 <HAL_SPI_MspInit+0x160>)
 80046e4:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80046e6:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 80046e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046ec:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046ee:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046f4:	4b32      	ldr	r3, [pc, #200]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046fa:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 80046fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004700:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004702:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 8004704:	2200      	movs	r2, #0
 8004706:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 800470a:	2200      	movs	r2, #0
 800470c:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800470e:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 8004710:	2200      	movs	r2, #0
 8004712:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 8004716:	2200      	movs	r2, #0
 8004718:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 800471c:	2200      	movs	r2, #0
 800471e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8004720:	4827      	ldr	r0, [pc, #156]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 8004722:	f001 f8a9 	bl	8005878 <HAL_DMA_Init>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800472c:	f7ff feda 	bl	80044e4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 8004734:	64da      	str	r2, [r3, #76]	; 0x4c
 8004736:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_SPI_MspInit+0x15c>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 800473e:	4a23      	ldr	r2, [pc, #140]	; (80047cc <HAL_SPI_MspInit+0x168>)
 8004740:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004748:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004752:	2200      	movs	r2, #0
 8004754:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800475c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004766:	2200      	movs	r2, #0
 8004768:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 800476c:	2200      	movs	r2, #0
 800476e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004770:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004772:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004776:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 800477a:	2200      	movs	r2, #0
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800477e:	4812      	ldr	r0, [pc, #72]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004780:	f001 f87a 	bl	8005878 <HAL_DMA_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800478a:	f7ff feab 	bl	80044e4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004792:	649a      	str	r2, [r3, #72]	; 0x48
 8004794:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <HAL_SPI_MspInit+0x164>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	2054      	movs	r0, #84	; 0x54
 80047a0:	f001 f833 	bl	800580a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80047a4:	2054      	movs	r0, #84	; 0x54
 80047a6:	f001 f84c 	bl	8005842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80047aa:	bf00      	nop
 80047ac:	3728      	adds	r7, #40	; 0x28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40013400 	.word	0x40013400
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40021000 	.word	0x40021000
 80047c0:	20001970 	.word	0x20001970
 80047c4:	40026410 	.word	0x40026410
 80047c8:	200019d0 	.word	0x200019d0
 80047cc:	40026428 	.word	0x40026428

080047d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	4b10      	ldr	r3, [pc, #64]	; (800481c <HAL_MspInit+0x4c>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	4a0f      	ldr	r2, [pc, #60]	; (800481c <HAL_MspInit+0x4c>)
 80047e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e4:	6453      	str	r3, [r2, #68]	; 0x44
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <HAL_MspInit+0x4c>)
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_MspInit+0x4c>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <HAL_MspInit+0x4c>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_MspInit+0x4c>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800

08004820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004824:	e7fe      	b.n	8004824 <NMI_Handler+0x4>

08004826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004826:	b480      	push	{r7}
 8004828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800482a:	e7fe      	b.n	800482a <HardFault_Handler+0x4>

0800482c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004830:	e7fe      	b.n	8004830 <MemManage_Handler+0x4>

08004832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004836:	e7fe      	b.n	8004836 <BusFault_Handler+0x4>

08004838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800483c:	e7fe      	b.n	800483c <UsageFault_Handler+0x4>

0800483e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800483e:	b480      	push	{r7}
 8004840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004850:	bf00      	nop
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800486c:	f000 fb5c 	bl	8004f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004870:	bf00      	nop
 8004872:	bd80      	pop	{r7, pc}

08004874 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004878:	4802      	ldr	r0, [pc, #8]	; (8004884 <DMA1_Stream1_IRQHandler+0x10>)
 800487a:	f001 f995 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20001b7c 	.word	0x20001b7c

08004888 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <DMA1_Stream3_IRQHandler+0x10>)
 800488e:	f001 f98b 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20001bdc 	.word	0x20001bdc

0800489c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048a0:	4802      	ldr	r0, [pc, #8]	; (80048ac <USART1_IRQHandler+0x10>)
 80048a2:	f003 ffa9 	bl	80087f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20001a34 	.word	0x20001a34

080048b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80048b4:	4802      	ldr	r0, [pc, #8]	; (80048c0 <USART3_IRQHandler+0x10>)
 80048b6:	f003 ff9f 	bl	80087f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20001a78 	.word	0x20001a78

080048c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80048c8:	4802      	ldr	r0, [pc, #8]	; (80048d4 <DMA2_Stream0_IRQHandler+0x10>)
 80048ca:	f001 f96d 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20001970 	.word	0x20001970

080048d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80048dc:	4802      	ldr	r0, [pc, #8]	; (80048e8 <DMA2_Stream1_IRQHandler+0x10>)
 80048de:	f001 f963 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200019d0 	.word	0x200019d0

080048ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <DMA2_Stream2_IRQHandler+0x10>)
 80048f2:	f001 f959 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20001abc 	.word	0x20001abc

08004900 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004904:	4802      	ldr	r0, [pc, #8]	; (8004910 <DMA2_Stream7_IRQHandler+0x10>)
 8004906:	f001 f94f 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20001b1c 	.word	0x20001b1c

08004914 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004918:	4802      	ldr	r0, [pc, #8]	; (8004924 <SPI4_IRQHandler+0x10>)
 800491a:	f003 fb59 	bl	8007fd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20001918 	.word	0x20001918

08004928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return 1;
 800492c:	2301      	movs	r3, #1
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <_kill>:

int _kill(int pid, int sig)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004942:	f005 ff5d 	bl	800a800 <__errno>
 8004946:	4603      	mov	r3, r0
 8004948:	2216      	movs	r2, #22
 800494a:	601a      	str	r2, [r3, #0]
  return -1;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <_exit>:

void _exit (int status)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004960:	f04f 31ff 	mov.w	r1, #4294967295
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ffe7 	bl	8004938 <_kill>
  while (1) {}    /* Make sure we hang here */
 800496a:	e7fe      	b.n	800496a <_exit+0x12>

0800496c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e00a      	b.n	8004994 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800497e:	f3af 8000 	nop.w
 8004982:	4601      	mov	r1, r0
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	60ba      	str	r2, [r7, #8]
 800498a:	b2ca      	uxtb	r2, r1
 800498c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	3301      	adds	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	dbf0      	blt.n	800497e <_read+0x12>
  }

  return len;
 800499c:	687b      	ldr	r3, [r7, #4]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e009      	b.n	80049cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	60ba      	str	r2, [r7, #8]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe fefb 	bl	80037bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3301      	adds	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	dbf1      	blt.n	80049b8 <_write+0x12>
  }
  return len;
 80049d4:	687b      	ldr	r3, [r7, #4]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <_close>:

int _close(int file)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a06:	605a      	str	r2, [r3, #4]
  return 0;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <_isatty>:

int _isatty(int file)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <_sbrk+0x5c>)
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <_sbrk+0x60>)
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a5c:	4b13      	ldr	r3, [pc, #76]	; (8004aac <_sbrk+0x64>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <_sbrk+0x64>)
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <_sbrk+0x68>)
 8004a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <_sbrk+0x64>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d207      	bcs.n	8004a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a78:	f005 fec2 	bl	800a800 <__errno>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	220c      	movs	r2, #12
 8004a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	e009      	b.n	8004a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <_sbrk+0x64>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <_sbrk+0x64>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	4a05      	ldr	r2, [pc, #20]	; (8004aac <_sbrk+0x64>)
 8004a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20030000 	.word	0x20030000
 8004aa8:	00000400 	.word	0x00000400
 8004aac:	20001a30 	.word	0x20001a30
 8004ab0:	20001d90 	.word	0x20001d90

08004ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <SystemInit+0x20>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <SystemInit+0x20>)
 8004ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ac8:	bf00      	nop
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <MX_USART1_UART_Init+0x50>)
 8004ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004afe:	220c      	movs	r2, #12
 8004b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b0e:	4805      	ldr	r0, [pc, #20]	; (8004b24 <MX_USART1_UART_Init+0x4c>)
 8004b10:	f003 fcae 	bl	8008470 <HAL_UART_Init>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004b1a:	f7ff fce3 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20001a34 	.word	0x20001a34
 8004b28:	40011000 	.word	0x40011000

08004b2c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b32:	4a11      	ldr	r2, [pc, #68]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8004b36:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b38:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <MX_USART3_UART_Init+0x50>)
 8004b3a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b50:	220c      	movs	r2, #12
 8004b52:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b60:	4804      	ldr	r0, [pc, #16]	; (8004b74 <MX_USART3_UART_Init+0x48>)
 8004b62:	f003 fc85 	bl	8008470 <HAL_UART_Init>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8004b6c:	f7ff fcba 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b70:	bf00      	nop
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20001a78 	.word	0x20001a78
 8004b78:	40004800 	.word	0x40004800
 8004b7c:	001e8480 	.word	0x001e8480

08004b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	; 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b88:	f107 031c 	add.w	r3, r7, #28
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a97      	ldr	r2, [pc, #604]	; (8004dfc <HAL_UART_MspInit+0x27c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	f040 8091 	bne.w	8004cc6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	4b95      	ldr	r3, [pc, #596]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	4a94      	ldr	r2, [pc, #592]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004bae:	f043 0310 	orr.w	r3, r3, #16
 8004bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8004bb4:	4b92      	ldr	r3, [pc, #584]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	4b8e      	ldr	r3, [pc, #568]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	4a8d      	ldr	r2, [pc, #564]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004bca:	f043 0302 	orr.w	r3, r3, #2
 8004bce:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd0:	4b8b      	ldr	r3, [pc, #556]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bdc:	23c0      	movs	r3, #192	; 0xc0
 8004bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be0:	2302      	movs	r3, #2
 8004be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be8:	2303      	movs	r3, #3
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004bec:	2307      	movs	r3, #7
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf0:	f107 031c 	add.w	r3, r7, #28
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4883      	ldr	r0, [pc, #524]	; (8004e04 <HAL_UART_MspInit+0x284>)
 8004bf8:	f001 fa40 	bl	800607c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004bfc:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004bfe:	4a83      	ldr	r2, [pc, #524]	; (8004e0c <HAL_UART_MspInit+0x28c>)
 8004c00:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004c02:	4b81      	ldr	r3, [pc, #516]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c0a:	4b7f      	ldr	r3, [pc, #508]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c10:	4b7d      	ldr	r3, [pc, #500]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c16:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c1e:	4b7a      	ldr	r3, [pc, #488]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c24:	4b78      	ldr	r3, [pc, #480]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004c2a:	4b77      	ldr	r3, [pc, #476]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c30:	4b75      	ldr	r3, [pc, #468]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c36:	4b74      	ldr	r3, [pc, #464]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004c3c:	4872      	ldr	r0, [pc, #456]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c3e:	f000 fe1b 	bl	8005878 <HAL_DMA_Init>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004c48:	f7ff fc4c 	bl	80044e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a6e      	ldr	r2, [pc, #440]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
 8004c52:	4a6d      	ldr	r2, [pc, #436]	; (8004e08 <HAL_UART_MspInit+0x288>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004c58:	4b6d      	ldr	r3, [pc, #436]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c5a:	4a6e      	ldr	r2, [pc, #440]	; (8004e14 <HAL_UART_MspInit+0x294>)
 8004c5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004c5e:	4b6c      	ldr	r3, [pc, #432]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c64:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c66:	4b6a      	ldr	r3, [pc, #424]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c68:	2240      	movs	r2, #64	; 0x40
 8004c6a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c6c:	4b68      	ldr	r3, [pc, #416]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c72:	4b67      	ldr	r3, [pc, #412]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c78:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c7a:	4b65      	ldr	r3, [pc, #404]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c80:	4b63      	ldr	r3, [pc, #396]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004c86:	4b62      	ldr	r3, [pc, #392]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c8c:	4b60      	ldr	r3, [pc, #384]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c92:	4b5f      	ldr	r3, [pc, #380]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004c98:	485d      	ldr	r0, [pc, #372]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004c9a:	f000 fded 	bl	8005878 <HAL_DMA_Init>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004ca4:	f7ff fc1e 	bl	80044e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a59      	ldr	r2, [pc, #356]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004cac:	635a      	str	r2, [r3, #52]	; 0x34
 8004cae:	4a58      	ldr	r2, [pc, #352]	; (8004e10 <HAL_UART_MspInit+0x290>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	2025      	movs	r0, #37	; 0x25
 8004cba:	f000 fda6 	bl	800580a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cbe:	2025      	movs	r0, #37	; 0x25
 8004cc0:	f000 fdbf 	bl	8005842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004cc4:	e096      	b.n	8004df4 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a53      	ldr	r2, [pc, #332]	; (8004e18 <HAL_UART_MspInit+0x298>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	f040 8091 	bne.w	8004df4 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	4b4a      	ldr	r3, [pc, #296]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	4a49      	ldr	r2, [pc, #292]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce2:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	4a42      	ldr	r2, [pc, #264]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004cf8:	f043 0308 	orr.w	r3, r3, #8
 8004cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfe:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <HAL_UART_MspInit+0x280>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_TX_Pin|IMU_RX_Pin;
 8004d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	2302      	movs	r3, #2
 8004d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d1c:	2307      	movs	r3, #7
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	4619      	mov	r1, r3
 8004d26:	483d      	ldr	r0, [pc, #244]	; (8004e1c <HAL_UART_MspInit+0x29c>)
 8004d28:	f001 f9a8 	bl	800607c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004d2c:	4b3c      	ldr	r3, [pc, #240]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d2e:	4a3d      	ldr	r2, [pc, #244]	; (8004e24 <HAL_UART_MspInit+0x2a4>)
 8004d30:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004d32:	4b3b      	ldr	r3, [pc, #236]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d38:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d3a:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d40:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d46:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d4e:	4b34      	ldr	r3, [pc, #208]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d54:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004d5a:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d60:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d66:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004d6c:	482c      	ldr	r0, [pc, #176]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d6e:	f000 fd83 	bl	8005878 <HAL_DMA_Init>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004d78:	f7ff fbb4 	bl	80044e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
 8004d82:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <HAL_UART_MspInit+0x2a0>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004d8a:	4a28      	ldr	r2, [pc, #160]	; (8004e2c <HAL_UART_MspInit+0x2ac>)
 8004d8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004d8e:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d94:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004d98:	2240      	movs	r2, #64	; 0x40
 8004d9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d9c:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004da2:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004daa:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dc2:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004dc8:	4817      	ldr	r0, [pc, #92]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004dca:	f000 fd55 	bl	8005878 <HAL_DMA_Init>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8004dd4:	f7ff fb86 	bl	80044e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <HAL_UART_MspInit+0x2a8>)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	2027      	movs	r0, #39	; 0x27
 8004dea:	f000 fd0e 	bl	800580a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004dee:	2027      	movs	r0, #39	; 0x27
 8004df0:	f000 fd27 	bl	8005842 <HAL_NVIC_EnableIRQ>
}
 8004df4:	bf00      	nop
 8004df6:	3730      	adds	r7, #48	; 0x30
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40011000 	.word	0x40011000
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40020400 	.word	0x40020400
 8004e08:	20001abc 	.word	0x20001abc
 8004e0c:	40026440 	.word	0x40026440
 8004e10:	20001b1c 	.word	0x20001b1c
 8004e14:	400264b8 	.word	0x400264b8
 8004e18:	40004800 	.word	0x40004800
 8004e1c:	40020c00 	.word	0x40020c00
 8004e20:	20001b7c 	.word	0x20001b7c
 8004e24:	40026028 	.word	0x40026028
 8004e28:	20001bdc 	.word	0x20001bdc
 8004e2c:	40026058 	.word	0x40026058

08004e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e68 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e34:	480d      	ldr	r0, [pc, #52]	; (8004e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e36:	490e      	ldr	r1, [pc, #56]	; (8004e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e38:	4a0e      	ldr	r2, [pc, #56]	; (8004e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e3c:	e002      	b.n	8004e44 <LoopCopyDataInit>

08004e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e42:	3304      	adds	r3, #4

08004e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e48:	d3f9      	bcc.n	8004e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e4a:	4a0b      	ldr	r2, [pc, #44]	; (8004e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e4c:	4c0b      	ldr	r4, [pc, #44]	; (8004e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e50:	e001      	b.n	8004e56 <LoopFillZerobss>

08004e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e54:	3204      	adds	r2, #4

08004e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e58:	d3fb      	bcc.n	8004e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e5a:	f7ff fe2b 	bl	8004ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e5e:	f005 fcd5 	bl	800a80c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e62:	f7fe ffa1 	bl	8003da8 <main>
  bx  lr    
 8004e66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004e68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e70:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8004e74:	0800e1e0 	.word	0x0800e1e0
  ldr r2, =_sbss
 8004e78:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8004e7c:	20001d8c 	.word	0x20001d8c

08004e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e80:	e7fe      	b.n	8004e80 <ADC_IRQHandler>
	...

08004e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e88:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <HAL_Init+0x40>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a0d      	ldr	r2, [pc, #52]	; (8004ec4 <HAL_Init+0x40>)
 8004e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_Init+0x40>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <HAL_Init+0x40>)
 8004e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ea0:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <HAL_Init+0x40>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a07      	ldr	r2, [pc, #28]	; (8004ec4 <HAL_Init+0x40>)
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eac:	2003      	movs	r0, #3
 8004eae:	f000 fca1 	bl	80057f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eb2:	200f      	movs	r0, #15
 8004eb4:	f000 f808 	bl	8004ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004eb8:	f7ff fc8a 	bl	80047d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023c00 	.word	0x40023c00

08004ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <HAL_InitTick+0x54>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <HAL_InitTick+0x58>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fcb9 	bl	800585e <HAL_SYSTICK_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e00e      	b.n	8004f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d80a      	bhi.n	8004f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004efc:	2200      	movs	r2, #0
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	f000 fc81 	bl	800580a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f08:	4a06      	ldr	r2, [pc, #24]	; (8004f24 <HAL_InitTick+0x5c>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e000      	b.n	8004f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000110 	.word	0x20000110
 8004f20:	20000118 	.word	0x20000118
 8004f24:	20000114 	.word	0x20000114

08004f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_IncTick+0x20>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_IncTick+0x24>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4413      	add	r3, r2
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <HAL_IncTick+0x24>)
 8004f3a:	6013      	str	r3, [r2, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000118 	.word	0x20000118
 8004f4c:	20001c3c 	.word	0x20001c3c

08004f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return uwTick;
 8004f54:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <HAL_GetTick+0x14>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20001c3c 	.word	0x20001c3c

08004f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f70:	f7ff ffee 	bl	8004f50 <HAL_GetTick>
 8004f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d005      	beq.n	8004f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <HAL_Delay+0x44>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f8e:	bf00      	nop
 8004f90:	f7ff ffde 	bl	8004f50 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d8f7      	bhi.n	8004f90 <HAL_Delay+0x28>
  {
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000118 	.word	0x20000118

08004fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e033      	b.n	800502e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fe fa44 	bl	800345c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d118      	bne.n	8005020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ff6:	f023 0302 	bic.w	r3, r3, #2
 8004ffa:	f043 0202 	orr.w	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa2a 	bl	800545c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40
 800501e:	e001      	b.n	8005024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_ADC_Start+0x1a>
 800504e:	2302      	movs	r3, #2
 8005050:	e0b2      	b.n	80051b8 <HAL_ADC_Start+0x180>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d018      	beq.n	800509a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005078:	4b52      	ldr	r3, [pc, #328]	; (80051c4 <HAL_ADC_Start+0x18c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_ADC_Start+0x190>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0c9a      	lsrs	r2, r3, #18
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800508c:	e002      	b.n	8005094 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	3b01      	subs	r3, #1
 8005092:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f9      	bne.n	800508e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d17a      	bne.n	800519e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d106      	bne.n	80050f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	f023 0206 	bic.w	r2, r3, #6
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
 80050f4:	e002      	b.n	80050fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005104:	4b31      	ldr	r3, [pc, #196]	; (80051cc <HAL_ADC_Start+0x194>)
 8005106:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005110:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2b00      	cmp	r3, #0
 800511c:	d12a      	bne.n	8005174 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2b      	ldr	r2, [pc, #172]	; (80051d0 <HAL_ADC_Start+0x198>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d015      	beq.n	8005154 <HAL_ADC_Start+0x11c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a29      	ldr	r2, [pc, #164]	; (80051d4 <HAL_ADC_Start+0x19c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d105      	bne.n	800513e <HAL_ADC_Start+0x106>
 8005132:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_ADC_Start+0x194>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <HAL_ADC_Start+0x1a0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d136      	bne.n	80051b6 <HAL_ADC_Start+0x17e>
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_ADC_Start+0x194>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	d130      	bne.n	80051b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d129      	bne.n	80051b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005170:	609a      	str	r2, [r3, #8]
 8005172:	e020      	b.n	80051b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <HAL_ADC_Start+0x198>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d11b      	bne.n	80051b6 <HAL_ADC_Start+0x17e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d114      	bne.n	80051b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	e00b      	b.n	80051b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f043 0210 	orr.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	f043 0201 	orr.w	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	20000110 	.word	0x20000110
 80051c8:	431bde83 	.word	0x431bde83
 80051cc:	40012300 	.word	0x40012300
 80051d0:	40012000 	.word	0x40012000
 80051d4:	40012100 	.word	0x40012100
 80051d8:	40012200 	.word	0x40012200

080051dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x1c>
 8005210:	2302      	movs	r3, #2
 8005212:	e113      	b.n	800543c <HAL_ADC_ConfigChannel+0x244>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b09      	cmp	r3, #9
 8005222:	d925      	bls.n	8005270 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68d9      	ldr	r1, [r3, #12]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	4613      	mov	r3, r2
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4413      	add	r3, r2
 8005238:	3b1e      	subs	r3, #30
 800523a:	2207      	movs	r2, #7
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43da      	mvns	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	400a      	ands	r2, r1
 8005248:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68d9      	ldr	r1, [r3, #12]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	4618      	mov	r0, r3
 800525c:	4603      	mov	r3, r0
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4403      	add	r3, r0
 8005262:	3b1e      	subs	r3, #30
 8005264:	409a      	lsls	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e022      	b.n	80052b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6919      	ldr	r1, [r3, #16]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	2207      	movs	r2, #7
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43da      	mvns	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	400a      	ands	r2, r1
 8005292:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6919      	ldr	r1, [r3, #16]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	4618      	mov	r0, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4403      	add	r3, r0
 80052ac:	409a      	lsls	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d824      	bhi.n	8005308 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	3b05      	subs	r3, #5
 80052d0:	221f      	movs	r2, #31
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43da      	mvns	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	400a      	ands	r2, r1
 80052de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4618      	mov	r0, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	3b05      	subs	r3, #5
 80052fa:	fa00 f203 	lsl.w	r2, r0, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	635a      	str	r2, [r3, #52]	; 0x34
 8005306:	e04c      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d824      	bhi.n	800535a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	3b23      	subs	r3, #35	; 0x23
 8005322:	221f      	movs	r2, #31
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43da      	mvns	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	400a      	ands	r2, r1
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	4618      	mov	r0, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	3b23      	subs	r3, #35	; 0x23
 800534c:	fa00 f203 	lsl.w	r2, r0, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
 8005358:	e023      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	3b41      	subs	r3, #65	; 0x41
 800536c:	221f      	movs	r2, #31
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43da      	mvns	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	400a      	ands	r2, r1
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	4618      	mov	r0, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	3b41      	subs	r3, #65	; 0x41
 8005396:	fa00 f203 	lsl.w	r2, r0, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053a2:	4b29      	ldr	r3, [pc, #164]	; (8005448 <HAL_ADC_ConfigChannel+0x250>)
 80053a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a28      	ldr	r2, [pc, #160]	; (800544c <HAL_ADC_ConfigChannel+0x254>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10f      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x1d8>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b12      	cmp	r3, #18
 80053b6:	d10b      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	; (800544c <HAL_ADC_ConfigChannel+0x254>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d12b      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x23a>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <HAL_ADC_ConfigChannel+0x258>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <HAL_ADC_ConfigChannel+0x1f4>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b11      	cmp	r3, #17
 80053ea:	d122      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a11      	ldr	r2, [pc, #68]	; (8005450 <HAL_ADC_ConfigChannel+0x258>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d111      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800540e:	4b11      	ldr	r3, [pc, #68]	; (8005454 <HAL_ADC_ConfigChannel+0x25c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a11      	ldr	r2, [pc, #68]	; (8005458 <HAL_ADC_ConfigChannel+0x260>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	0c9a      	lsrs	r2, r3, #18
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005424:	e002      	b.n	800542c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	3b01      	subs	r3, #1
 800542a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f9      	bne.n	8005426 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40012300 	.word	0x40012300
 800544c:	40012000 	.word	0x40012000
 8005450:	10000012 	.word	0x10000012
 8005454:	20000110 	.word	0x20000110
 8005458:	431bde83 	.word	0x431bde83

0800545c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005464:	4b79      	ldr	r3, [pc, #484]	; (800564c <ADC_Init+0x1f0>)
 8005466:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6859      	ldr	r1, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	021a      	lsls	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80054b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6859      	ldr	r1, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6899      	ldr	r1, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	4a58      	ldr	r2, [pc, #352]	; (8005650 <ADC_Init+0x1f4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d022      	beq.n	800553a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005502:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6899      	ldr	r1, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6899      	ldr	r1, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	e00f      	b.n	800555a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005558:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0202 	bic.w	r2, r2, #2
 8005568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	7e1b      	ldrb	r3, [r3, #24]
 8005574:	005a      	lsls	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01b      	beq.n	80055c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005596:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80055a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6859      	ldr	r1, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	3b01      	subs	r3, #1
 80055b4:	035a      	lsls	r2, r3, #13
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e007      	b.n	80055d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	051a      	lsls	r2, r3, #20
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6899      	ldr	r1, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005612:	025a      	lsls	r2, r3, #9
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6899      	ldr	r1, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	029a      	lsls	r2, r3, #10
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40012300 	.word	0x40012300
 8005650:	0f000001 	.word	0x0f000001

08005654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <__NVIC_SetPriorityGrouping+0x44>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005670:	4013      	ands	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800567c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <__NVIC_SetPriorityGrouping+0x44>)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	60d3      	str	r3, [r2, #12]
}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <__NVIC_GetPriorityGrouping+0x18>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	f003 0307 	and.w	r3, r3, #7
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	e000ed00 	.word	0xe000ed00

080056b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	db0b      	blt.n	80056e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	f003 021f 	and.w	r2, r3, #31
 80056d0:	4907      	ldr	r1, [pc, #28]	; (80056f0 <__NVIC_EnableIRQ+0x38>)
 80056d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2001      	movs	r0, #1
 80056da:	fa00 f202 	lsl.w	r2, r0, r2
 80056de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e100 	.word	0xe000e100

080056f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	6039      	str	r1, [r7, #0]
 80056fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	2b00      	cmp	r3, #0
 8005706:	db0a      	blt.n	800571e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	490c      	ldr	r1, [pc, #48]	; (8005740 <__NVIC_SetPriority+0x4c>)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	0112      	lsls	r2, r2, #4
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	440b      	add	r3, r1
 8005718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800571c:	e00a      	b.n	8005734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4908      	ldr	r1, [pc, #32]	; (8005744 <__NVIC_SetPriority+0x50>)
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	3b04      	subs	r3, #4
 800572c:	0112      	lsls	r2, r2, #4
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	440b      	add	r3, r1
 8005732:	761a      	strb	r2, [r3, #24]
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e000e100 	.word	0xe000e100
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f1c3 0307 	rsb	r3, r3, #7
 8005762:	2b04      	cmp	r3, #4
 8005764:	bf28      	it	cs
 8005766:	2304      	movcs	r3, #4
 8005768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3304      	adds	r3, #4
 800576e:	2b06      	cmp	r3, #6
 8005770:	d902      	bls.n	8005778 <NVIC_EncodePriority+0x30>
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3b03      	subs	r3, #3
 8005776:	e000      	b.n	800577a <NVIC_EncodePriority+0x32>
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800577c:	f04f 32ff 	mov.w	r2, #4294967295
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	401a      	ands	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005790:	f04f 31ff 	mov.w	r1, #4294967295
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	43d9      	mvns	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a0:	4313      	orrs	r3, r2
         );
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3724      	adds	r7, #36	; 0x24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057c0:	d301      	bcc.n	80057c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057c2:	2301      	movs	r3, #1
 80057c4:	e00f      	b.n	80057e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057c6:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <SysTick_Config+0x40>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ce:	210f      	movs	r1, #15
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	f7ff ff8e 	bl	80056f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <SysTick_Config+0x40>)
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057de:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <SysTick_Config+0x40>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	e000e010 	.word	0xe000e010

080057f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ff29 	bl	8005654 <__NVIC_SetPriorityGrouping>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800581c:	f7ff ff3e 	bl	800569c <__NVIC_GetPriorityGrouping>
 8005820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	6978      	ldr	r0, [r7, #20]
 8005828:	f7ff ff8e 	bl	8005748 <NVIC_EncodePriority>
 800582c:	4602      	mov	r2, r0
 800582e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ff5d 	bl	80056f4 <__NVIC_SetPriority>
}
 800583a:	bf00      	nop
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	4603      	mov	r3, r0
 800584a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800584c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ff31 	bl	80056b8 <__NVIC_EnableIRQ>
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ffa2 	bl	80057b0 <SysTick_Config>
 800586c:	4603      	mov	r3, r0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005884:	f7ff fb64 	bl	8004f50 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e099      	b.n	80059c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058b4:	e00f      	b.n	80058d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058b6:	f7ff fb4b 	bl	8004f50 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d908      	bls.n	80058d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2203      	movs	r2, #3
 80058ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e078      	b.n	80059c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e8      	bne.n	80058b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4b38      	ldr	r3, [pc, #224]	; (80059d0 <HAL_DMA_Init+0x158>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800590e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800591a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b04      	cmp	r3, #4
 800592e:	d107      	bne.n	8005940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	4313      	orrs	r3, r2
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f023 0307 	bic.w	r3, r3, #7
 8005956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b04      	cmp	r3, #4
 8005968:	d117      	bne.n	800599a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb01 	bl	8005f84 <DMA_CheckFifoParam>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2240      	movs	r2, #64	; 0x40
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005996:	2301      	movs	r3, #1
 8005998:	e016      	b.n	80059c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fab8 	bl	8005f18 <DMA_CalcBaseAndBitshift>
 80059a8:	4603      	mov	r3, r0
 80059aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	223f      	movs	r2, #63	; 0x3f
 80059b2:	409a      	lsls	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	f010803f 	.word	0xf010803f

080059d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_DMA_Start_IT+0x26>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e040      	b.n	8005a7c <HAL_DMA_Start_IT+0xa8>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d12f      	bne.n	8005a6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fa4a 	bl	8005ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2c:	223f      	movs	r2, #63	; 0x3f
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0216 	orr.w	r2, r2, #22
 8005a42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0208 	orr.w	r2, r2, #8
 8005a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e005      	b.n	8005a7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a76:	2302      	movs	r3, #2
 8005a78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a92:	f7ff fa5d 	bl	8004f50 <HAL_GetTick>
 8005a96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d008      	beq.n	8005ab6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e052      	b.n	8005b5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0216 	bic.w	r2, r2, #22
 8005ac4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <HAL_DMA_Abort+0x62>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0208 	bic.w	r2, r2, #8
 8005af4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b06:	e013      	b.n	8005b30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b08:	f7ff fa22 	bl	8004f50 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d90c      	bls.n	8005b30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2203      	movs	r2, #3
 8005b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e015      	b.n	8005b5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e4      	bne.n	8005b08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b42:	223f      	movs	r2, #63	; 0x3f
 8005b44:	409a      	lsls	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d004      	beq.n	8005b82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00c      	b.n	8005b9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2205      	movs	r2, #5
 8005b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0201 	bic.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bb4:	4b8e      	ldr	r3, [pc, #568]	; (8005df0 <HAL_DMA_IRQHandler+0x248>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a8e      	ldr	r2, [pc, #568]	; (8005df4 <HAL_DMA_IRQHandler+0x24c>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	0a9b      	lsrs	r3, r3, #10
 8005bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd2:	2208      	movs	r2, #8
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01a      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	2208      	movs	r2, #8
 8005c02:	409a      	lsls	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	f043 0201 	orr.w	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c18:	2201      	movs	r2, #1
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d012      	beq.n	8005c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c36:	2201      	movs	r2, #1
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f043 0202 	orr.w	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4e:	2204      	movs	r2, #4
 8005c50:	409a      	lsls	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d012      	beq.n	8005c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	f043 0204 	orr.w	r2, r3, #4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c84:	2210      	movs	r2, #16
 8005c86:	409a      	lsls	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d043      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03c      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d018      	beq.n	8005cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d024      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
 8005cd6:	e01f      	b.n	8005d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01b      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
 8005ce8:	e016      	b.n	8005d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d107      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0208 	bic.w	r2, r2, #8
 8005d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 808f 	beq.w	8005e48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8087 	beq.w	8005e48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3e:	2220      	movs	r2, #32
 8005d40:	409a      	lsls	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b05      	cmp	r3, #5
 8005d50:	d136      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0216 	bic.w	r2, r2, #22
 8005d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <HAL_DMA_IRQHandler+0x1da>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0208 	bic.w	r2, r2, #8
 8005d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d96:	223f      	movs	r2, #63	; 0x3f
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d07e      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
        }
        return;
 8005dbe:	e079      	b.n	8005eb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01d      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10d      	bne.n	8005df8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d031      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
 8005dec:	e02c      	b.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
 8005dee:	bf00      	nop
 8005df0:	20000110 	.word	0x20000110
 8005df4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d023      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
 8005e08:	e01e      	b.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10f      	bne.n	8005e38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0210 	bic.w	r2, r2, #16
 8005e26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d032      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d022      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2205      	movs	r2, #5
 8005e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0201 	bic.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d307      	bcc.n	8005e90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f2      	bne.n	8005e74 <HAL_DMA_IRQHandler+0x2cc>
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
 8005eb2:	e000      	b.n	8005eb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005eb4:	bf00      	nop
    }
  }
}
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b40      	cmp	r3, #64	; 0x40
 8005ee8:	d108      	bne.n	8005efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005efa:	e007      	b.n	8005f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	60da      	str	r2, [r3, #12]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	3b10      	subs	r3, #16
 8005f28:	4a14      	ldr	r2, [pc, #80]	; (8005f7c <DMA_CalcBaseAndBitshift+0x64>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f32:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <DMA_CalcBaseAndBitshift+0x68>)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d909      	bls.n	8005f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	659a      	str	r2, [r3, #88]	; 0x58
 8005f58:	e007      	b.n	8005f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	aaaaaaab 	.word	0xaaaaaaab
 8005f80:	0800de20 	.word	0x0800de20

08005f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11f      	bne.n	8005fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d856      	bhi.n	8006052 <DMA_CheckFifoParam+0xce>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <DMA_CheckFifoParam+0x28>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcf 	.word	0x08005fcf
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08006053 	.word	0x08006053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d046      	beq.n	8006056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fcc:	e043      	b.n	8006056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fd6:	d140      	bne.n	800605a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fdc:	e03d      	b.n	800605a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe6:	d121      	bne.n	800602c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d837      	bhi.n	800605e <DMA_CheckFifoParam+0xda>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <DMA_CheckFifoParam+0x70>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	0800600b 	.word	0x0800600b
 8005ffc:	08006005 	.word	0x08006005
 8006000:	0800601d 	.word	0x0800601d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
      break;
 8006008:	e030      	b.n	800606c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d025      	beq.n	8006062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800601a:	e022      	b.n	8006062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006024:	d11f      	bne.n	8006066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800602a:	e01c      	b.n	8006066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d903      	bls.n	800603a <DMA_CheckFifoParam+0xb6>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d003      	beq.n	8006040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006038:	e018      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
      break;
 800603e:	e015      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
      break;
 8006050:	e00b      	b.n	800606a <DMA_CheckFifoParam+0xe6>
      break;
 8006052:	bf00      	nop
 8006054:	e00a      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 8006056:	bf00      	nop
 8006058:	e008      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 800605a:	bf00      	nop
 800605c:	e006      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 800605e:	bf00      	nop
 8006060:	e004      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 8006062:	bf00      	nop
 8006064:	e002      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;   
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 800606a:	bf00      	nop
    }
  } 
  
  return status; 
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop

0800607c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	; 0x24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	e177      	b.n	8006388 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006098:	2201      	movs	r2, #1
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4013      	ands	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	f040 8166 	bne.w	8006382 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d005      	beq.n	80060ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d130      	bne.n	8006130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	2203      	movs	r2, #3
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006104:	2201      	movs	r2, #1
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f003 0201 	and.w	r2, r3, #1
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b03      	cmp	r3, #3
 800613a:	d017      	beq.n	800616c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	2203      	movs	r2, #3
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d123      	bne.n	80061c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	08da      	lsrs	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3208      	adds	r2, #8
 8006180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	220f      	movs	r2, #15
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4013      	ands	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	08da      	lsrs	r2, r3, #3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3208      	adds	r2, #8
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	2203      	movs	r2, #3
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 0203 	and.w	r2, r3, #3
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80c0 	beq.w	8006382 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	4b66      	ldr	r3, [pc, #408]	; (80063a0 <HAL_GPIO_Init+0x324>)
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	4a65      	ldr	r2, [pc, #404]	; (80063a0 <HAL_GPIO_Init+0x324>)
 800620c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006210:	6453      	str	r3, [r2, #68]	; 0x44
 8006212:	4b63      	ldr	r3, [pc, #396]	; (80063a0 <HAL_GPIO_Init+0x324>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800621e:	4a61      	ldr	r2, [pc, #388]	; (80063a4 <HAL_GPIO_Init+0x328>)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	3302      	adds	r3, #2
 8006226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	220f      	movs	r2, #15
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a58      	ldr	r2, [pc, #352]	; (80063a8 <HAL_GPIO_Init+0x32c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d037      	beq.n	80062ba <HAL_GPIO_Init+0x23e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a57      	ldr	r2, [pc, #348]	; (80063ac <HAL_GPIO_Init+0x330>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d031      	beq.n	80062b6 <HAL_GPIO_Init+0x23a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a56      	ldr	r2, [pc, #344]	; (80063b0 <HAL_GPIO_Init+0x334>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d02b      	beq.n	80062b2 <HAL_GPIO_Init+0x236>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a55      	ldr	r2, [pc, #340]	; (80063b4 <HAL_GPIO_Init+0x338>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d025      	beq.n	80062ae <HAL_GPIO_Init+0x232>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a54      	ldr	r2, [pc, #336]	; (80063b8 <HAL_GPIO_Init+0x33c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d01f      	beq.n	80062aa <HAL_GPIO_Init+0x22e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a53      	ldr	r2, [pc, #332]	; (80063bc <HAL_GPIO_Init+0x340>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d019      	beq.n	80062a6 <HAL_GPIO_Init+0x22a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a52      	ldr	r2, [pc, #328]	; (80063c0 <HAL_GPIO_Init+0x344>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_GPIO_Init+0x226>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a51      	ldr	r2, [pc, #324]	; (80063c4 <HAL_GPIO_Init+0x348>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00d      	beq.n	800629e <HAL_GPIO_Init+0x222>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a50      	ldr	r2, [pc, #320]	; (80063c8 <HAL_GPIO_Init+0x34c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <HAL_GPIO_Init+0x21e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a4f      	ldr	r2, [pc, #316]	; (80063cc <HAL_GPIO_Init+0x350>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <HAL_GPIO_Init+0x21a>
 8006292:	2309      	movs	r3, #9
 8006294:	e012      	b.n	80062bc <HAL_GPIO_Init+0x240>
 8006296:	230a      	movs	r3, #10
 8006298:	e010      	b.n	80062bc <HAL_GPIO_Init+0x240>
 800629a:	2308      	movs	r3, #8
 800629c:	e00e      	b.n	80062bc <HAL_GPIO_Init+0x240>
 800629e:	2307      	movs	r3, #7
 80062a0:	e00c      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062a2:	2306      	movs	r3, #6
 80062a4:	e00a      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062a6:	2305      	movs	r3, #5
 80062a8:	e008      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062aa:	2304      	movs	r3, #4
 80062ac:	e006      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062ae:	2303      	movs	r3, #3
 80062b0:	e004      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e002      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062ba:	2300      	movs	r3, #0
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	f002 0203 	and.w	r2, r2, #3
 80062c2:	0092      	lsls	r2, r2, #2
 80062c4:	4093      	lsls	r3, r2
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062cc:	4935      	ldr	r1, [pc, #212]	; (80063a4 <HAL_GPIO_Init+0x328>)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	089b      	lsrs	r3, r3, #2
 80062d2:	3302      	adds	r3, #2
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062da:	4b3d      	ldr	r3, [pc, #244]	; (80063d0 <HAL_GPIO_Init+0x354>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	43db      	mvns	r3, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062fe:	4a34      	ldr	r2, [pc, #208]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	43db      	mvns	r3, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006328:	4a29      	ldr	r2, [pc, #164]	; (80063d0 <HAL_GPIO_Init+0x354>)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	43db      	mvns	r3, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4013      	ands	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006352:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <HAL_GPIO_Init+0x354>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	43db      	mvns	r3, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4013      	ands	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800637c:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <HAL_GPIO_Init+0x354>)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	f67f ae84 	bls.w	8006098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	3724      	adds	r7, #36	; 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40023800 	.word	0x40023800
 80063a4:	40013800 	.word	0x40013800
 80063a8:	40020000 	.word	0x40020000
 80063ac:	40020400 	.word	0x40020400
 80063b0:	40020800 	.word	0x40020800
 80063b4:	40020c00 	.word	0x40020c00
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40021400 	.word	0x40021400
 80063c0:	40021800 	.word	0x40021800
 80063c4:	40021c00 	.word	0x40021c00
 80063c8:	40022000 	.word	0x40022000
 80063cc:	40022400 	.word	0x40022400
 80063d0:	40013c00 	.word	0x40013c00

080063d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e001      	b.n	80063f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006414:	787b      	ldrb	r3, [r7, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006420:	e003      	b.n	800642a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	041a      	lsls	r2, r3, #16
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	619a      	str	r2, [r3, #24]
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e267      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d075      	beq.n	8006542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006456:	4b88      	ldr	r3, [pc, #544]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b04      	cmp	r3, #4
 8006460:	d00c      	beq.n	800647c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006462:	4b85      	ldr	r3, [pc, #532]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800646a:	2b08      	cmp	r3, #8
 800646c:	d112      	bne.n	8006494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800646e:	4b82      	ldr	r3, [pc, #520]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647a:	d10b      	bne.n	8006494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647c:	4b7e      	ldr	r3, [pc, #504]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05b      	beq.n	8006540 <HAL_RCC_OscConfig+0x108>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d157      	bne.n	8006540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e242      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649c:	d106      	bne.n	80064ac <HAL_RCC_OscConfig+0x74>
 800649e:	4b76      	ldr	r3, [pc, #472]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a75      	ldr	r2, [pc, #468]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e01d      	b.n	80064e8 <HAL_RCC_OscConfig+0xb0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x98>
 80064b6:	4b70      	ldr	r3, [pc, #448]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a6f      	ldr	r2, [pc, #444]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4b6d      	ldr	r3, [pc, #436]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a6c      	ldr	r2, [pc, #432]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e00b      	b.n	80064e8 <HAL_RCC_OscConfig+0xb0>
 80064d0:	4b69      	ldr	r3, [pc, #420]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a68      	ldr	r2, [pc, #416]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	4b66      	ldr	r3, [pc, #408]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a65      	ldr	r2, [pc, #404]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80064e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d013      	beq.n	8006518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f0:	f7fe fd2e 	bl	8004f50 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064f8:	f7fe fd2a 	bl	8004f50 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	; 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e207      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	4b5b      	ldr	r3, [pc, #364]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0xc0>
 8006516:	e014      	b.n	8006542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006518:	f7fe fd1a 	bl	8004f50 <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006520:	f7fe fd16 	bl	8004f50 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b64      	cmp	r3, #100	; 0x64
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e1f3      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006532:	4b51      	ldr	r3, [pc, #324]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f0      	bne.n	8006520 <HAL_RCC_OscConfig+0xe8>
 800653e:	e000      	b.n	8006542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d063      	beq.n	8006616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800654e:	4b4a      	ldr	r3, [pc, #296]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 030c 	and.w	r3, r3, #12
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800655a:	4b47      	ldr	r3, [pc, #284]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006562:	2b08      	cmp	r3, #8
 8006564:	d11c      	bne.n	80065a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006566:	4b44      	ldr	r3, [pc, #272]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d116      	bne.n	80065a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006572:	4b41      	ldr	r3, [pc, #260]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <HAL_RCC_OscConfig+0x152>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d001      	beq.n	800658a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e1c7      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658a:	4b3b      	ldr	r3, [pc, #236]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4937      	ldr	r1, [pc, #220]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800659e:	e03a      	b.n	8006616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d020      	beq.n	80065ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065a8:	4b34      	ldr	r3, [pc, #208]	; (800667c <HAL_RCC_OscConfig+0x244>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ae:	f7fe fccf 	bl	8004f50 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b6:	f7fe fccb 	bl	8004f50 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e1a8      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c8:	4b2b      	ldr	r3, [pc, #172]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d4:	4b28      	ldr	r3, [pc, #160]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4925      	ldr	r1, [pc, #148]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]
 80065e8:	e015      	b.n	8006616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <HAL_RCC_OscConfig+0x244>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fe fcae 	bl	8004f50 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f8:	f7fe fcaa 	bl	8004f50 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e187      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660a:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d036      	beq.n	8006690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d016      	beq.n	8006658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800662a:	4b15      	ldr	r3, [pc, #84]	; (8006680 <HAL_RCC_OscConfig+0x248>)
 800662c:	2201      	movs	r2, #1
 800662e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006630:	f7fe fc8e 	bl	8004f50 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006638:	f7fe fc8a 	bl	8004f50 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e167      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800664a:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <HAL_RCC_OscConfig+0x240>)
 800664c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0f0      	beq.n	8006638 <HAL_RCC_OscConfig+0x200>
 8006656:	e01b      	b.n	8006690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006658:	4b09      	ldr	r3, [pc, #36]	; (8006680 <HAL_RCC_OscConfig+0x248>)
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665e:	f7fe fc77 	bl	8004f50 <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006664:	e00e      	b.n	8006684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006666:	f7fe fc73 	bl	8004f50 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d907      	bls.n	8006684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e150      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
 8006678:	40023800 	.word	0x40023800
 800667c:	42470000 	.word	0x42470000
 8006680:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006684:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1ea      	bne.n	8006666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8097 	beq.w	80067cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800669e:	2300      	movs	r3, #0
 80066a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066a2:	4b81      	ldr	r3, [pc, #516]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10f      	bne.n	80066ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	4b7d      	ldr	r3, [pc, #500]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	4a7c      	ldr	r2, [pc, #496]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80066b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066bc:	6413      	str	r3, [r2, #64]	; 0x40
 80066be:	4b7a      	ldr	r3, [pc, #488]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c6:	60bb      	str	r3, [r7, #8]
 80066c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ce:	4b77      	ldr	r3, [pc, #476]	; (80068ac <HAL_RCC_OscConfig+0x474>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d118      	bne.n	800670c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066da:	4b74      	ldr	r3, [pc, #464]	; (80068ac <HAL_RCC_OscConfig+0x474>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a73      	ldr	r2, [pc, #460]	; (80068ac <HAL_RCC_OscConfig+0x474>)
 80066e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066e6:	f7fe fc33 	bl	8004f50 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ee:	f7fe fc2f 	bl	8004f50 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e10c      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006700:	4b6a      	ldr	r3, [pc, #424]	; (80068ac <HAL_RCC_OscConfig+0x474>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d106      	bne.n	8006722 <HAL_RCC_OscConfig+0x2ea>
 8006714:	4b64      	ldr	r3, [pc, #400]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	4a63      	ldr	r2, [pc, #396]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	6713      	str	r3, [r2, #112]	; 0x70
 8006720:	e01c      	b.n	800675c <HAL_RCC_OscConfig+0x324>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b05      	cmp	r3, #5
 8006728:	d10c      	bne.n	8006744 <HAL_RCC_OscConfig+0x30c>
 800672a:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	4a5e      	ldr	r2, [pc, #376]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006730:	f043 0304 	orr.w	r3, r3, #4
 8006734:	6713      	str	r3, [r2, #112]	; 0x70
 8006736:	4b5c      	ldr	r3, [pc, #368]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4a5b      	ldr	r2, [pc, #364]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	6713      	str	r3, [r2, #112]	; 0x70
 8006742:	e00b      	b.n	800675c <HAL_RCC_OscConfig+0x324>
 8006744:	4b58      	ldr	r3, [pc, #352]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a57      	ldr	r2, [pc, #348]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	4b55      	ldr	r3, [pc, #340]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	4a54      	ldr	r2, [pc, #336]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006756:	f023 0304 	bic.w	r3, r3, #4
 800675a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fe fbf4 	bl	8004f50 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676a:	e00a      	b.n	8006782 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800676c:	f7fe fbf0 	bl	8004f50 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f241 3288 	movw	r2, #5000	; 0x1388
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e0cb      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006782:	4b49      	ldr	r3, [pc, #292]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0ee      	beq.n	800676c <HAL_RCC_OscConfig+0x334>
 800678e:	e014      	b.n	80067ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006790:	f7fe fbde 	bl	8004f50 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006796:	e00a      	b.n	80067ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006798:	f7fe fbda 	bl	8004f50 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e0b5      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ae:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1ee      	bne.n	8006798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d105      	bne.n	80067cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c0:	4b39      	ldr	r3, [pc, #228]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	4a38      	ldr	r2, [pc, #224]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80067c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 80a1 	beq.w	8006918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067d6:	4b34      	ldr	r3, [pc, #208]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d05c      	beq.n	800689c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d141      	bne.n	800686e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ea:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <HAL_RCC_OscConfig+0x478>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7fe fbae 	bl	8004f50 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fe fbaa 	bl	8004f50 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e087      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680a:	4b27      	ldr	r3, [pc, #156]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	3b01      	subs	r3, #1
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	061b      	lsls	r3, r3, #24
 800683a:	491b      	ldr	r1, [pc, #108]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 800683c:	4313      	orrs	r3, r2
 800683e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <HAL_RCC_OscConfig+0x478>)
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006846:	f7fe fb83 	bl	8004f50 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684e:	f7fe fb7f 	bl	8004f50 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e05c      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0f0      	beq.n	800684e <HAL_RCC_OscConfig+0x416>
 800686c:	e054      	b.n	8006918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686e:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <HAL_RCC_OscConfig+0x478>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006874:	f7fe fb6c 	bl	8004f50 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687c:	f7fe fb68 	bl	8004f50 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e045      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <HAL_RCC_OscConfig+0x470>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x444>
 800689a:	e03d      	b.n	8006918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d107      	bne.n	80068b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e038      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
 80068a8:	40023800 	.word	0x40023800
 80068ac:	40007000 	.word	0x40007000
 80068b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068b4:	4b1b      	ldr	r3, [pc, #108]	; (8006924 <HAL_RCC_OscConfig+0x4ec>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d028      	beq.n	8006914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d121      	bne.n	8006914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068da:	429a      	cmp	r2, r3
 80068dc:	d11a      	bne.n	8006914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068e4:	4013      	ands	r3, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d111      	bne.n	8006914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	3b01      	subs	r3, #1
 80068fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006900:	429a      	cmp	r2, r3
 8006902:	d107      	bne.n	8006914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006910:	429a      	cmp	r2, r3
 8006912:	d001      	beq.n	8006918 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800

08006928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0cc      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800693c:	4b68      	ldr	r3, [pc, #416]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d90c      	bls.n	8006964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694a:	4b65      	ldr	r3, [pc, #404]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006952:	4b63      	ldr	r3, [pc, #396]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d001      	beq.n	8006964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0b8      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800697c:	4b59      	ldr	r3, [pc, #356]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4a58      	ldr	r2, [pc, #352]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006994:	4b53      	ldr	r3, [pc, #332]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4a52      	ldr	r2, [pc, #328]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800699e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a0:	4b50      	ldr	r3, [pc, #320]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	494d      	ldr	r1, [pc, #308]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d044      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d107      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c6:	4b47      	ldr	r3, [pc, #284]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d119      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e07f      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d003      	beq.n	80069e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d107      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e6:	4b3f      	ldr	r3, [pc, #252]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e06f      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f6:	4b3b      	ldr	r3, [pc, #236]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e067      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a06:	4b37      	ldr	r3, [pc, #220]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f023 0203 	bic.w	r2, r3, #3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4934      	ldr	r1, [pc, #208]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a18:	f7fe fa9a 	bl	8004f50 <HAL_GetTick>
 8006a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a20:	f7fe fa96 	bl	8004f50 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e04f      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a36:	4b2b      	ldr	r3, [pc, #172]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 020c 	and.w	r2, r3, #12
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d1eb      	bne.n	8006a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d20c      	bcs.n	8006a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a56:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5e:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e032      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a7c:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4916      	ldr	r1, [pc, #88]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	490e      	ldr	r1, [pc, #56]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aae:	f000 f821 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	490a      	ldr	r1, [pc, #40]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac0:	5ccb      	ldrb	r3, [r1, r3]
 8006ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac6:	4a09      	ldr	r2, [pc, #36]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006aca:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <HAL_RCC_ClockConfig+0x1c8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe f9fa 	bl	8004ec8 <HAL_InitTick>

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40023c00 	.word	0x40023c00
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	0800de08 	.word	0x0800de08
 8006aec:	20000110 	.word	0x20000110
 8006af0:	20000114 	.word	0x20000114

08006af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af8:	b094      	sub	sp, #80	; 0x50
 8006afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	647b      	str	r3, [r7, #68]	; 0x44
 8006b00:	2300      	movs	r3, #0
 8006b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b04:	2300      	movs	r3, #0
 8006b06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b0c:	4b79      	ldr	r3, [pc, #484]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d00d      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0x40>
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	f200 80e1 	bhi.w	8006ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_RCC_GetSysClockFreq+0x34>
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d003      	beq.n	8006b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b26:	e0db      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b28:	4b73      	ldr	r3, [pc, #460]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b2c:	e0db      	b.n	8006ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b2e:	4b72      	ldr	r3, [pc, #456]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b32:	e0d8      	b.n	8006ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b34:	4b6f      	ldr	r3, [pc, #444]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b3e:	4b6d      	ldr	r3, [pc, #436]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d063      	beq.n	8006c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b4a:	4b6a      	ldr	r3, [pc, #424]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	099b      	lsrs	r3, r3, #6
 8006b50:	2200      	movs	r2, #0
 8006b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b5e:	2300      	movs	r3, #0
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
 8006b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b66:	4622      	mov	r2, r4
 8006b68:	462b      	mov	r3, r5
 8006b6a:	f04f 0000 	mov.w	r0, #0
 8006b6e:	f04f 0100 	mov.w	r1, #0
 8006b72:	0159      	lsls	r1, r3, #5
 8006b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b78:	0150      	lsls	r0, r2, #5
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4621      	mov	r1, r4
 8006b80:	1a51      	subs	r1, r2, r1
 8006b82:	6139      	str	r1, [r7, #16]
 8006b84:	4629      	mov	r1, r5
 8006b86:	eb63 0301 	sbc.w	r3, r3, r1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b98:	4659      	mov	r1, fp
 8006b9a:	018b      	lsls	r3, r1, #6
 8006b9c:	4651      	mov	r1, sl
 8006b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ba2:	4651      	mov	r1, sl
 8006ba4:	018a      	lsls	r2, r1, #6
 8006ba6:	4651      	mov	r1, sl
 8006ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8006bac:	4659      	mov	r1, fp
 8006bae:	eb63 0901 	sbc.w	r9, r3, r1
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bc6:	4690      	mov	r8, r2
 8006bc8:	4699      	mov	r9, r3
 8006bca:	4623      	mov	r3, r4
 8006bcc:	eb18 0303 	adds.w	r3, r8, r3
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	eb49 0303 	adc.w	r3, r9, r3
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006be6:	4629      	mov	r1, r5
 8006be8:	028b      	lsls	r3, r1, #10
 8006bea:	4621      	mov	r1, r4
 8006bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	028a      	lsls	r2, r1, #10
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c04:	f7fa f850 	bl	8000ca8 <__aeabi_uldivmod>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c10:	e058      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c12:	4b38      	ldr	r3, [pc, #224]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c22:	623b      	str	r3, [r7, #32]
 8006c24:	2300      	movs	r3, #0
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
 8006c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	f04f 0000 	mov.w	r0, #0
 8006c34:	f04f 0100 	mov.w	r1, #0
 8006c38:	0159      	lsls	r1, r3, #5
 8006c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c3e:	0150      	lsls	r0, r2, #5
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4641      	mov	r1, r8
 8006c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c64:	ebb2 040a 	subs.w	r4, r2, sl
 8006c68:	eb63 050b 	sbc.w	r5, r3, fp
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	00eb      	lsls	r3, r5, #3
 8006c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c7a:	00e2      	lsls	r2, r4, #3
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	4643      	mov	r3, r8
 8006c82:	18e3      	adds	r3, r4, r3
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	464b      	mov	r3, r9
 8006c88:	eb45 0303 	adc.w	r3, r5, r3
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	028b      	lsls	r3, r1, #10
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	028a      	lsls	r2, r1, #10
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4619      	mov	r1, r3
 8006cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cae:	2200      	movs	r2, #0
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	61fa      	str	r2, [r7, #28]
 8006cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cb8:	f7f9 fff6 	bl	8000ca8 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	3301      	adds	r3, #1
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cde:	e002      	b.n	8006ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3750      	adds	r7, #80	; 0x50
 8006cec:	46bd      	mov	sp, r7
 8006cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	00f42400 	.word	0x00f42400

08006cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d02:	681b      	ldr	r3, [r3, #0]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000110 	.word	0x20000110

08006d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d18:	f7ff fff0 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	0a9b      	lsrs	r3, r3, #10
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	4903      	ldr	r1, [pc, #12]	; (8006d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d2a:	5ccb      	ldrb	r3, [r1, r3]
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40023800 	.word	0x40023800
 8006d38:	0800de18 	.word	0x0800de18

08006d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d40:	f7ff ffdc 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d44:	4602      	mov	r2, r0
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	0b5b      	lsrs	r3, r3, #13
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	4903      	ldr	r1, [pc, #12]	; (8006d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d52:	5ccb      	ldrb	r3, [r1, r3]
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	0800de18 	.word	0x0800de18

08006d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d075      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d98:	4b91      	ldr	r3, [pc, #580]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d9e:	f7fe f8d7 	bl	8004f50 <HAL_GetTick>
 8006da2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da4:	e008      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006da6:	f7fe f8d3 	bl	8004f50 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e189      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006db8:	4b8a      	ldr	r3, [pc, #552]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f0      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	019a      	lsls	r2, r3, #6
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	071b      	lsls	r3, r3, #28
 8006ddc:	4981      	ldr	r1, [pc, #516]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01f      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006df0:	4b7c      	ldr	r3, [pc, #496]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df6:	0f1b      	lsrs	r3, r3, #28
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	019a      	lsls	r2, r3, #6
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	071b      	lsls	r3, r3, #28
 8006e10:	4974      	ldr	r1, [pc, #464]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e18:	4b72      	ldr	r3, [pc, #456]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e1e:	f023 021f 	bic.w	r2, r3, #31
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	496e      	ldr	r1, [pc, #440]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	019a      	lsls	r2, r3, #6
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	061b      	lsls	r3, r3, #24
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	071b      	lsls	r3, r3, #28
 8006e50:	4964      	ldr	r1, [pc, #400]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e58:	4b61      	ldr	r3, [pc, #388]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e5e:	f7fe f877 	bl	8004f50 <HAL_GetTick>
 8006e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e66:	f7fe f873 	bl	8004f50 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e129      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e78:	4b5a      	ldr	r3, [pc, #360]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d079      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e9c:	4b52      	ldr	r3, [pc, #328]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ea2:	f7fe f855 	bl	8004f50 <HAL_GetTick>
 8006ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006eaa:	f7fe f851 	bl	8004f50 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e107      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ebc:	4b49      	ldr	r3, [pc, #292]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec8:	d0ef      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d020      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ed6:	4b43      	ldr	r3, [pc, #268]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006edc:	0f1b      	lsrs	r3, r3, #28
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	019a      	lsls	r2, r3, #6
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	061b      	lsls	r3, r3, #24
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	071b      	lsls	r3, r3, #28
 8006ef6:	493b      	ldr	r1, [pc, #236]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006efe:	4b39      	ldr	r3, [pc, #228]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	4934      	ldr	r1, [pc, #208]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01e      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f24:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2a:	0e1b      	lsrs	r3, r3, #24
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	019a      	lsls	r2, r3, #6
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	061b      	lsls	r3, r3, #24
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	071b      	lsls	r3, r3, #28
 8006f44:	4927      	ldr	r1, [pc, #156]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f4c:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	4922      	ldr	r1, [pc, #136]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f62:	4b21      	ldr	r3, [pc, #132]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f68:	f7fd fff2 	bl	8004f50 <HAL_GetTick>
 8006f6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006f70:	f7fd ffee 	bl	8004f50 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e0a4      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f82:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8e:	d1ef      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 808b 	beq.w	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a0f      	ldr	r2, [pc, #60]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
 8006fae:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a0b      	ldr	r2, [pc, #44]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006fc6:	f7fd ffc3 	bl	8004f50 <HAL_GetTick>
 8006fca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006fcc:	e010      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fce:	f7fd ffbf 	bl	8004f50 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d909      	bls.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e075      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006fe0:	42470068 	.word	0x42470068
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	42470070 	.word	0x42470070
 8006fec:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ff0:	4b38      	ldr	r3, [pc, #224]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0e8      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ffc:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007004:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d02f      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	429a      	cmp	r2, r3
 8007018:	d028      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800701a:	4b2f      	ldr	r3, [pc, #188]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007022:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007024:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800702a:	4b2c      	ldr	r3, [pc, #176]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007030:	4a29      	ldr	r2, [pc, #164]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007036:	4b28      	ldr	r3, [pc, #160]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b01      	cmp	r3, #1
 8007040:	d114      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007042:	f7fd ff85 	bl	8004f50 <HAL_GetTick>
 8007046:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007048:	e00a      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800704a:	f7fd ff81 	bl	8004f50 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	f241 3288 	movw	r2, #5000	; 0x1388
 8007058:	4293      	cmp	r3, r2
 800705a:	d901      	bls.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e035      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007060:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0ee      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007078:	d10d      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800707a:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800708a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708e:	4912      	ldr	r1, [pc, #72]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007090:	4313      	orrs	r3, r2
 8007092:	608b      	str	r3, [r1, #8]
 8007094:	e005      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	4a0f      	ldr	r2, [pc, #60]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800709c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070a0:	6093      	str	r3, [r2, #8]
 80070a2:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ae:	490a      	ldr	r1, [pc, #40]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80070c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40007000 	.word	0x40007000
 80070d8:	40023800 	.word	0x40023800
 80070dc:	42470e40 	.word	0x42470e40
 80070e0:	424711e0 	.word	0x424711e0

080070e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e066      	b.n	80071c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7f5b      	ldrb	r3, [r3, #29]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fd fa4a 	bl	80045a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	22ca      	movs	r2, #202	; 0xca
 800711c:	625a      	str	r2, [r3, #36]	; 0x24
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2253      	movs	r2, #83	; 0x53
 8007124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa45 	bl	80075b6 <RTC_EnterInitMode>
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d12c      	bne.n	8007190 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007148:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6899      	ldr	r1, [r3, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68d2      	ldr	r2, [r2, #12]
 8007170:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6919      	ldr	r1, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	041a      	lsls	r2, r3, #16
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa4c 	bl	8007624 <RTC_ExitInitMode>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d113      	bne.n	80071be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	22ff      	movs	r2, #255	; 0xff
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071d0:	b590      	push	{r4, r7, lr}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	7f1b      	ldrb	r3, [r3, #28]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_RTC_SetTime+0x1c>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e087      	b.n	80072fc <HAL_RTC_SetTime+0x12c>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2201      	movs	r2, #1
 80071f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2202      	movs	r2, #2
 80071f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d126      	bne.n	800724c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2200      	movs	r2, #0
 8007210:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fa29 	bl	800766e <RTC_ByteToBcd2>
 800721c:	4603      	mov	r3, r0
 800721e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fa22 	bl	800766e <RTC_ByteToBcd2>
 800722a:	4603      	mov	r3, r0
 800722c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800722e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	789b      	ldrb	r3, [r3, #2]
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fa1a 	bl	800766e <RTC_ByteToBcd2>
 800723a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800723c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	78db      	ldrb	r3, [r3, #3]
 8007244:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	e018      	b.n	800727e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d102      	bne.n	8007260 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800726c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007272:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	78db      	ldrb	r3, [r3, #3]
 8007278:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	22ca      	movs	r2, #202	; 0xca
 8007284:	625a      	str	r2, [r3, #36]	; 0x24
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2253      	movs	r2, #83	; 0x53
 800728c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f991 	bl	80075b6 <RTC_EnterInitMode>
 8007294:	4603      	mov	r3, r0
 8007296:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007298:	7cfb      	ldrb	r3, [r7, #19]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d120      	bne.n	80072e0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6899      	ldr	r1, [r3, #8]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	431a      	orrs	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f9a4 	bl	8007624 <RTC_ExitInitMode>
 80072dc:	4603      	mov	r3, r0
 80072de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80072e0:	7cfb      	ldrb	r3, [r7, #19]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	22ff      	movs	r2, #255	; 0xff
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	771a      	strb	r2, [r3, #28]

  return status;
 80072fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	bd90      	pop	{r4, r7, pc}

08007304 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007336:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800733a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007346:	b2da      	uxtb	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	0d9b      	lsrs	r3, r3, #22
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	b2da      	uxtb	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11a      	bne.n	80073b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 f98f 	bl	80076a8 <RTC_Bcd2ToByte>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f986 	bl	80076a8 <RTC_Bcd2ToByte>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	789b      	ldrb	r3, [r3, #2]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 f97d 	bl	80076a8 <RTC_Bcd2ToByte>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7f1b      	ldrb	r3, [r3, #28]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_RTC_SetDate+0x1c>
 80073d8:	2302      	movs	r3, #2
 80073da:	e071      	b.n	80074c0 <HAL_RTC_SetDate+0x100>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2202      	movs	r2, #2
 80073e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10e      	bne.n	800740c <HAL_RTC_SetDate+0x4c>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	b2db      	uxtb	r3, r3
 8007404:	330a      	adds	r3, #10
 8007406:	b2da      	uxtb	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d11c      	bne.n	800744c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	78db      	ldrb	r3, [r3, #3]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f929 	bl	800766e <RTC_ByteToBcd2>
 800741c:	4603      	mov	r3, r0
 800741e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f922 	bl	800766e <RTC_ByteToBcd2>
 800742a:	4603      	mov	r3, r0
 800742c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800742e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	789b      	ldrb	r3, [r3, #2]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f91a 	bl	800766e <RTC_ByteToBcd2>
 800743a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800743c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	e00e      	b.n	800746a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	78db      	ldrb	r3, [r3, #3]
 8007450:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007458:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800745e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	22ca      	movs	r2, #202	; 0xca
 8007470:	625a      	str	r2, [r3, #36]	; 0x24
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2253      	movs	r2, #83	; 0x53
 8007478:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f89b 	bl	80075b6 <RTC_EnterInitMode>
 8007480:	4603      	mov	r3, r0
 8007482:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007484:	7cfb      	ldrb	r3, [r7, #19]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10c      	bne.n	80074a4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007494:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007498:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f8c2 	bl	8007624 <RTC_ExitInitMode>
 80074a0:	4603      	mov	r3, r0
 80074a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80074a4:	7cfb      	ldrb	r3, [r7, #19]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	771a      	strb	r2, [r3, #28]

  return status;
 80074be:	7cfb      	ldrb	r3, [r7, #19]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd90      	pop	{r4, r7, pc}

080074c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	0a1b      	lsrs	r3, r3, #8
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f003 031f 	and.w	r3, r3, #31
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800750a:	b2da      	uxtb	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	0b5b      	lsrs	r3, r3, #13
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	b2da      	uxtb	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11a      	bne.n	800755c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	78db      	ldrb	r3, [r3, #3]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f8bc 	bl	80076a8 <RTC_Bcd2ToByte>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f8b3 	bl	80076a8 <RTC_Bcd2ToByte>
 8007542:	4603      	mov	r3, r0
 8007544:	461a      	mov	r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	789b      	ldrb	r3, [r3, #2]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f8aa 	bl	80076a8 <RTC_Bcd2ToByte>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007580:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007582:	f7fd fce5 	bl	8004f50 <HAL_GetTick>
 8007586:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007588:	e009      	b.n	800759e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800758a:	f7fd fce1 	bl	8004f50 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007598:	d901      	bls.n	800759e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e007      	b.n	80075ae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0ee      	beq.n	800758a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d122      	bne.n	800761a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075e4:	f7fd fcb4 	bl	8004f50 <HAL_GetTick>
 80075e8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80075ea:	e00c      	b.n	8007606 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075ec:	f7fd fcb0 	bl	8004f50 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075fa:	d904      	bls.n	8007606 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2204      	movs	r2, #4
 8007600:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <RTC_EnterInitMode+0x64>
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d1e8      	bne.n	80075ec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800763e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff ff89 	bl	8007566 <HAL_RTC_WaitForSynchro>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2204      	movs	r2, #4
 800765e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	4603      	mov	r3, r0
 8007676:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800767c:	e005      	b.n	800768a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	3301      	adds	r3, #1
 8007682:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	3b0a      	subs	r3, #10
 8007688:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	2b09      	cmp	r3, #9
 800768e:	d8f6      	bhi.n	800767e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	b2da      	uxtb	r2, r3
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	4313      	orrs	r3, r2
 800769a:	b2db      	uxtb	r3, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	0092      	lsls	r2, r2, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	4413      	add	r3, r2
 80076d2:	b2db      	uxtb	r3, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e07b      	b.n	80077ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d108      	bne.n	800770c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007702:	d009      	beq.n	8007718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	61da      	str	r2, [r3, #28]
 800770a:	e005      	b.n	8007718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fc ff96 	bl	8004664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779c:	ea42 0103 	orr.w	r1, r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	f003 0104 	and.w	r1, r3, #4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	f003 0210 	and.w	r2, r3, #16
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b088      	sub	sp, #32
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_SPI_Transmit+0x22>
 8007810:	2302      	movs	r3, #2
 8007812:	e126      	b.n	8007a62 <HAL_SPI_Transmit+0x270>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800781c:	f7fd fb98 	bl	8004f50 <HAL_GetTick>
 8007820:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	d002      	beq.n	8007838 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007836:	e10b      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_Transmit+0x52>
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007848:	e102      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2203      	movs	r2, #3
 800784e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007890:	d10f      	bne.n	80078b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d007      	beq.n	80078d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d8:	d14b      	bne.n	8007972 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_SPI_Transmit+0xf6>
 80078e2:	8afb      	ldrh	r3, [r7, #22]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d13e      	bne.n	8007966 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800790c:	e02b      	b.n	8007966 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d112      	bne.n	8007942 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	1c9a      	adds	r2, r3, #2
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007940:	e011      	b.n	8007966 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007942:	f7fd fb05 	bl	8004f50 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d803      	bhi.n	800795a <HAL_SPI_Transmit+0x168>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d102      	bne.n	8007960 <HAL_SPI_Transmit+0x16e>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007964:	e074      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1ce      	bne.n	800790e <HAL_SPI_Transmit+0x11c>
 8007970:	e04c      	b.n	8007a0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_SPI_Transmit+0x18e>
 800797a:	8afb      	ldrh	r3, [r7, #22]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d140      	bne.n	8007a02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	7812      	ldrb	r2, [r2, #0]
 800798c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079a6:	e02c      	b.n	8007a02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d113      	bne.n	80079de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	7812      	ldrb	r2, [r2, #0]
 80079c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	86da      	strh	r2, [r3, #54]	; 0x36
 80079dc:	e011      	b.n	8007a02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079de:	f7fd fab7 	bl	8004f50 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d803      	bhi.n	80079f6 <HAL_SPI_Transmit+0x204>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f4:	d102      	bne.n	80079fc <HAL_SPI_Transmit+0x20a>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a00:	e026      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1cd      	bne.n	80079a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fceb 	bl	80083ec <SPI_EndRxTxTransaction>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e000      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af02      	add	r7, sp, #8
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	603b      	str	r3, [r7, #0]
 8007a76:	4613      	mov	r3, r2
 8007a78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a86:	d112      	bne.n	8007aae <HAL_SPI_Receive+0x44>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10e      	bne.n	8007aae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2204      	movs	r2, #4
 8007a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f8f1 	bl	8007c8c <HAL_SPI_TransmitReceive>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	e0ea      	b.n	8007c84 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_SPI_Receive+0x52>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e0e3      	b.n	8007c84 <HAL_SPI_Receive+0x21a>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ac4:	f7fd fa44 	bl	8004f50 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d002      	beq.n	8007adc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ada:	e0ca      	b.n	8007c72 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_SPI_Receive+0x7e>
 8007ae2:	88fb      	ldrh	r3, [r7, #6]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007aec:	e0c1      	b.n	8007c72 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2204      	movs	r2, #4
 8007af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	88fa      	ldrh	r2, [r7, #6]
 8007b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	88fa      	ldrh	r2, [r7, #6]
 8007b0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b34:	d10f      	bne.n	8007b56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d007      	beq.n	8007b74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d162      	bne.n	8007c42 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b7c:	e02e      	b.n	8007bdc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d115      	bne.n	8007bb8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f103 020c 	add.w	r2, r3, #12
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	7812      	ldrb	r2, [r2, #0]
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bb6:	e011      	b.n	8007bdc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bb8:	f7fd f9ca 	bl	8004f50 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d803      	bhi.n	8007bd0 <HAL_SPI_Receive+0x166>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bce:	d102      	bne.n	8007bd6 <HAL_SPI_Receive+0x16c>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007bda:	e04a      	b.n	8007c72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1cb      	bne.n	8007b7e <HAL_SPI_Receive+0x114>
 8007be6:	e031      	b.n	8007c4c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d113      	bne.n	8007c1e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	b292      	uxth	r2, r2
 8007c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	1c9a      	adds	r2, r3, #2
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c1c:	e011      	b.n	8007c42 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c1e:	f7fd f997 	bl	8004f50 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d803      	bhi.n	8007c36 <HAL_SPI_Receive+0x1cc>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d102      	bne.n	8007c3c <HAL_SPI_Receive+0x1d2>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c40:	e017      	b.n	8007c72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1cd      	bne.n	8007be8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fb65 	bl	8008320 <SPI_EndRxTransaction>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
 8007c6e:	e000      	b.n	8007c72 <HAL_SPI_Receive+0x208>
  }

error :
 8007c70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08c      	sub	sp, #48	; 0x30
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <HAL_SPI_TransmitReceive+0x26>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e18a      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x33c>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cba:	f7fd f949 	bl	8004f50 <HAL_GetTick>
 8007cbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007cd0:	887b      	ldrh	r3, [r7, #2]
 8007cd2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d00f      	beq.n	8007cfc <HAL_SPI_TransmitReceive+0x70>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ce2:	d107      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x68>
 8007cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d003      	beq.n	8007cfc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007cfa:	e15b      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <HAL_SPI_TransmitReceive+0x82>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_SPI_TransmitReceive+0x82>
 8007d08:	887b      	ldrh	r3, [r7, #2]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d14:	e14e      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d003      	beq.n	8007d2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2205      	movs	r2, #5
 8007d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	887a      	ldrh	r2, [r7, #2]
 8007d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	887a      	ldrh	r2, [r7, #2]
 8007d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	887a      	ldrh	r2, [r7, #2]
 8007d4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	887a      	ldrh	r2, [r7, #2]
 8007d52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6a:	2b40      	cmp	r3, #64	; 0x40
 8007d6c:	d007      	beq.n	8007d7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d86:	d178      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_SPI_TransmitReceive+0x10a>
 8007d90:	8b7b      	ldrh	r3, [r7, #26]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d166      	bne.n	8007e64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9a:	881a      	ldrh	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	1c9a      	adds	r2, r3, #2
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dba:	e053      	b.n	8007e64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d11b      	bne.n	8007e02 <HAL_SPI_TransmitReceive+0x176>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d016      	beq.n	8007e02 <HAL_SPI_TransmitReceive+0x176>
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d113      	bne.n	8007e02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	1c9a      	adds	r2, r3, #2
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d119      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x1b8>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d014      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	b292      	uxth	r2, r2
 8007e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	1c9a      	adds	r2, r3, #2
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e40:	2301      	movs	r3, #1
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e44:	f7fd f884 	bl	8004f50 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d807      	bhi.n	8007e64 <HAL_SPI_TransmitReceive+0x1d8>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5a:	d003      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e62:	e0a7      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1a6      	bne.n	8007dbc <HAL_SPI_TransmitReceive+0x130>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1a1      	bne.n	8007dbc <HAL_SPI_TransmitReceive+0x130>
 8007e78:	e07c      	b.n	8007f74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_SPI_TransmitReceive+0x1fc>
 8007e82:	8b7b      	ldrh	r3, [r7, #26]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d16b      	bne.n	8007f60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	330c      	adds	r3, #12
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eae:	e057      	b.n	8007f60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d11c      	bne.n	8007ef8 <HAL_SPI_TransmitReceive+0x26c>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d017      	beq.n	8007ef8 <HAL_SPI_TransmitReceive+0x26c>
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d114      	bne.n	8007ef8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	330c      	adds	r3, #12
 8007ed8:	7812      	ldrb	r2, [r2, #0]
 8007eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d119      	bne.n	8007f3a <HAL_SPI_TransmitReceive+0x2ae>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d014      	beq.n	8007f3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1a:	b2d2      	uxtb	r2, r2
 8007f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f36:	2301      	movs	r3, #1
 8007f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f3a:	f7fd f809 	bl	8004f50 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d803      	bhi.n	8007f52 <HAL_SPI_TransmitReceive+0x2c6>
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d102      	bne.n	8007f58 <HAL_SPI_TransmitReceive+0x2cc>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d103      	bne.n	8007f60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f5e:	e029      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1a2      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x224>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d19d      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fa37 	bl	80083ec <SPI_EndRxTxTransaction>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f90:	e010      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	e000      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3730      	adds	r7, #48	; 0x30
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10e      	bne.n	8008010 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d009      	beq.n	8008010 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
    return;
 800800e:	e0ce      	b.n	80081ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <HAL_SPI_IRQHandler+0x5e>
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
    return;
 800802c:	e0bf      	b.n	80081ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <HAL_SPI_IRQHandler+0x7e>
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80b0 	beq.w	80081ae <HAL_SPI_IRQHandler+0x1de>
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80aa 	beq.w	80081ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d023      	beq.n	80080ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b03      	cmp	r3, #3
 800806e:	d011      	beq.n	8008094 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008074:	f043 0204 	orr.w	r2, r3, #4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	e00b      	b.n	80080ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008094:	2300      	movs	r3, #0
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
        return;
 80080aa:	e080      	b.n	80081ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d014      	beq.n	80080e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	f043 0201 	orr.w	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ee:	f043 0208 	orr.w	r2, r3, #8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080f6:	2300      	movs	r3, #0
 80080f8:	60bb      	str	r3, [r7, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	60bb      	str	r3, [r7, #8]
 8008102:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008108:	2b00      	cmp	r3, #0
 800810a:	d04f      	beq.n	80081ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800811a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <HAL_SPI_IRQHandler+0x168>
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d034      	beq.n	80081a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0203 	bic.w	r2, r2, #3
 8008146:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d011      	beq.n	8008174 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008154:	4a17      	ldr	r2, [pc, #92]	; (80081b4 <HAL_SPI_IRQHandler+0x1e4>)
 8008156:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd fd01 	bl	8005b64 <HAL_DMA_Abort_IT>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008178:	2b00      	cmp	r3, #0
 800817a:	d016      	beq.n	80081aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008180:	4a0c      	ldr	r2, [pc, #48]	; (80081b4 <HAL_SPI_IRQHandler+0x1e4>)
 8008182:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008188:	4618      	mov	r0, r3
 800818a:	f7fd fceb 	bl	8005b64 <HAL_DMA_Abort_IT>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80081a0:	e003      	b.n	80081aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f808 	bl	80081b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80081a8:	e000      	b.n	80081ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80081aa:	bf00      	nop
    return;
 80081ac:	bf00      	nop
  }
}
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	080081e9 	.word	0x080081e9

080081b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081da:	b2db      	uxtb	r3, r3
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff ffd8 	bl	80081b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	4613      	mov	r3, r2
 800821e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008220:	f7fc fe96 	bl	8004f50 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4413      	add	r3, r2
 800822e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008230:	f7fc fe8e 	bl	8004f50 <HAL_GetTick>
 8008234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	015b      	lsls	r3, r3, #5
 800823c:	0d1b      	lsrs	r3, r3, #20
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	fb02 f303 	mul.w	r3, r2, r3
 8008244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008246:	e054      	b.n	80082f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824e:	d050      	beq.n	80082f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008250:	f7fc fe7e 	bl	8004f50 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	429a      	cmp	r2, r3
 800825e:	d902      	bls.n	8008266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d13d      	bne.n	80082e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800827e:	d111      	bne.n	80082a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008288:	d004      	beq.n	8008294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008292:	d107      	bne.n	80082a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ac:	d10f      	bne.n	80082ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e017      	b.n	8008312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4013      	ands	r3, r2
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	429a      	cmp	r2, r3
 8008300:	bf0c      	ite	eq
 8008302:	2301      	moveq	r3, #1
 8008304:	2300      	movne	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	429a      	cmp	r2, r3
 800830e:	d19b      	bne.n	8008248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000110 	.word	0x20000110

08008320 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008334:	d111      	bne.n	800835a <SPI_EndRxTransaction+0x3a>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800833e:	d004      	beq.n	800834a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008348:	d107      	bne.n	800835a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008358:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008362:	d12a      	bne.n	80083ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800836c:	d012      	beq.n	8008394 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2200      	movs	r2, #0
 8008376:	2180      	movs	r1, #128	; 0x80
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff ff49 	bl	8008210 <SPI_WaitFlagStateUntilTimeout>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d02d      	beq.n	80083e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008388:	f043 0220 	orr.w	r2, r3, #32
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e026      	b.n	80083e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	2101      	movs	r1, #1
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff ff36 	bl	8008210 <SPI_WaitFlagStateUntilTimeout>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01a      	beq.n	80083e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	f043 0220 	orr.w	r2, r3, #32
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e013      	b.n	80083e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	2101      	movs	r1, #1
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7ff ff23 	bl	8008210 <SPI_WaitFlagStateUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d007      	beq.n	80083e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d4:	f043 0220 	orr.w	r2, r3, #32
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e000      	b.n	80083e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083f8:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <SPI_EndRxTxTransaction+0x7c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1b      	ldr	r2, [pc, #108]	; (800846c <SPI_EndRxTxTransaction+0x80>)
 80083fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008402:	0d5b      	lsrs	r3, r3, #21
 8008404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008408:	fb02 f303 	mul.w	r3, r2, r3
 800840c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008416:	d112      	bne.n	800843e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2200      	movs	r2, #0
 8008420:	2180      	movs	r1, #128	; 0x80
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fef4 	bl	8008210 <SPI_WaitFlagStateUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d016      	beq.n	800845c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	f043 0220 	orr.w	r2, r3, #32
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e00f      	b.n	800845e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3b01      	subs	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008454:	2b80      	cmp	r3, #128	; 0x80
 8008456:	d0f2      	beq.n	800843e <SPI_EndRxTxTransaction+0x52>
 8008458:	e000      	b.n	800845c <SPI_EndRxTxTransaction+0x70>
        break;
 800845a:	bf00      	nop
  }

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000110 	.word	0x20000110
 800846c:	165e9f81 	.word	0x165e9f81

08008470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e03f      	b.n	8008502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fc fb72 	bl	8004b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2224      	movs	r2, #36	; 0x24
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 f881 	bl	80095bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	691a      	ldr	r2, [r3, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	695a      	ldr	r2, [r3, #20]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b08a      	sub	sp, #40	; 0x28
 800850e:	af02      	add	r7, sp, #8
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	4613      	mov	r3, r2
 8008518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b20      	cmp	r3, #32
 8008528:	d17c      	bne.n	8008624 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <HAL_UART_Transmit+0x2c>
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e075      	b.n	8008626 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_UART_Transmit+0x3e>
 8008544:	2302      	movs	r3, #2
 8008546:	e06e      	b.n	8008626 <HAL_UART_Transmit+0x11c>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2221      	movs	r2, #33	; 0x21
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800855e:	f7fc fcf7 	bl	8004f50 <HAL_GetTick>
 8008562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	88fa      	ldrh	r2, [r7, #6]
 8008568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008578:	d108      	bne.n	800858c <HAL_UART_Transmit+0x82>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d104      	bne.n	800858c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	e003      	b.n	8008594 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800859c:	e02a      	b.n	80085f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2200      	movs	r2, #0
 80085a6:	2180      	movs	r1, #128	; 0x80
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fd38 	bl	800901e <UART_WaitOnFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e036      	b.n	8008626 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	3302      	adds	r3, #2
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	e007      	b.n	80085e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	781a      	ldrb	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	3301      	adds	r3, #1
 80085e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1cf      	bne.n	800859e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2200      	movs	r2, #0
 8008606:	2140      	movs	r1, #64	; 0x40
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fd08 	bl	800901e <UART_WaitOnFlagUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e006      	b.n	8008626 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	e000      	b.n	8008626 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008624:	2302      	movs	r3, #2
  }
}
 8008626:	4618      	mov	r0, r3
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08c      	sub	sp, #48	; 0x30
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4613      	mov	r3, r2
 800863c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b20      	cmp	r3, #32
 8008648:	d165      	bne.n	8008716 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <HAL_UART_Transmit_DMA+0x26>
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e05e      	b.n	8008718 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008660:	2b01      	cmp	r3, #1
 8008662:	d101      	bne.n	8008668 <HAL_UART_Transmit_DMA+0x38>
 8008664:	2302      	movs	r3, #2
 8008666:	e057      	b.n	8008718 <HAL_UART_Transmit_DMA+0xe8>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	88fa      	ldrh	r2, [r7, #6]
 800867a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2221      	movs	r2, #33	; 0x21
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008694:	4a22      	ldr	r2, [pc, #136]	; (8008720 <HAL_UART_Transmit_DMA+0xf0>)
 8008696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869c:	4a21      	ldr	r2, [pc, #132]	; (8008724 <HAL_UART_Transmit_DMA+0xf4>)
 800869e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a4:	4a20      	ldr	r2, [pc, #128]	; (8008728 <HAL_UART_Transmit_DMA+0xf8>)
 80086a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ac:	2200      	movs	r2, #0
 80086ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	6819      	ldr	r1, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3304      	adds	r3, #4
 80086c4:	461a      	mov	r2, r3
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	f7fd f984 	bl	80059d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3314      	adds	r3, #20
 80086e4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	617b      	str	r3, [r7, #20]
   return(result);
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3314      	adds	r3, #20
 80086fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086fe:	627a      	str	r2, [r7, #36]	; 0x24
 8008700:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6a39      	ldr	r1, [r7, #32]
 8008704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	61fb      	str	r3, [r7, #28]
   return(result);
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e5      	bne.n	80086de <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	e000      	b.n	8008718 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008716:	2302      	movs	r3, #2
  }
}
 8008718:	4618      	mov	r0, r3
 800871a:	3730      	adds	r7, #48	; 0x30
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	08008d79 	.word	0x08008d79
 8008724:	08008e13 	.word	0x08008e13
 8008728:	08008f8b 	.word	0x08008f8b

0800872c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08c      	sub	sp, #48	; 0x30
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b20      	cmp	r3, #32
 8008744:	d152      	bne.n	80087ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800874c:	88fb      	ldrh	r3, [r7, #6]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e04b      	b.n	80087ee <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008760:	2302      	movs	r3, #2
 8008762:	e044      	b.n	80087ee <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	461a      	mov	r2, r3
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fcbf 	bl	80090fc <UART_Start_Receive_DMA>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008788:	2b00      	cmp	r3, #0
 800878a:	d12c      	bne.n	80087e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	2b01      	cmp	r3, #1
 8008792:	d125      	bne.n	80087e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008794:	2300      	movs	r3, #0
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	613b      	str	r3, [r7, #16]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	330c      	adds	r3, #12
 80087b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	617b      	str	r3, [r7, #20]
   return(result);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f043 0310 	orr.w	r3, r3, #16
 80087c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	330c      	adds	r3, #12
 80087c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ca:	627a      	str	r2, [r7, #36]	; 0x24
 80087cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6a39      	ldr	r1, [r7, #32]
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e5      	bne.n	80087aa <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80087de:	e002      	b.n	80087e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80087e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087ea:	e000      	b.n	80087ee <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80087ec:	2302      	movs	r3, #2
  }
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3730      	adds	r7, #48	; 0x30
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b0ba      	sub	sp, #232	; 0xe8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800881e:	2300      	movs	r3, #0
 8008820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008824:	2300      	movs	r3, #0
 8008826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800882a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10f      	bne.n	800885e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <HAL_UART_IRQHandler+0x66>
 800884a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fdf5 	bl	8009446 <UART_Receive_IT>
      return;
 800885c:	e256      	b.n	8008d0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800885e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 80de 	beq.w	8008a24 <HAL_UART_IRQHandler+0x22c>
 8008868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008878:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80d1 	beq.w	8008a24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <HAL_UART_IRQHandler+0xae>
 800888e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	f043 0201 	orr.w	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <HAL_UART_IRQHandler+0xd2>
 80088b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	f043 0202 	orr.w	r2, r3, #2
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <HAL_UART_IRQHandler+0xf6>
 80088d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d005      	beq.n	80088ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f043 0204 	orr.w	r2, r3, #4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f2:	f003 0308 	and.w	r3, r3, #8
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d011      	beq.n	800891e <HAL_UART_IRQHandler+0x126>
 80088fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d105      	bne.n	8008912 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	f043 0208 	orr.w	r2, r3, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 81ed 	beq.w	8008d02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b00      	cmp	r3, #0
 8008932:	d008      	beq.n	8008946 <HAL_UART_IRQHandler+0x14e>
 8008934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fd80 	bl	8009446 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	bf0c      	ite	eq
 8008954:	2301      	moveq	r3, #1
 8008956:	2300      	movne	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <HAL_UART_IRQHandler+0x17a>
 800896a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800896e:	2b00      	cmp	r3, #0
 8008970:	d04f      	beq.n	8008a12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fc88 	bl	8009288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d141      	bne.n	8008a0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3314      	adds	r3, #20
 800898c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800899c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3314      	adds	r3, #20
 80089ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1d9      	bne.n	8008986 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d013      	beq.n	8008a02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	4a7d      	ldr	r2, [pc, #500]	; (8008bd4 <HAL_UART_IRQHandler+0x3dc>)
 80089e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fd f8bc 	bl	8005b64 <HAL_DMA_Abort_IT>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d016      	beq.n	8008a20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a00:	e00e      	b.n	8008a20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9ae 	bl	8008d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a08:	e00a      	b.n	8008a20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9aa 	bl	8008d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a10:	e006      	b.n	8008a20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9a6 	bl	8008d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a1e:	e170      	b.n	8008d02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a20:	bf00      	nop
    return;
 8008a22:	e16e      	b.n	8008d02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	f040 814a 	bne.w	8008cc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 8143 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 813c 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60bb      	str	r3, [r7, #8]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	60bb      	str	r3, [r7, #8]
 8008a5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6a:	2b40      	cmp	r3, #64	; 0x40
 8008a6c:	f040 80b4 	bne.w	8008bd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8140 	beq.w	8008d06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	f080 8139 	bcs.w	8008d06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa6:	f000 8088 	beq.w	8008bba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	330c      	adds	r3, #12
 8008ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1d9      	bne.n	8008aaa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3314      	adds	r3, #20
 8008afc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3314      	adds	r3, #20
 8008b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1e1      	bne.n	8008af6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3314      	adds	r3, #20
 8008b38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3314      	adds	r3, #20
 8008b52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e3      	bne.n	8008b32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8a:	f023 0310 	bic.w	r3, r3, #16
 8008b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	330c      	adds	r3, #12
 8008b98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e3      	bne.n	8008b78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fc ff65 	bl	8005a84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fa fe08 	bl	80037e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bd0:	e099      	b.n	8008d06 <HAL_UART_IRQHandler+0x50e>
 8008bd2:	bf00      	nop
 8008bd4:	0800934f 	.word	0x0800934f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 808b 	beq.w	8008d0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8086 	beq.w	8008d0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c22:	647a      	str	r2, [r7, #68]	; 0x44
 8008c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e3      	bne.n	8008bfe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3314      	adds	r3, #20
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	e853 3f00 	ldrex	r3, [r3]
 8008c44:	623b      	str	r3, [r7, #32]
   return(result);
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f023 0301 	bic.w	r3, r3, #1
 8008c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c5a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e3      	bne.n	8008c36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	330c      	adds	r3, #12
 8008c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	e853 3f00 	ldrex	r3, [r3]
 8008c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0310 	bic.w	r3, r3, #16
 8008c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	330c      	adds	r3, #12
 8008c9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ca0:	61fa      	str	r2, [r7, #28]
 8008ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	69b9      	ldr	r1, [r7, #24]
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	617b      	str	r3, [r7, #20]
   return(result);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e3      	bne.n	8008c7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fa fd90 	bl	80037e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cc0:	e023      	b.n	8008d0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x4ea>
 8008cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fb4b 	bl	8009376 <UART_Transmit_IT>
    return;
 8008ce0:	e014      	b.n	8008d0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00e      	beq.n	8008d0c <HAL_UART_IRQHandler+0x514>
 8008cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d008      	beq.n	8008d0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fb8b 	bl	8009416 <UART_EndTransmit_IT>
    return;
 8008d00:	e004      	b.n	8008d0c <HAL_UART_IRQHandler+0x514>
    return;
 8008d02:	bf00      	nop
 8008d04:	e002      	b.n	8008d0c <HAL_UART_IRQHandler+0x514>
      return;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <HAL_UART_IRQHandler+0x514>
      return;
 8008d0a:	bf00      	nop
  }
}
 8008d0c:	37e8      	adds	r7, #232	; 0xe8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop

08008d14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b090      	sub	sp, #64	; 0x40
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d137      	bne.n	8008e04 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2200      	movs	r2, #0
 8008d98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3314      	adds	r3, #20
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	623b      	str	r3, [r7, #32]
   return(result);
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3314      	adds	r3, #20
 8008db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dba:	633a      	str	r2, [r7, #48]	; 0x30
 8008dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc2:	e841 2300 	strex	r3, r2, [r1]
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1e5      	bne.n	8008d9a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34
 8008de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	330c      	adds	r3, #12
 8008dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dee:	61fa      	str	r2, [r7, #28]
 8008df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	69b9      	ldr	r1, [r7, #24]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e5      	bne.n	8008dce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e02:	e002      	b.n	8008e0a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e06:	f7ff ff85 	bl	8008d14 <HAL_UART_TxCpltCallback>
}
 8008e0a:	bf00      	nop
 8008e0c:	3740      	adds	r7, #64	; 0x40
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff ff81 	bl	8008d28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b09c      	sub	sp, #112	; 0x70
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d172      	bne.n	8008f30 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	330c      	adds	r3, #12
 8008e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e70:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e5      	bne.n	8008e50 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e96:	f023 0301 	bic.w	r3, r3, #1
 8008e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3314      	adds	r3, #20
 8008ea2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ea4:	647a      	str	r2, [r7, #68]	; 0x44
 8008ea6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e5      	bne.n	8008e84 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3314      	adds	r3, #20
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ece:	663b      	str	r3, [r7, #96]	; 0x60
 8008ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3314      	adds	r3, #20
 8008ed6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ed8:	633a      	str	r2, [r7, #48]	; 0x30
 8008eda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e5      	bne.n	8008eb8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eee:	2220      	movs	r2, #32
 8008ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d119      	bne.n	8008f30 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 0310 	bic.w	r3, r3, #16
 8008f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	330c      	adds	r3, #12
 8008f1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f1c:	61fa      	str	r2, [r7, #28]
 8008f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	69b9      	ldr	r1, [r7, #24]
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	617b      	str	r3, [r7, #20]
   return(result);
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e5      	bne.n	8008efc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d106      	bne.n	8008f46 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f40:	f7fa fc4e 	bl	80037e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f44:	e002      	b.n	8008f4c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008f46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f48:	f7ff fef8 	bl	8008d3c <HAL_UART_RxCpltCallback>
}
 8008f4c:	bf00      	nop
 8008f4e:	3770      	adds	r7, #112	; 0x70
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d108      	bne.n	8008f7c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f6e:	085b      	lsrs	r3, r3, #1
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	4619      	mov	r1, r3
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7fa fc33 	bl	80037e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f7a:	e002      	b.n	8008f82 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fee7 	bl	8008d50 <HAL_UART_RxHalfCpltCallback>
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa6:	2b80      	cmp	r3, #128	; 0x80
 8008fa8:	bf0c      	ite	eq
 8008faa:	2301      	moveq	r3, #1
 8008fac:	2300      	movne	r3, #0
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b21      	cmp	r3, #33	; 0x21
 8008fbc:	d108      	bne.n	8008fd0 <UART_DMAError+0x46>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d005      	beq.n	8008fd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008fca:	68b8      	ldr	r0, [r7, #8]
 8008fcc:	f000 f934 	bl	8009238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fda:	2b40      	cmp	r3, #64	; 0x40
 8008fdc:	bf0c      	ite	eq
 8008fde:	2301      	moveq	r3, #1
 8008fe0:	2300      	movne	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b22      	cmp	r3, #34	; 0x22
 8008ff0:	d108      	bne.n	8009004 <UART_DMAError+0x7a>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ffe:	68b8      	ldr	r0, [r7, #8]
 8009000:	f000 f942 	bl	8009288 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009008:	f043 0210 	orr.w	r2, r3, #16
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009010:	68b8      	ldr	r0, [r7, #8]
 8009012:	f7ff fea7 	bl	8008d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b090      	sub	sp, #64	; 0x40
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4613      	mov	r3, r2
 800902c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800902e:	e050      	b.n	80090d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d04c      	beq.n	80090d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <UART_WaitOnFlagUntilTimeout+0x30>
 800903e:	f7fb ff87 	bl	8004f50 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800904a:	429a      	cmp	r2, r3
 800904c:	d241      	bcs.n	80090d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	330c      	adds	r3, #12
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800906e:	637a      	str	r2, [r7, #52]	; 0x34
 8009070:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e5      	bne.n	800904e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3314      	adds	r3, #20
 8009088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	613b      	str	r3, [r7, #16]
   return(result);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f023 0301 	bic.w	r3, r3, #1
 8009098:	63bb      	str	r3, [r7, #56]	; 0x38
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3314      	adds	r3, #20
 80090a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090a2:	623a      	str	r2, [r7, #32]
 80090a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	69f9      	ldr	r1, [r7, #28]
 80090a8:	6a3a      	ldr	r2, [r7, #32]
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e5      	bne.n	8009082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e00f      	b.n	80090f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4013      	ands	r3, r2
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	429a      	cmp	r2, r3
 80090e0:	bf0c      	ite	eq
 80090e2:	2301      	moveq	r3, #1
 80090e4:	2300      	movne	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d09f      	beq.n	8009030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3740      	adds	r7, #64	; 0x40
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b098      	sub	sp, #96	; 0x60
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	88fa      	ldrh	r2, [r7, #6]
 8009114:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2222      	movs	r2, #34	; 0x22
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	4a40      	ldr	r2, [pc, #256]	; (800922c <UART_Start_Receive_DMA+0x130>)
 800912a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009130:	4a3f      	ldr	r2, [pc, #252]	; (8009230 <UART_Start_Receive_DMA+0x134>)
 8009132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	4a3e      	ldr	r2, [pc, #248]	; (8009234 <UART_Start_Receive_DMA+0x138>)
 800913a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	2200      	movs	r2, #0
 8009142:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009144:	f107 0308 	add.w	r3, r7, #8
 8009148:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	88fb      	ldrh	r3, [r7, #6]
 800915c:	f7fc fc3a 	bl	80059d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009160:	2300      	movs	r3, #0
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	613b      	str	r3, [r7, #16]
 8009174:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d019      	beq.n	80091ba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	330c      	adds	r3, #12
 800918c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919c:	65bb      	str	r3, [r7, #88]	; 0x58
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	330c      	adds	r3, #12
 80091a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80091a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80091ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80091b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e5      	bne.n	8009186 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	f043 0301 	orr.w	r3, r3, #1
 80091d0:	657b      	str	r3, [r7, #84]	; 0x54
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3314      	adds	r3, #20
 80091d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091da:	63ba      	str	r2, [r7, #56]	; 0x38
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e5      	bne.n	80091ba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3314      	adds	r3, #20
 80091f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	617b      	str	r3, [r7, #20]
   return(result);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009204:	653b      	str	r3, [r7, #80]	; 0x50
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3314      	adds	r3, #20
 800920c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800920e:	627a      	str	r2, [r7, #36]	; 0x24
 8009210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6a39      	ldr	r1, [r7, #32]
 8009214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	61fb      	str	r3, [r7, #28]
   return(result);
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e5      	bne.n	80091ee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3760      	adds	r7, #96	; 0x60
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	08008e2f 	.word	0x08008e2f
 8009230:	08008f55 	.word	0x08008f55
 8009234:	08008f8b 	.word	0x08008f8b

08009238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009238:	b480      	push	{r7}
 800923a:	b089      	sub	sp, #36	; 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	330c      	adds	r3, #12
 8009246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	61ba      	str	r2, [r7, #24]
 8009262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	613b      	str	r3, [r7, #16]
   return(result);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e5      	bne.n	8009240 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800927c:	bf00      	nop
 800927e:	3724      	adds	r7, #36	; 0x24
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b095      	sub	sp, #84	; 0x54
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	330c      	adds	r3, #12
 80092ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092b0:	643a      	str	r2, [r7, #64]	; 0x40
 80092b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e5      	bne.n	8009290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3314      	adds	r3, #20
 80092ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	64bb      	str	r3, [r7, #72]	; 0x48
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3314      	adds	r3, #20
 80092e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e5      	bne.n	80092c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d119      	bne.n	8009334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 0310 	bic.w	r3, r3, #16
 8009316:	647b      	str	r3, [r7, #68]	; 0x44
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009320:	61ba      	str	r2, [r7, #24]
 8009322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6979      	ldr	r1, [r7, #20]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009342:	bf00      	nop
 8009344:	3754      	adds	r7, #84	; 0x54
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7ff fcfb 	bl	8008d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009376:	b480      	push	{r7}
 8009378:	b085      	sub	sp, #20
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b21      	cmp	r3, #33	; 0x21
 8009388:	d13e      	bne.n	8009408 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009392:	d114      	bne.n	80093be <UART_Transmit_IT+0x48>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d110      	bne.n	80093be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	1c9a      	adds	r2, r3, #2
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	621a      	str	r2, [r3, #32]
 80093bc:	e008      	b.n	80093d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	1c59      	adds	r1, r3, #1
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6211      	str	r1, [r2, #32]
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b29b      	uxth	r3, r3
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	4619      	mov	r1, r3
 80093de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10f      	bne.n	8009404 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009402:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	e000      	b.n	800940a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009408:	2302      	movs	r3, #2
  }
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68da      	ldr	r2, [r3, #12]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800942c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff fc6c 	bl	8008d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b08c      	sub	sp, #48	; 0x30
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b22      	cmp	r3, #34	; 0x22
 8009458:	f040 80ab 	bne.w	80095b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009464:	d117      	bne.n	8009496 <UART_Receive_IT+0x50>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d113      	bne.n	8009496 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800946e:	2300      	movs	r3, #0
 8009470:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	b29b      	uxth	r3, r3
 8009480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009484:	b29a      	uxth	r2, r3
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948e:	1c9a      	adds	r2, r3, #2
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	629a      	str	r2, [r3, #40]	; 0x28
 8009494:	e026      	b.n	80094e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800949c:	2300      	movs	r3, #0
 800949e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a8:	d007      	beq.n	80094ba <UART_Receive_IT+0x74>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <UART_Receive_IT+0x82>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	e008      	b.n	80094da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	4619      	mov	r1, r3
 80094f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d15a      	bne.n	80095ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0220 	bic.w	r2, r2, #32
 8009506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695a      	ldr	r2, [r3, #20]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0201 	bic.w	r2, r2, #1
 8009526:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009534:	2b01      	cmp	r3, #1
 8009536:	d135      	bne.n	80095a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	330c      	adds	r3, #12
 8009544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	613b      	str	r3, [r7, #16]
   return(result);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f023 0310 	bic.w	r3, r3, #16
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	330c      	adds	r3, #12
 800955c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955e:	623a      	str	r2, [r7, #32]
 8009560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009562:	69f9      	ldr	r1, [r7, #28]
 8009564:	6a3a      	ldr	r2, [r7, #32]
 8009566:	e841 2300 	strex	r3, r2, [r1]
 800956a:	61bb      	str	r3, [r7, #24]
   return(result);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1e5      	bne.n	800953e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b10      	cmp	r3, #16
 800957e:	d10a      	bne.n	8009596 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7fa f91f 	bl	80037e0 <HAL_UARTEx_RxEventCallback>
 80095a2:	e002      	b.n	80095aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff fbc9 	bl	8008d3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e002      	b.n	80095b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e000      	b.n	80095b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095b2:	2302      	movs	r3, #2
  }
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3730      	adds	r7, #48	; 0x30
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095c0:	b0c0      	sub	sp, #256	; 0x100
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d8:	68d9      	ldr	r1, [r3, #12]
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	ea40 0301 	orr.w	r3, r0, r1
 80095e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	4313      	orrs	r3, r2
 8009604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009614:	f021 010c 	bic.w	r1, r1, #12
 8009618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009622:	430b      	orrs	r3, r1
 8009624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009636:	6999      	ldr	r1, [r3, #24]
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	ea40 0301 	orr.w	r3, r0, r1
 8009642:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b8f      	ldr	r3, [pc, #572]	; (8009888 <UART_SetConfig+0x2cc>)
 800964c:	429a      	cmp	r2, r3
 800964e:	d005      	beq.n	800965c <UART_SetConfig+0xa0>
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	4b8d      	ldr	r3, [pc, #564]	; (800988c <UART_SetConfig+0x2d0>)
 8009658:	429a      	cmp	r2, r3
 800965a:	d104      	bne.n	8009666 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800965c:	f7fd fb6e 	bl	8006d3c <HAL_RCC_GetPCLK2Freq>
 8009660:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009664:	e003      	b.n	800966e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009666:	f7fd fb55 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 800966a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800966e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009678:	f040 810c 	bne.w	8009894 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800967c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009680:	2200      	movs	r2, #0
 8009682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009686:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800968a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800968e:	4622      	mov	r2, r4
 8009690:	462b      	mov	r3, r5
 8009692:	1891      	adds	r1, r2, r2
 8009694:	65b9      	str	r1, [r7, #88]	; 0x58
 8009696:	415b      	adcs	r3, r3
 8009698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800969a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800969e:	4621      	mov	r1, r4
 80096a0:	eb12 0801 	adds.w	r8, r2, r1
 80096a4:	4629      	mov	r1, r5
 80096a6:	eb43 0901 	adc.w	r9, r3, r1
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096be:	4690      	mov	r8, r2
 80096c0:	4699      	mov	r9, r3
 80096c2:	4623      	mov	r3, r4
 80096c4:	eb18 0303 	adds.w	r3, r8, r3
 80096c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096cc:	462b      	mov	r3, r5
 80096ce:	eb49 0303 	adc.w	r3, r9, r3
 80096d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096ea:	460b      	mov	r3, r1
 80096ec:	18db      	adds	r3, r3, r3
 80096ee:	653b      	str	r3, [r7, #80]	; 0x50
 80096f0:	4613      	mov	r3, r2
 80096f2:	eb42 0303 	adc.w	r3, r2, r3
 80096f6:	657b      	str	r3, [r7, #84]	; 0x54
 80096f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009700:	f7f7 fad2 	bl	8000ca8 <__aeabi_uldivmod>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4b61      	ldr	r3, [pc, #388]	; (8009890 <UART_SetConfig+0x2d4>)
 800970a:	fba3 2302 	umull	r2, r3, r3, r2
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	011c      	lsls	r4, r3, #4
 8009712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009716:	2200      	movs	r2, #0
 8009718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800971c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009720:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	1891      	adds	r1, r2, r2
 800972a:	64b9      	str	r1, [r7, #72]	; 0x48
 800972c:	415b      	adcs	r3, r3
 800972e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009734:	4641      	mov	r1, r8
 8009736:	eb12 0a01 	adds.w	sl, r2, r1
 800973a:	4649      	mov	r1, r9
 800973c:	eb43 0b01 	adc.w	fp, r3, r1
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800974c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009754:	4692      	mov	sl, r2
 8009756:	469b      	mov	fp, r3
 8009758:	4643      	mov	r3, r8
 800975a:	eb1a 0303 	adds.w	r3, sl, r3
 800975e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009762:	464b      	mov	r3, r9
 8009764:	eb4b 0303 	adc.w	r3, fp, r3
 8009768:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009778:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800977c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009780:	460b      	mov	r3, r1
 8009782:	18db      	adds	r3, r3, r3
 8009784:	643b      	str	r3, [r7, #64]	; 0x40
 8009786:	4613      	mov	r3, r2
 8009788:	eb42 0303 	adc.w	r3, r2, r3
 800978c:	647b      	str	r3, [r7, #68]	; 0x44
 800978e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009792:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009796:	f7f7 fa87 	bl	8000ca8 <__aeabi_uldivmod>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	4b3b      	ldr	r3, [pc, #236]	; (8009890 <UART_SetConfig+0x2d4>)
 80097a2:	fba3 2301 	umull	r2, r3, r3, r1
 80097a6:	095b      	lsrs	r3, r3, #5
 80097a8:	2264      	movs	r2, #100	; 0x64
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	1acb      	subs	r3, r1, r3
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097b6:	4b36      	ldr	r3, [pc, #216]	; (8009890 <UART_SetConfig+0x2d4>)
 80097b8:	fba3 2302 	umull	r2, r3, r3, r2
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097c4:	441c      	add	r4, r3
 80097c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097d8:	4642      	mov	r2, r8
 80097da:	464b      	mov	r3, r9
 80097dc:	1891      	adds	r1, r2, r2
 80097de:	63b9      	str	r1, [r7, #56]	; 0x38
 80097e0:	415b      	adcs	r3, r3
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097e8:	4641      	mov	r1, r8
 80097ea:	1851      	adds	r1, r2, r1
 80097ec:	6339      	str	r1, [r7, #48]	; 0x30
 80097ee:	4649      	mov	r1, r9
 80097f0:	414b      	adcs	r3, r1
 80097f2:	637b      	str	r3, [r7, #52]	; 0x34
 80097f4:	f04f 0200 	mov.w	r2, #0
 80097f8:	f04f 0300 	mov.w	r3, #0
 80097fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009800:	4659      	mov	r1, fp
 8009802:	00cb      	lsls	r3, r1, #3
 8009804:	4651      	mov	r1, sl
 8009806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800980a:	4651      	mov	r1, sl
 800980c:	00ca      	lsls	r2, r1, #3
 800980e:	4610      	mov	r0, r2
 8009810:	4619      	mov	r1, r3
 8009812:	4603      	mov	r3, r0
 8009814:	4642      	mov	r2, r8
 8009816:	189b      	adds	r3, r3, r2
 8009818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800981c:	464b      	mov	r3, r9
 800981e:	460a      	mov	r2, r1
 8009820:	eb42 0303 	adc.w	r3, r2, r3
 8009824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009834:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800983c:	460b      	mov	r3, r1
 800983e:	18db      	adds	r3, r3, r3
 8009840:	62bb      	str	r3, [r7, #40]	; 0x28
 8009842:	4613      	mov	r3, r2
 8009844:	eb42 0303 	adc.w	r3, r2, r3
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800984a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800984e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009852:	f7f7 fa29 	bl	8000ca8 <__aeabi_uldivmod>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <UART_SetConfig+0x2d4>)
 800985c:	fba3 1302 	umull	r1, r3, r3, r2
 8009860:	095b      	lsrs	r3, r3, #5
 8009862:	2164      	movs	r1, #100	; 0x64
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	3332      	adds	r3, #50	; 0x32
 800986e:	4a08      	ldr	r2, [pc, #32]	; (8009890 <UART_SetConfig+0x2d4>)
 8009870:	fba2 2303 	umull	r2, r3, r2, r3
 8009874:	095b      	lsrs	r3, r3, #5
 8009876:	f003 0207 	and.w	r2, r3, #7
 800987a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4422      	add	r2, r4
 8009882:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009884:	e106      	b.n	8009a94 <UART_SetConfig+0x4d8>
 8009886:	bf00      	nop
 8009888:	40011000 	.word	0x40011000
 800988c:	40011400 	.word	0x40011400
 8009890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009898:	2200      	movs	r2, #0
 800989a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800989e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80098a6:	4642      	mov	r2, r8
 80098a8:	464b      	mov	r3, r9
 80098aa:	1891      	adds	r1, r2, r2
 80098ac:	6239      	str	r1, [r7, #32]
 80098ae:	415b      	adcs	r3, r3
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
 80098b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098b6:	4641      	mov	r1, r8
 80098b8:	1854      	adds	r4, r2, r1
 80098ba:	4649      	mov	r1, r9
 80098bc:	eb43 0501 	adc.w	r5, r3, r1
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	00eb      	lsls	r3, r5, #3
 80098ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098ce:	00e2      	lsls	r2, r4, #3
 80098d0:	4614      	mov	r4, r2
 80098d2:	461d      	mov	r5, r3
 80098d4:	4643      	mov	r3, r8
 80098d6:	18e3      	adds	r3, r4, r3
 80098d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098dc:	464b      	mov	r3, r9
 80098de:	eb45 0303 	adc.w	r3, r5, r3
 80098e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	f04f 0300 	mov.w	r3, #0
 80098fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009902:	4629      	mov	r1, r5
 8009904:	008b      	lsls	r3, r1, #2
 8009906:	4621      	mov	r1, r4
 8009908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800990c:	4621      	mov	r1, r4
 800990e:	008a      	lsls	r2, r1, #2
 8009910:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009914:	f7f7 f9c8 	bl	8000ca8 <__aeabi_uldivmod>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4b60      	ldr	r3, [pc, #384]	; (8009aa0 <UART_SetConfig+0x4e4>)
 800991e:	fba3 2302 	umull	r2, r3, r3, r2
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	011c      	lsls	r4, r3, #4
 8009926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800992a:	2200      	movs	r2, #0
 800992c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009930:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009934:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	1891      	adds	r1, r2, r2
 800993e:	61b9      	str	r1, [r7, #24]
 8009940:	415b      	adcs	r3, r3
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009948:	4641      	mov	r1, r8
 800994a:	1851      	adds	r1, r2, r1
 800994c:	6139      	str	r1, [r7, #16]
 800994e:	4649      	mov	r1, r9
 8009950:	414b      	adcs	r3, r1
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009960:	4659      	mov	r1, fp
 8009962:	00cb      	lsls	r3, r1, #3
 8009964:	4651      	mov	r1, sl
 8009966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800996a:	4651      	mov	r1, sl
 800996c:	00ca      	lsls	r2, r1, #3
 800996e:	4610      	mov	r0, r2
 8009970:	4619      	mov	r1, r3
 8009972:	4603      	mov	r3, r0
 8009974:	4642      	mov	r2, r8
 8009976:	189b      	adds	r3, r3, r2
 8009978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800997c:	464b      	mov	r3, r9
 800997e:	460a      	mov	r2, r1
 8009980:	eb42 0303 	adc.w	r3, r2, r3
 8009984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	67bb      	str	r3, [r7, #120]	; 0x78
 8009992:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80099a0:	4649      	mov	r1, r9
 80099a2:	008b      	lsls	r3, r1, #2
 80099a4:	4641      	mov	r1, r8
 80099a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099aa:	4641      	mov	r1, r8
 80099ac:	008a      	lsls	r2, r1, #2
 80099ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099b2:	f7f7 f979 	bl	8000ca8 <__aeabi_uldivmod>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	4b38      	ldr	r3, [pc, #224]	; (8009aa0 <UART_SetConfig+0x4e4>)
 80099be:	fba3 2301 	umull	r2, r3, r3, r1
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	2264      	movs	r2, #100	; 0x64
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	1acb      	subs	r3, r1, r3
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	3332      	adds	r3, #50	; 0x32
 80099d0:	4a33      	ldr	r2, [pc, #204]	; (8009aa0 <UART_SetConfig+0x4e4>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099dc:	441c      	add	r4, r3
 80099de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099e2:	2200      	movs	r2, #0
 80099e4:	673b      	str	r3, [r7, #112]	; 0x70
 80099e6:	677a      	str	r2, [r7, #116]	; 0x74
 80099e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099ec:	4642      	mov	r2, r8
 80099ee:	464b      	mov	r3, r9
 80099f0:	1891      	adds	r1, r2, r2
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	415b      	adcs	r3, r3
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099fc:	4641      	mov	r1, r8
 80099fe:	1851      	adds	r1, r2, r1
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	4649      	mov	r1, r9
 8009a04:	414b      	adcs	r3, r1
 8009a06:	607b      	str	r3, [r7, #4]
 8009a08:	f04f 0200 	mov.w	r2, #0
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a14:	4659      	mov	r1, fp
 8009a16:	00cb      	lsls	r3, r1, #3
 8009a18:	4651      	mov	r1, sl
 8009a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a1e:	4651      	mov	r1, sl
 8009a20:	00ca      	lsls	r2, r1, #3
 8009a22:	4610      	mov	r0, r2
 8009a24:	4619      	mov	r1, r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	4642      	mov	r2, r8
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a2e:	464b      	mov	r3, r9
 8009a30:	460a      	mov	r2, r1
 8009a32:	eb42 0303 	adc.w	r3, r2, r3
 8009a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	663b      	str	r3, [r7, #96]	; 0x60
 8009a42:	667a      	str	r2, [r7, #100]	; 0x64
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a50:	4649      	mov	r1, r9
 8009a52:	008b      	lsls	r3, r1, #2
 8009a54:	4641      	mov	r1, r8
 8009a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	008a      	lsls	r2, r1, #2
 8009a5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a62:	f7f7 f921 	bl	8000ca8 <__aeabi_uldivmod>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <UART_SetConfig+0x4e4>)
 8009a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a70:	095b      	lsrs	r3, r3, #5
 8009a72:	2164      	movs	r1, #100	; 0x64
 8009a74:	fb01 f303 	mul.w	r3, r1, r3
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	011b      	lsls	r3, r3, #4
 8009a7c:	3332      	adds	r3, #50	; 0x32
 8009a7e:	4a08      	ldr	r2, [pc, #32]	; (8009aa0 <UART_SetConfig+0x4e4>)
 8009a80:	fba2 2303 	umull	r2, r3, r2, r3
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	f003 020f 	and.w	r2, r3, #15
 8009a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4422      	add	r2, r4
 8009a92:	609a      	str	r2, [r3, #8]
}
 8009a94:	bf00      	nop
 8009a96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aa0:	51eb851f 	.word	0x51eb851f

08009aa4 <__cvt>:
 8009aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa8:	ec55 4b10 	vmov	r4, r5, d0
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	460e      	mov	r6, r1
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	bfbb      	ittet	lt
 8009ab6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009aba:	461d      	movlt	r5, r3
 8009abc:	2300      	movge	r3, #0
 8009abe:	232d      	movlt	r3, #45	; 0x2d
 8009ac0:	700b      	strb	r3, [r1, #0]
 8009ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ac4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ac8:	4691      	mov	r9, r2
 8009aca:	f023 0820 	bic.w	r8, r3, #32
 8009ace:	bfbc      	itt	lt
 8009ad0:	4622      	movlt	r2, r4
 8009ad2:	4614      	movlt	r4, r2
 8009ad4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ad8:	d005      	beq.n	8009ae6 <__cvt+0x42>
 8009ada:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ade:	d100      	bne.n	8009ae2 <__cvt+0x3e>
 8009ae0:	3601      	adds	r6, #1
 8009ae2:	2102      	movs	r1, #2
 8009ae4:	e000      	b.n	8009ae8 <__cvt+0x44>
 8009ae6:	2103      	movs	r1, #3
 8009ae8:	ab03      	add	r3, sp, #12
 8009aea:	9301      	str	r3, [sp, #4]
 8009aec:	ab02      	add	r3, sp, #8
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	ec45 4b10 	vmov	d0, r4, r5
 8009af4:	4653      	mov	r3, sl
 8009af6:	4632      	mov	r2, r6
 8009af8:	f000 ff46 	bl	800a988 <_dtoa_r>
 8009afc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b00:	4607      	mov	r7, r0
 8009b02:	d102      	bne.n	8009b0a <__cvt+0x66>
 8009b04:	f019 0f01 	tst.w	r9, #1
 8009b08:	d022      	beq.n	8009b50 <__cvt+0xac>
 8009b0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b0e:	eb07 0906 	add.w	r9, r7, r6
 8009b12:	d110      	bne.n	8009b36 <__cvt+0x92>
 8009b14:	783b      	ldrb	r3, [r7, #0]
 8009b16:	2b30      	cmp	r3, #48	; 0x30
 8009b18:	d10a      	bne.n	8009b30 <__cvt+0x8c>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7f6 ffe1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b26:	b918      	cbnz	r0, 8009b30 <__cvt+0x8c>
 8009b28:	f1c6 0601 	rsb	r6, r6, #1
 8009b2c:	f8ca 6000 	str.w	r6, [sl]
 8009b30:	f8da 3000 	ldr.w	r3, [sl]
 8009b34:	4499      	add	r9, r3
 8009b36:	2200      	movs	r2, #0
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	f7f6 ffd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b42:	b108      	cbz	r0, 8009b48 <__cvt+0xa4>
 8009b44:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b48:	2230      	movs	r2, #48	; 0x30
 8009b4a:	9b03      	ldr	r3, [sp, #12]
 8009b4c:	454b      	cmp	r3, r9
 8009b4e:	d307      	bcc.n	8009b60 <__cvt+0xbc>
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b54:	1bdb      	subs	r3, r3, r7
 8009b56:	4638      	mov	r0, r7
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	b004      	add	sp, #16
 8009b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b60:	1c59      	adds	r1, r3, #1
 8009b62:	9103      	str	r1, [sp, #12]
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	e7f0      	b.n	8009b4a <__cvt+0xa6>

08009b68 <__exponent>:
 8009b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	bfb8      	it	lt
 8009b70:	4249      	neglt	r1, r1
 8009b72:	f803 2b02 	strb.w	r2, [r3], #2
 8009b76:	bfb4      	ite	lt
 8009b78:	222d      	movlt	r2, #45	; 0x2d
 8009b7a:	222b      	movge	r2, #43	; 0x2b
 8009b7c:	2909      	cmp	r1, #9
 8009b7e:	7042      	strb	r2, [r0, #1]
 8009b80:	dd2a      	ble.n	8009bd8 <__exponent+0x70>
 8009b82:	f10d 0207 	add.w	r2, sp, #7
 8009b86:	4617      	mov	r7, r2
 8009b88:	260a      	movs	r6, #10
 8009b8a:	4694      	mov	ip, r2
 8009b8c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b90:	fb06 1415 	mls	r4, r6, r5, r1
 8009b94:	3430      	adds	r4, #48	; 0x30
 8009b96:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	2c63      	cmp	r4, #99	; 0x63
 8009b9e:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	dcf1      	bgt.n	8009b8a <__exponent+0x22>
 8009ba6:	3130      	adds	r1, #48	; 0x30
 8009ba8:	f1ac 0402 	sub.w	r4, ip, #2
 8009bac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009bb0:	1c41      	adds	r1, r0, #1
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	42ba      	cmp	r2, r7
 8009bb6:	d30a      	bcc.n	8009bce <__exponent+0x66>
 8009bb8:	f10d 0209 	add.w	r2, sp, #9
 8009bbc:	eba2 020c 	sub.w	r2, r2, ip
 8009bc0:	42bc      	cmp	r4, r7
 8009bc2:	bf88      	it	hi
 8009bc4:	2200      	movhi	r2, #0
 8009bc6:	4413      	add	r3, r2
 8009bc8:	1a18      	subs	r0, r3, r0
 8009bca:	b003      	add	sp, #12
 8009bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bce:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009bd2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009bd6:	e7ed      	b.n	8009bb4 <__exponent+0x4c>
 8009bd8:	2330      	movs	r3, #48	; 0x30
 8009bda:	3130      	adds	r1, #48	; 0x30
 8009bdc:	7083      	strb	r3, [r0, #2]
 8009bde:	70c1      	strb	r1, [r0, #3]
 8009be0:	1d03      	adds	r3, r0, #4
 8009be2:	e7f1      	b.n	8009bc8 <__exponent+0x60>

08009be4 <_printf_float>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	ed2d 8b02 	vpush	{d8}
 8009bec:	b08d      	sub	sp, #52	; 0x34
 8009bee:	460c      	mov	r4, r1
 8009bf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	461f      	mov	r7, r3
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	f000 fdb7 	bl	800a76c <_localeconv_r>
 8009bfe:	f8d0 a000 	ldr.w	sl, [r0]
 8009c02:	4650      	mov	r0, sl
 8009c04:	f7f6 fb44 	bl	8000290 <strlen>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	9305      	str	r3, [sp, #20]
 8009c10:	f8d8 3000 	ldr.w	r3, [r8]
 8009c14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c18:	3307      	adds	r3, #7
 8009c1a:	f023 0307 	bic.w	r3, r3, #7
 8009c1e:	f103 0208 	add.w	r2, r3, #8
 8009c22:	f8c8 2000 	str.w	r2, [r8]
 8009c26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c34:	ee08 0a10 	vmov	s16, r0
 8009c38:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009c3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c40:	4b9e      	ldr	r3, [pc, #632]	; (8009ebc <_printf_float+0x2d8>)
 8009c42:	f04f 32ff 	mov.w	r2, #4294967295
 8009c46:	f7f6 ff81 	bl	8000b4c <__aeabi_dcmpun>
 8009c4a:	bb88      	cbnz	r0, 8009cb0 <_printf_float+0xcc>
 8009c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c50:	4b9a      	ldr	r3, [pc, #616]	; (8009ebc <_printf_float+0x2d8>)
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295
 8009c56:	f7f6 ff5b 	bl	8000b10 <__aeabi_dcmple>
 8009c5a:	bb48      	cbnz	r0, 8009cb0 <_printf_float+0xcc>
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2300      	movs	r3, #0
 8009c60:	4640      	mov	r0, r8
 8009c62:	4649      	mov	r1, r9
 8009c64:	f7f6 ff4a 	bl	8000afc <__aeabi_dcmplt>
 8009c68:	b110      	cbz	r0, 8009c70 <_printf_float+0x8c>
 8009c6a:	232d      	movs	r3, #45	; 0x2d
 8009c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c70:	4a93      	ldr	r2, [pc, #588]	; (8009ec0 <_printf_float+0x2dc>)
 8009c72:	4b94      	ldr	r3, [pc, #592]	; (8009ec4 <_printf_float+0x2e0>)
 8009c74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c78:	bf94      	ite	ls
 8009c7a:	4690      	movls	r8, r2
 8009c7c:	4698      	movhi	r8, r3
 8009c7e:	2303      	movs	r3, #3
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	9b05      	ldr	r3, [sp, #20]
 8009c84:	f023 0304 	bic.w	r3, r3, #4
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	f04f 0900 	mov.w	r9, #0
 8009c8e:	9700      	str	r7, [sp, #0]
 8009c90:	4633      	mov	r3, r6
 8009c92:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c94:	4621      	mov	r1, r4
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 f9da 	bl	800a050 <_printf_common>
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	f040 8090 	bne.w	8009dc2 <_printf_float+0x1de>
 8009ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca6:	b00d      	add	sp, #52	; 0x34
 8009ca8:	ecbd 8b02 	vpop	{d8}
 8009cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f7f6 ff48 	bl	8000b4c <__aeabi_dcmpun>
 8009cbc:	b140      	cbz	r0, 8009cd0 <_printf_float+0xec>
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bfbc      	itt	lt
 8009cc4:	232d      	movlt	r3, #45	; 0x2d
 8009cc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009cca:	4a7f      	ldr	r2, [pc, #508]	; (8009ec8 <_printf_float+0x2e4>)
 8009ccc:	4b7f      	ldr	r3, [pc, #508]	; (8009ecc <_printf_float+0x2e8>)
 8009cce:	e7d1      	b.n	8009c74 <_printf_float+0x90>
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009cd6:	9206      	str	r2, [sp, #24]
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	d13f      	bne.n	8009d5c <_printf_float+0x178>
 8009cdc:	2306      	movs	r3, #6
 8009cde:	6063      	str	r3, [r4, #4]
 8009ce0:	9b05      	ldr	r3, [sp, #20]
 8009ce2:	6861      	ldr	r1, [r4, #4]
 8009ce4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9303      	str	r3, [sp, #12]
 8009cec:	ab0a      	add	r3, sp, #40	; 0x28
 8009cee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009cf2:	ab09      	add	r3, sp, #36	; 0x24
 8009cf4:	ec49 8b10 	vmov	d0, r8, r9
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	6022      	str	r2, [r4, #0]
 8009cfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d00:	4628      	mov	r0, r5
 8009d02:	f7ff fecf 	bl	8009aa4 <__cvt>
 8009d06:	9b06      	ldr	r3, [sp, #24]
 8009d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d0a:	2b47      	cmp	r3, #71	; 0x47
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	d108      	bne.n	8009d22 <_printf_float+0x13e>
 8009d10:	1cc8      	adds	r0, r1, #3
 8009d12:	db02      	blt.n	8009d1a <_printf_float+0x136>
 8009d14:	6863      	ldr	r3, [r4, #4]
 8009d16:	4299      	cmp	r1, r3
 8009d18:	dd41      	ble.n	8009d9e <_printf_float+0x1ba>
 8009d1a:	f1ab 0302 	sub.w	r3, fp, #2
 8009d1e:	fa5f fb83 	uxtb.w	fp, r3
 8009d22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d26:	d820      	bhi.n	8009d6a <_printf_float+0x186>
 8009d28:	3901      	subs	r1, #1
 8009d2a:	465a      	mov	r2, fp
 8009d2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d30:	9109      	str	r1, [sp, #36]	; 0x24
 8009d32:	f7ff ff19 	bl	8009b68 <__exponent>
 8009d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d38:	1813      	adds	r3, r2, r0
 8009d3a:	2a01      	cmp	r2, #1
 8009d3c:	4681      	mov	r9, r0
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	dc02      	bgt.n	8009d48 <_printf_float+0x164>
 8009d42:	6822      	ldr	r2, [r4, #0]
 8009d44:	07d2      	lsls	r2, r2, #31
 8009d46:	d501      	bpl.n	8009d4c <_printf_float+0x168>
 8009d48:	3301      	adds	r3, #1
 8009d4a:	6123      	str	r3, [r4, #16]
 8009d4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d09c      	beq.n	8009c8e <_printf_float+0xaa>
 8009d54:	232d      	movs	r3, #45	; 0x2d
 8009d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d5a:	e798      	b.n	8009c8e <_printf_float+0xaa>
 8009d5c:	9a06      	ldr	r2, [sp, #24]
 8009d5e:	2a47      	cmp	r2, #71	; 0x47
 8009d60:	d1be      	bne.n	8009ce0 <_printf_float+0xfc>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1bc      	bne.n	8009ce0 <_printf_float+0xfc>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e7b9      	b.n	8009cde <_printf_float+0xfa>
 8009d6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d6e:	d118      	bne.n	8009da2 <_printf_float+0x1be>
 8009d70:	2900      	cmp	r1, #0
 8009d72:	6863      	ldr	r3, [r4, #4]
 8009d74:	dd0b      	ble.n	8009d8e <_printf_float+0x1aa>
 8009d76:	6121      	str	r1, [r4, #16]
 8009d78:	b913      	cbnz	r3, 8009d80 <_printf_float+0x19c>
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	07d0      	lsls	r0, r2, #31
 8009d7e:	d502      	bpl.n	8009d86 <_printf_float+0x1a2>
 8009d80:	3301      	adds	r3, #1
 8009d82:	440b      	add	r3, r1
 8009d84:	6123      	str	r3, [r4, #16]
 8009d86:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d88:	f04f 0900 	mov.w	r9, #0
 8009d8c:	e7de      	b.n	8009d4c <_printf_float+0x168>
 8009d8e:	b913      	cbnz	r3, 8009d96 <_printf_float+0x1b2>
 8009d90:	6822      	ldr	r2, [r4, #0]
 8009d92:	07d2      	lsls	r2, r2, #31
 8009d94:	d501      	bpl.n	8009d9a <_printf_float+0x1b6>
 8009d96:	3302      	adds	r3, #2
 8009d98:	e7f4      	b.n	8009d84 <_printf_float+0x1a0>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e7f2      	b.n	8009d84 <_printf_float+0x1a0>
 8009d9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da4:	4299      	cmp	r1, r3
 8009da6:	db05      	blt.n	8009db4 <_printf_float+0x1d0>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	6121      	str	r1, [r4, #16]
 8009dac:	07d8      	lsls	r0, r3, #31
 8009dae:	d5ea      	bpl.n	8009d86 <_printf_float+0x1a2>
 8009db0:	1c4b      	adds	r3, r1, #1
 8009db2:	e7e7      	b.n	8009d84 <_printf_float+0x1a0>
 8009db4:	2900      	cmp	r1, #0
 8009db6:	bfd4      	ite	le
 8009db8:	f1c1 0202 	rsble	r2, r1, #2
 8009dbc:	2201      	movgt	r2, #1
 8009dbe:	4413      	add	r3, r2
 8009dc0:	e7e0      	b.n	8009d84 <_printf_float+0x1a0>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	055a      	lsls	r2, r3, #21
 8009dc6:	d407      	bmi.n	8009dd8 <_printf_float+0x1f4>
 8009dc8:	6923      	ldr	r3, [r4, #16]
 8009dca:	4642      	mov	r2, r8
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d12c      	bne.n	8009e30 <_printf_float+0x24c>
 8009dd6:	e764      	b.n	8009ca2 <_printf_float+0xbe>
 8009dd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ddc:	f240 80e0 	bls.w	8009fa0 <_printf_float+0x3bc>
 8009de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009de4:	2200      	movs	r2, #0
 8009de6:	2300      	movs	r3, #0
 8009de8:	f7f6 fe7e 	bl	8000ae8 <__aeabi_dcmpeq>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d034      	beq.n	8009e5a <_printf_float+0x276>
 8009df0:	4a37      	ldr	r2, [pc, #220]	; (8009ed0 <_printf_float+0x2ec>)
 8009df2:	2301      	movs	r3, #1
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f43f af51 	beq.w	8009ca2 <_printf_float+0xbe>
 8009e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e04:	429a      	cmp	r2, r3
 8009e06:	db02      	blt.n	8009e0e <_printf_float+0x22a>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	07d8      	lsls	r0, r3, #31
 8009e0c:	d510      	bpl.n	8009e30 <_printf_float+0x24c>
 8009e0e:	ee18 3a10 	vmov	r3, s16
 8009e12:	4652      	mov	r2, sl
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f af41 	beq.w	8009ca2 <_printf_float+0xbe>
 8009e20:	f04f 0800 	mov.w	r8, #0
 8009e24:	f104 091a 	add.w	r9, r4, #26
 8009e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	4543      	cmp	r3, r8
 8009e2e:	dc09      	bgt.n	8009e44 <_printf_float+0x260>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	079b      	lsls	r3, r3, #30
 8009e34:	f100 8107 	bmi.w	800a046 <_printf_float+0x462>
 8009e38:	68e0      	ldr	r0, [r4, #12]
 8009e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e3c:	4298      	cmp	r0, r3
 8009e3e:	bfb8      	it	lt
 8009e40:	4618      	movlt	r0, r3
 8009e42:	e730      	b.n	8009ca6 <_printf_float+0xc2>
 8009e44:	2301      	movs	r3, #1
 8009e46:	464a      	mov	r2, r9
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b8      	blx	r7
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f43f af27 	beq.w	8009ca2 <_printf_float+0xbe>
 8009e54:	f108 0801 	add.w	r8, r8, #1
 8009e58:	e7e6      	b.n	8009e28 <_printf_float+0x244>
 8009e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dc39      	bgt.n	8009ed4 <_printf_float+0x2f0>
 8009e60:	4a1b      	ldr	r2, [pc, #108]	; (8009ed0 <_printf_float+0x2ec>)
 8009e62:	2301      	movs	r3, #1
 8009e64:	4631      	mov	r1, r6
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f af19 	beq.w	8009ca2 <_printf_float+0xbe>
 8009e70:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009e74:	4313      	orrs	r3, r2
 8009e76:	d102      	bne.n	8009e7e <_printf_float+0x29a>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	07d9      	lsls	r1, r3, #31
 8009e7c:	d5d8      	bpl.n	8009e30 <_printf_float+0x24c>
 8009e7e:	ee18 3a10 	vmov	r3, s16
 8009e82:	4652      	mov	r2, sl
 8009e84:	4631      	mov	r1, r6
 8009e86:	4628      	mov	r0, r5
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f43f af09 	beq.w	8009ca2 <_printf_float+0xbe>
 8009e90:	f04f 0900 	mov.w	r9, #0
 8009e94:	f104 0a1a 	add.w	sl, r4, #26
 8009e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9a:	425b      	negs	r3, r3
 8009e9c:	454b      	cmp	r3, r9
 8009e9e:	dc01      	bgt.n	8009ea4 <_printf_float+0x2c0>
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea2:	e792      	b.n	8009dca <_printf_float+0x1e6>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	4652      	mov	r2, sl
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f43f aef7 	beq.w	8009ca2 <_printf_float+0xbe>
 8009eb4:	f109 0901 	add.w	r9, r9, #1
 8009eb8:	e7ee      	b.n	8009e98 <_printf_float+0x2b4>
 8009eba:	bf00      	nop
 8009ebc:	7fefffff 	.word	0x7fefffff
 8009ec0:	0800de28 	.word	0x0800de28
 8009ec4:	0800de2c 	.word	0x0800de2c
 8009ec8:	0800de30 	.word	0x0800de30
 8009ecc:	0800de34 	.word	0x0800de34
 8009ed0:	0800de38 	.word	0x0800de38
 8009ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	bfa8      	it	ge
 8009edc:	461a      	movge	r2, r3
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	4691      	mov	r9, r2
 8009ee2:	dc37      	bgt.n	8009f54 <_printf_float+0x370>
 8009ee4:	f04f 0b00 	mov.w	fp, #0
 8009ee8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eec:	f104 021a 	add.w	r2, r4, #26
 8009ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ef2:	9305      	str	r3, [sp, #20]
 8009ef4:	eba3 0309 	sub.w	r3, r3, r9
 8009ef8:	455b      	cmp	r3, fp
 8009efa:	dc33      	bgt.n	8009f64 <_printf_float+0x380>
 8009efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f00:	429a      	cmp	r2, r3
 8009f02:	db3b      	blt.n	8009f7c <_printf_float+0x398>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	07da      	lsls	r2, r3, #31
 8009f08:	d438      	bmi.n	8009f7c <_printf_float+0x398>
 8009f0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f0e:	eba2 0903 	sub.w	r9, r2, r3
 8009f12:	9b05      	ldr	r3, [sp, #20]
 8009f14:	1ad2      	subs	r2, r2, r3
 8009f16:	4591      	cmp	r9, r2
 8009f18:	bfa8      	it	ge
 8009f1a:	4691      	movge	r9, r2
 8009f1c:	f1b9 0f00 	cmp.w	r9, #0
 8009f20:	dc35      	bgt.n	8009f8e <_printf_float+0x3aa>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f2a:	f104 0a1a 	add.w	sl, r4, #26
 8009f2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f32:	1a9b      	subs	r3, r3, r2
 8009f34:	eba3 0309 	sub.w	r3, r3, r9
 8009f38:	4543      	cmp	r3, r8
 8009f3a:	f77f af79 	ble.w	8009e30 <_printf_float+0x24c>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4652      	mov	r2, sl
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	f43f aeaa 	beq.w	8009ca2 <_printf_float+0xbe>
 8009f4e:	f108 0801 	add.w	r8, r8, #1
 8009f52:	e7ec      	b.n	8009f2e <_printf_float+0x34a>
 8009f54:	4613      	mov	r3, r2
 8009f56:	4631      	mov	r1, r6
 8009f58:	4642      	mov	r2, r8
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d1c0      	bne.n	8009ee4 <_printf_float+0x300>
 8009f62:	e69e      	b.n	8009ca2 <_printf_float+0xbe>
 8009f64:	2301      	movs	r3, #1
 8009f66:	4631      	mov	r1, r6
 8009f68:	4628      	mov	r0, r5
 8009f6a:	9205      	str	r2, [sp, #20]
 8009f6c:	47b8      	blx	r7
 8009f6e:	3001      	adds	r0, #1
 8009f70:	f43f ae97 	beq.w	8009ca2 <_printf_float+0xbe>
 8009f74:	9a05      	ldr	r2, [sp, #20]
 8009f76:	f10b 0b01 	add.w	fp, fp, #1
 8009f7a:	e7b9      	b.n	8009ef0 <_printf_float+0x30c>
 8009f7c:	ee18 3a10 	vmov	r3, s16
 8009f80:	4652      	mov	r2, sl
 8009f82:	4631      	mov	r1, r6
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b8      	blx	r7
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d1be      	bne.n	8009f0a <_printf_float+0x326>
 8009f8c:	e689      	b.n	8009ca2 <_printf_float+0xbe>
 8009f8e:	9a05      	ldr	r2, [sp, #20]
 8009f90:	464b      	mov	r3, r9
 8009f92:	4442      	add	r2, r8
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d1c1      	bne.n	8009f22 <_printf_float+0x33e>
 8009f9e:	e680      	b.n	8009ca2 <_printf_float+0xbe>
 8009fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fa2:	2a01      	cmp	r2, #1
 8009fa4:	dc01      	bgt.n	8009faa <_printf_float+0x3c6>
 8009fa6:	07db      	lsls	r3, r3, #31
 8009fa8:	d53a      	bpl.n	800a020 <_printf_float+0x43c>
 8009faa:	2301      	movs	r3, #1
 8009fac:	4642      	mov	r2, r8
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	47b8      	blx	r7
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	f43f ae74 	beq.w	8009ca2 <_printf_float+0xbe>
 8009fba:	ee18 3a10 	vmov	r3, s16
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	47b8      	blx	r7
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	f43f ae6b 	beq.w	8009ca2 <_printf_float+0xbe>
 8009fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009fd8:	f7f6 fd86 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fdc:	b9d8      	cbnz	r0, 800a016 <_printf_float+0x432>
 8009fde:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009fe2:	f108 0201 	add.w	r2, r8, #1
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b8      	blx	r7
 8009fec:	3001      	adds	r0, #1
 8009fee:	d10e      	bne.n	800a00e <_printf_float+0x42a>
 8009ff0:	e657      	b.n	8009ca2 <_printf_float+0xbe>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b8      	blx	r7
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	f43f ae50 	beq.w	8009ca2 <_printf_float+0xbe>
 800a002:	f108 0801 	add.w	r8, r8, #1
 800a006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a008:	3b01      	subs	r3, #1
 800a00a:	4543      	cmp	r3, r8
 800a00c:	dcf1      	bgt.n	8009ff2 <_printf_float+0x40e>
 800a00e:	464b      	mov	r3, r9
 800a010:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a014:	e6da      	b.n	8009dcc <_printf_float+0x1e8>
 800a016:	f04f 0800 	mov.w	r8, #0
 800a01a:	f104 0a1a 	add.w	sl, r4, #26
 800a01e:	e7f2      	b.n	800a006 <_printf_float+0x422>
 800a020:	2301      	movs	r3, #1
 800a022:	4642      	mov	r2, r8
 800a024:	e7df      	b.n	8009fe6 <_printf_float+0x402>
 800a026:	2301      	movs	r3, #1
 800a028:	464a      	mov	r2, r9
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	f43f ae36 	beq.w	8009ca2 <_printf_float+0xbe>
 800a036:	f108 0801 	add.w	r8, r8, #1
 800a03a:	68e3      	ldr	r3, [r4, #12]
 800a03c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a03e:	1a5b      	subs	r3, r3, r1
 800a040:	4543      	cmp	r3, r8
 800a042:	dcf0      	bgt.n	800a026 <_printf_float+0x442>
 800a044:	e6f8      	b.n	8009e38 <_printf_float+0x254>
 800a046:	f04f 0800 	mov.w	r8, #0
 800a04a:	f104 0919 	add.w	r9, r4, #25
 800a04e:	e7f4      	b.n	800a03a <_printf_float+0x456>

0800a050 <_printf_common>:
 800a050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	4616      	mov	r6, r2
 800a056:	4699      	mov	r9, r3
 800a058:	688a      	ldr	r2, [r1, #8]
 800a05a:	690b      	ldr	r3, [r1, #16]
 800a05c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a060:	4293      	cmp	r3, r2
 800a062:	bfb8      	it	lt
 800a064:	4613      	movlt	r3, r2
 800a066:	6033      	str	r3, [r6, #0]
 800a068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a06c:	4607      	mov	r7, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	b10a      	cbz	r2, 800a076 <_printf_common+0x26>
 800a072:	3301      	adds	r3, #1
 800a074:	6033      	str	r3, [r6, #0]
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	0699      	lsls	r1, r3, #26
 800a07a:	bf42      	ittt	mi
 800a07c:	6833      	ldrmi	r3, [r6, #0]
 800a07e:	3302      	addmi	r3, #2
 800a080:	6033      	strmi	r3, [r6, #0]
 800a082:	6825      	ldr	r5, [r4, #0]
 800a084:	f015 0506 	ands.w	r5, r5, #6
 800a088:	d106      	bne.n	800a098 <_printf_common+0x48>
 800a08a:	f104 0a19 	add.w	sl, r4, #25
 800a08e:	68e3      	ldr	r3, [r4, #12]
 800a090:	6832      	ldr	r2, [r6, #0]
 800a092:	1a9b      	subs	r3, r3, r2
 800a094:	42ab      	cmp	r3, r5
 800a096:	dc26      	bgt.n	800a0e6 <_printf_common+0x96>
 800a098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a09c:	1e13      	subs	r3, r2, #0
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	bf18      	it	ne
 800a0a2:	2301      	movne	r3, #1
 800a0a4:	0692      	lsls	r2, r2, #26
 800a0a6:	d42b      	bmi.n	800a100 <_printf_common+0xb0>
 800a0a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	47c0      	blx	r8
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d01e      	beq.n	800a0f4 <_printf_common+0xa4>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	6922      	ldr	r2, [r4, #16]
 800a0ba:	f003 0306 	and.w	r3, r3, #6
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	bf02      	ittt	eq
 800a0c2:	68e5      	ldreq	r5, [r4, #12]
 800a0c4:	6833      	ldreq	r3, [r6, #0]
 800a0c6:	1aed      	subeq	r5, r5, r3
 800a0c8:	68a3      	ldr	r3, [r4, #8]
 800a0ca:	bf0c      	ite	eq
 800a0cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0d0:	2500      	movne	r5, #0
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	bfc4      	itt	gt
 800a0d6:	1a9b      	subgt	r3, r3, r2
 800a0d8:	18ed      	addgt	r5, r5, r3
 800a0da:	2600      	movs	r6, #0
 800a0dc:	341a      	adds	r4, #26
 800a0de:	42b5      	cmp	r5, r6
 800a0e0:	d11a      	bne.n	800a118 <_printf_common+0xc8>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	e008      	b.n	800a0f8 <_printf_common+0xa8>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4652      	mov	r2, sl
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	47c0      	blx	r8
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d103      	bne.n	800a0fc <_printf_common+0xac>
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	e7c6      	b.n	800a08e <_printf_common+0x3e>
 800a100:	18e1      	adds	r1, r4, r3
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	2030      	movs	r0, #48	; 0x30
 800a106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a10a:	4422      	add	r2, r4
 800a10c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a114:	3302      	adds	r3, #2
 800a116:	e7c7      	b.n	800a0a8 <_printf_common+0x58>
 800a118:	2301      	movs	r3, #1
 800a11a:	4622      	mov	r2, r4
 800a11c:	4649      	mov	r1, r9
 800a11e:	4638      	mov	r0, r7
 800a120:	47c0      	blx	r8
 800a122:	3001      	adds	r0, #1
 800a124:	d0e6      	beq.n	800a0f4 <_printf_common+0xa4>
 800a126:	3601      	adds	r6, #1
 800a128:	e7d9      	b.n	800a0de <_printf_common+0x8e>
	...

0800a12c <_printf_i>:
 800a12c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	7e0f      	ldrb	r7, [r1, #24]
 800a132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a134:	2f78      	cmp	r7, #120	; 0x78
 800a136:	4691      	mov	r9, r2
 800a138:	4680      	mov	r8, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	469a      	mov	sl, r3
 800a13e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a142:	d807      	bhi.n	800a154 <_printf_i+0x28>
 800a144:	2f62      	cmp	r7, #98	; 0x62
 800a146:	d80a      	bhi.n	800a15e <_printf_i+0x32>
 800a148:	2f00      	cmp	r7, #0
 800a14a:	f000 80d4 	beq.w	800a2f6 <_printf_i+0x1ca>
 800a14e:	2f58      	cmp	r7, #88	; 0x58
 800a150:	f000 80c0 	beq.w	800a2d4 <_printf_i+0x1a8>
 800a154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a15c:	e03a      	b.n	800a1d4 <_printf_i+0xa8>
 800a15e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a162:	2b15      	cmp	r3, #21
 800a164:	d8f6      	bhi.n	800a154 <_printf_i+0x28>
 800a166:	a101      	add	r1, pc, #4	; (adr r1, 800a16c <_printf_i+0x40>)
 800a168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a16c:	0800a1c5 	.word	0x0800a1c5
 800a170:	0800a1d9 	.word	0x0800a1d9
 800a174:	0800a155 	.word	0x0800a155
 800a178:	0800a155 	.word	0x0800a155
 800a17c:	0800a155 	.word	0x0800a155
 800a180:	0800a155 	.word	0x0800a155
 800a184:	0800a1d9 	.word	0x0800a1d9
 800a188:	0800a155 	.word	0x0800a155
 800a18c:	0800a155 	.word	0x0800a155
 800a190:	0800a155 	.word	0x0800a155
 800a194:	0800a155 	.word	0x0800a155
 800a198:	0800a2dd 	.word	0x0800a2dd
 800a19c:	0800a205 	.word	0x0800a205
 800a1a0:	0800a297 	.word	0x0800a297
 800a1a4:	0800a155 	.word	0x0800a155
 800a1a8:	0800a155 	.word	0x0800a155
 800a1ac:	0800a2ff 	.word	0x0800a2ff
 800a1b0:	0800a155 	.word	0x0800a155
 800a1b4:	0800a205 	.word	0x0800a205
 800a1b8:	0800a155 	.word	0x0800a155
 800a1bc:	0800a155 	.word	0x0800a155
 800a1c0:	0800a29f 	.word	0x0800a29f
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	1d1a      	adds	r2, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	602a      	str	r2, [r5, #0]
 800a1cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e09f      	b.n	800a318 <_printf_i+0x1ec>
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	682b      	ldr	r3, [r5, #0]
 800a1dc:	0607      	lsls	r7, r0, #24
 800a1de:	f103 0104 	add.w	r1, r3, #4
 800a1e2:	6029      	str	r1, [r5, #0]
 800a1e4:	d501      	bpl.n	800a1ea <_printf_i+0xbe>
 800a1e6:	681e      	ldr	r6, [r3, #0]
 800a1e8:	e003      	b.n	800a1f2 <_printf_i+0xc6>
 800a1ea:	0646      	lsls	r6, r0, #25
 800a1ec:	d5fb      	bpl.n	800a1e6 <_printf_i+0xba>
 800a1ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1f2:	2e00      	cmp	r6, #0
 800a1f4:	da03      	bge.n	800a1fe <_printf_i+0xd2>
 800a1f6:	232d      	movs	r3, #45	; 0x2d
 800a1f8:	4276      	negs	r6, r6
 800a1fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1fe:	485a      	ldr	r0, [pc, #360]	; (800a368 <_printf_i+0x23c>)
 800a200:	230a      	movs	r3, #10
 800a202:	e012      	b.n	800a22a <_printf_i+0xfe>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	6820      	ldr	r0, [r4, #0]
 800a208:	1d19      	adds	r1, r3, #4
 800a20a:	6029      	str	r1, [r5, #0]
 800a20c:	0605      	lsls	r5, r0, #24
 800a20e:	d501      	bpl.n	800a214 <_printf_i+0xe8>
 800a210:	681e      	ldr	r6, [r3, #0]
 800a212:	e002      	b.n	800a21a <_printf_i+0xee>
 800a214:	0641      	lsls	r1, r0, #25
 800a216:	d5fb      	bpl.n	800a210 <_printf_i+0xe4>
 800a218:	881e      	ldrh	r6, [r3, #0]
 800a21a:	4853      	ldr	r0, [pc, #332]	; (800a368 <_printf_i+0x23c>)
 800a21c:	2f6f      	cmp	r7, #111	; 0x6f
 800a21e:	bf0c      	ite	eq
 800a220:	2308      	moveq	r3, #8
 800a222:	230a      	movne	r3, #10
 800a224:	2100      	movs	r1, #0
 800a226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a22a:	6865      	ldr	r5, [r4, #4]
 800a22c:	60a5      	str	r5, [r4, #8]
 800a22e:	2d00      	cmp	r5, #0
 800a230:	bfa2      	ittt	ge
 800a232:	6821      	ldrge	r1, [r4, #0]
 800a234:	f021 0104 	bicge.w	r1, r1, #4
 800a238:	6021      	strge	r1, [r4, #0]
 800a23a:	b90e      	cbnz	r6, 800a240 <_printf_i+0x114>
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	d04b      	beq.n	800a2d8 <_printf_i+0x1ac>
 800a240:	4615      	mov	r5, r2
 800a242:	fbb6 f1f3 	udiv	r1, r6, r3
 800a246:	fb03 6711 	mls	r7, r3, r1, r6
 800a24a:	5dc7      	ldrb	r7, [r0, r7]
 800a24c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a250:	4637      	mov	r7, r6
 800a252:	42bb      	cmp	r3, r7
 800a254:	460e      	mov	r6, r1
 800a256:	d9f4      	bls.n	800a242 <_printf_i+0x116>
 800a258:	2b08      	cmp	r3, #8
 800a25a:	d10b      	bne.n	800a274 <_printf_i+0x148>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	07de      	lsls	r6, r3, #31
 800a260:	d508      	bpl.n	800a274 <_printf_i+0x148>
 800a262:	6923      	ldr	r3, [r4, #16]
 800a264:	6861      	ldr	r1, [r4, #4]
 800a266:	4299      	cmp	r1, r3
 800a268:	bfde      	ittt	le
 800a26a:	2330      	movle	r3, #48	; 0x30
 800a26c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a270:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a274:	1b52      	subs	r2, r2, r5
 800a276:	6122      	str	r2, [r4, #16]
 800a278:	f8cd a000 	str.w	sl, [sp]
 800a27c:	464b      	mov	r3, r9
 800a27e:	aa03      	add	r2, sp, #12
 800a280:	4621      	mov	r1, r4
 800a282:	4640      	mov	r0, r8
 800a284:	f7ff fee4 	bl	800a050 <_printf_common>
 800a288:	3001      	adds	r0, #1
 800a28a:	d14a      	bne.n	800a322 <_printf_i+0x1f6>
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	b004      	add	sp, #16
 800a292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	f043 0320 	orr.w	r3, r3, #32
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	4833      	ldr	r0, [pc, #204]	; (800a36c <_printf_i+0x240>)
 800a2a0:	2778      	movs	r7, #120	; 0x78
 800a2a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	6829      	ldr	r1, [r5, #0]
 800a2aa:	061f      	lsls	r7, r3, #24
 800a2ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2b0:	d402      	bmi.n	800a2b8 <_printf_i+0x18c>
 800a2b2:	065f      	lsls	r7, r3, #25
 800a2b4:	bf48      	it	mi
 800a2b6:	b2b6      	uxthmi	r6, r6
 800a2b8:	07df      	lsls	r7, r3, #31
 800a2ba:	bf48      	it	mi
 800a2bc:	f043 0320 	orrmi.w	r3, r3, #32
 800a2c0:	6029      	str	r1, [r5, #0]
 800a2c2:	bf48      	it	mi
 800a2c4:	6023      	strmi	r3, [r4, #0]
 800a2c6:	b91e      	cbnz	r6, 800a2d0 <_printf_i+0x1a4>
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	f023 0320 	bic.w	r3, r3, #32
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	e7a7      	b.n	800a224 <_printf_i+0xf8>
 800a2d4:	4824      	ldr	r0, [pc, #144]	; (800a368 <_printf_i+0x23c>)
 800a2d6:	e7e4      	b.n	800a2a2 <_printf_i+0x176>
 800a2d8:	4615      	mov	r5, r2
 800a2da:	e7bd      	b.n	800a258 <_printf_i+0x12c>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	6826      	ldr	r6, [r4, #0]
 800a2e0:	6961      	ldr	r1, [r4, #20]
 800a2e2:	1d18      	adds	r0, r3, #4
 800a2e4:	6028      	str	r0, [r5, #0]
 800a2e6:	0635      	lsls	r5, r6, #24
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_i+0x1c4>
 800a2ec:	6019      	str	r1, [r3, #0]
 800a2ee:	e002      	b.n	800a2f6 <_printf_i+0x1ca>
 800a2f0:	0670      	lsls	r0, r6, #25
 800a2f2:	d5fb      	bpl.n	800a2ec <_printf_i+0x1c0>
 800a2f4:	8019      	strh	r1, [r3, #0]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	6123      	str	r3, [r4, #16]
 800a2fa:	4615      	mov	r5, r2
 800a2fc:	e7bc      	b.n	800a278 <_printf_i+0x14c>
 800a2fe:	682b      	ldr	r3, [r5, #0]
 800a300:	1d1a      	adds	r2, r3, #4
 800a302:	602a      	str	r2, [r5, #0]
 800a304:	681d      	ldr	r5, [r3, #0]
 800a306:	6862      	ldr	r2, [r4, #4]
 800a308:	2100      	movs	r1, #0
 800a30a:	4628      	mov	r0, r5
 800a30c:	f7f5 ff70 	bl	80001f0 <memchr>
 800a310:	b108      	cbz	r0, 800a316 <_printf_i+0x1ea>
 800a312:	1b40      	subs	r0, r0, r5
 800a314:	6060      	str	r0, [r4, #4]
 800a316:	6863      	ldr	r3, [r4, #4]
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	2300      	movs	r3, #0
 800a31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a320:	e7aa      	b.n	800a278 <_printf_i+0x14c>
 800a322:	6923      	ldr	r3, [r4, #16]
 800a324:	462a      	mov	r2, r5
 800a326:	4649      	mov	r1, r9
 800a328:	4640      	mov	r0, r8
 800a32a:	47d0      	blx	sl
 800a32c:	3001      	adds	r0, #1
 800a32e:	d0ad      	beq.n	800a28c <_printf_i+0x160>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	079b      	lsls	r3, r3, #30
 800a334:	d413      	bmi.n	800a35e <_printf_i+0x232>
 800a336:	68e0      	ldr	r0, [r4, #12]
 800a338:	9b03      	ldr	r3, [sp, #12]
 800a33a:	4298      	cmp	r0, r3
 800a33c:	bfb8      	it	lt
 800a33e:	4618      	movlt	r0, r3
 800a340:	e7a6      	b.n	800a290 <_printf_i+0x164>
 800a342:	2301      	movs	r3, #1
 800a344:	4632      	mov	r2, r6
 800a346:	4649      	mov	r1, r9
 800a348:	4640      	mov	r0, r8
 800a34a:	47d0      	blx	sl
 800a34c:	3001      	adds	r0, #1
 800a34e:	d09d      	beq.n	800a28c <_printf_i+0x160>
 800a350:	3501      	adds	r5, #1
 800a352:	68e3      	ldr	r3, [r4, #12]
 800a354:	9903      	ldr	r1, [sp, #12]
 800a356:	1a5b      	subs	r3, r3, r1
 800a358:	42ab      	cmp	r3, r5
 800a35a:	dcf2      	bgt.n	800a342 <_printf_i+0x216>
 800a35c:	e7eb      	b.n	800a336 <_printf_i+0x20a>
 800a35e:	2500      	movs	r5, #0
 800a360:	f104 0619 	add.w	r6, r4, #25
 800a364:	e7f5      	b.n	800a352 <_printf_i+0x226>
 800a366:	bf00      	nop
 800a368:	0800de3a 	.word	0x0800de3a
 800a36c:	0800de4b 	.word	0x0800de4b

0800a370 <std>:
 800a370:	2300      	movs	r3, #0
 800a372:	b510      	push	{r4, lr}
 800a374:	4604      	mov	r4, r0
 800a376:	e9c0 3300 	strd	r3, r3, [r0]
 800a37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37e:	6083      	str	r3, [r0, #8]
 800a380:	8181      	strh	r1, [r0, #12]
 800a382:	6643      	str	r3, [r0, #100]	; 0x64
 800a384:	81c2      	strh	r2, [r0, #14]
 800a386:	6183      	str	r3, [r0, #24]
 800a388:	4619      	mov	r1, r3
 800a38a:	2208      	movs	r2, #8
 800a38c:	305c      	adds	r0, #92	; 0x5c
 800a38e:	f000 f9e5 	bl	800a75c <memset>
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <std+0x38>)
 800a394:	6263      	str	r3, [r4, #36]	; 0x24
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <std+0x3c>)
 800a398:	62a3      	str	r3, [r4, #40]	; 0x28
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <std+0x40>)
 800a39c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <std+0x44>)
 800a3a0:	6224      	str	r4, [r4, #32]
 800a3a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800a5ad 	.word	0x0800a5ad
 800a3ac:	0800a5cf 	.word	0x0800a5cf
 800a3b0:	0800a607 	.word	0x0800a607
 800a3b4:	0800a62b 	.word	0x0800a62b

0800a3b8 <stdio_exit_handler>:
 800a3b8:	4a02      	ldr	r2, [pc, #8]	; (800a3c4 <stdio_exit_handler+0xc>)
 800a3ba:	4903      	ldr	r1, [pc, #12]	; (800a3c8 <stdio_exit_handler+0x10>)
 800a3bc:	4803      	ldr	r0, [pc, #12]	; (800a3cc <stdio_exit_handler+0x14>)
 800a3be:	f000 b869 	b.w	800a494 <_fwalk_sglue>
 800a3c2:	bf00      	nop
 800a3c4:	2000011c 	.word	0x2000011c
 800a3c8:	0800c1f9 	.word	0x0800c1f9
 800a3cc:	20000128 	.word	0x20000128

0800a3d0 <cleanup_stdio>:
 800a3d0:	6841      	ldr	r1, [r0, #4]
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	; (800a404 <cleanup_stdio+0x34>)
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	4604      	mov	r4, r0
 800a3da:	d001      	beq.n	800a3e0 <cleanup_stdio+0x10>
 800a3dc:	f001 ff0c 	bl	800c1f8 <_fflush_r>
 800a3e0:	68a1      	ldr	r1, [r4, #8]
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <cleanup_stdio+0x38>)
 800a3e4:	4299      	cmp	r1, r3
 800a3e6:	d002      	beq.n	800a3ee <cleanup_stdio+0x1e>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f001 ff05 	bl	800c1f8 <_fflush_r>
 800a3ee:	68e1      	ldr	r1, [r4, #12]
 800a3f0:	4b06      	ldr	r3, [pc, #24]	; (800a40c <cleanup_stdio+0x3c>)
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	d004      	beq.n	800a400 <cleanup_stdio+0x30>
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fc:	f001 befc 	b.w	800c1f8 <_fflush_r>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	bf00      	nop
 800a404:	20001c40 	.word	0x20001c40
 800a408:	20001ca8 	.word	0x20001ca8
 800a40c:	20001d10 	.word	0x20001d10

0800a410 <global_stdio_init.part.0>:
 800a410:	b510      	push	{r4, lr}
 800a412:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <global_stdio_init.part.0+0x30>)
 800a414:	4c0b      	ldr	r4, [pc, #44]	; (800a444 <global_stdio_init.part.0+0x34>)
 800a416:	4a0c      	ldr	r2, [pc, #48]	; (800a448 <global_stdio_init.part.0+0x38>)
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	4620      	mov	r0, r4
 800a41c:	2200      	movs	r2, #0
 800a41e:	2104      	movs	r1, #4
 800a420:	f7ff ffa6 	bl	800a370 <std>
 800a424:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a428:	2201      	movs	r2, #1
 800a42a:	2109      	movs	r1, #9
 800a42c:	f7ff ffa0 	bl	800a370 <std>
 800a430:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a434:	2202      	movs	r2, #2
 800a436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43a:	2112      	movs	r1, #18
 800a43c:	f7ff bf98 	b.w	800a370 <std>
 800a440:	20001d78 	.word	0x20001d78
 800a444:	20001c40 	.word	0x20001c40
 800a448:	0800a3b9 	.word	0x0800a3b9

0800a44c <__sfp_lock_acquire>:
 800a44c:	4801      	ldr	r0, [pc, #4]	; (800a454 <__sfp_lock_acquire+0x8>)
 800a44e:	f000 ba01 	b.w	800a854 <__retarget_lock_acquire_recursive>
 800a452:	bf00      	nop
 800a454:	20001d81 	.word	0x20001d81

0800a458 <__sfp_lock_release>:
 800a458:	4801      	ldr	r0, [pc, #4]	; (800a460 <__sfp_lock_release+0x8>)
 800a45a:	f000 b9fc 	b.w	800a856 <__retarget_lock_release_recursive>
 800a45e:	bf00      	nop
 800a460:	20001d81 	.word	0x20001d81

0800a464 <__sinit>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4604      	mov	r4, r0
 800a468:	f7ff fff0 	bl	800a44c <__sfp_lock_acquire>
 800a46c:	6a23      	ldr	r3, [r4, #32]
 800a46e:	b11b      	cbz	r3, 800a478 <__sinit+0x14>
 800a470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a474:	f7ff bff0 	b.w	800a458 <__sfp_lock_release>
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <__sinit+0x28>)
 800a47a:	6223      	str	r3, [r4, #32]
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <__sinit+0x2c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1f5      	bne.n	800a470 <__sinit+0xc>
 800a484:	f7ff ffc4 	bl	800a410 <global_stdio_init.part.0>
 800a488:	e7f2      	b.n	800a470 <__sinit+0xc>
 800a48a:	bf00      	nop
 800a48c:	0800a3d1 	.word	0x0800a3d1
 800a490:	20001d78 	.word	0x20001d78

0800a494 <_fwalk_sglue>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	4607      	mov	r7, r0
 800a49a:	4688      	mov	r8, r1
 800a49c:	4614      	mov	r4, r2
 800a49e:	2600      	movs	r6, #0
 800a4a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4a4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4a8:	d505      	bpl.n	800a4b6 <_fwalk_sglue+0x22>
 800a4aa:	6824      	ldr	r4, [r4, #0]
 800a4ac:	2c00      	cmp	r4, #0
 800a4ae:	d1f7      	bne.n	800a4a0 <_fwalk_sglue+0xc>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b6:	89ab      	ldrh	r3, [r5, #12]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d907      	bls.n	800a4cc <_fwalk_sglue+0x38>
 800a4bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	d003      	beq.n	800a4cc <_fwalk_sglue+0x38>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	47c0      	blx	r8
 800a4ca:	4306      	orrs	r6, r0
 800a4cc:	3568      	adds	r5, #104	; 0x68
 800a4ce:	e7e9      	b.n	800a4a4 <_fwalk_sglue+0x10>

0800a4d0 <iprintf>:
 800a4d0:	b40f      	push	{r0, r1, r2, r3}
 800a4d2:	b507      	push	{r0, r1, r2, lr}
 800a4d4:	4906      	ldr	r1, [pc, #24]	; (800a4f0 <iprintf+0x20>)
 800a4d6:	ab04      	add	r3, sp, #16
 800a4d8:	6808      	ldr	r0, [r1, #0]
 800a4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4de:	6881      	ldr	r1, [r0, #8]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	f001 fce9 	bl	800beb8 <_vfiprintf_r>
 800a4e6:	b003      	add	sp, #12
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	b004      	add	sp, #16
 800a4ee:	4770      	bx	lr
 800a4f0:	20000174 	.word	0x20000174

0800a4f4 <_puts_r>:
 800a4f4:	6a03      	ldr	r3, [r0, #32]
 800a4f6:	b570      	push	{r4, r5, r6, lr}
 800a4f8:	6884      	ldr	r4, [r0, #8]
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	460e      	mov	r6, r1
 800a4fe:	b90b      	cbnz	r3, 800a504 <_puts_r+0x10>
 800a500:	f7ff ffb0 	bl	800a464 <__sinit>
 800a504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a506:	07db      	lsls	r3, r3, #31
 800a508:	d405      	bmi.n	800a516 <_puts_r+0x22>
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	0598      	lsls	r0, r3, #22
 800a50e:	d402      	bmi.n	800a516 <_puts_r+0x22>
 800a510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a512:	f000 f99f 	bl	800a854 <__retarget_lock_acquire_recursive>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	0719      	lsls	r1, r3, #28
 800a51a:	d513      	bpl.n	800a544 <_puts_r+0x50>
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	b18b      	cbz	r3, 800a544 <_puts_r+0x50>
 800a520:	3e01      	subs	r6, #1
 800a522:	68a3      	ldr	r3, [r4, #8]
 800a524:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a528:	3b01      	subs	r3, #1
 800a52a:	60a3      	str	r3, [r4, #8]
 800a52c:	b9e9      	cbnz	r1, 800a56a <_puts_r+0x76>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da2e      	bge.n	800a590 <_puts_r+0x9c>
 800a532:	4622      	mov	r2, r4
 800a534:	210a      	movs	r1, #10
 800a536:	4628      	mov	r0, r5
 800a538:	f000 f87b 	bl	800a632 <__swbuf_r>
 800a53c:	3001      	adds	r0, #1
 800a53e:	d007      	beq.n	800a550 <_puts_r+0x5c>
 800a540:	250a      	movs	r5, #10
 800a542:	e007      	b.n	800a554 <_puts_r+0x60>
 800a544:	4621      	mov	r1, r4
 800a546:	4628      	mov	r0, r5
 800a548:	f000 f8b0 	bl	800a6ac <__swsetup_r>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d0e7      	beq.n	800a520 <_puts_r+0x2c>
 800a550:	f04f 35ff 	mov.w	r5, #4294967295
 800a554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a556:	07da      	lsls	r2, r3, #31
 800a558:	d405      	bmi.n	800a566 <_puts_r+0x72>
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	059b      	lsls	r3, r3, #22
 800a55e:	d402      	bmi.n	800a566 <_puts_r+0x72>
 800a560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a562:	f000 f978 	bl	800a856 <__retarget_lock_release_recursive>
 800a566:	4628      	mov	r0, r5
 800a568:	bd70      	pop	{r4, r5, r6, pc}
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	da04      	bge.n	800a578 <_puts_r+0x84>
 800a56e:	69a2      	ldr	r2, [r4, #24]
 800a570:	429a      	cmp	r2, r3
 800a572:	dc06      	bgt.n	800a582 <_puts_r+0x8e>
 800a574:	290a      	cmp	r1, #10
 800a576:	d004      	beq.n	800a582 <_puts_r+0x8e>
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	6022      	str	r2, [r4, #0]
 800a57e:	7019      	strb	r1, [r3, #0]
 800a580:	e7cf      	b.n	800a522 <_puts_r+0x2e>
 800a582:	4622      	mov	r2, r4
 800a584:	4628      	mov	r0, r5
 800a586:	f000 f854 	bl	800a632 <__swbuf_r>
 800a58a:	3001      	adds	r0, #1
 800a58c:	d1c9      	bne.n	800a522 <_puts_r+0x2e>
 800a58e:	e7df      	b.n	800a550 <_puts_r+0x5c>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	250a      	movs	r5, #10
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	6022      	str	r2, [r4, #0]
 800a598:	701d      	strb	r5, [r3, #0]
 800a59a:	e7db      	b.n	800a554 <_puts_r+0x60>

0800a59c <puts>:
 800a59c:	4b02      	ldr	r3, [pc, #8]	; (800a5a8 <puts+0xc>)
 800a59e:	4601      	mov	r1, r0
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	f7ff bfa7 	b.w	800a4f4 <_puts_r>
 800a5a6:	bf00      	nop
 800a5a8:	20000174 	.word	0x20000174

0800a5ac <__sread>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	f000 f900 	bl	800a7b8 <_read_r>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	bfab      	itete	ge
 800a5bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5be:	89a3      	ldrhlt	r3, [r4, #12]
 800a5c0:	181b      	addge	r3, r3, r0
 800a5c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5c6:	bfac      	ite	ge
 800a5c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5ca:	81a3      	strhlt	r3, [r4, #12]
 800a5cc:	bd10      	pop	{r4, pc}

0800a5ce <__swrite>:
 800a5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d2:	461f      	mov	r7, r3
 800a5d4:	898b      	ldrh	r3, [r1, #12]
 800a5d6:	05db      	lsls	r3, r3, #23
 800a5d8:	4605      	mov	r5, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	4616      	mov	r6, r2
 800a5de:	d505      	bpl.n	800a5ec <__swrite+0x1e>
 800a5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f000 f8d4 	bl	800a794 <_lseek_r>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a602:	f000 b8eb 	b.w	800a7dc <_write_r>

0800a606 <__sseek>:
 800a606:	b510      	push	{r4, lr}
 800a608:	460c      	mov	r4, r1
 800a60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60e:	f000 f8c1 	bl	800a794 <_lseek_r>
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	bf15      	itete	ne
 800a618:	6560      	strne	r0, [r4, #84]	; 0x54
 800a61a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a61e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a622:	81a3      	strheq	r3, [r4, #12]
 800a624:	bf18      	it	ne
 800a626:	81a3      	strhne	r3, [r4, #12]
 800a628:	bd10      	pop	{r4, pc}

0800a62a <__sclose>:
 800a62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62e:	f000 b8a1 	b.w	800a774 <_close_r>

0800a632 <__swbuf_r>:
 800a632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a634:	460e      	mov	r6, r1
 800a636:	4614      	mov	r4, r2
 800a638:	4605      	mov	r5, r0
 800a63a:	b118      	cbz	r0, 800a644 <__swbuf_r+0x12>
 800a63c:	6a03      	ldr	r3, [r0, #32]
 800a63e:	b90b      	cbnz	r3, 800a644 <__swbuf_r+0x12>
 800a640:	f7ff ff10 	bl	800a464 <__sinit>
 800a644:	69a3      	ldr	r3, [r4, #24]
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	071a      	lsls	r2, r3, #28
 800a64c:	d525      	bpl.n	800a69a <__swbuf_r+0x68>
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	b31b      	cbz	r3, 800a69a <__swbuf_r+0x68>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	6922      	ldr	r2, [r4, #16]
 800a656:	1a98      	subs	r0, r3, r2
 800a658:	6963      	ldr	r3, [r4, #20]
 800a65a:	b2f6      	uxtb	r6, r6
 800a65c:	4283      	cmp	r3, r0
 800a65e:	4637      	mov	r7, r6
 800a660:	dc04      	bgt.n	800a66c <__swbuf_r+0x3a>
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f001 fdc7 	bl	800c1f8 <_fflush_r>
 800a66a:	b9e0      	cbnz	r0, 800a6a6 <__swbuf_r+0x74>
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	3b01      	subs	r3, #1
 800a670:	60a3      	str	r3, [r4, #8]
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	6022      	str	r2, [r4, #0]
 800a678:	701e      	strb	r6, [r3, #0]
 800a67a:	6962      	ldr	r2, [r4, #20]
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	429a      	cmp	r2, r3
 800a680:	d004      	beq.n	800a68c <__swbuf_r+0x5a>
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	07db      	lsls	r3, r3, #31
 800a686:	d506      	bpl.n	800a696 <__swbuf_r+0x64>
 800a688:	2e0a      	cmp	r6, #10
 800a68a:	d104      	bne.n	800a696 <__swbuf_r+0x64>
 800a68c:	4621      	mov	r1, r4
 800a68e:	4628      	mov	r0, r5
 800a690:	f001 fdb2 	bl	800c1f8 <_fflush_r>
 800a694:	b938      	cbnz	r0, 800a6a6 <__swbuf_r+0x74>
 800a696:	4638      	mov	r0, r7
 800a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a69a:	4621      	mov	r1, r4
 800a69c:	4628      	mov	r0, r5
 800a69e:	f000 f805 	bl	800a6ac <__swsetup_r>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d0d5      	beq.n	800a652 <__swbuf_r+0x20>
 800a6a6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6aa:	e7f4      	b.n	800a696 <__swbuf_r+0x64>

0800a6ac <__swsetup_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4b2a      	ldr	r3, [pc, #168]	; (800a758 <__swsetup_r+0xac>)
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	b118      	cbz	r0, 800a6c0 <__swsetup_r+0x14>
 800a6b8:	6a03      	ldr	r3, [r0, #32]
 800a6ba:	b90b      	cbnz	r3, 800a6c0 <__swsetup_r+0x14>
 800a6bc:	f7ff fed2 	bl	800a464 <__sinit>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6c6:	0718      	lsls	r0, r3, #28
 800a6c8:	d422      	bmi.n	800a710 <__swsetup_r+0x64>
 800a6ca:	06d9      	lsls	r1, r3, #27
 800a6cc:	d407      	bmi.n	800a6de <__swsetup_r+0x32>
 800a6ce:	2309      	movs	r3, #9
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	e034      	b.n	800a748 <__swsetup_r+0x9c>
 800a6de:	0758      	lsls	r0, r3, #29
 800a6e0:	d512      	bpl.n	800a708 <__swsetup_r+0x5c>
 800a6e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6e4:	b141      	cbz	r1, 800a6f8 <__swsetup_r+0x4c>
 800a6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	d002      	beq.n	800a6f4 <__swsetup_r+0x48>
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 ff3c 	bl	800b56c <_free_r>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	6363      	str	r3, [r4, #52]	; 0x34
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	2300      	movs	r3, #0
 800a702:	6063      	str	r3, [r4, #4]
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	f043 0308 	orr.w	r3, r3, #8
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	b94b      	cbnz	r3, 800a728 <__swsetup_r+0x7c>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a71a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a71e:	d003      	beq.n	800a728 <__swsetup_r+0x7c>
 800a720:	4621      	mov	r1, r4
 800a722:	4628      	mov	r0, r5
 800a724:	f001 fdb6 	bl	800c294 <__smakebuf_r>
 800a728:	89a0      	ldrh	r0, [r4, #12]
 800a72a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a72e:	f010 0301 	ands.w	r3, r0, #1
 800a732:	d00a      	beq.n	800a74a <__swsetup_r+0x9e>
 800a734:	2300      	movs	r3, #0
 800a736:	60a3      	str	r3, [r4, #8]
 800a738:	6963      	ldr	r3, [r4, #20]
 800a73a:	425b      	negs	r3, r3
 800a73c:	61a3      	str	r3, [r4, #24]
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	b943      	cbnz	r3, 800a754 <__swsetup_r+0xa8>
 800a742:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a746:	d1c4      	bne.n	800a6d2 <__swsetup_r+0x26>
 800a748:	bd38      	pop	{r3, r4, r5, pc}
 800a74a:	0781      	lsls	r1, r0, #30
 800a74c:	bf58      	it	pl
 800a74e:	6963      	ldrpl	r3, [r4, #20]
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	e7f4      	b.n	800a73e <__swsetup_r+0x92>
 800a754:	2000      	movs	r0, #0
 800a756:	e7f7      	b.n	800a748 <__swsetup_r+0x9c>
 800a758:	20000174 	.word	0x20000174

0800a75c <memset>:
 800a75c:	4402      	add	r2, r0
 800a75e:	4603      	mov	r3, r0
 800a760:	4293      	cmp	r3, r2
 800a762:	d100      	bne.n	800a766 <memset+0xa>
 800a764:	4770      	bx	lr
 800a766:	f803 1b01 	strb.w	r1, [r3], #1
 800a76a:	e7f9      	b.n	800a760 <memset+0x4>

0800a76c <_localeconv_r>:
 800a76c:	4800      	ldr	r0, [pc, #0]	; (800a770 <_localeconv_r+0x4>)
 800a76e:	4770      	bx	lr
 800a770:	20000268 	.word	0x20000268

0800a774 <_close_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4d06      	ldr	r5, [pc, #24]	; (800a790 <_close_r+0x1c>)
 800a778:	2300      	movs	r3, #0
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7fa f92d 	bl	80049de <_close>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_close_r+0x1a>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_close_r+0x1a>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20001d7c 	.word	0x20001d7c

0800a794 <_lseek_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4d07      	ldr	r5, [pc, #28]	; (800a7b4 <_lseek_r+0x20>)
 800a798:	4604      	mov	r4, r0
 800a79a:	4608      	mov	r0, r1
 800a79c:	4611      	mov	r1, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	602a      	str	r2, [r5, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f7fa f942 	bl	8004a2c <_lseek>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_lseek_r+0x1e>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_lseek_r+0x1e>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20001d7c 	.word	0x20001d7c

0800a7b8 <_read_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	; (800a7d8 <_read_r+0x20>)
 800a7bc:	4604      	mov	r4, r0
 800a7be:	4608      	mov	r0, r1
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	602a      	str	r2, [r5, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f7fa f8d0 	bl	800496c <_read>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_read_r+0x1e>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_read_r+0x1e>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20001d7c 	.word	0x20001d7c

0800a7dc <_write_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	; (800a7fc <_write_r+0x20>)
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	602a      	str	r2, [r5, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f7fa f8db 	bl	80049a6 <_write>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_write_r+0x1e>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_write_r+0x1e>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20001d7c 	.word	0x20001d7c

0800a800 <__errno>:
 800a800:	4b01      	ldr	r3, [pc, #4]	; (800a808 <__errno+0x8>)
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	20000174 	.word	0x20000174

0800a80c <__libc_init_array>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	4d0d      	ldr	r5, [pc, #52]	; (800a844 <__libc_init_array+0x38>)
 800a810:	4c0d      	ldr	r4, [pc, #52]	; (800a848 <__libc_init_array+0x3c>)
 800a812:	1b64      	subs	r4, r4, r5
 800a814:	10a4      	asrs	r4, r4, #2
 800a816:	2600      	movs	r6, #0
 800a818:	42a6      	cmp	r6, r4
 800a81a:	d109      	bne.n	800a830 <__libc_init_array+0x24>
 800a81c:	4d0b      	ldr	r5, [pc, #44]	; (800a84c <__libc_init_array+0x40>)
 800a81e:	4c0c      	ldr	r4, [pc, #48]	; (800a850 <__libc_init_array+0x44>)
 800a820:	f002 fd92 	bl	800d348 <_init>
 800a824:	1b64      	subs	r4, r4, r5
 800a826:	10a4      	asrs	r4, r4, #2
 800a828:	2600      	movs	r6, #0
 800a82a:	42a6      	cmp	r6, r4
 800a82c:	d105      	bne.n	800a83a <__libc_init_array+0x2e>
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	f855 3b04 	ldr.w	r3, [r5], #4
 800a834:	4798      	blx	r3
 800a836:	3601      	adds	r6, #1
 800a838:	e7ee      	b.n	800a818 <__libc_init_array+0xc>
 800a83a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a83e:	4798      	blx	r3
 800a840:	3601      	adds	r6, #1
 800a842:	e7f2      	b.n	800a82a <__libc_init_array+0x1e>
 800a844:	0800e1d8 	.word	0x0800e1d8
 800a848:	0800e1d8 	.word	0x0800e1d8
 800a84c:	0800e1d8 	.word	0x0800e1d8
 800a850:	0800e1dc 	.word	0x0800e1dc

0800a854 <__retarget_lock_acquire_recursive>:
 800a854:	4770      	bx	lr

0800a856 <__retarget_lock_release_recursive>:
 800a856:	4770      	bx	lr

0800a858 <memcpy>:
 800a858:	440a      	add	r2, r1
 800a85a:	4291      	cmp	r1, r2
 800a85c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a860:	d100      	bne.n	800a864 <memcpy+0xc>
 800a862:	4770      	bx	lr
 800a864:	b510      	push	{r4, lr}
 800a866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a86e:	4291      	cmp	r1, r2
 800a870:	d1f9      	bne.n	800a866 <memcpy+0xe>
 800a872:	bd10      	pop	{r4, pc}

0800a874 <quorem>:
 800a874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	6903      	ldr	r3, [r0, #16]
 800a87a:	690c      	ldr	r4, [r1, #16]
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	4607      	mov	r7, r0
 800a880:	db7e      	blt.n	800a980 <quorem+0x10c>
 800a882:	3c01      	subs	r4, #1
 800a884:	f101 0814 	add.w	r8, r1, #20
 800a888:	f100 0514 	add.w	r5, r0, #20
 800a88c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a89a:	3301      	adds	r3, #1
 800a89c:	429a      	cmp	r2, r3
 800a89e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8aa:	d331      	bcc.n	800a910 <quorem+0x9c>
 800a8ac:	f04f 0e00 	mov.w	lr, #0
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	46ac      	mov	ip, r5
 800a8b4:	46f2      	mov	sl, lr
 800a8b6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8ba:	b293      	uxth	r3, r2
 800a8bc:	fb06 e303 	mla	r3, r6, r3, lr
 800a8c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8c4:	0c1a      	lsrs	r2, r3, #16
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	ebaa 0303 	sub.w	r3, sl, r3
 800a8cc:	f8dc a000 	ldr.w	sl, [ip]
 800a8d0:	fa13 f38a 	uxtah	r3, r3, sl
 800a8d4:	fb06 220e 	mla	r2, r6, lr, r2
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	9b00      	ldr	r3, [sp, #0]
 800a8dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8e0:	b292      	uxth	r2, r2
 800a8e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a8e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800a8ee:	4581      	cmp	r9, r0
 800a8f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8f4:	f84c 3b04 	str.w	r3, [ip], #4
 800a8f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8fc:	d2db      	bcs.n	800a8b6 <quorem+0x42>
 800a8fe:	f855 300b 	ldr.w	r3, [r5, fp]
 800a902:	b92b      	cbnz	r3, 800a910 <quorem+0x9c>
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	3b04      	subs	r3, #4
 800a908:	429d      	cmp	r5, r3
 800a90a:	461a      	mov	r2, r3
 800a90c:	d32c      	bcc.n	800a968 <quorem+0xf4>
 800a90e:	613c      	str	r4, [r7, #16]
 800a910:	4638      	mov	r0, r7
 800a912:	f001 f9a7 	bl	800bc64 <__mcmp>
 800a916:	2800      	cmp	r0, #0
 800a918:	db22      	blt.n	800a960 <quorem+0xec>
 800a91a:	3601      	adds	r6, #1
 800a91c:	4629      	mov	r1, r5
 800a91e:	2000      	movs	r0, #0
 800a920:	f858 2b04 	ldr.w	r2, [r8], #4
 800a924:	f8d1 c000 	ldr.w	ip, [r1]
 800a928:	b293      	uxth	r3, r2
 800a92a:	1ac3      	subs	r3, r0, r3
 800a92c:	0c12      	lsrs	r2, r2, #16
 800a92e:	fa13 f38c 	uxtah	r3, r3, ip
 800a932:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a936:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a940:	45c1      	cmp	r9, r8
 800a942:	f841 3b04 	str.w	r3, [r1], #4
 800a946:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a94a:	d2e9      	bcs.n	800a920 <quorem+0xac>
 800a94c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a950:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a954:	b922      	cbnz	r2, 800a960 <quorem+0xec>
 800a956:	3b04      	subs	r3, #4
 800a958:	429d      	cmp	r5, r3
 800a95a:	461a      	mov	r2, r3
 800a95c:	d30a      	bcc.n	800a974 <quorem+0x100>
 800a95e:	613c      	str	r4, [r7, #16]
 800a960:	4630      	mov	r0, r6
 800a962:	b003      	add	sp, #12
 800a964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a968:	6812      	ldr	r2, [r2, #0]
 800a96a:	3b04      	subs	r3, #4
 800a96c:	2a00      	cmp	r2, #0
 800a96e:	d1ce      	bne.n	800a90e <quorem+0x9a>
 800a970:	3c01      	subs	r4, #1
 800a972:	e7c9      	b.n	800a908 <quorem+0x94>
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	3b04      	subs	r3, #4
 800a978:	2a00      	cmp	r2, #0
 800a97a:	d1f0      	bne.n	800a95e <quorem+0xea>
 800a97c:	3c01      	subs	r4, #1
 800a97e:	e7eb      	b.n	800a958 <quorem+0xe4>
 800a980:	2000      	movs	r0, #0
 800a982:	e7ee      	b.n	800a962 <quorem+0xee>
 800a984:	0000      	movs	r0, r0
	...

0800a988 <_dtoa_r>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	ed2d 8b04 	vpush	{d8-d9}
 800a990:	69c5      	ldr	r5, [r0, #28]
 800a992:	b093      	sub	sp, #76	; 0x4c
 800a994:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a998:	ec57 6b10 	vmov	r6, r7, d0
 800a99c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a9a0:	9107      	str	r1, [sp, #28]
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a9a6:	930d      	str	r3, [sp, #52]	; 0x34
 800a9a8:	b975      	cbnz	r5, 800a9c8 <_dtoa_r+0x40>
 800a9aa:	2010      	movs	r0, #16
 800a9ac:	f000 fe2a 	bl	800b604 <malloc>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	61e0      	str	r0, [r4, #28]
 800a9b4:	b920      	cbnz	r0, 800a9c0 <_dtoa_r+0x38>
 800a9b6:	4bae      	ldr	r3, [pc, #696]	; (800ac70 <_dtoa_r+0x2e8>)
 800a9b8:	21ef      	movs	r1, #239	; 0xef
 800a9ba:	48ae      	ldr	r0, [pc, #696]	; (800ac74 <_dtoa_r+0x2ec>)
 800a9bc:	f001 fcd8 	bl	800c370 <__assert_func>
 800a9c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9c4:	6005      	str	r5, [r0, #0]
 800a9c6:	60c5      	str	r5, [r0, #12]
 800a9c8:	69e3      	ldr	r3, [r4, #28]
 800a9ca:	6819      	ldr	r1, [r3, #0]
 800a9cc:	b151      	cbz	r1, 800a9e4 <_dtoa_r+0x5c>
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	604a      	str	r2, [r1, #4]
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	4093      	lsls	r3, r2
 800a9d6:	608b      	str	r3, [r1, #8]
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f000 ff07 	bl	800b7ec <_Bfree>
 800a9de:	69e3      	ldr	r3, [r4, #28]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	1e3b      	subs	r3, r7, #0
 800a9e6:	bfbb      	ittet	lt
 800a9e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a9ec:	9303      	strlt	r3, [sp, #12]
 800a9ee:	2300      	movge	r3, #0
 800a9f0:	2201      	movlt	r2, #1
 800a9f2:	bfac      	ite	ge
 800a9f4:	f8c8 3000 	strge.w	r3, [r8]
 800a9f8:	f8c8 2000 	strlt.w	r2, [r8]
 800a9fc:	4b9e      	ldr	r3, [pc, #632]	; (800ac78 <_dtoa_r+0x2f0>)
 800a9fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aa02:	ea33 0308 	bics.w	r3, r3, r8
 800aa06:	d11b      	bne.n	800aa40 <_dtoa_r+0xb8>
 800aa08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aa14:	4333      	orrs	r3, r6
 800aa16:	f000 8593 	beq.w	800b540 <_dtoa_r+0xbb8>
 800aa1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa1c:	b963      	cbnz	r3, 800aa38 <_dtoa_r+0xb0>
 800aa1e:	4b97      	ldr	r3, [pc, #604]	; (800ac7c <_dtoa_r+0x2f4>)
 800aa20:	e027      	b.n	800aa72 <_dtoa_r+0xea>
 800aa22:	4b97      	ldr	r3, [pc, #604]	; (800ac80 <_dtoa_r+0x2f8>)
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	3308      	adds	r3, #8
 800aa28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	9800      	ldr	r0, [sp, #0]
 800aa2e:	b013      	add	sp, #76	; 0x4c
 800aa30:	ecbd 8b04 	vpop	{d8-d9}
 800aa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa38:	4b90      	ldr	r3, [pc, #576]	; (800ac7c <_dtoa_r+0x2f4>)
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	3303      	adds	r3, #3
 800aa3e:	e7f3      	b.n	800aa28 <_dtoa_r+0xa0>
 800aa40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa44:	2200      	movs	r2, #0
 800aa46:	ec51 0b17 	vmov	r0, r1, d7
 800aa4a:	eeb0 8a47 	vmov.f32	s16, s14
 800aa4e:	eef0 8a67 	vmov.f32	s17, s15
 800aa52:	2300      	movs	r3, #0
 800aa54:	f7f6 f848 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa58:	4681      	mov	r9, r0
 800aa5a:	b160      	cbz	r0, 800aa76 <_dtoa_r+0xee>
 800aa5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa5e:	2301      	movs	r3, #1
 800aa60:	6013      	str	r3, [r2, #0]
 800aa62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8568 	beq.w	800b53a <_dtoa_r+0xbb2>
 800aa6a:	4b86      	ldr	r3, [pc, #536]	; (800ac84 <_dtoa_r+0x2fc>)
 800aa6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	e7da      	b.n	800aa2c <_dtoa_r+0xa4>
 800aa76:	aa10      	add	r2, sp, #64	; 0x40
 800aa78:	a911      	add	r1, sp, #68	; 0x44
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	eeb0 0a48 	vmov.f32	s0, s16
 800aa80:	eef0 0a68 	vmov.f32	s1, s17
 800aa84:	f001 f994 	bl	800bdb0 <__d2b>
 800aa88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	d07f      	beq.n	800ab92 <_dtoa_r+0x20a>
 800aa92:	ee18 3a90 	vmov	r3, s17
 800aa96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aa9e:	ec51 0b18 	vmov	r0, r1, d8
 800aaa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aaa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aaaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aaae:	4619      	mov	r1, r3
 800aab0:	2200      	movs	r2, #0
 800aab2:	4b75      	ldr	r3, [pc, #468]	; (800ac88 <_dtoa_r+0x300>)
 800aab4:	f7f5 fbf8 	bl	80002a8 <__aeabi_dsub>
 800aab8:	a367      	add	r3, pc, #412	; (adr r3, 800ac58 <_dtoa_r+0x2d0>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fdab 	bl	8000618 <__aeabi_dmul>
 800aac2:	a367      	add	r3, pc, #412	; (adr r3, 800ac60 <_dtoa_r+0x2d8>)
 800aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac8:	f7f5 fbf0 	bl	80002ac <__adddf3>
 800aacc:	4606      	mov	r6, r0
 800aace:	4628      	mov	r0, r5
 800aad0:	460f      	mov	r7, r1
 800aad2:	f7f5 fd37 	bl	8000544 <__aeabi_i2d>
 800aad6:	a364      	add	r3, pc, #400	; (adr r3, 800ac68 <_dtoa_r+0x2e0>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f7f5 fd9c 	bl	8000618 <__aeabi_dmul>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4630      	mov	r0, r6
 800aae6:	4639      	mov	r1, r7
 800aae8:	f7f5 fbe0 	bl	80002ac <__adddf3>
 800aaec:	4606      	mov	r6, r0
 800aaee:	460f      	mov	r7, r1
 800aaf0:	f7f6 f842 	bl	8000b78 <__aeabi_d2iz>
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	4683      	mov	fp, r0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fffd 	bl	8000afc <__aeabi_dcmplt>
 800ab02:	b148      	cbz	r0, 800ab18 <_dtoa_r+0x190>
 800ab04:	4658      	mov	r0, fp
 800ab06:	f7f5 fd1d 	bl	8000544 <__aeabi_i2d>
 800ab0a:	4632      	mov	r2, r6
 800ab0c:	463b      	mov	r3, r7
 800ab0e:	f7f5 ffeb 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab12:	b908      	cbnz	r0, 800ab18 <_dtoa_r+0x190>
 800ab14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab18:	f1bb 0f16 	cmp.w	fp, #22
 800ab1c:	d857      	bhi.n	800abce <_dtoa_r+0x246>
 800ab1e:	4b5b      	ldr	r3, [pc, #364]	; (800ac8c <_dtoa_r+0x304>)
 800ab20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	ec51 0b18 	vmov	r0, r1, d8
 800ab2c:	f7f5 ffe6 	bl	8000afc <__aeabi_dcmplt>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d04e      	beq.n	800abd2 <_dtoa_r+0x24a>
 800ab34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab38:	2300      	movs	r3, #0
 800ab3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab3e:	1b5b      	subs	r3, r3, r5
 800ab40:	1e5a      	subs	r2, r3, #1
 800ab42:	bf45      	ittet	mi
 800ab44:	f1c3 0301 	rsbmi	r3, r3, #1
 800ab48:	9305      	strmi	r3, [sp, #20]
 800ab4a:	2300      	movpl	r3, #0
 800ab4c:	2300      	movmi	r3, #0
 800ab4e:	9206      	str	r2, [sp, #24]
 800ab50:	bf54      	ite	pl
 800ab52:	9305      	strpl	r3, [sp, #20]
 800ab54:	9306      	strmi	r3, [sp, #24]
 800ab56:	f1bb 0f00 	cmp.w	fp, #0
 800ab5a:	db3c      	blt.n	800abd6 <_dtoa_r+0x24e>
 800ab5c:	9b06      	ldr	r3, [sp, #24]
 800ab5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ab62:	445b      	add	r3, fp
 800ab64:	9306      	str	r3, [sp, #24]
 800ab66:	2300      	movs	r3, #0
 800ab68:	9308      	str	r3, [sp, #32]
 800ab6a:	9b07      	ldr	r3, [sp, #28]
 800ab6c:	2b09      	cmp	r3, #9
 800ab6e:	d868      	bhi.n	800ac42 <_dtoa_r+0x2ba>
 800ab70:	2b05      	cmp	r3, #5
 800ab72:	bfc4      	itt	gt
 800ab74:	3b04      	subgt	r3, #4
 800ab76:	9307      	strgt	r3, [sp, #28]
 800ab78:	9b07      	ldr	r3, [sp, #28]
 800ab7a:	f1a3 0302 	sub.w	r3, r3, #2
 800ab7e:	bfcc      	ite	gt
 800ab80:	2500      	movgt	r5, #0
 800ab82:	2501      	movle	r5, #1
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	f200 8085 	bhi.w	800ac94 <_dtoa_r+0x30c>
 800ab8a:	e8df f003 	tbb	[pc, r3]
 800ab8e:	3b2e      	.short	0x3b2e
 800ab90:	5839      	.short	0x5839
 800ab92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ab96:	441d      	add	r5, r3
 800ab98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	bfc1      	itttt	gt
 800aba0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aba4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aba8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800abac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800abb0:	bfd6      	itet	le
 800abb2:	f1c3 0320 	rsble	r3, r3, #32
 800abb6:	ea48 0003 	orrgt.w	r0, r8, r3
 800abba:	fa06 f003 	lslle.w	r0, r6, r3
 800abbe:	f7f5 fcb1 	bl	8000524 <__aeabi_ui2d>
 800abc2:	2201      	movs	r2, #1
 800abc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800abc8:	3d01      	subs	r5, #1
 800abca:	920e      	str	r2, [sp, #56]	; 0x38
 800abcc:	e76f      	b.n	800aaae <_dtoa_r+0x126>
 800abce:	2301      	movs	r3, #1
 800abd0:	e7b3      	b.n	800ab3a <_dtoa_r+0x1b2>
 800abd2:	900c      	str	r0, [sp, #48]	; 0x30
 800abd4:	e7b2      	b.n	800ab3c <_dtoa_r+0x1b4>
 800abd6:	9b05      	ldr	r3, [sp, #20]
 800abd8:	eba3 030b 	sub.w	r3, r3, fp
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	f1cb 0300 	rsb	r3, fp, #0
 800abe2:	9308      	str	r3, [sp, #32]
 800abe4:	2300      	movs	r3, #0
 800abe6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abe8:	e7bf      	b.n	800ab6a <_dtoa_r+0x1e2>
 800abea:	2300      	movs	r3, #0
 800abec:	9309      	str	r3, [sp, #36]	; 0x24
 800abee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	dc52      	bgt.n	800ac9a <_dtoa_r+0x312>
 800abf4:	2301      	movs	r3, #1
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	9304      	str	r3, [sp, #16]
 800abfa:	461a      	mov	r2, r3
 800abfc:	920a      	str	r2, [sp, #40]	; 0x28
 800abfe:	e00b      	b.n	800ac18 <_dtoa_r+0x290>
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7f3      	b.n	800abec <_dtoa_r+0x264>
 800ac04:	2300      	movs	r3, #0
 800ac06:	9309      	str	r3, [sp, #36]	; 0x24
 800ac08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac0a:	445b      	add	r3, fp
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	bfb8      	it	lt
 800ac16:	2301      	movlt	r3, #1
 800ac18:	69e0      	ldr	r0, [r4, #28]
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	2204      	movs	r2, #4
 800ac1e:	f102 0614 	add.w	r6, r2, #20
 800ac22:	429e      	cmp	r6, r3
 800ac24:	d93d      	bls.n	800aca2 <_dtoa_r+0x31a>
 800ac26:	6041      	str	r1, [r0, #4]
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 fd9f 	bl	800b76c <_Balloc>
 800ac2e:	9000      	str	r0, [sp, #0]
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d139      	bne.n	800aca8 <_dtoa_r+0x320>
 800ac34:	4b16      	ldr	r3, [pc, #88]	; (800ac90 <_dtoa_r+0x308>)
 800ac36:	4602      	mov	r2, r0
 800ac38:	f240 11af 	movw	r1, #431	; 0x1af
 800ac3c:	e6bd      	b.n	800a9ba <_dtoa_r+0x32>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e7e1      	b.n	800ac06 <_dtoa_r+0x27e>
 800ac42:	2501      	movs	r5, #1
 800ac44:	2300      	movs	r3, #0
 800ac46:	9307      	str	r3, [sp, #28]
 800ac48:	9509      	str	r5, [sp, #36]	; 0x24
 800ac4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	9304      	str	r3, [sp, #16]
 800ac52:	2200      	movs	r2, #0
 800ac54:	2312      	movs	r3, #18
 800ac56:	e7d1      	b.n	800abfc <_dtoa_r+0x274>
 800ac58:	636f4361 	.word	0x636f4361
 800ac5c:	3fd287a7 	.word	0x3fd287a7
 800ac60:	8b60c8b3 	.word	0x8b60c8b3
 800ac64:	3fc68a28 	.word	0x3fc68a28
 800ac68:	509f79fb 	.word	0x509f79fb
 800ac6c:	3fd34413 	.word	0x3fd34413
 800ac70:	0800de69 	.word	0x0800de69
 800ac74:	0800de80 	.word	0x0800de80
 800ac78:	7ff00000 	.word	0x7ff00000
 800ac7c:	0800de65 	.word	0x0800de65
 800ac80:	0800de5c 	.word	0x0800de5c
 800ac84:	0800de39 	.word	0x0800de39
 800ac88:	3ff80000 	.word	0x3ff80000
 800ac8c:	0800df70 	.word	0x0800df70
 800ac90:	0800ded8 	.word	0x0800ded8
 800ac94:	2301      	movs	r3, #1
 800ac96:	9309      	str	r3, [sp, #36]	; 0x24
 800ac98:	e7d7      	b.n	800ac4a <_dtoa_r+0x2c2>
 800ac9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	e7ba      	b.n	800ac18 <_dtoa_r+0x290>
 800aca2:	3101      	adds	r1, #1
 800aca4:	0052      	lsls	r2, r2, #1
 800aca6:	e7ba      	b.n	800ac1e <_dtoa_r+0x296>
 800aca8:	69e3      	ldr	r3, [r4, #28]
 800acaa:	9a00      	ldr	r2, [sp, #0]
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	9b04      	ldr	r3, [sp, #16]
 800acb0:	2b0e      	cmp	r3, #14
 800acb2:	f200 80a8 	bhi.w	800ae06 <_dtoa_r+0x47e>
 800acb6:	2d00      	cmp	r5, #0
 800acb8:	f000 80a5 	beq.w	800ae06 <_dtoa_r+0x47e>
 800acbc:	f1bb 0f00 	cmp.w	fp, #0
 800acc0:	dd38      	ble.n	800ad34 <_dtoa_r+0x3ac>
 800acc2:	4bc0      	ldr	r3, [pc, #768]	; (800afc4 <_dtoa_r+0x63c>)
 800acc4:	f00b 020f 	and.w	r2, fp, #15
 800acc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800accc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800acd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800acd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800acd8:	d019      	beq.n	800ad0e <_dtoa_r+0x386>
 800acda:	4bbb      	ldr	r3, [pc, #748]	; (800afc8 <_dtoa_r+0x640>)
 800acdc:	ec51 0b18 	vmov	r0, r1, d8
 800ace0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ace4:	f7f5 fdc2 	bl	800086c <__aeabi_ddiv>
 800ace8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acec:	f008 080f 	and.w	r8, r8, #15
 800acf0:	2503      	movs	r5, #3
 800acf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800afc8 <_dtoa_r+0x640>
 800acf6:	f1b8 0f00 	cmp.w	r8, #0
 800acfa:	d10a      	bne.n	800ad12 <_dtoa_r+0x38a>
 800acfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad00:	4632      	mov	r2, r6
 800ad02:	463b      	mov	r3, r7
 800ad04:	f7f5 fdb2 	bl	800086c <__aeabi_ddiv>
 800ad08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad0c:	e02b      	b.n	800ad66 <_dtoa_r+0x3de>
 800ad0e:	2502      	movs	r5, #2
 800ad10:	e7ef      	b.n	800acf2 <_dtoa_r+0x36a>
 800ad12:	f018 0f01 	tst.w	r8, #1
 800ad16:	d008      	beq.n	800ad2a <_dtoa_r+0x3a2>
 800ad18:	4630      	mov	r0, r6
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad20:	f7f5 fc7a 	bl	8000618 <__aeabi_dmul>
 800ad24:	3501      	adds	r5, #1
 800ad26:	4606      	mov	r6, r0
 800ad28:	460f      	mov	r7, r1
 800ad2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad2e:	f109 0908 	add.w	r9, r9, #8
 800ad32:	e7e0      	b.n	800acf6 <_dtoa_r+0x36e>
 800ad34:	f000 809f 	beq.w	800ae76 <_dtoa_r+0x4ee>
 800ad38:	f1cb 0600 	rsb	r6, fp, #0
 800ad3c:	4ba1      	ldr	r3, [pc, #644]	; (800afc4 <_dtoa_r+0x63c>)
 800ad3e:	4fa2      	ldr	r7, [pc, #648]	; (800afc8 <_dtoa_r+0x640>)
 800ad40:	f006 020f 	and.w	r2, r6, #15
 800ad44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	ec51 0b18 	vmov	r0, r1, d8
 800ad50:	f7f5 fc62 	bl	8000618 <__aeabi_dmul>
 800ad54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad58:	1136      	asrs	r6, r6, #4
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	2502      	movs	r5, #2
 800ad5e:	2e00      	cmp	r6, #0
 800ad60:	d17e      	bne.n	800ae60 <_dtoa_r+0x4d8>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1d0      	bne.n	800ad08 <_dtoa_r+0x380>
 800ad66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 8084 	beq.w	800ae7a <_dtoa_r+0x4f2>
 800ad72:	4b96      	ldr	r3, [pc, #600]	; (800afcc <_dtoa_r+0x644>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	4640      	mov	r0, r8
 800ad78:	4649      	mov	r1, r9
 800ad7a:	f7f5 febf 	bl	8000afc <__aeabi_dcmplt>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d07b      	beq.n	800ae7a <_dtoa_r+0x4f2>
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d078      	beq.n	800ae7a <_dtoa_r+0x4f2>
 800ad88:	9b01      	ldr	r3, [sp, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dd39      	ble.n	800ae02 <_dtoa_r+0x47a>
 800ad8e:	4b90      	ldr	r3, [pc, #576]	; (800afd0 <_dtoa_r+0x648>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	4640      	mov	r0, r8
 800ad94:	4649      	mov	r1, r9
 800ad96:	f7f5 fc3f 	bl	8000618 <__aeabi_dmul>
 800ad9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad9e:	9e01      	ldr	r6, [sp, #4]
 800ada0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ada4:	3501      	adds	r5, #1
 800ada6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800adaa:	4628      	mov	r0, r5
 800adac:	f7f5 fbca 	bl	8000544 <__aeabi_i2d>
 800adb0:	4642      	mov	r2, r8
 800adb2:	464b      	mov	r3, r9
 800adb4:	f7f5 fc30 	bl	8000618 <__aeabi_dmul>
 800adb8:	4b86      	ldr	r3, [pc, #536]	; (800afd4 <_dtoa_r+0x64c>)
 800adba:	2200      	movs	r2, #0
 800adbc:	f7f5 fa76 	bl	80002ac <__adddf3>
 800adc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800adc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	2e00      	cmp	r6, #0
 800adcc:	d158      	bne.n	800ae80 <_dtoa_r+0x4f8>
 800adce:	4b82      	ldr	r3, [pc, #520]	; (800afd8 <_dtoa_r+0x650>)
 800add0:	2200      	movs	r2, #0
 800add2:	4640      	mov	r0, r8
 800add4:	4649      	mov	r1, r9
 800add6:	f7f5 fa67 	bl	80002a8 <__aeabi_dsub>
 800adda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adde:	4680      	mov	r8, r0
 800ade0:	4689      	mov	r9, r1
 800ade2:	f7f5 fea9 	bl	8000b38 <__aeabi_dcmpgt>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f040 8296 	bne.w	800b318 <_dtoa_r+0x990>
 800adec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800adf0:	4640      	mov	r0, r8
 800adf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adf6:	4649      	mov	r1, r9
 800adf8:	f7f5 fe80 	bl	8000afc <__aeabi_dcmplt>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	f040 8289 	bne.w	800b314 <_dtoa_r+0x98c>
 800ae02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ae06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f2c0 814e 	blt.w	800b0aa <_dtoa_r+0x722>
 800ae0e:	f1bb 0f0e 	cmp.w	fp, #14
 800ae12:	f300 814a 	bgt.w	800b0aa <_dtoa_r+0x722>
 800ae16:	4b6b      	ldr	r3, [pc, #428]	; (800afc4 <_dtoa_r+0x63c>)
 800ae18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f280 80dc 	bge.w	800afe0 <_dtoa_r+0x658>
 800ae28:	9b04      	ldr	r3, [sp, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f300 80d8 	bgt.w	800afe0 <_dtoa_r+0x658>
 800ae30:	f040 826f 	bne.w	800b312 <_dtoa_r+0x98a>
 800ae34:	4b68      	ldr	r3, [pc, #416]	; (800afd8 <_dtoa_r+0x650>)
 800ae36:	2200      	movs	r2, #0
 800ae38:	4640      	mov	r0, r8
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	f7f5 fbec 	bl	8000618 <__aeabi_dmul>
 800ae40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae44:	f7f5 fe6e 	bl	8000b24 <__aeabi_dcmpge>
 800ae48:	9e04      	ldr	r6, [sp, #16]
 800ae4a:	4637      	mov	r7, r6
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	f040 8245 	bne.w	800b2dc <_dtoa_r+0x954>
 800ae52:	9d00      	ldr	r5, [sp, #0]
 800ae54:	2331      	movs	r3, #49	; 0x31
 800ae56:	f805 3b01 	strb.w	r3, [r5], #1
 800ae5a:	f10b 0b01 	add.w	fp, fp, #1
 800ae5e:	e241      	b.n	800b2e4 <_dtoa_r+0x95c>
 800ae60:	07f2      	lsls	r2, r6, #31
 800ae62:	d505      	bpl.n	800ae70 <_dtoa_r+0x4e8>
 800ae64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae68:	f7f5 fbd6 	bl	8000618 <__aeabi_dmul>
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	2301      	movs	r3, #1
 800ae70:	1076      	asrs	r6, r6, #1
 800ae72:	3708      	adds	r7, #8
 800ae74:	e773      	b.n	800ad5e <_dtoa_r+0x3d6>
 800ae76:	2502      	movs	r5, #2
 800ae78:	e775      	b.n	800ad66 <_dtoa_r+0x3de>
 800ae7a:	9e04      	ldr	r6, [sp, #16]
 800ae7c:	465f      	mov	r7, fp
 800ae7e:	e792      	b.n	800ada6 <_dtoa_r+0x41e>
 800ae80:	9900      	ldr	r1, [sp, #0]
 800ae82:	4b50      	ldr	r3, [pc, #320]	; (800afc4 <_dtoa_r+0x63c>)
 800ae84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae88:	4431      	add	r1, r6
 800ae8a:	9102      	str	r1, [sp, #8]
 800ae8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae8e:	eeb0 9a47 	vmov.f32	s18, s14
 800ae92:	eef0 9a67 	vmov.f32	s19, s15
 800ae96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	d044      	beq.n	800af2c <_dtoa_r+0x5a4>
 800aea2:	494e      	ldr	r1, [pc, #312]	; (800afdc <_dtoa_r+0x654>)
 800aea4:	2000      	movs	r0, #0
 800aea6:	f7f5 fce1 	bl	800086c <__aeabi_ddiv>
 800aeaa:	ec53 2b19 	vmov	r2, r3, d9
 800aeae:	f7f5 f9fb 	bl	80002a8 <__aeabi_dsub>
 800aeb2:	9d00      	ldr	r5, [sp, #0]
 800aeb4:	ec41 0b19 	vmov	d9, r0, r1
 800aeb8:	4649      	mov	r1, r9
 800aeba:	4640      	mov	r0, r8
 800aebc:	f7f5 fe5c 	bl	8000b78 <__aeabi_d2iz>
 800aec0:	4606      	mov	r6, r0
 800aec2:	f7f5 fb3f 	bl	8000544 <__aeabi_i2d>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	4640      	mov	r0, r8
 800aecc:	4649      	mov	r1, r9
 800aece:	f7f5 f9eb 	bl	80002a8 <__aeabi_dsub>
 800aed2:	3630      	adds	r6, #48	; 0x30
 800aed4:	f805 6b01 	strb.w	r6, [r5], #1
 800aed8:	ec53 2b19 	vmov	r2, r3, d9
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	f7f5 fe0c 	bl	8000afc <__aeabi_dcmplt>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d164      	bne.n	800afb2 <_dtoa_r+0x62a>
 800aee8:	4642      	mov	r2, r8
 800aeea:	464b      	mov	r3, r9
 800aeec:	4937      	ldr	r1, [pc, #220]	; (800afcc <_dtoa_r+0x644>)
 800aeee:	2000      	movs	r0, #0
 800aef0:	f7f5 f9da 	bl	80002a8 <__aeabi_dsub>
 800aef4:	ec53 2b19 	vmov	r2, r3, d9
 800aef8:	f7f5 fe00 	bl	8000afc <__aeabi_dcmplt>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f040 80b6 	bne.w	800b06e <_dtoa_r+0x6e6>
 800af02:	9b02      	ldr	r3, [sp, #8]
 800af04:	429d      	cmp	r5, r3
 800af06:	f43f af7c 	beq.w	800ae02 <_dtoa_r+0x47a>
 800af0a:	4b31      	ldr	r3, [pc, #196]	; (800afd0 <_dtoa_r+0x648>)
 800af0c:	ec51 0b19 	vmov	r0, r1, d9
 800af10:	2200      	movs	r2, #0
 800af12:	f7f5 fb81 	bl	8000618 <__aeabi_dmul>
 800af16:	4b2e      	ldr	r3, [pc, #184]	; (800afd0 <_dtoa_r+0x648>)
 800af18:	ec41 0b19 	vmov	d9, r0, r1
 800af1c:	2200      	movs	r2, #0
 800af1e:	4640      	mov	r0, r8
 800af20:	4649      	mov	r1, r9
 800af22:	f7f5 fb79 	bl	8000618 <__aeabi_dmul>
 800af26:	4680      	mov	r8, r0
 800af28:	4689      	mov	r9, r1
 800af2a:	e7c5      	b.n	800aeb8 <_dtoa_r+0x530>
 800af2c:	ec51 0b17 	vmov	r0, r1, d7
 800af30:	f7f5 fb72 	bl	8000618 <__aeabi_dmul>
 800af34:	9b02      	ldr	r3, [sp, #8]
 800af36:	9d00      	ldr	r5, [sp, #0]
 800af38:	930f      	str	r3, [sp, #60]	; 0x3c
 800af3a:	ec41 0b19 	vmov	d9, r0, r1
 800af3e:	4649      	mov	r1, r9
 800af40:	4640      	mov	r0, r8
 800af42:	f7f5 fe19 	bl	8000b78 <__aeabi_d2iz>
 800af46:	4606      	mov	r6, r0
 800af48:	f7f5 fafc 	bl	8000544 <__aeabi_i2d>
 800af4c:	3630      	adds	r6, #48	; 0x30
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4640      	mov	r0, r8
 800af54:	4649      	mov	r1, r9
 800af56:	f7f5 f9a7 	bl	80002a8 <__aeabi_dsub>
 800af5a:	f805 6b01 	strb.w	r6, [r5], #1
 800af5e:	9b02      	ldr	r3, [sp, #8]
 800af60:	429d      	cmp	r5, r3
 800af62:	4680      	mov	r8, r0
 800af64:	4689      	mov	r9, r1
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	d124      	bne.n	800afb6 <_dtoa_r+0x62e>
 800af6c:	4b1b      	ldr	r3, [pc, #108]	; (800afdc <_dtoa_r+0x654>)
 800af6e:	ec51 0b19 	vmov	r0, r1, d9
 800af72:	f7f5 f99b 	bl	80002ac <__adddf3>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4640      	mov	r0, r8
 800af7c:	4649      	mov	r1, r9
 800af7e:	f7f5 fddb 	bl	8000b38 <__aeabi_dcmpgt>
 800af82:	2800      	cmp	r0, #0
 800af84:	d173      	bne.n	800b06e <_dtoa_r+0x6e6>
 800af86:	ec53 2b19 	vmov	r2, r3, d9
 800af8a:	4914      	ldr	r1, [pc, #80]	; (800afdc <_dtoa_r+0x654>)
 800af8c:	2000      	movs	r0, #0
 800af8e:	f7f5 f98b 	bl	80002a8 <__aeabi_dsub>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 fdaf 	bl	8000afc <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f43f af2f 	beq.w	800ae02 <_dtoa_r+0x47a>
 800afa4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800afa6:	1e6b      	subs	r3, r5, #1
 800afa8:	930f      	str	r3, [sp, #60]	; 0x3c
 800afaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afae:	2b30      	cmp	r3, #48	; 0x30
 800afb0:	d0f8      	beq.n	800afa4 <_dtoa_r+0x61c>
 800afb2:	46bb      	mov	fp, r7
 800afb4:	e04a      	b.n	800b04c <_dtoa_r+0x6c4>
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <_dtoa_r+0x648>)
 800afb8:	f7f5 fb2e 	bl	8000618 <__aeabi_dmul>
 800afbc:	4680      	mov	r8, r0
 800afbe:	4689      	mov	r9, r1
 800afc0:	e7bd      	b.n	800af3e <_dtoa_r+0x5b6>
 800afc2:	bf00      	nop
 800afc4:	0800df70 	.word	0x0800df70
 800afc8:	0800df48 	.word	0x0800df48
 800afcc:	3ff00000 	.word	0x3ff00000
 800afd0:	40240000 	.word	0x40240000
 800afd4:	401c0000 	.word	0x401c0000
 800afd8:	40140000 	.word	0x40140000
 800afdc:	3fe00000 	.word	0x3fe00000
 800afe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afe4:	9d00      	ldr	r5, [sp, #0]
 800afe6:	4642      	mov	r2, r8
 800afe8:	464b      	mov	r3, r9
 800afea:	4630      	mov	r0, r6
 800afec:	4639      	mov	r1, r7
 800afee:	f7f5 fc3d 	bl	800086c <__aeabi_ddiv>
 800aff2:	f7f5 fdc1 	bl	8000b78 <__aeabi_d2iz>
 800aff6:	9001      	str	r0, [sp, #4]
 800aff8:	f7f5 faa4 	bl	8000544 <__aeabi_i2d>
 800affc:	4642      	mov	r2, r8
 800affe:	464b      	mov	r3, r9
 800b000:	f7f5 fb0a 	bl	8000618 <__aeabi_dmul>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4630      	mov	r0, r6
 800b00a:	4639      	mov	r1, r7
 800b00c:	f7f5 f94c 	bl	80002a8 <__aeabi_dsub>
 800b010:	9e01      	ldr	r6, [sp, #4]
 800b012:	9f04      	ldr	r7, [sp, #16]
 800b014:	3630      	adds	r6, #48	; 0x30
 800b016:	f805 6b01 	strb.w	r6, [r5], #1
 800b01a:	9e00      	ldr	r6, [sp, #0]
 800b01c:	1bae      	subs	r6, r5, r6
 800b01e:	42b7      	cmp	r7, r6
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	d134      	bne.n	800b090 <_dtoa_r+0x708>
 800b026:	f7f5 f941 	bl	80002ac <__adddf3>
 800b02a:	4642      	mov	r2, r8
 800b02c:	464b      	mov	r3, r9
 800b02e:	4606      	mov	r6, r0
 800b030:	460f      	mov	r7, r1
 800b032:	f7f5 fd81 	bl	8000b38 <__aeabi_dcmpgt>
 800b036:	b9c8      	cbnz	r0, 800b06c <_dtoa_r+0x6e4>
 800b038:	4642      	mov	r2, r8
 800b03a:	464b      	mov	r3, r9
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 fd52 	bl	8000ae8 <__aeabi_dcmpeq>
 800b044:	b110      	cbz	r0, 800b04c <_dtoa_r+0x6c4>
 800b046:	9b01      	ldr	r3, [sp, #4]
 800b048:	07db      	lsls	r3, r3, #31
 800b04a:	d40f      	bmi.n	800b06c <_dtoa_r+0x6e4>
 800b04c:	4651      	mov	r1, sl
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 fbcc 	bl	800b7ec <_Bfree>
 800b054:	2300      	movs	r3, #0
 800b056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b058:	702b      	strb	r3, [r5, #0]
 800b05a:	f10b 0301 	add.w	r3, fp, #1
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b062:	2b00      	cmp	r3, #0
 800b064:	f43f ace2 	beq.w	800aa2c <_dtoa_r+0xa4>
 800b068:	601d      	str	r5, [r3, #0]
 800b06a:	e4df      	b.n	800aa2c <_dtoa_r+0xa4>
 800b06c:	465f      	mov	r7, fp
 800b06e:	462b      	mov	r3, r5
 800b070:	461d      	mov	r5, r3
 800b072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b076:	2a39      	cmp	r2, #57	; 0x39
 800b078:	d106      	bne.n	800b088 <_dtoa_r+0x700>
 800b07a:	9a00      	ldr	r2, [sp, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d1f7      	bne.n	800b070 <_dtoa_r+0x6e8>
 800b080:	9900      	ldr	r1, [sp, #0]
 800b082:	2230      	movs	r2, #48	; 0x30
 800b084:	3701      	adds	r7, #1
 800b086:	700a      	strb	r2, [r1, #0]
 800b088:	781a      	ldrb	r2, [r3, #0]
 800b08a:	3201      	adds	r2, #1
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	e790      	b.n	800afb2 <_dtoa_r+0x62a>
 800b090:	4ba3      	ldr	r3, [pc, #652]	; (800b320 <_dtoa_r+0x998>)
 800b092:	2200      	movs	r2, #0
 800b094:	f7f5 fac0 	bl	8000618 <__aeabi_dmul>
 800b098:	2200      	movs	r2, #0
 800b09a:	2300      	movs	r3, #0
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	f7f5 fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d09e      	beq.n	800afe6 <_dtoa_r+0x65e>
 800b0a8:	e7d0      	b.n	800b04c <_dtoa_r+0x6c4>
 800b0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	f000 80ca 	beq.w	800b246 <_dtoa_r+0x8be>
 800b0b2:	9a07      	ldr	r2, [sp, #28]
 800b0b4:	2a01      	cmp	r2, #1
 800b0b6:	f300 80ad 	bgt.w	800b214 <_dtoa_r+0x88c>
 800b0ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0bc:	2a00      	cmp	r2, #0
 800b0be:	f000 80a5 	beq.w	800b20c <_dtoa_r+0x884>
 800b0c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0c6:	9e08      	ldr	r6, [sp, #32]
 800b0c8:	9d05      	ldr	r5, [sp, #20]
 800b0ca:	9a05      	ldr	r2, [sp, #20]
 800b0cc:	441a      	add	r2, r3
 800b0ce:	9205      	str	r2, [sp, #20]
 800b0d0:	9a06      	ldr	r2, [sp, #24]
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	441a      	add	r2, r3
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	9206      	str	r2, [sp, #24]
 800b0da:	f000 fc3d 	bl	800b958 <__i2b>
 800b0de:	4607      	mov	r7, r0
 800b0e0:	b165      	cbz	r5, 800b0fc <_dtoa_r+0x774>
 800b0e2:	9b06      	ldr	r3, [sp, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd09      	ble.n	800b0fc <_dtoa_r+0x774>
 800b0e8:	42ab      	cmp	r3, r5
 800b0ea:	9a05      	ldr	r2, [sp, #20]
 800b0ec:	bfa8      	it	ge
 800b0ee:	462b      	movge	r3, r5
 800b0f0:	1ad2      	subs	r2, r2, r3
 800b0f2:	9205      	str	r2, [sp, #20]
 800b0f4:	9a06      	ldr	r2, [sp, #24]
 800b0f6:	1aed      	subs	r5, r5, r3
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	9306      	str	r3, [sp, #24]
 800b0fc:	9b08      	ldr	r3, [sp, #32]
 800b0fe:	b1f3      	cbz	r3, 800b13e <_dtoa_r+0x7b6>
 800b100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 80a3 	beq.w	800b24e <_dtoa_r+0x8c6>
 800b108:	2e00      	cmp	r6, #0
 800b10a:	dd10      	ble.n	800b12e <_dtoa_r+0x7a6>
 800b10c:	4639      	mov	r1, r7
 800b10e:	4632      	mov	r2, r6
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fce1 	bl	800bad8 <__pow5mult>
 800b116:	4652      	mov	r2, sl
 800b118:	4601      	mov	r1, r0
 800b11a:	4607      	mov	r7, r0
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 fc31 	bl	800b984 <__multiply>
 800b122:	4651      	mov	r1, sl
 800b124:	4680      	mov	r8, r0
 800b126:	4620      	mov	r0, r4
 800b128:	f000 fb60 	bl	800b7ec <_Bfree>
 800b12c:	46c2      	mov	sl, r8
 800b12e:	9b08      	ldr	r3, [sp, #32]
 800b130:	1b9a      	subs	r2, r3, r6
 800b132:	d004      	beq.n	800b13e <_dtoa_r+0x7b6>
 800b134:	4651      	mov	r1, sl
 800b136:	4620      	mov	r0, r4
 800b138:	f000 fcce 	bl	800bad8 <__pow5mult>
 800b13c:	4682      	mov	sl, r0
 800b13e:	2101      	movs	r1, #1
 800b140:	4620      	mov	r0, r4
 800b142:	f000 fc09 	bl	800b958 <__i2b>
 800b146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	4606      	mov	r6, r0
 800b14c:	f340 8081 	ble.w	800b252 <_dtoa_r+0x8ca>
 800b150:	461a      	mov	r2, r3
 800b152:	4601      	mov	r1, r0
 800b154:	4620      	mov	r0, r4
 800b156:	f000 fcbf 	bl	800bad8 <__pow5mult>
 800b15a:	9b07      	ldr	r3, [sp, #28]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	4606      	mov	r6, r0
 800b160:	dd7a      	ble.n	800b258 <_dtoa_r+0x8d0>
 800b162:	f04f 0800 	mov.w	r8, #0
 800b166:	6933      	ldr	r3, [r6, #16]
 800b168:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b16c:	6918      	ldr	r0, [r3, #16]
 800b16e:	f000 fba5 	bl	800b8bc <__hi0bits>
 800b172:	f1c0 0020 	rsb	r0, r0, #32
 800b176:	9b06      	ldr	r3, [sp, #24]
 800b178:	4418      	add	r0, r3
 800b17a:	f010 001f 	ands.w	r0, r0, #31
 800b17e:	f000 8094 	beq.w	800b2aa <_dtoa_r+0x922>
 800b182:	f1c0 0320 	rsb	r3, r0, #32
 800b186:	2b04      	cmp	r3, #4
 800b188:	f340 8085 	ble.w	800b296 <_dtoa_r+0x90e>
 800b18c:	9b05      	ldr	r3, [sp, #20]
 800b18e:	f1c0 001c 	rsb	r0, r0, #28
 800b192:	4403      	add	r3, r0
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	9b06      	ldr	r3, [sp, #24]
 800b198:	4403      	add	r3, r0
 800b19a:	4405      	add	r5, r0
 800b19c:	9306      	str	r3, [sp, #24]
 800b19e:	9b05      	ldr	r3, [sp, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dd05      	ble.n	800b1b0 <_dtoa_r+0x828>
 800b1a4:	4651      	mov	r1, sl
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fcef 	bl	800bb8c <__lshift>
 800b1ae:	4682      	mov	sl, r0
 800b1b0:	9b06      	ldr	r3, [sp, #24]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dd05      	ble.n	800b1c2 <_dtoa_r+0x83a>
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fce6 	bl	800bb8c <__lshift>
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d072      	beq.n	800b2ae <_dtoa_r+0x926>
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4650      	mov	r0, sl
 800b1cc:	f000 fd4a 	bl	800bc64 <__mcmp>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	da6c      	bge.n	800b2ae <_dtoa_r+0x926>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	4651      	mov	r1, sl
 800b1d8:	220a      	movs	r2, #10
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fb28 	bl	800b830 <__multadd>
 800b1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1e6:	4682      	mov	sl, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 81b0 	beq.w	800b54e <_dtoa_r+0xbc6>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	220a      	movs	r2, #10
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f000 fb1b 	bl	800b830 <__multadd>
 800b1fa:	9b01      	ldr	r3, [sp, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	4607      	mov	r7, r0
 800b200:	f300 8096 	bgt.w	800b330 <_dtoa_r+0x9a8>
 800b204:	9b07      	ldr	r3, [sp, #28]
 800b206:	2b02      	cmp	r3, #2
 800b208:	dc59      	bgt.n	800b2be <_dtoa_r+0x936>
 800b20a:	e091      	b.n	800b330 <_dtoa_r+0x9a8>
 800b20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b20e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b212:	e758      	b.n	800b0c6 <_dtoa_r+0x73e>
 800b214:	9b04      	ldr	r3, [sp, #16]
 800b216:	1e5e      	subs	r6, r3, #1
 800b218:	9b08      	ldr	r3, [sp, #32]
 800b21a:	42b3      	cmp	r3, r6
 800b21c:	bfbf      	itttt	lt
 800b21e:	9b08      	ldrlt	r3, [sp, #32]
 800b220:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b222:	9608      	strlt	r6, [sp, #32]
 800b224:	1af3      	sublt	r3, r6, r3
 800b226:	bfb4      	ite	lt
 800b228:	18d2      	addlt	r2, r2, r3
 800b22a:	1b9e      	subge	r6, r3, r6
 800b22c:	9b04      	ldr	r3, [sp, #16]
 800b22e:	bfbc      	itt	lt
 800b230:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b232:	2600      	movlt	r6, #0
 800b234:	2b00      	cmp	r3, #0
 800b236:	bfb7      	itett	lt
 800b238:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b23c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b240:	1a9d      	sublt	r5, r3, r2
 800b242:	2300      	movlt	r3, #0
 800b244:	e741      	b.n	800b0ca <_dtoa_r+0x742>
 800b246:	9e08      	ldr	r6, [sp, #32]
 800b248:	9d05      	ldr	r5, [sp, #20]
 800b24a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b24c:	e748      	b.n	800b0e0 <_dtoa_r+0x758>
 800b24e:	9a08      	ldr	r2, [sp, #32]
 800b250:	e770      	b.n	800b134 <_dtoa_r+0x7ac>
 800b252:	9b07      	ldr	r3, [sp, #28]
 800b254:	2b01      	cmp	r3, #1
 800b256:	dc19      	bgt.n	800b28c <_dtoa_r+0x904>
 800b258:	9b02      	ldr	r3, [sp, #8]
 800b25a:	b9bb      	cbnz	r3, 800b28c <_dtoa_r+0x904>
 800b25c:	9b03      	ldr	r3, [sp, #12]
 800b25e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b262:	b99b      	cbnz	r3, 800b28c <_dtoa_r+0x904>
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b26a:	0d1b      	lsrs	r3, r3, #20
 800b26c:	051b      	lsls	r3, r3, #20
 800b26e:	b183      	cbz	r3, 800b292 <_dtoa_r+0x90a>
 800b270:	9b05      	ldr	r3, [sp, #20]
 800b272:	3301      	adds	r3, #1
 800b274:	9305      	str	r3, [sp, #20]
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	3301      	adds	r3, #1
 800b27a:	9306      	str	r3, [sp, #24]
 800b27c:	f04f 0801 	mov.w	r8, #1
 800b280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b282:	2b00      	cmp	r3, #0
 800b284:	f47f af6f 	bne.w	800b166 <_dtoa_r+0x7de>
 800b288:	2001      	movs	r0, #1
 800b28a:	e774      	b.n	800b176 <_dtoa_r+0x7ee>
 800b28c:	f04f 0800 	mov.w	r8, #0
 800b290:	e7f6      	b.n	800b280 <_dtoa_r+0x8f8>
 800b292:	4698      	mov	r8, r3
 800b294:	e7f4      	b.n	800b280 <_dtoa_r+0x8f8>
 800b296:	d082      	beq.n	800b19e <_dtoa_r+0x816>
 800b298:	9a05      	ldr	r2, [sp, #20]
 800b29a:	331c      	adds	r3, #28
 800b29c:	441a      	add	r2, r3
 800b29e:	9205      	str	r2, [sp, #20]
 800b2a0:	9a06      	ldr	r2, [sp, #24]
 800b2a2:	441a      	add	r2, r3
 800b2a4:	441d      	add	r5, r3
 800b2a6:	9206      	str	r2, [sp, #24]
 800b2a8:	e779      	b.n	800b19e <_dtoa_r+0x816>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	e7f4      	b.n	800b298 <_dtoa_r+0x910>
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dc37      	bgt.n	800b324 <_dtoa_r+0x99c>
 800b2b4:	9b07      	ldr	r3, [sp, #28]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	dd34      	ble.n	800b324 <_dtoa_r+0x99c>
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	b963      	cbnz	r3, 800b2dc <_dtoa_r+0x954>
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	2205      	movs	r2, #5
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 fab2 	bl	800b830 <__multadd>
 800b2cc:	4601      	mov	r1, r0
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	f000 fcc7 	bl	800bc64 <__mcmp>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f73f adbb 	bgt.w	800ae52 <_dtoa_r+0x4ca>
 800b2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2de:	9d00      	ldr	r5, [sp, #0]
 800b2e0:	ea6f 0b03 	mvn.w	fp, r3
 800b2e4:	f04f 0800 	mov.w	r8, #0
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fa7e 	bl	800b7ec <_Bfree>
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	f43f aeab 	beq.w	800b04c <_dtoa_r+0x6c4>
 800b2f6:	f1b8 0f00 	cmp.w	r8, #0
 800b2fa:	d005      	beq.n	800b308 <_dtoa_r+0x980>
 800b2fc:	45b8      	cmp	r8, r7
 800b2fe:	d003      	beq.n	800b308 <_dtoa_r+0x980>
 800b300:	4641      	mov	r1, r8
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fa72 	bl	800b7ec <_Bfree>
 800b308:	4639      	mov	r1, r7
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 fa6e 	bl	800b7ec <_Bfree>
 800b310:	e69c      	b.n	800b04c <_dtoa_r+0x6c4>
 800b312:	2600      	movs	r6, #0
 800b314:	4637      	mov	r7, r6
 800b316:	e7e1      	b.n	800b2dc <_dtoa_r+0x954>
 800b318:	46bb      	mov	fp, r7
 800b31a:	4637      	mov	r7, r6
 800b31c:	e599      	b.n	800ae52 <_dtoa_r+0x4ca>
 800b31e:	bf00      	nop
 800b320:	40240000 	.word	0x40240000
 800b324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 80c8 	beq.w	800b4bc <_dtoa_r+0xb34>
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	9301      	str	r3, [sp, #4]
 800b330:	2d00      	cmp	r5, #0
 800b332:	dd05      	ble.n	800b340 <_dtoa_r+0x9b8>
 800b334:	4639      	mov	r1, r7
 800b336:	462a      	mov	r2, r5
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 fc27 	bl	800bb8c <__lshift>
 800b33e:	4607      	mov	r7, r0
 800b340:	f1b8 0f00 	cmp.w	r8, #0
 800b344:	d05b      	beq.n	800b3fe <_dtoa_r+0xa76>
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fa0f 	bl	800b76c <_Balloc>
 800b34e:	4605      	mov	r5, r0
 800b350:	b928      	cbnz	r0, 800b35e <_dtoa_r+0x9d6>
 800b352:	4b83      	ldr	r3, [pc, #524]	; (800b560 <_dtoa_r+0xbd8>)
 800b354:	4602      	mov	r2, r0
 800b356:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b35a:	f7ff bb2e 	b.w	800a9ba <_dtoa_r+0x32>
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	3202      	adds	r2, #2
 800b362:	0092      	lsls	r2, r2, #2
 800b364:	f107 010c 	add.w	r1, r7, #12
 800b368:	300c      	adds	r0, #12
 800b36a:	f7ff fa75 	bl	800a858 <memcpy>
 800b36e:	2201      	movs	r2, #1
 800b370:	4629      	mov	r1, r5
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fc0a 	bl	800bb8c <__lshift>
 800b378:	9b00      	ldr	r3, [sp, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	9304      	str	r3, [sp, #16]
 800b37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b382:	4413      	add	r3, r2
 800b384:	9308      	str	r3, [sp, #32]
 800b386:	9b02      	ldr	r3, [sp, #8]
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	46b8      	mov	r8, r7
 800b38e:	9306      	str	r3, [sp, #24]
 800b390:	4607      	mov	r7, r0
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	4631      	mov	r1, r6
 800b396:	3b01      	subs	r3, #1
 800b398:	4650      	mov	r0, sl
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	f7ff fa6a 	bl	800a874 <quorem>
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	9002      	str	r0, [sp, #8]
 800b3a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	f000 fc5b 	bl	800bc64 <__mcmp>
 800b3ae:	463a      	mov	r2, r7
 800b3b0:	9005      	str	r0, [sp, #20]
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f000 fc71 	bl	800bc9c <__mdiff>
 800b3ba:	68c2      	ldr	r2, [r0, #12]
 800b3bc:	4605      	mov	r5, r0
 800b3be:	bb02      	cbnz	r2, 800b402 <_dtoa_r+0xa7a>
 800b3c0:	4601      	mov	r1, r0
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	f000 fc4e 	bl	800bc64 <__mcmp>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	4629      	mov	r1, r5
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b3d0:	f000 fa0c 	bl	800b7ec <_Bfree>
 800b3d4:	9b07      	ldr	r3, [sp, #28]
 800b3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d8:	9d04      	ldr	r5, [sp, #16]
 800b3da:	ea43 0102 	orr.w	r1, r3, r2
 800b3de:	9b06      	ldr	r3, [sp, #24]
 800b3e0:	4319      	orrs	r1, r3
 800b3e2:	d110      	bne.n	800b406 <_dtoa_r+0xa7e>
 800b3e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3e8:	d029      	beq.n	800b43e <_dtoa_r+0xab6>
 800b3ea:	9b05      	ldr	r3, [sp, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dd02      	ble.n	800b3f6 <_dtoa_r+0xa6e>
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	f883 9000 	strb.w	r9, [r3]
 800b3fc:	e774      	b.n	800b2e8 <_dtoa_r+0x960>
 800b3fe:	4638      	mov	r0, r7
 800b400:	e7ba      	b.n	800b378 <_dtoa_r+0x9f0>
 800b402:	2201      	movs	r2, #1
 800b404:	e7e1      	b.n	800b3ca <_dtoa_r+0xa42>
 800b406:	9b05      	ldr	r3, [sp, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	db04      	blt.n	800b416 <_dtoa_r+0xa8e>
 800b40c:	9907      	ldr	r1, [sp, #28]
 800b40e:	430b      	orrs	r3, r1
 800b410:	9906      	ldr	r1, [sp, #24]
 800b412:	430b      	orrs	r3, r1
 800b414:	d120      	bne.n	800b458 <_dtoa_r+0xad0>
 800b416:	2a00      	cmp	r2, #0
 800b418:	dded      	ble.n	800b3f6 <_dtoa_r+0xa6e>
 800b41a:	4651      	mov	r1, sl
 800b41c:	2201      	movs	r2, #1
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 fbb4 	bl	800bb8c <__lshift>
 800b424:	4631      	mov	r1, r6
 800b426:	4682      	mov	sl, r0
 800b428:	f000 fc1c 	bl	800bc64 <__mcmp>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	dc03      	bgt.n	800b438 <_dtoa_r+0xab0>
 800b430:	d1e1      	bne.n	800b3f6 <_dtoa_r+0xa6e>
 800b432:	f019 0f01 	tst.w	r9, #1
 800b436:	d0de      	beq.n	800b3f6 <_dtoa_r+0xa6e>
 800b438:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b43c:	d1d8      	bne.n	800b3f0 <_dtoa_r+0xa68>
 800b43e:	9a01      	ldr	r2, [sp, #4]
 800b440:	2339      	movs	r3, #57	; 0x39
 800b442:	7013      	strb	r3, [r2, #0]
 800b444:	462b      	mov	r3, r5
 800b446:	461d      	mov	r5, r3
 800b448:	3b01      	subs	r3, #1
 800b44a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b44e:	2a39      	cmp	r2, #57	; 0x39
 800b450:	d06c      	beq.n	800b52c <_dtoa_r+0xba4>
 800b452:	3201      	adds	r2, #1
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e747      	b.n	800b2e8 <_dtoa_r+0x960>
 800b458:	2a00      	cmp	r2, #0
 800b45a:	dd07      	ble.n	800b46c <_dtoa_r+0xae4>
 800b45c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b460:	d0ed      	beq.n	800b43e <_dtoa_r+0xab6>
 800b462:	9a01      	ldr	r2, [sp, #4]
 800b464:	f109 0301 	add.w	r3, r9, #1
 800b468:	7013      	strb	r3, [r2, #0]
 800b46a:	e73d      	b.n	800b2e8 <_dtoa_r+0x960>
 800b46c:	9b04      	ldr	r3, [sp, #16]
 800b46e:	9a08      	ldr	r2, [sp, #32]
 800b470:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b474:	4293      	cmp	r3, r2
 800b476:	d043      	beq.n	800b500 <_dtoa_r+0xb78>
 800b478:	4651      	mov	r1, sl
 800b47a:	2300      	movs	r3, #0
 800b47c:	220a      	movs	r2, #10
 800b47e:	4620      	mov	r0, r4
 800b480:	f000 f9d6 	bl	800b830 <__multadd>
 800b484:	45b8      	cmp	r8, r7
 800b486:	4682      	mov	sl, r0
 800b488:	f04f 0300 	mov.w	r3, #0
 800b48c:	f04f 020a 	mov.w	r2, #10
 800b490:	4641      	mov	r1, r8
 800b492:	4620      	mov	r0, r4
 800b494:	d107      	bne.n	800b4a6 <_dtoa_r+0xb1e>
 800b496:	f000 f9cb 	bl	800b830 <__multadd>
 800b49a:	4680      	mov	r8, r0
 800b49c:	4607      	mov	r7, r0
 800b49e:	9b04      	ldr	r3, [sp, #16]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	e775      	b.n	800b392 <_dtoa_r+0xa0a>
 800b4a6:	f000 f9c3 	bl	800b830 <__multadd>
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	220a      	movs	r2, #10
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 f9bc 	bl	800b830 <__multadd>
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	e7f0      	b.n	800b49e <_dtoa_r+0xb16>
 800b4bc:	9b04      	ldr	r3, [sp, #16]
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	9d00      	ldr	r5, [sp, #0]
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4650      	mov	r0, sl
 800b4c6:	f7ff f9d5 	bl	800a874 <quorem>
 800b4ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	f805 9b01 	strb.w	r9, [r5], #1
 800b4d4:	1aea      	subs	r2, r5, r3
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	dd07      	ble.n	800b4ec <_dtoa_r+0xb64>
 800b4dc:	4651      	mov	r1, sl
 800b4de:	2300      	movs	r3, #0
 800b4e0:	220a      	movs	r2, #10
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f9a4 	bl	800b830 <__multadd>
 800b4e8:	4682      	mov	sl, r0
 800b4ea:	e7ea      	b.n	800b4c2 <_dtoa_r+0xb3a>
 800b4ec:	9b01      	ldr	r3, [sp, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfc8      	it	gt
 800b4f2:	461d      	movgt	r5, r3
 800b4f4:	9b00      	ldr	r3, [sp, #0]
 800b4f6:	bfd8      	it	le
 800b4f8:	2501      	movle	r5, #1
 800b4fa:	441d      	add	r5, r3
 800b4fc:	f04f 0800 	mov.w	r8, #0
 800b500:	4651      	mov	r1, sl
 800b502:	2201      	movs	r2, #1
 800b504:	4620      	mov	r0, r4
 800b506:	f000 fb41 	bl	800bb8c <__lshift>
 800b50a:	4631      	mov	r1, r6
 800b50c:	4682      	mov	sl, r0
 800b50e:	f000 fba9 	bl	800bc64 <__mcmp>
 800b512:	2800      	cmp	r0, #0
 800b514:	dc96      	bgt.n	800b444 <_dtoa_r+0xabc>
 800b516:	d102      	bne.n	800b51e <_dtoa_r+0xb96>
 800b518:	f019 0f01 	tst.w	r9, #1
 800b51c:	d192      	bne.n	800b444 <_dtoa_r+0xabc>
 800b51e:	462b      	mov	r3, r5
 800b520:	461d      	mov	r5, r3
 800b522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b526:	2a30      	cmp	r2, #48	; 0x30
 800b528:	d0fa      	beq.n	800b520 <_dtoa_r+0xb98>
 800b52a:	e6dd      	b.n	800b2e8 <_dtoa_r+0x960>
 800b52c:	9a00      	ldr	r2, [sp, #0]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d189      	bne.n	800b446 <_dtoa_r+0xabe>
 800b532:	f10b 0b01 	add.w	fp, fp, #1
 800b536:	2331      	movs	r3, #49	; 0x31
 800b538:	e796      	b.n	800b468 <_dtoa_r+0xae0>
 800b53a:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <_dtoa_r+0xbdc>)
 800b53c:	f7ff ba99 	b.w	800aa72 <_dtoa_r+0xea>
 800b540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b542:	2b00      	cmp	r3, #0
 800b544:	f47f aa6d 	bne.w	800aa22 <_dtoa_r+0x9a>
 800b548:	4b07      	ldr	r3, [pc, #28]	; (800b568 <_dtoa_r+0xbe0>)
 800b54a:	f7ff ba92 	b.w	800aa72 <_dtoa_r+0xea>
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	dcb5      	bgt.n	800b4c0 <_dtoa_r+0xb38>
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	2b02      	cmp	r3, #2
 800b558:	f73f aeb1 	bgt.w	800b2be <_dtoa_r+0x936>
 800b55c:	e7b0      	b.n	800b4c0 <_dtoa_r+0xb38>
 800b55e:	bf00      	nop
 800b560:	0800ded8 	.word	0x0800ded8
 800b564:	0800de38 	.word	0x0800de38
 800b568:	0800de5c 	.word	0x0800de5c

0800b56c <_free_r>:
 800b56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b56e:	2900      	cmp	r1, #0
 800b570:	d044      	beq.n	800b5fc <_free_r+0x90>
 800b572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b576:	9001      	str	r0, [sp, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f1a1 0404 	sub.w	r4, r1, #4
 800b57e:	bfb8      	it	lt
 800b580:	18e4      	addlt	r4, r4, r3
 800b582:	f000 f8e7 	bl	800b754 <__malloc_lock>
 800b586:	4a1e      	ldr	r2, [pc, #120]	; (800b600 <_free_r+0x94>)
 800b588:	9801      	ldr	r0, [sp, #4]
 800b58a:	6813      	ldr	r3, [r2, #0]
 800b58c:	b933      	cbnz	r3, 800b59c <_free_r+0x30>
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	6014      	str	r4, [r2, #0]
 800b592:	b003      	add	sp, #12
 800b594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b598:	f000 b8e2 	b.w	800b760 <__malloc_unlock>
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	d908      	bls.n	800b5b2 <_free_r+0x46>
 800b5a0:	6825      	ldr	r5, [r4, #0]
 800b5a2:	1961      	adds	r1, r4, r5
 800b5a4:	428b      	cmp	r3, r1
 800b5a6:	bf01      	itttt	eq
 800b5a8:	6819      	ldreq	r1, [r3, #0]
 800b5aa:	685b      	ldreq	r3, [r3, #4]
 800b5ac:	1949      	addeq	r1, r1, r5
 800b5ae:	6021      	streq	r1, [r4, #0]
 800b5b0:	e7ed      	b.n	800b58e <_free_r+0x22>
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	b10b      	cbz	r3, 800b5bc <_free_r+0x50>
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	d9fa      	bls.n	800b5b2 <_free_r+0x46>
 800b5bc:	6811      	ldr	r1, [r2, #0]
 800b5be:	1855      	adds	r5, r2, r1
 800b5c0:	42a5      	cmp	r5, r4
 800b5c2:	d10b      	bne.n	800b5dc <_free_r+0x70>
 800b5c4:	6824      	ldr	r4, [r4, #0]
 800b5c6:	4421      	add	r1, r4
 800b5c8:	1854      	adds	r4, r2, r1
 800b5ca:	42a3      	cmp	r3, r4
 800b5cc:	6011      	str	r1, [r2, #0]
 800b5ce:	d1e0      	bne.n	800b592 <_free_r+0x26>
 800b5d0:	681c      	ldr	r4, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	6053      	str	r3, [r2, #4]
 800b5d6:	440c      	add	r4, r1
 800b5d8:	6014      	str	r4, [r2, #0]
 800b5da:	e7da      	b.n	800b592 <_free_r+0x26>
 800b5dc:	d902      	bls.n	800b5e4 <_free_r+0x78>
 800b5de:	230c      	movs	r3, #12
 800b5e0:	6003      	str	r3, [r0, #0]
 800b5e2:	e7d6      	b.n	800b592 <_free_r+0x26>
 800b5e4:	6825      	ldr	r5, [r4, #0]
 800b5e6:	1961      	adds	r1, r4, r5
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	bf04      	itt	eq
 800b5ec:	6819      	ldreq	r1, [r3, #0]
 800b5ee:	685b      	ldreq	r3, [r3, #4]
 800b5f0:	6063      	str	r3, [r4, #4]
 800b5f2:	bf04      	itt	eq
 800b5f4:	1949      	addeq	r1, r1, r5
 800b5f6:	6021      	streq	r1, [r4, #0]
 800b5f8:	6054      	str	r4, [r2, #4]
 800b5fa:	e7ca      	b.n	800b592 <_free_r+0x26>
 800b5fc:	b003      	add	sp, #12
 800b5fe:	bd30      	pop	{r4, r5, pc}
 800b600:	20001d84 	.word	0x20001d84

0800b604 <malloc>:
 800b604:	4b02      	ldr	r3, [pc, #8]	; (800b610 <malloc+0xc>)
 800b606:	4601      	mov	r1, r0
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	f000 b823 	b.w	800b654 <_malloc_r>
 800b60e:	bf00      	nop
 800b610:	20000174 	.word	0x20000174

0800b614 <sbrk_aligned>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	4e0e      	ldr	r6, [pc, #56]	; (800b650 <sbrk_aligned+0x3c>)
 800b618:	460c      	mov	r4, r1
 800b61a:	6831      	ldr	r1, [r6, #0]
 800b61c:	4605      	mov	r5, r0
 800b61e:	b911      	cbnz	r1, 800b626 <sbrk_aligned+0x12>
 800b620:	f000 fe96 	bl	800c350 <_sbrk_r>
 800b624:	6030      	str	r0, [r6, #0]
 800b626:	4621      	mov	r1, r4
 800b628:	4628      	mov	r0, r5
 800b62a:	f000 fe91 	bl	800c350 <_sbrk_r>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	d00a      	beq.n	800b648 <sbrk_aligned+0x34>
 800b632:	1cc4      	adds	r4, r0, #3
 800b634:	f024 0403 	bic.w	r4, r4, #3
 800b638:	42a0      	cmp	r0, r4
 800b63a:	d007      	beq.n	800b64c <sbrk_aligned+0x38>
 800b63c:	1a21      	subs	r1, r4, r0
 800b63e:	4628      	mov	r0, r5
 800b640:	f000 fe86 	bl	800c350 <_sbrk_r>
 800b644:	3001      	adds	r0, #1
 800b646:	d101      	bne.n	800b64c <sbrk_aligned+0x38>
 800b648:	f04f 34ff 	mov.w	r4, #4294967295
 800b64c:	4620      	mov	r0, r4
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	20001d88 	.word	0x20001d88

0800b654 <_malloc_r>:
 800b654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b658:	1ccd      	adds	r5, r1, #3
 800b65a:	f025 0503 	bic.w	r5, r5, #3
 800b65e:	3508      	adds	r5, #8
 800b660:	2d0c      	cmp	r5, #12
 800b662:	bf38      	it	cc
 800b664:	250c      	movcc	r5, #12
 800b666:	2d00      	cmp	r5, #0
 800b668:	4607      	mov	r7, r0
 800b66a:	db01      	blt.n	800b670 <_malloc_r+0x1c>
 800b66c:	42a9      	cmp	r1, r5
 800b66e:	d905      	bls.n	800b67c <_malloc_r+0x28>
 800b670:	230c      	movs	r3, #12
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	2600      	movs	r6, #0
 800b676:	4630      	mov	r0, r6
 800b678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b750 <_malloc_r+0xfc>
 800b680:	f000 f868 	bl	800b754 <__malloc_lock>
 800b684:	f8d8 3000 	ldr.w	r3, [r8]
 800b688:	461c      	mov	r4, r3
 800b68a:	bb5c      	cbnz	r4, 800b6e4 <_malloc_r+0x90>
 800b68c:	4629      	mov	r1, r5
 800b68e:	4638      	mov	r0, r7
 800b690:	f7ff ffc0 	bl	800b614 <sbrk_aligned>
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	4604      	mov	r4, r0
 800b698:	d155      	bne.n	800b746 <_malloc_r+0xf2>
 800b69a:	f8d8 4000 	ldr.w	r4, [r8]
 800b69e:	4626      	mov	r6, r4
 800b6a0:	2e00      	cmp	r6, #0
 800b6a2:	d145      	bne.n	800b730 <_malloc_r+0xdc>
 800b6a4:	2c00      	cmp	r4, #0
 800b6a6:	d048      	beq.n	800b73a <_malloc_r+0xe6>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	4631      	mov	r1, r6
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	eb04 0903 	add.w	r9, r4, r3
 800b6b2:	f000 fe4d 	bl	800c350 <_sbrk_r>
 800b6b6:	4581      	cmp	r9, r0
 800b6b8:	d13f      	bne.n	800b73a <_malloc_r+0xe6>
 800b6ba:	6821      	ldr	r1, [r4, #0]
 800b6bc:	1a6d      	subs	r5, r5, r1
 800b6be:	4629      	mov	r1, r5
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff ffa7 	bl	800b614 <sbrk_aligned>
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d037      	beq.n	800b73a <_malloc_r+0xe6>
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	442b      	add	r3, r5
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d038      	beq.n	800b74a <_malloc_r+0xf6>
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	42a2      	cmp	r2, r4
 800b6dc:	d12b      	bne.n	800b736 <_malloc_r+0xe2>
 800b6de:	2200      	movs	r2, #0
 800b6e0:	605a      	str	r2, [r3, #4]
 800b6e2:	e00f      	b.n	800b704 <_malloc_r+0xb0>
 800b6e4:	6822      	ldr	r2, [r4, #0]
 800b6e6:	1b52      	subs	r2, r2, r5
 800b6e8:	d41f      	bmi.n	800b72a <_malloc_r+0xd6>
 800b6ea:	2a0b      	cmp	r2, #11
 800b6ec:	d917      	bls.n	800b71e <_malloc_r+0xca>
 800b6ee:	1961      	adds	r1, r4, r5
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	6025      	str	r5, [r4, #0]
 800b6f4:	bf18      	it	ne
 800b6f6:	6059      	strne	r1, [r3, #4]
 800b6f8:	6863      	ldr	r3, [r4, #4]
 800b6fa:	bf08      	it	eq
 800b6fc:	f8c8 1000 	streq.w	r1, [r8]
 800b700:	5162      	str	r2, [r4, r5]
 800b702:	604b      	str	r3, [r1, #4]
 800b704:	4638      	mov	r0, r7
 800b706:	f104 060b 	add.w	r6, r4, #11
 800b70a:	f000 f829 	bl	800b760 <__malloc_unlock>
 800b70e:	f026 0607 	bic.w	r6, r6, #7
 800b712:	1d23      	adds	r3, r4, #4
 800b714:	1af2      	subs	r2, r6, r3
 800b716:	d0ae      	beq.n	800b676 <_malloc_r+0x22>
 800b718:	1b9b      	subs	r3, r3, r6
 800b71a:	50a3      	str	r3, [r4, r2]
 800b71c:	e7ab      	b.n	800b676 <_malloc_r+0x22>
 800b71e:	42a3      	cmp	r3, r4
 800b720:	6862      	ldr	r2, [r4, #4]
 800b722:	d1dd      	bne.n	800b6e0 <_malloc_r+0x8c>
 800b724:	f8c8 2000 	str.w	r2, [r8]
 800b728:	e7ec      	b.n	800b704 <_malloc_r+0xb0>
 800b72a:	4623      	mov	r3, r4
 800b72c:	6864      	ldr	r4, [r4, #4]
 800b72e:	e7ac      	b.n	800b68a <_malloc_r+0x36>
 800b730:	4634      	mov	r4, r6
 800b732:	6876      	ldr	r6, [r6, #4]
 800b734:	e7b4      	b.n	800b6a0 <_malloc_r+0x4c>
 800b736:	4613      	mov	r3, r2
 800b738:	e7cc      	b.n	800b6d4 <_malloc_r+0x80>
 800b73a:	230c      	movs	r3, #12
 800b73c:	603b      	str	r3, [r7, #0]
 800b73e:	4638      	mov	r0, r7
 800b740:	f000 f80e 	bl	800b760 <__malloc_unlock>
 800b744:	e797      	b.n	800b676 <_malloc_r+0x22>
 800b746:	6025      	str	r5, [r4, #0]
 800b748:	e7dc      	b.n	800b704 <_malloc_r+0xb0>
 800b74a:	605b      	str	r3, [r3, #4]
 800b74c:	deff      	udf	#255	; 0xff
 800b74e:	bf00      	nop
 800b750:	20001d84 	.word	0x20001d84

0800b754 <__malloc_lock>:
 800b754:	4801      	ldr	r0, [pc, #4]	; (800b75c <__malloc_lock+0x8>)
 800b756:	f7ff b87d 	b.w	800a854 <__retarget_lock_acquire_recursive>
 800b75a:	bf00      	nop
 800b75c:	20001d80 	.word	0x20001d80

0800b760 <__malloc_unlock>:
 800b760:	4801      	ldr	r0, [pc, #4]	; (800b768 <__malloc_unlock+0x8>)
 800b762:	f7ff b878 	b.w	800a856 <__retarget_lock_release_recursive>
 800b766:	bf00      	nop
 800b768:	20001d80 	.word	0x20001d80

0800b76c <_Balloc>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	69c6      	ldr	r6, [r0, #28]
 800b770:	4604      	mov	r4, r0
 800b772:	460d      	mov	r5, r1
 800b774:	b976      	cbnz	r6, 800b794 <_Balloc+0x28>
 800b776:	2010      	movs	r0, #16
 800b778:	f7ff ff44 	bl	800b604 <malloc>
 800b77c:	4602      	mov	r2, r0
 800b77e:	61e0      	str	r0, [r4, #28]
 800b780:	b920      	cbnz	r0, 800b78c <_Balloc+0x20>
 800b782:	4b18      	ldr	r3, [pc, #96]	; (800b7e4 <_Balloc+0x78>)
 800b784:	4818      	ldr	r0, [pc, #96]	; (800b7e8 <_Balloc+0x7c>)
 800b786:	216b      	movs	r1, #107	; 0x6b
 800b788:	f000 fdf2 	bl	800c370 <__assert_func>
 800b78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b790:	6006      	str	r6, [r0, #0]
 800b792:	60c6      	str	r6, [r0, #12]
 800b794:	69e6      	ldr	r6, [r4, #28]
 800b796:	68f3      	ldr	r3, [r6, #12]
 800b798:	b183      	cbz	r3, 800b7bc <_Balloc+0x50>
 800b79a:	69e3      	ldr	r3, [r4, #28]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7a2:	b9b8      	cbnz	r0, 800b7d4 <_Balloc+0x68>
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b7aa:	1d72      	adds	r2, r6, #5
 800b7ac:	0092      	lsls	r2, r2, #2
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f000 fdfc 	bl	800c3ac <_calloc_r>
 800b7b4:	b160      	cbz	r0, 800b7d0 <_Balloc+0x64>
 800b7b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ba:	e00e      	b.n	800b7da <_Balloc+0x6e>
 800b7bc:	2221      	movs	r2, #33	; 0x21
 800b7be:	2104      	movs	r1, #4
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 fdf3 	bl	800c3ac <_calloc_r>
 800b7c6:	69e3      	ldr	r3, [r4, #28]
 800b7c8:	60f0      	str	r0, [r6, #12]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e4      	bne.n	800b79a <_Balloc+0x2e>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	6802      	ldr	r2, [r0, #0]
 800b7d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7e0:	e7f7      	b.n	800b7d2 <_Balloc+0x66>
 800b7e2:	bf00      	nop
 800b7e4:	0800de69 	.word	0x0800de69
 800b7e8:	0800dee9 	.word	0x0800dee9

0800b7ec <_Bfree>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	69c6      	ldr	r6, [r0, #28]
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	b976      	cbnz	r6, 800b814 <_Bfree+0x28>
 800b7f6:	2010      	movs	r0, #16
 800b7f8:	f7ff ff04 	bl	800b604 <malloc>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	61e8      	str	r0, [r5, #28]
 800b800:	b920      	cbnz	r0, 800b80c <_Bfree+0x20>
 800b802:	4b09      	ldr	r3, [pc, #36]	; (800b828 <_Bfree+0x3c>)
 800b804:	4809      	ldr	r0, [pc, #36]	; (800b82c <_Bfree+0x40>)
 800b806:	218f      	movs	r1, #143	; 0x8f
 800b808:	f000 fdb2 	bl	800c370 <__assert_func>
 800b80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b810:	6006      	str	r6, [r0, #0]
 800b812:	60c6      	str	r6, [r0, #12]
 800b814:	b13c      	cbz	r4, 800b826 <_Bfree+0x3a>
 800b816:	69eb      	ldr	r3, [r5, #28]
 800b818:	6862      	ldr	r2, [r4, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b820:	6021      	str	r1, [r4, #0]
 800b822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b826:	bd70      	pop	{r4, r5, r6, pc}
 800b828:	0800de69 	.word	0x0800de69
 800b82c:	0800dee9 	.word	0x0800dee9

0800b830 <__multadd>:
 800b830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b834:	690d      	ldr	r5, [r1, #16]
 800b836:	4607      	mov	r7, r0
 800b838:	460c      	mov	r4, r1
 800b83a:	461e      	mov	r6, r3
 800b83c:	f101 0c14 	add.w	ip, r1, #20
 800b840:	2000      	movs	r0, #0
 800b842:	f8dc 3000 	ldr.w	r3, [ip]
 800b846:	b299      	uxth	r1, r3
 800b848:	fb02 6101 	mla	r1, r2, r1, r6
 800b84c:	0c1e      	lsrs	r6, r3, #16
 800b84e:	0c0b      	lsrs	r3, r1, #16
 800b850:	fb02 3306 	mla	r3, r2, r6, r3
 800b854:	b289      	uxth	r1, r1
 800b856:	3001      	adds	r0, #1
 800b858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b85c:	4285      	cmp	r5, r0
 800b85e:	f84c 1b04 	str.w	r1, [ip], #4
 800b862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b866:	dcec      	bgt.n	800b842 <__multadd+0x12>
 800b868:	b30e      	cbz	r6, 800b8ae <__multadd+0x7e>
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	42ab      	cmp	r3, r5
 800b86e:	dc19      	bgt.n	800b8a4 <__multadd+0x74>
 800b870:	6861      	ldr	r1, [r4, #4]
 800b872:	4638      	mov	r0, r7
 800b874:	3101      	adds	r1, #1
 800b876:	f7ff ff79 	bl	800b76c <_Balloc>
 800b87a:	4680      	mov	r8, r0
 800b87c:	b928      	cbnz	r0, 800b88a <__multadd+0x5a>
 800b87e:	4602      	mov	r2, r0
 800b880:	4b0c      	ldr	r3, [pc, #48]	; (800b8b4 <__multadd+0x84>)
 800b882:	480d      	ldr	r0, [pc, #52]	; (800b8b8 <__multadd+0x88>)
 800b884:	21ba      	movs	r1, #186	; 0xba
 800b886:	f000 fd73 	bl	800c370 <__assert_func>
 800b88a:	6922      	ldr	r2, [r4, #16]
 800b88c:	3202      	adds	r2, #2
 800b88e:	f104 010c 	add.w	r1, r4, #12
 800b892:	0092      	lsls	r2, r2, #2
 800b894:	300c      	adds	r0, #12
 800b896:	f7fe ffdf 	bl	800a858 <memcpy>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4638      	mov	r0, r7
 800b89e:	f7ff ffa5 	bl	800b7ec <_Bfree>
 800b8a2:	4644      	mov	r4, r8
 800b8a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8a8:	3501      	adds	r5, #1
 800b8aa:	615e      	str	r6, [r3, #20]
 800b8ac:	6125      	str	r5, [r4, #16]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b4:	0800ded8 	.word	0x0800ded8
 800b8b8:	0800dee9 	.word	0x0800dee9

0800b8bc <__hi0bits>:
 800b8bc:	0c03      	lsrs	r3, r0, #16
 800b8be:	041b      	lsls	r3, r3, #16
 800b8c0:	b9d3      	cbnz	r3, 800b8f8 <__hi0bits+0x3c>
 800b8c2:	0400      	lsls	r0, r0, #16
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8ca:	bf04      	itt	eq
 800b8cc:	0200      	lsleq	r0, r0, #8
 800b8ce:	3308      	addeq	r3, #8
 800b8d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8d4:	bf04      	itt	eq
 800b8d6:	0100      	lsleq	r0, r0, #4
 800b8d8:	3304      	addeq	r3, #4
 800b8da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8de:	bf04      	itt	eq
 800b8e0:	0080      	lsleq	r0, r0, #2
 800b8e2:	3302      	addeq	r3, #2
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	db05      	blt.n	800b8f4 <__hi0bits+0x38>
 800b8e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8ec:	f103 0301 	add.w	r3, r3, #1
 800b8f0:	bf08      	it	eq
 800b8f2:	2320      	moveq	r3, #32
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	4770      	bx	lr
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e7e4      	b.n	800b8c6 <__hi0bits+0xa>

0800b8fc <__lo0bits>:
 800b8fc:	6803      	ldr	r3, [r0, #0]
 800b8fe:	f013 0207 	ands.w	r2, r3, #7
 800b902:	d00c      	beq.n	800b91e <__lo0bits+0x22>
 800b904:	07d9      	lsls	r1, r3, #31
 800b906:	d422      	bmi.n	800b94e <__lo0bits+0x52>
 800b908:	079a      	lsls	r2, r3, #30
 800b90a:	bf49      	itett	mi
 800b90c:	085b      	lsrmi	r3, r3, #1
 800b90e:	089b      	lsrpl	r3, r3, #2
 800b910:	6003      	strmi	r3, [r0, #0]
 800b912:	2201      	movmi	r2, #1
 800b914:	bf5c      	itt	pl
 800b916:	6003      	strpl	r3, [r0, #0]
 800b918:	2202      	movpl	r2, #2
 800b91a:	4610      	mov	r0, r2
 800b91c:	4770      	bx	lr
 800b91e:	b299      	uxth	r1, r3
 800b920:	b909      	cbnz	r1, 800b926 <__lo0bits+0x2a>
 800b922:	0c1b      	lsrs	r3, r3, #16
 800b924:	2210      	movs	r2, #16
 800b926:	b2d9      	uxtb	r1, r3
 800b928:	b909      	cbnz	r1, 800b92e <__lo0bits+0x32>
 800b92a:	3208      	adds	r2, #8
 800b92c:	0a1b      	lsrs	r3, r3, #8
 800b92e:	0719      	lsls	r1, r3, #28
 800b930:	bf04      	itt	eq
 800b932:	091b      	lsreq	r3, r3, #4
 800b934:	3204      	addeq	r2, #4
 800b936:	0799      	lsls	r1, r3, #30
 800b938:	bf04      	itt	eq
 800b93a:	089b      	lsreq	r3, r3, #2
 800b93c:	3202      	addeq	r2, #2
 800b93e:	07d9      	lsls	r1, r3, #31
 800b940:	d403      	bmi.n	800b94a <__lo0bits+0x4e>
 800b942:	085b      	lsrs	r3, r3, #1
 800b944:	f102 0201 	add.w	r2, r2, #1
 800b948:	d003      	beq.n	800b952 <__lo0bits+0x56>
 800b94a:	6003      	str	r3, [r0, #0]
 800b94c:	e7e5      	b.n	800b91a <__lo0bits+0x1e>
 800b94e:	2200      	movs	r2, #0
 800b950:	e7e3      	b.n	800b91a <__lo0bits+0x1e>
 800b952:	2220      	movs	r2, #32
 800b954:	e7e1      	b.n	800b91a <__lo0bits+0x1e>
	...

0800b958 <__i2b>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	460c      	mov	r4, r1
 800b95c:	2101      	movs	r1, #1
 800b95e:	f7ff ff05 	bl	800b76c <_Balloc>
 800b962:	4602      	mov	r2, r0
 800b964:	b928      	cbnz	r0, 800b972 <__i2b+0x1a>
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <__i2b+0x24>)
 800b968:	4805      	ldr	r0, [pc, #20]	; (800b980 <__i2b+0x28>)
 800b96a:	f240 1145 	movw	r1, #325	; 0x145
 800b96e:	f000 fcff 	bl	800c370 <__assert_func>
 800b972:	2301      	movs	r3, #1
 800b974:	6144      	str	r4, [r0, #20]
 800b976:	6103      	str	r3, [r0, #16]
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	bf00      	nop
 800b97c:	0800ded8 	.word	0x0800ded8
 800b980:	0800dee9 	.word	0x0800dee9

0800b984 <__multiply>:
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	4691      	mov	r9, r2
 800b98a:	690a      	ldr	r2, [r1, #16]
 800b98c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b990:	429a      	cmp	r2, r3
 800b992:	bfb8      	it	lt
 800b994:	460b      	movlt	r3, r1
 800b996:	460c      	mov	r4, r1
 800b998:	bfbc      	itt	lt
 800b99a:	464c      	movlt	r4, r9
 800b99c:	4699      	movlt	r9, r3
 800b99e:	6927      	ldr	r7, [r4, #16]
 800b9a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9a4:	68a3      	ldr	r3, [r4, #8]
 800b9a6:	6861      	ldr	r1, [r4, #4]
 800b9a8:	eb07 060a 	add.w	r6, r7, sl
 800b9ac:	42b3      	cmp	r3, r6
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	bfb8      	it	lt
 800b9b2:	3101      	addlt	r1, #1
 800b9b4:	f7ff feda 	bl	800b76c <_Balloc>
 800b9b8:	b930      	cbnz	r0, 800b9c8 <__multiply+0x44>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	4b44      	ldr	r3, [pc, #272]	; (800bad0 <__multiply+0x14c>)
 800b9be:	4845      	ldr	r0, [pc, #276]	; (800bad4 <__multiply+0x150>)
 800b9c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b9c4:	f000 fcd4 	bl	800c370 <__assert_func>
 800b9c8:	f100 0514 	add.w	r5, r0, #20
 800b9cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	4543      	cmp	r3, r8
 800b9d6:	d321      	bcc.n	800ba1c <__multiply+0x98>
 800b9d8:	f104 0314 	add.w	r3, r4, #20
 800b9dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9e0:	f109 0314 	add.w	r3, r9, #20
 800b9e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9e8:	9202      	str	r2, [sp, #8]
 800b9ea:	1b3a      	subs	r2, r7, r4
 800b9ec:	3a15      	subs	r2, #21
 800b9ee:	f022 0203 	bic.w	r2, r2, #3
 800b9f2:	3204      	adds	r2, #4
 800b9f4:	f104 0115 	add.w	r1, r4, #21
 800b9f8:	428f      	cmp	r7, r1
 800b9fa:	bf38      	it	cc
 800b9fc:	2204      	movcc	r2, #4
 800b9fe:	9201      	str	r2, [sp, #4]
 800ba00:	9a02      	ldr	r2, [sp, #8]
 800ba02:	9303      	str	r3, [sp, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d80c      	bhi.n	800ba22 <__multiply+0x9e>
 800ba08:	2e00      	cmp	r6, #0
 800ba0a:	dd03      	ble.n	800ba14 <__multiply+0x90>
 800ba0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d05b      	beq.n	800bacc <__multiply+0x148>
 800ba14:	6106      	str	r6, [r0, #16]
 800ba16:	b005      	add	sp, #20
 800ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1c:	f843 2b04 	str.w	r2, [r3], #4
 800ba20:	e7d8      	b.n	800b9d4 <__multiply+0x50>
 800ba22:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba26:	f1ba 0f00 	cmp.w	sl, #0
 800ba2a:	d024      	beq.n	800ba76 <__multiply+0xf2>
 800ba2c:	f104 0e14 	add.w	lr, r4, #20
 800ba30:	46a9      	mov	r9, r5
 800ba32:	f04f 0c00 	mov.w	ip, #0
 800ba36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba3a:	f8d9 1000 	ldr.w	r1, [r9]
 800ba3e:	fa1f fb82 	uxth.w	fp, r2
 800ba42:	b289      	uxth	r1, r1
 800ba44:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba4c:	f8d9 2000 	ldr.w	r2, [r9]
 800ba50:	4461      	add	r1, ip
 800ba52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba56:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba5e:	b289      	uxth	r1, r1
 800ba60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba64:	4577      	cmp	r7, lr
 800ba66:	f849 1b04 	str.w	r1, [r9], #4
 800ba6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba6e:	d8e2      	bhi.n	800ba36 <__multiply+0xb2>
 800ba70:	9a01      	ldr	r2, [sp, #4]
 800ba72:	f845 c002 	str.w	ip, [r5, r2]
 800ba76:	9a03      	ldr	r2, [sp, #12]
 800ba78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	f1b9 0f00 	cmp.w	r9, #0
 800ba82:	d021      	beq.n	800bac8 <__multiply+0x144>
 800ba84:	6829      	ldr	r1, [r5, #0]
 800ba86:	f104 0c14 	add.w	ip, r4, #20
 800ba8a:	46ae      	mov	lr, r5
 800ba8c:	f04f 0a00 	mov.w	sl, #0
 800ba90:	f8bc b000 	ldrh.w	fp, [ip]
 800ba94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba98:	fb09 220b 	mla	r2, r9, fp, r2
 800ba9c:	4452      	add	r2, sl
 800ba9e:	b289      	uxth	r1, r1
 800baa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800baa4:	f84e 1b04 	str.w	r1, [lr], #4
 800baa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800baac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bab0:	f8be 1000 	ldrh.w	r1, [lr]
 800bab4:	fb09 110a 	mla	r1, r9, sl, r1
 800bab8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800babc:	4567      	cmp	r7, ip
 800babe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bac2:	d8e5      	bhi.n	800ba90 <__multiply+0x10c>
 800bac4:	9a01      	ldr	r2, [sp, #4]
 800bac6:	50a9      	str	r1, [r5, r2]
 800bac8:	3504      	adds	r5, #4
 800baca:	e799      	b.n	800ba00 <__multiply+0x7c>
 800bacc:	3e01      	subs	r6, #1
 800bace:	e79b      	b.n	800ba08 <__multiply+0x84>
 800bad0:	0800ded8 	.word	0x0800ded8
 800bad4:	0800dee9 	.word	0x0800dee9

0800bad8 <__pow5mult>:
 800bad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800badc:	4615      	mov	r5, r2
 800bade:	f012 0203 	ands.w	r2, r2, #3
 800bae2:	4606      	mov	r6, r0
 800bae4:	460f      	mov	r7, r1
 800bae6:	d007      	beq.n	800baf8 <__pow5mult+0x20>
 800bae8:	4c25      	ldr	r4, [pc, #148]	; (800bb80 <__pow5mult+0xa8>)
 800baea:	3a01      	subs	r2, #1
 800baec:	2300      	movs	r3, #0
 800baee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baf2:	f7ff fe9d 	bl	800b830 <__multadd>
 800baf6:	4607      	mov	r7, r0
 800baf8:	10ad      	asrs	r5, r5, #2
 800bafa:	d03d      	beq.n	800bb78 <__pow5mult+0xa0>
 800bafc:	69f4      	ldr	r4, [r6, #28]
 800bafe:	b97c      	cbnz	r4, 800bb20 <__pow5mult+0x48>
 800bb00:	2010      	movs	r0, #16
 800bb02:	f7ff fd7f 	bl	800b604 <malloc>
 800bb06:	4602      	mov	r2, r0
 800bb08:	61f0      	str	r0, [r6, #28]
 800bb0a:	b928      	cbnz	r0, 800bb18 <__pow5mult+0x40>
 800bb0c:	4b1d      	ldr	r3, [pc, #116]	; (800bb84 <__pow5mult+0xac>)
 800bb0e:	481e      	ldr	r0, [pc, #120]	; (800bb88 <__pow5mult+0xb0>)
 800bb10:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bb14:	f000 fc2c 	bl	800c370 <__assert_func>
 800bb18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb1c:	6004      	str	r4, [r0, #0]
 800bb1e:	60c4      	str	r4, [r0, #12]
 800bb20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bb24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb28:	b94c      	cbnz	r4, 800bb3e <__pow5mult+0x66>
 800bb2a:	f240 2171 	movw	r1, #625	; 0x271
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f7ff ff12 	bl	800b958 <__i2b>
 800bb34:	2300      	movs	r3, #0
 800bb36:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	f04f 0900 	mov.w	r9, #0
 800bb42:	07eb      	lsls	r3, r5, #31
 800bb44:	d50a      	bpl.n	800bb5c <__pow5mult+0x84>
 800bb46:	4639      	mov	r1, r7
 800bb48:	4622      	mov	r2, r4
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7ff ff1a 	bl	800b984 <__multiply>
 800bb50:	4639      	mov	r1, r7
 800bb52:	4680      	mov	r8, r0
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff fe49 	bl	800b7ec <_Bfree>
 800bb5a:	4647      	mov	r7, r8
 800bb5c:	106d      	asrs	r5, r5, #1
 800bb5e:	d00b      	beq.n	800bb78 <__pow5mult+0xa0>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	b938      	cbnz	r0, 800bb74 <__pow5mult+0x9c>
 800bb64:	4622      	mov	r2, r4
 800bb66:	4621      	mov	r1, r4
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff ff0b 	bl	800b984 <__multiply>
 800bb6e:	6020      	str	r0, [r4, #0]
 800bb70:	f8c0 9000 	str.w	r9, [r0]
 800bb74:	4604      	mov	r4, r0
 800bb76:	e7e4      	b.n	800bb42 <__pow5mult+0x6a>
 800bb78:	4638      	mov	r0, r7
 800bb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7e:	bf00      	nop
 800bb80:	0800e038 	.word	0x0800e038
 800bb84:	0800de69 	.word	0x0800de69
 800bb88:	0800dee9 	.word	0x0800dee9

0800bb8c <__lshift>:
 800bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb90:	460c      	mov	r4, r1
 800bb92:	6849      	ldr	r1, [r1, #4]
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb9a:	68a3      	ldr	r3, [r4, #8]
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	4691      	mov	r9, r2
 800bba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bba4:	f108 0601 	add.w	r6, r8, #1
 800bba8:	42b3      	cmp	r3, r6
 800bbaa:	db0b      	blt.n	800bbc4 <__lshift+0x38>
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7ff fddd 	bl	800b76c <_Balloc>
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	b948      	cbnz	r0, 800bbca <__lshift+0x3e>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	4b28      	ldr	r3, [pc, #160]	; (800bc5c <__lshift+0xd0>)
 800bbba:	4829      	ldr	r0, [pc, #164]	; (800bc60 <__lshift+0xd4>)
 800bbbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bbc0:	f000 fbd6 	bl	800c370 <__assert_func>
 800bbc4:	3101      	adds	r1, #1
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	e7ee      	b.n	800bba8 <__lshift+0x1c>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f100 0114 	add.w	r1, r0, #20
 800bbd0:	f100 0210 	add.w	r2, r0, #16
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	4553      	cmp	r3, sl
 800bbd8:	db33      	blt.n	800bc42 <__lshift+0xb6>
 800bbda:	6920      	ldr	r0, [r4, #16]
 800bbdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbe0:	f104 0314 	add.w	r3, r4, #20
 800bbe4:	f019 091f 	ands.w	r9, r9, #31
 800bbe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbf0:	d02b      	beq.n	800bc4a <__lshift+0xbe>
 800bbf2:	f1c9 0e20 	rsb	lr, r9, #32
 800bbf6:	468a      	mov	sl, r1
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	fa00 f009 	lsl.w	r0, r0, r9
 800bc00:	4310      	orrs	r0, r2
 800bc02:	f84a 0b04 	str.w	r0, [sl], #4
 800bc06:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc0a:	459c      	cmp	ip, r3
 800bc0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc10:	d8f3      	bhi.n	800bbfa <__lshift+0x6e>
 800bc12:	ebac 0304 	sub.w	r3, ip, r4
 800bc16:	3b15      	subs	r3, #21
 800bc18:	f023 0303 	bic.w	r3, r3, #3
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	f104 0015 	add.w	r0, r4, #21
 800bc22:	4584      	cmp	ip, r0
 800bc24:	bf38      	it	cc
 800bc26:	2304      	movcc	r3, #4
 800bc28:	50ca      	str	r2, [r1, r3]
 800bc2a:	b10a      	cbz	r2, 800bc30 <__lshift+0xa4>
 800bc2c:	f108 0602 	add.w	r6, r8, #2
 800bc30:	3e01      	subs	r6, #1
 800bc32:	4638      	mov	r0, r7
 800bc34:	612e      	str	r6, [r5, #16]
 800bc36:	4621      	mov	r1, r4
 800bc38:	f7ff fdd8 	bl	800b7ec <_Bfree>
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc42:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc46:	3301      	adds	r3, #1
 800bc48:	e7c5      	b.n	800bbd6 <__lshift+0x4a>
 800bc4a:	3904      	subs	r1, #4
 800bc4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc50:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc54:	459c      	cmp	ip, r3
 800bc56:	d8f9      	bhi.n	800bc4c <__lshift+0xc0>
 800bc58:	e7ea      	b.n	800bc30 <__lshift+0xa4>
 800bc5a:	bf00      	nop
 800bc5c:	0800ded8 	.word	0x0800ded8
 800bc60:	0800dee9 	.word	0x0800dee9

0800bc64 <__mcmp>:
 800bc64:	b530      	push	{r4, r5, lr}
 800bc66:	6902      	ldr	r2, [r0, #16]
 800bc68:	690c      	ldr	r4, [r1, #16]
 800bc6a:	1b12      	subs	r2, r2, r4
 800bc6c:	d10e      	bne.n	800bc8c <__mcmp+0x28>
 800bc6e:	f100 0314 	add.w	r3, r0, #20
 800bc72:	3114      	adds	r1, #20
 800bc74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc84:	42a5      	cmp	r5, r4
 800bc86:	d003      	beq.n	800bc90 <__mcmp+0x2c>
 800bc88:	d305      	bcc.n	800bc96 <__mcmp+0x32>
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	bd30      	pop	{r4, r5, pc}
 800bc90:	4283      	cmp	r3, r0
 800bc92:	d3f3      	bcc.n	800bc7c <__mcmp+0x18>
 800bc94:	e7fa      	b.n	800bc8c <__mcmp+0x28>
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9a:	e7f7      	b.n	800bc8c <__mcmp+0x28>

0800bc9c <__mdiff>:
 800bc9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	460c      	mov	r4, r1
 800bca2:	4606      	mov	r6, r0
 800bca4:	4611      	mov	r1, r2
 800bca6:	4620      	mov	r0, r4
 800bca8:	4690      	mov	r8, r2
 800bcaa:	f7ff ffdb 	bl	800bc64 <__mcmp>
 800bcae:	1e05      	subs	r5, r0, #0
 800bcb0:	d110      	bne.n	800bcd4 <__mdiff+0x38>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff fd59 	bl	800b76c <_Balloc>
 800bcba:	b930      	cbnz	r0, 800bcca <__mdiff+0x2e>
 800bcbc:	4b3a      	ldr	r3, [pc, #232]	; (800bda8 <__mdiff+0x10c>)
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	f240 2137 	movw	r1, #567	; 0x237
 800bcc4:	4839      	ldr	r0, [pc, #228]	; (800bdac <__mdiff+0x110>)
 800bcc6:	f000 fb53 	bl	800c370 <__assert_func>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd4:	bfa4      	itt	ge
 800bcd6:	4643      	movge	r3, r8
 800bcd8:	46a0      	movge	r8, r4
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bce0:	bfa6      	itte	ge
 800bce2:	461c      	movge	r4, r3
 800bce4:	2500      	movge	r5, #0
 800bce6:	2501      	movlt	r5, #1
 800bce8:	f7ff fd40 	bl	800b76c <_Balloc>
 800bcec:	b920      	cbnz	r0, 800bcf8 <__mdiff+0x5c>
 800bcee:	4b2e      	ldr	r3, [pc, #184]	; (800bda8 <__mdiff+0x10c>)
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	f240 2145 	movw	r1, #581	; 0x245
 800bcf6:	e7e5      	b.n	800bcc4 <__mdiff+0x28>
 800bcf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bcfc:	6926      	ldr	r6, [r4, #16]
 800bcfe:	60c5      	str	r5, [r0, #12]
 800bd00:	f104 0914 	add.w	r9, r4, #20
 800bd04:	f108 0514 	add.w	r5, r8, #20
 800bd08:	f100 0e14 	add.w	lr, r0, #20
 800bd0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd14:	f108 0210 	add.w	r2, r8, #16
 800bd18:	46f2      	mov	sl, lr
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd24:	fa11 f88b 	uxtah	r8, r1, fp
 800bd28:	b299      	uxth	r1, r3
 800bd2a:	0c1b      	lsrs	r3, r3, #16
 800bd2c:	eba8 0801 	sub.w	r8, r8, r1
 800bd30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd38:	fa1f f888 	uxth.w	r8, r8
 800bd3c:	1419      	asrs	r1, r3, #16
 800bd3e:	454e      	cmp	r6, r9
 800bd40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd44:	f84a 3b04 	str.w	r3, [sl], #4
 800bd48:	d8e8      	bhi.n	800bd1c <__mdiff+0x80>
 800bd4a:	1b33      	subs	r3, r6, r4
 800bd4c:	3b15      	subs	r3, #21
 800bd4e:	f023 0303 	bic.w	r3, r3, #3
 800bd52:	3304      	adds	r3, #4
 800bd54:	3415      	adds	r4, #21
 800bd56:	42a6      	cmp	r6, r4
 800bd58:	bf38      	it	cc
 800bd5a:	2304      	movcc	r3, #4
 800bd5c:	441d      	add	r5, r3
 800bd5e:	4473      	add	r3, lr
 800bd60:	469e      	mov	lr, r3
 800bd62:	462e      	mov	r6, r5
 800bd64:	4566      	cmp	r6, ip
 800bd66:	d30e      	bcc.n	800bd86 <__mdiff+0xea>
 800bd68:	f10c 0203 	add.w	r2, ip, #3
 800bd6c:	1b52      	subs	r2, r2, r5
 800bd6e:	f022 0203 	bic.w	r2, r2, #3
 800bd72:	3d03      	subs	r5, #3
 800bd74:	45ac      	cmp	ip, r5
 800bd76:	bf38      	it	cc
 800bd78:	2200      	movcc	r2, #0
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd80:	b17a      	cbz	r2, 800bda2 <__mdiff+0x106>
 800bd82:	6107      	str	r7, [r0, #16]
 800bd84:	e7a4      	b.n	800bcd0 <__mdiff+0x34>
 800bd86:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd8a:	fa11 f288 	uxtah	r2, r1, r8
 800bd8e:	1414      	asrs	r4, r2, #16
 800bd90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd94:	b292      	uxth	r2, r2
 800bd96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd9a:	f84e 2b04 	str.w	r2, [lr], #4
 800bd9e:	1421      	asrs	r1, r4, #16
 800bda0:	e7e0      	b.n	800bd64 <__mdiff+0xc8>
 800bda2:	3f01      	subs	r7, #1
 800bda4:	e7ea      	b.n	800bd7c <__mdiff+0xe0>
 800bda6:	bf00      	nop
 800bda8:	0800ded8 	.word	0x0800ded8
 800bdac:	0800dee9 	.word	0x0800dee9

0800bdb0 <__d2b>:
 800bdb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	ec59 8b10 	vmov	r8, r9, d0
 800bdbc:	4616      	mov	r6, r2
 800bdbe:	f7ff fcd5 	bl	800b76c <_Balloc>
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	b930      	cbnz	r0, 800bdd4 <__d2b+0x24>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	4b24      	ldr	r3, [pc, #144]	; (800be5c <__d2b+0xac>)
 800bdca:	4825      	ldr	r0, [pc, #148]	; (800be60 <__d2b+0xb0>)
 800bdcc:	f240 310f 	movw	r1, #783	; 0x30f
 800bdd0:	f000 face 	bl	800c370 <__assert_func>
 800bdd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bddc:	bb2d      	cbnz	r5, 800be2a <__d2b+0x7a>
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	f1b8 0300 	subs.w	r3, r8, #0
 800bde4:	d026      	beq.n	800be34 <__d2b+0x84>
 800bde6:	4668      	mov	r0, sp
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	f7ff fd87 	bl	800b8fc <__lo0bits>
 800bdee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdf2:	b1e8      	cbz	r0, 800be30 <__d2b+0x80>
 800bdf4:	f1c0 0320 	rsb	r3, r0, #32
 800bdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfc:	430b      	orrs	r3, r1
 800bdfe:	40c2      	lsrs	r2, r0
 800be00:	6163      	str	r3, [r4, #20]
 800be02:	9201      	str	r2, [sp, #4]
 800be04:	9b01      	ldr	r3, [sp, #4]
 800be06:	61a3      	str	r3, [r4, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bf14      	ite	ne
 800be0c:	2202      	movne	r2, #2
 800be0e:	2201      	moveq	r2, #1
 800be10:	6122      	str	r2, [r4, #16]
 800be12:	b1bd      	cbz	r5, 800be44 <__d2b+0x94>
 800be14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be18:	4405      	add	r5, r0
 800be1a:	603d      	str	r5, [r7, #0]
 800be1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be20:	6030      	str	r0, [r6, #0]
 800be22:	4620      	mov	r0, r4
 800be24:	b003      	add	sp, #12
 800be26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be2e:	e7d6      	b.n	800bdde <__d2b+0x2e>
 800be30:	6161      	str	r1, [r4, #20]
 800be32:	e7e7      	b.n	800be04 <__d2b+0x54>
 800be34:	a801      	add	r0, sp, #4
 800be36:	f7ff fd61 	bl	800b8fc <__lo0bits>
 800be3a:	9b01      	ldr	r3, [sp, #4]
 800be3c:	6163      	str	r3, [r4, #20]
 800be3e:	3020      	adds	r0, #32
 800be40:	2201      	movs	r2, #1
 800be42:	e7e5      	b.n	800be10 <__d2b+0x60>
 800be44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be4c:	6038      	str	r0, [r7, #0]
 800be4e:	6918      	ldr	r0, [r3, #16]
 800be50:	f7ff fd34 	bl	800b8bc <__hi0bits>
 800be54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be58:	e7e2      	b.n	800be20 <__d2b+0x70>
 800be5a:	bf00      	nop
 800be5c:	0800ded8 	.word	0x0800ded8
 800be60:	0800dee9 	.word	0x0800dee9

0800be64 <__sfputc_r>:
 800be64:	6893      	ldr	r3, [r2, #8]
 800be66:	3b01      	subs	r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	b410      	push	{r4}
 800be6c:	6093      	str	r3, [r2, #8]
 800be6e:	da08      	bge.n	800be82 <__sfputc_r+0x1e>
 800be70:	6994      	ldr	r4, [r2, #24]
 800be72:	42a3      	cmp	r3, r4
 800be74:	db01      	blt.n	800be7a <__sfputc_r+0x16>
 800be76:	290a      	cmp	r1, #10
 800be78:	d103      	bne.n	800be82 <__sfputc_r+0x1e>
 800be7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be7e:	f7fe bbd8 	b.w	800a632 <__swbuf_r>
 800be82:	6813      	ldr	r3, [r2, #0]
 800be84:	1c58      	adds	r0, r3, #1
 800be86:	6010      	str	r0, [r2, #0]
 800be88:	7019      	strb	r1, [r3, #0]
 800be8a:	4608      	mov	r0, r1
 800be8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <__sfputs_r>:
 800be92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be94:	4606      	mov	r6, r0
 800be96:	460f      	mov	r7, r1
 800be98:	4614      	mov	r4, r2
 800be9a:	18d5      	adds	r5, r2, r3
 800be9c:	42ac      	cmp	r4, r5
 800be9e:	d101      	bne.n	800bea4 <__sfputs_r+0x12>
 800bea0:	2000      	movs	r0, #0
 800bea2:	e007      	b.n	800beb4 <__sfputs_r+0x22>
 800bea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bea8:	463a      	mov	r2, r7
 800beaa:	4630      	mov	r0, r6
 800beac:	f7ff ffda 	bl	800be64 <__sfputc_r>
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	d1f3      	bne.n	800be9c <__sfputs_r+0xa>
 800beb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800beb8 <_vfiprintf_r>:
 800beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebc:	460d      	mov	r5, r1
 800bebe:	b09d      	sub	sp, #116	; 0x74
 800bec0:	4614      	mov	r4, r2
 800bec2:	4698      	mov	r8, r3
 800bec4:	4606      	mov	r6, r0
 800bec6:	b118      	cbz	r0, 800bed0 <_vfiprintf_r+0x18>
 800bec8:	6a03      	ldr	r3, [r0, #32]
 800beca:	b90b      	cbnz	r3, 800bed0 <_vfiprintf_r+0x18>
 800becc:	f7fe faca 	bl	800a464 <__sinit>
 800bed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bed2:	07d9      	lsls	r1, r3, #31
 800bed4:	d405      	bmi.n	800bee2 <_vfiprintf_r+0x2a>
 800bed6:	89ab      	ldrh	r3, [r5, #12]
 800bed8:	059a      	lsls	r2, r3, #22
 800beda:	d402      	bmi.n	800bee2 <_vfiprintf_r+0x2a>
 800bedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bede:	f7fe fcb9 	bl	800a854 <__retarget_lock_acquire_recursive>
 800bee2:	89ab      	ldrh	r3, [r5, #12]
 800bee4:	071b      	lsls	r3, r3, #28
 800bee6:	d501      	bpl.n	800beec <_vfiprintf_r+0x34>
 800bee8:	692b      	ldr	r3, [r5, #16]
 800beea:	b99b      	cbnz	r3, 800bf14 <_vfiprintf_r+0x5c>
 800beec:	4629      	mov	r1, r5
 800beee:	4630      	mov	r0, r6
 800bef0:	f7fe fbdc 	bl	800a6ac <__swsetup_r>
 800bef4:	b170      	cbz	r0, 800bf14 <_vfiprintf_r+0x5c>
 800bef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef8:	07dc      	lsls	r4, r3, #31
 800befa:	d504      	bpl.n	800bf06 <_vfiprintf_r+0x4e>
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	b01d      	add	sp, #116	; 0x74
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	0598      	lsls	r0, r3, #22
 800bf0a:	d4f7      	bmi.n	800befc <_vfiprintf_r+0x44>
 800bf0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0e:	f7fe fca2 	bl	800a856 <__retarget_lock_release_recursive>
 800bf12:	e7f3      	b.n	800befc <_vfiprintf_r+0x44>
 800bf14:	2300      	movs	r3, #0
 800bf16:	9309      	str	r3, [sp, #36]	; 0x24
 800bf18:	2320      	movs	r3, #32
 800bf1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf22:	2330      	movs	r3, #48	; 0x30
 800bf24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c0d8 <_vfiprintf_r+0x220>
 800bf28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf2c:	f04f 0901 	mov.w	r9, #1
 800bf30:	4623      	mov	r3, r4
 800bf32:	469a      	mov	sl, r3
 800bf34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf38:	b10a      	cbz	r2, 800bf3e <_vfiprintf_r+0x86>
 800bf3a:	2a25      	cmp	r2, #37	; 0x25
 800bf3c:	d1f9      	bne.n	800bf32 <_vfiprintf_r+0x7a>
 800bf3e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf42:	d00b      	beq.n	800bf5c <_vfiprintf_r+0xa4>
 800bf44:	465b      	mov	r3, fp
 800bf46:	4622      	mov	r2, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7ff ffa1 	bl	800be92 <__sfputs_r>
 800bf50:	3001      	adds	r0, #1
 800bf52:	f000 80a9 	beq.w	800c0a8 <_vfiprintf_r+0x1f0>
 800bf56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf58:	445a      	add	r2, fp
 800bf5a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 80a1 	beq.w	800c0a8 <_vfiprintf_r+0x1f0>
 800bf66:	2300      	movs	r3, #0
 800bf68:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf70:	f10a 0a01 	add.w	sl, sl, #1
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	9307      	str	r3, [sp, #28]
 800bf78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf7e:	4654      	mov	r4, sl
 800bf80:	2205      	movs	r2, #5
 800bf82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf86:	4854      	ldr	r0, [pc, #336]	; (800c0d8 <_vfiprintf_r+0x220>)
 800bf88:	f7f4 f932 	bl	80001f0 <memchr>
 800bf8c:	9a04      	ldr	r2, [sp, #16]
 800bf8e:	b9d8      	cbnz	r0, 800bfc8 <_vfiprintf_r+0x110>
 800bf90:	06d1      	lsls	r1, r2, #27
 800bf92:	bf44      	itt	mi
 800bf94:	2320      	movmi	r3, #32
 800bf96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf9a:	0713      	lsls	r3, r2, #28
 800bf9c:	bf44      	itt	mi
 800bf9e:	232b      	movmi	r3, #43	; 0x2b
 800bfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfa4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfaa:	d015      	beq.n	800bfd8 <_vfiprintf_r+0x120>
 800bfac:	9a07      	ldr	r2, [sp, #28]
 800bfae:	4654      	mov	r4, sl
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	f04f 0c0a 	mov.w	ip, #10
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfbc:	3b30      	subs	r3, #48	; 0x30
 800bfbe:	2b09      	cmp	r3, #9
 800bfc0:	d94d      	bls.n	800c05e <_vfiprintf_r+0x1a6>
 800bfc2:	b1b0      	cbz	r0, 800bff2 <_vfiprintf_r+0x13a>
 800bfc4:	9207      	str	r2, [sp, #28]
 800bfc6:	e014      	b.n	800bff2 <_vfiprintf_r+0x13a>
 800bfc8:	eba0 0308 	sub.w	r3, r0, r8
 800bfcc:	fa09 f303 	lsl.w	r3, r9, r3
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	9304      	str	r3, [sp, #16]
 800bfd4:	46a2      	mov	sl, r4
 800bfd6:	e7d2      	b.n	800bf7e <_vfiprintf_r+0xc6>
 800bfd8:	9b03      	ldr	r3, [sp, #12]
 800bfda:	1d19      	adds	r1, r3, #4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	9103      	str	r1, [sp, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bfbb      	ittet	lt
 800bfe4:	425b      	neglt	r3, r3
 800bfe6:	f042 0202 	orrlt.w	r2, r2, #2
 800bfea:	9307      	strge	r3, [sp, #28]
 800bfec:	9307      	strlt	r3, [sp, #28]
 800bfee:	bfb8      	it	lt
 800bff0:	9204      	strlt	r2, [sp, #16]
 800bff2:	7823      	ldrb	r3, [r4, #0]
 800bff4:	2b2e      	cmp	r3, #46	; 0x2e
 800bff6:	d10c      	bne.n	800c012 <_vfiprintf_r+0x15a>
 800bff8:	7863      	ldrb	r3, [r4, #1]
 800bffa:	2b2a      	cmp	r3, #42	; 0x2a
 800bffc:	d134      	bne.n	800c068 <_vfiprintf_r+0x1b0>
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	1d1a      	adds	r2, r3, #4
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	9203      	str	r2, [sp, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	bfb8      	it	lt
 800c00a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c00e:	3402      	adds	r4, #2
 800c010:	9305      	str	r3, [sp, #20]
 800c012:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c0e8 <_vfiprintf_r+0x230>
 800c016:	7821      	ldrb	r1, [r4, #0]
 800c018:	2203      	movs	r2, #3
 800c01a:	4650      	mov	r0, sl
 800c01c:	f7f4 f8e8 	bl	80001f0 <memchr>
 800c020:	b138      	cbz	r0, 800c032 <_vfiprintf_r+0x17a>
 800c022:	9b04      	ldr	r3, [sp, #16]
 800c024:	eba0 000a 	sub.w	r0, r0, sl
 800c028:	2240      	movs	r2, #64	; 0x40
 800c02a:	4082      	lsls	r2, r0
 800c02c:	4313      	orrs	r3, r2
 800c02e:	3401      	adds	r4, #1
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c036:	4829      	ldr	r0, [pc, #164]	; (800c0dc <_vfiprintf_r+0x224>)
 800c038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c03c:	2206      	movs	r2, #6
 800c03e:	f7f4 f8d7 	bl	80001f0 <memchr>
 800c042:	2800      	cmp	r0, #0
 800c044:	d03f      	beq.n	800c0c6 <_vfiprintf_r+0x20e>
 800c046:	4b26      	ldr	r3, [pc, #152]	; (800c0e0 <_vfiprintf_r+0x228>)
 800c048:	bb1b      	cbnz	r3, 800c092 <_vfiprintf_r+0x1da>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	3307      	adds	r3, #7
 800c04e:	f023 0307 	bic.w	r3, r3, #7
 800c052:	3308      	adds	r3, #8
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c058:	443b      	add	r3, r7
 800c05a:	9309      	str	r3, [sp, #36]	; 0x24
 800c05c:	e768      	b.n	800bf30 <_vfiprintf_r+0x78>
 800c05e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c062:	460c      	mov	r4, r1
 800c064:	2001      	movs	r0, #1
 800c066:	e7a6      	b.n	800bfb6 <_vfiprintf_r+0xfe>
 800c068:	2300      	movs	r3, #0
 800c06a:	3401      	adds	r4, #1
 800c06c:	9305      	str	r3, [sp, #20]
 800c06e:	4619      	mov	r1, r3
 800c070:	f04f 0c0a 	mov.w	ip, #10
 800c074:	4620      	mov	r0, r4
 800c076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c07a:	3a30      	subs	r2, #48	; 0x30
 800c07c:	2a09      	cmp	r2, #9
 800c07e:	d903      	bls.n	800c088 <_vfiprintf_r+0x1d0>
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0c6      	beq.n	800c012 <_vfiprintf_r+0x15a>
 800c084:	9105      	str	r1, [sp, #20]
 800c086:	e7c4      	b.n	800c012 <_vfiprintf_r+0x15a>
 800c088:	fb0c 2101 	mla	r1, ip, r1, r2
 800c08c:	4604      	mov	r4, r0
 800c08e:	2301      	movs	r3, #1
 800c090:	e7f0      	b.n	800c074 <_vfiprintf_r+0x1bc>
 800c092:	ab03      	add	r3, sp, #12
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	462a      	mov	r2, r5
 800c098:	4b12      	ldr	r3, [pc, #72]	; (800c0e4 <_vfiprintf_r+0x22c>)
 800c09a:	a904      	add	r1, sp, #16
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7fd fda1 	bl	8009be4 <_printf_float>
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	1c78      	adds	r0, r7, #1
 800c0a6:	d1d6      	bne.n	800c056 <_vfiprintf_r+0x19e>
 800c0a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0aa:	07d9      	lsls	r1, r3, #31
 800c0ac:	d405      	bmi.n	800c0ba <_vfiprintf_r+0x202>
 800c0ae:	89ab      	ldrh	r3, [r5, #12]
 800c0b0:	059a      	lsls	r2, r3, #22
 800c0b2:	d402      	bmi.n	800c0ba <_vfiprintf_r+0x202>
 800c0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0b6:	f7fe fbce 	bl	800a856 <__retarget_lock_release_recursive>
 800c0ba:	89ab      	ldrh	r3, [r5, #12]
 800c0bc:	065b      	lsls	r3, r3, #25
 800c0be:	f53f af1d 	bmi.w	800befc <_vfiprintf_r+0x44>
 800c0c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0c4:	e71c      	b.n	800bf00 <_vfiprintf_r+0x48>
 800c0c6:	ab03      	add	r3, sp, #12
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <_vfiprintf_r+0x22c>)
 800c0ce:	a904      	add	r1, sp, #16
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f7fe f82b 	bl	800a12c <_printf_i>
 800c0d6:	e7e4      	b.n	800c0a2 <_vfiprintf_r+0x1ea>
 800c0d8:	0800e044 	.word	0x0800e044
 800c0dc:	0800e04e 	.word	0x0800e04e
 800c0e0:	08009be5 	.word	0x08009be5
 800c0e4:	0800be93 	.word	0x0800be93
 800c0e8:	0800e04a 	.word	0x0800e04a

0800c0ec <__sflush_r>:
 800c0ec:	898a      	ldrh	r2, [r1, #12]
 800c0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	0710      	lsls	r0, r2, #28
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	d458      	bmi.n	800c1ac <__sflush_r+0xc0>
 800c0fa:	684b      	ldr	r3, [r1, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	dc05      	bgt.n	800c10c <__sflush_r+0x20>
 800c100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c102:	2b00      	cmp	r3, #0
 800c104:	dc02      	bgt.n	800c10c <__sflush_r+0x20>
 800c106:	2000      	movs	r0, #0
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c10e:	2e00      	cmp	r6, #0
 800c110:	d0f9      	beq.n	800c106 <__sflush_r+0x1a>
 800c112:	2300      	movs	r3, #0
 800c114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c118:	682f      	ldr	r7, [r5, #0]
 800c11a:	6a21      	ldr	r1, [r4, #32]
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	d032      	beq.n	800c186 <__sflush_r+0x9a>
 800c120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	075a      	lsls	r2, r3, #29
 800c126:	d505      	bpl.n	800c134 <__sflush_r+0x48>
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	1ac0      	subs	r0, r0, r3
 800c12c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c12e:	b10b      	cbz	r3, 800c134 <__sflush_r+0x48>
 800c130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c132:	1ac0      	subs	r0, r0, r3
 800c134:	2300      	movs	r3, #0
 800c136:	4602      	mov	r2, r0
 800c138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c13a:	6a21      	ldr	r1, [r4, #32]
 800c13c:	4628      	mov	r0, r5
 800c13e:	47b0      	blx	r6
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	d106      	bne.n	800c154 <__sflush_r+0x68>
 800c146:	6829      	ldr	r1, [r5, #0]
 800c148:	291d      	cmp	r1, #29
 800c14a:	d82b      	bhi.n	800c1a4 <__sflush_r+0xb8>
 800c14c:	4a29      	ldr	r2, [pc, #164]	; (800c1f4 <__sflush_r+0x108>)
 800c14e:	410a      	asrs	r2, r1
 800c150:	07d6      	lsls	r6, r2, #31
 800c152:	d427      	bmi.n	800c1a4 <__sflush_r+0xb8>
 800c154:	2200      	movs	r2, #0
 800c156:	6062      	str	r2, [r4, #4]
 800c158:	04d9      	lsls	r1, r3, #19
 800c15a:	6922      	ldr	r2, [r4, #16]
 800c15c:	6022      	str	r2, [r4, #0]
 800c15e:	d504      	bpl.n	800c16a <__sflush_r+0x7e>
 800c160:	1c42      	adds	r2, r0, #1
 800c162:	d101      	bne.n	800c168 <__sflush_r+0x7c>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	b903      	cbnz	r3, 800c16a <__sflush_r+0x7e>
 800c168:	6560      	str	r0, [r4, #84]	; 0x54
 800c16a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c16c:	602f      	str	r7, [r5, #0]
 800c16e:	2900      	cmp	r1, #0
 800c170:	d0c9      	beq.n	800c106 <__sflush_r+0x1a>
 800c172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c176:	4299      	cmp	r1, r3
 800c178:	d002      	beq.n	800c180 <__sflush_r+0x94>
 800c17a:	4628      	mov	r0, r5
 800c17c:	f7ff f9f6 	bl	800b56c <_free_r>
 800c180:	2000      	movs	r0, #0
 800c182:	6360      	str	r0, [r4, #52]	; 0x34
 800c184:	e7c0      	b.n	800c108 <__sflush_r+0x1c>
 800c186:	2301      	movs	r3, #1
 800c188:	4628      	mov	r0, r5
 800c18a:	47b0      	blx	r6
 800c18c:	1c41      	adds	r1, r0, #1
 800c18e:	d1c8      	bne.n	800c122 <__sflush_r+0x36>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0c5      	beq.n	800c122 <__sflush_r+0x36>
 800c196:	2b1d      	cmp	r3, #29
 800c198:	d001      	beq.n	800c19e <__sflush_r+0xb2>
 800c19a:	2b16      	cmp	r3, #22
 800c19c:	d101      	bne.n	800c1a2 <__sflush_r+0xb6>
 800c19e:	602f      	str	r7, [r5, #0]
 800c1a0:	e7b1      	b.n	800c106 <__sflush_r+0x1a>
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	e7ad      	b.n	800c108 <__sflush_r+0x1c>
 800c1ac:	690f      	ldr	r7, [r1, #16]
 800c1ae:	2f00      	cmp	r7, #0
 800c1b0:	d0a9      	beq.n	800c106 <__sflush_r+0x1a>
 800c1b2:	0793      	lsls	r3, r2, #30
 800c1b4:	680e      	ldr	r6, [r1, #0]
 800c1b6:	bf08      	it	eq
 800c1b8:	694b      	ldreq	r3, [r1, #20]
 800c1ba:	600f      	str	r7, [r1, #0]
 800c1bc:	bf18      	it	ne
 800c1be:	2300      	movne	r3, #0
 800c1c0:	eba6 0807 	sub.w	r8, r6, r7
 800c1c4:	608b      	str	r3, [r1, #8]
 800c1c6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ca:	dd9c      	ble.n	800c106 <__sflush_r+0x1a>
 800c1cc:	6a21      	ldr	r1, [r4, #32]
 800c1ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1d0:	4643      	mov	r3, r8
 800c1d2:	463a      	mov	r2, r7
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b0      	blx	r6
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	dc06      	bgt.n	800c1ea <__sflush_r+0xfe>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1e2:	81a3      	strh	r3, [r4, #12]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	e78e      	b.n	800c108 <__sflush_r+0x1c>
 800c1ea:	4407      	add	r7, r0
 800c1ec:	eba8 0800 	sub.w	r8, r8, r0
 800c1f0:	e7e9      	b.n	800c1c6 <__sflush_r+0xda>
 800c1f2:	bf00      	nop
 800c1f4:	dfbffffe 	.word	0xdfbffffe

0800c1f8 <_fflush_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	690b      	ldr	r3, [r1, #16]
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	b913      	cbnz	r3, 800c208 <_fflush_r+0x10>
 800c202:	2500      	movs	r5, #0
 800c204:	4628      	mov	r0, r5
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	b118      	cbz	r0, 800c212 <_fflush_r+0x1a>
 800c20a:	6a03      	ldr	r3, [r0, #32]
 800c20c:	b90b      	cbnz	r3, 800c212 <_fflush_r+0x1a>
 800c20e:	f7fe f929 	bl	800a464 <__sinit>
 800c212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0f3      	beq.n	800c202 <_fflush_r+0xa>
 800c21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c21c:	07d0      	lsls	r0, r2, #31
 800c21e:	d404      	bmi.n	800c22a <_fflush_r+0x32>
 800c220:	0599      	lsls	r1, r3, #22
 800c222:	d402      	bmi.n	800c22a <_fflush_r+0x32>
 800c224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c226:	f7fe fb15 	bl	800a854 <__retarget_lock_acquire_recursive>
 800c22a:	4628      	mov	r0, r5
 800c22c:	4621      	mov	r1, r4
 800c22e:	f7ff ff5d 	bl	800c0ec <__sflush_r>
 800c232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c234:	07da      	lsls	r2, r3, #31
 800c236:	4605      	mov	r5, r0
 800c238:	d4e4      	bmi.n	800c204 <_fflush_r+0xc>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	059b      	lsls	r3, r3, #22
 800c23e:	d4e1      	bmi.n	800c204 <_fflush_r+0xc>
 800c240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c242:	f7fe fb08 	bl	800a856 <__retarget_lock_release_recursive>
 800c246:	e7dd      	b.n	800c204 <_fflush_r+0xc>

0800c248 <__swhatbuf_r>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	460c      	mov	r4, r1
 800c24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c250:	2900      	cmp	r1, #0
 800c252:	b096      	sub	sp, #88	; 0x58
 800c254:	4615      	mov	r5, r2
 800c256:	461e      	mov	r6, r3
 800c258:	da0d      	bge.n	800c276 <__swhatbuf_r+0x2e>
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c260:	f04f 0100 	mov.w	r1, #0
 800c264:	bf0c      	ite	eq
 800c266:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c26a:	2340      	movne	r3, #64	; 0x40
 800c26c:	2000      	movs	r0, #0
 800c26e:	6031      	str	r1, [r6, #0]
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	b016      	add	sp, #88	; 0x58
 800c274:	bd70      	pop	{r4, r5, r6, pc}
 800c276:	466a      	mov	r2, sp
 800c278:	f000 f848 	bl	800c30c <_fstat_r>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	dbec      	blt.n	800c25a <__swhatbuf_r+0x12>
 800c280:	9901      	ldr	r1, [sp, #4]
 800c282:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c286:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c28a:	4259      	negs	r1, r3
 800c28c:	4159      	adcs	r1, r3
 800c28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c292:	e7eb      	b.n	800c26c <__swhatbuf_r+0x24>

0800c294 <__smakebuf_r>:
 800c294:	898b      	ldrh	r3, [r1, #12]
 800c296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c298:	079d      	lsls	r5, r3, #30
 800c29a:	4606      	mov	r6, r0
 800c29c:	460c      	mov	r4, r1
 800c29e:	d507      	bpl.n	800c2b0 <__smakebuf_r+0x1c>
 800c2a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	6163      	str	r3, [r4, #20]
 800c2ac:	b002      	add	sp, #8
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	ab01      	add	r3, sp, #4
 800c2b2:	466a      	mov	r2, sp
 800c2b4:	f7ff ffc8 	bl	800c248 <__swhatbuf_r>
 800c2b8:	9900      	ldr	r1, [sp, #0]
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7ff f9c9 	bl	800b654 <_malloc_r>
 800c2c2:	b948      	cbnz	r0, 800c2d8 <__smakebuf_r+0x44>
 800c2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c8:	059a      	lsls	r2, r3, #22
 800c2ca:	d4ef      	bmi.n	800c2ac <__smakebuf_r+0x18>
 800c2cc:	f023 0303 	bic.w	r3, r3, #3
 800c2d0:	f043 0302 	orr.w	r3, r3, #2
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	e7e3      	b.n	800c2a0 <__smakebuf_r+0xc>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	6020      	str	r0, [r4, #0]
 800c2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e0:	81a3      	strh	r3, [r4, #12]
 800c2e2:	9b00      	ldr	r3, [sp, #0]
 800c2e4:	6163      	str	r3, [r4, #20]
 800c2e6:	9b01      	ldr	r3, [sp, #4]
 800c2e8:	6120      	str	r0, [r4, #16]
 800c2ea:	b15b      	cbz	r3, 800c304 <__smakebuf_r+0x70>
 800c2ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f000 f81d 	bl	800c330 <_isatty_r>
 800c2f6:	b128      	cbz	r0, 800c304 <__smakebuf_r+0x70>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	f023 0303 	bic.w	r3, r3, #3
 800c2fe:	f043 0301 	orr.w	r3, r3, #1
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	431d      	orrs	r5, r3
 800c308:	81a5      	strh	r5, [r4, #12]
 800c30a:	e7cf      	b.n	800c2ac <__smakebuf_r+0x18>

0800c30c <_fstat_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d07      	ldr	r5, [pc, #28]	; (800c32c <_fstat_r+0x20>)
 800c310:	2300      	movs	r3, #0
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	4611      	mov	r1, r2
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	f7f8 fb6c 	bl	80049f6 <_fstat>
 800c31e:	1c43      	adds	r3, r0, #1
 800c320:	d102      	bne.n	800c328 <_fstat_r+0x1c>
 800c322:	682b      	ldr	r3, [r5, #0]
 800c324:	b103      	cbz	r3, 800c328 <_fstat_r+0x1c>
 800c326:	6023      	str	r3, [r4, #0]
 800c328:	bd38      	pop	{r3, r4, r5, pc}
 800c32a:	bf00      	nop
 800c32c:	20001d7c 	.word	0x20001d7c

0800c330 <_isatty_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d06      	ldr	r5, [pc, #24]	; (800c34c <_isatty_r+0x1c>)
 800c334:	2300      	movs	r3, #0
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	602b      	str	r3, [r5, #0]
 800c33c:	f7f8 fb6b 	bl	8004a16 <_isatty>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_isatty_r+0x1a>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_isatty_r+0x1a>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	20001d7c 	.word	0x20001d7c

0800c350 <_sbrk_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d06      	ldr	r5, [pc, #24]	; (800c36c <_sbrk_r+0x1c>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	f7f8 fb74 	bl	8004a48 <_sbrk>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_sbrk_r+0x1a>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_sbrk_r+0x1a>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	20001d7c 	.word	0x20001d7c

0800c370 <__assert_func>:
 800c370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c372:	4614      	mov	r4, r2
 800c374:	461a      	mov	r2, r3
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <__assert_func+0x2c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4605      	mov	r5, r0
 800c37c:	68d8      	ldr	r0, [r3, #12]
 800c37e:	b14c      	cbz	r4, 800c394 <__assert_func+0x24>
 800c380:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <__assert_func+0x30>)
 800c382:	9100      	str	r1, [sp, #0]
 800c384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c388:	4906      	ldr	r1, [pc, #24]	; (800c3a4 <__assert_func+0x34>)
 800c38a:	462b      	mov	r3, r5
 800c38c:	f000 f844 	bl	800c418 <fiprintf>
 800c390:	f000 f854 	bl	800c43c <abort>
 800c394:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <__assert_func+0x38>)
 800c396:	461c      	mov	r4, r3
 800c398:	e7f3      	b.n	800c382 <__assert_func+0x12>
 800c39a:	bf00      	nop
 800c39c:	20000174 	.word	0x20000174
 800c3a0:	0800e05f 	.word	0x0800e05f
 800c3a4:	0800e06c 	.word	0x0800e06c
 800c3a8:	0800e09a 	.word	0x0800e09a

0800c3ac <_calloc_r>:
 800c3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ae:	fba1 2402 	umull	r2, r4, r1, r2
 800c3b2:	b94c      	cbnz	r4, 800c3c8 <_calloc_r+0x1c>
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	9201      	str	r2, [sp, #4]
 800c3b8:	f7ff f94c 	bl	800b654 <_malloc_r>
 800c3bc:	9a01      	ldr	r2, [sp, #4]
 800c3be:	4605      	mov	r5, r0
 800c3c0:	b930      	cbnz	r0, 800c3d0 <_calloc_r+0x24>
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	b003      	add	sp, #12
 800c3c6:	bd30      	pop	{r4, r5, pc}
 800c3c8:	220c      	movs	r2, #12
 800c3ca:	6002      	str	r2, [r0, #0]
 800c3cc:	2500      	movs	r5, #0
 800c3ce:	e7f8      	b.n	800c3c2 <_calloc_r+0x16>
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	f7fe f9c3 	bl	800a75c <memset>
 800c3d6:	e7f4      	b.n	800c3c2 <_calloc_r+0x16>

0800c3d8 <__ascii_mbtowc>:
 800c3d8:	b082      	sub	sp, #8
 800c3da:	b901      	cbnz	r1, 800c3de <__ascii_mbtowc+0x6>
 800c3dc:	a901      	add	r1, sp, #4
 800c3de:	b142      	cbz	r2, 800c3f2 <__ascii_mbtowc+0x1a>
 800c3e0:	b14b      	cbz	r3, 800c3f6 <__ascii_mbtowc+0x1e>
 800c3e2:	7813      	ldrb	r3, [r2, #0]
 800c3e4:	600b      	str	r3, [r1, #0]
 800c3e6:	7812      	ldrb	r2, [r2, #0]
 800c3e8:	1e10      	subs	r0, r2, #0
 800c3ea:	bf18      	it	ne
 800c3ec:	2001      	movne	r0, #1
 800c3ee:	b002      	add	sp, #8
 800c3f0:	4770      	bx	lr
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	e7fb      	b.n	800c3ee <__ascii_mbtowc+0x16>
 800c3f6:	f06f 0001 	mvn.w	r0, #1
 800c3fa:	e7f8      	b.n	800c3ee <__ascii_mbtowc+0x16>

0800c3fc <__ascii_wctomb>:
 800c3fc:	b149      	cbz	r1, 800c412 <__ascii_wctomb+0x16>
 800c3fe:	2aff      	cmp	r2, #255	; 0xff
 800c400:	bf85      	ittet	hi
 800c402:	238a      	movhi	r3, #138	; 0x8a
 800c404:	6003      	strhi	r3, [r0, #0]
 800c406:	700a      	strbls	r2, [r1, #0]
 800c408:	f04f 30ff 	movhi.w	r0, #4294967295
 800c40c:	bf98      	it	ls
 800c40e:	2001      	movls	r0, #1
 800c410:	4770      	bx	lr
 800c412:	4608      	mov	r0, r1
 800c414:	4770      	bx	lr
	...

0800c418 <fiprintf>:
 800c418:	b40e      	push	{r1, r2, r3}
 800c41a:	b503      	push	{r0, r1, lr}
 800c41c:	4601      	mov	r1, r0
 800c41e:	ab03      	add	r3, sp, #12
 800c420:	4805      	ldr	r0, [pc, #20]	; (800c438 <fiprintf+0x20>)
 800c422:	f853 2b04 	ldr.w	r2, [r3], #4
 800c426:	6800      	ldr	r0, [r0, #0]
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	f7ff fd45 	bl	800beb8 <_vfiprintf_r>
 800c42e:	b002      	add	sp, #8
 800c430:	f85d eb04 	ldr.w	lr, [sp], #4
 800c434:	b003      	add	sp, #12
 800c436:	4770      	bx	lr
 800c438:	20000174 	.word	0x20000174

0800c43c <abort>:
 800c43c:	b508      	push	{r3, lr}
 800c43e:	2006      	movs	r0, #6
 800c440:	f000 f82c 	bl	800c49c <raise>
 800c444:	2001      	movs	r0, #1
 800c446:	f7f8 fa87 	bl	8004958 <_exit>

0800c44a <_raise_r>:
 800c44a:	291f      	cmp	r1, #31
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4604      	mov	r4, r0
 800c450:	460d      	mov	r5, r1
 800c452:	d904      	bls.n	800c45e <_raise_r+0x14>
 800c454:	2316      	movs	r3, #22
 800c456:	6003      	str	r3, [r0, #0]
 800c458:	f04f 30ff 	mov.w	r0, #4294967295
 800c45c:	bd38      	pop	{r3, r4, r5, pc}
 800c45e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c460:	b112      	cbz	r2, 800c468 <_raise_r+0x1e>
 800c462:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c466:	b94b      	cbnz	r3, 800c47c <_raise_r+0x32>
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 f831 	bl	800c4d0 <_getpid_r>
 800c46e:	462a      	mov	r2, r5
 800c470:	4601      	mov	r1, r0
 800c472:	4620      	mov	r0, r4
 800c474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c478:	f000 b818 	b.w	800c4ac <_kill_r>
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d00a      	beq.n	800c496 <_raise_r+0x4c>
 800c480:	1c59      	adds	r1, r3, #1
 800c482:	d103      	bne.n	800c48c <_raise_r+0x42>
 800c484:	2316      	movs	r3, #22
 800c486:	6003      	str	r3, [r0, #0]
 800c488:	2001      	movs	r0, #1
 800c48a:	e7e7      	b.n	800c45c <_raise_r+0x12>
 800c48c:	2400      	movs	r4, #0
 800c48e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c492:	4628      	mov	r0, r5
 800c494:	4798      	blx	r3
 800c496:	2000      	movs	r0, #0
 800c498:	e7e0      	b.n	800c45c <_raise_r+0x12>
	...

0800c49c <raise>:
 800c49c:	4b02      	ldr	r3, [pc, #8]	; (800c4a8 <raise+0xc>)
 800c49e:	4601      	mov	r1, r0
 800c4a0:	6818      	ldr	r0, [r3, #0]
 800c4a2:	f7ff bfd2 	b.w	800c44a <_raise_r>
 800c4a6:	bf00      	nop
 800c4a8:	20000174 	.word	0x20000174

0800c4ac <_kill_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d07      	ldr	r5, [pc, #28]	; (800c4cc <_kill_r+0x20>)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	602b      	str	r3, [r5, #0]
 800c4ba:	f7f8 fa3d 	bl	8004938 <_kill>
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	d102      	bne.n	800c4c8 <_kill_r+0x1c>
 800c4c2:	682b      	ldr	r3, [r5, #0]
 800c4c4:	b103      	cbz	r3, 800c4c8 <_kill_r+0x1c>
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20001d7c 	.word	0x20001d7c

0800c4d0 <_getpid_r>:
 800c4d0:	f7f8 ba2a 	b.w	8004928 <_getpid>

0800c4d4 <pow>:
 800c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d6:	ed2d 8b02 	vpush	{d8}
 800c4da:	eeb0 8a40 	vmov.f32	s16, s0
 800c4de:	eef0 8a60 	vmov.f32	s17, s1
 800c4e2:	ec55 4b11 	vmov	r4, r5, d1
 800c4e6:	f000 f87b 	bl	800c5e0 <__ieee754_pow>
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	ec57 6b10 	vmov	r6, r7, d0
 800c4f6:	f7f4 fb29 	bl	8000b4c <__aeabi_dcmpun>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d13b      	bne.n	800c576 <pow+0xa2>
 800c4fe:	ec51 0b18 	vmov	r0, r1, d8
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	f7f4 faef 	bl	8000ae8 <__aeabi_dcmpeq>
 800c50a:	b1b8      	cbz	r0, 800c53c <pow+0x68>
 800c50c:	2200      	movs	r2, #0
 800c50e:	2300      	movs	r3, #0
 800c510:	4620      	mov	r0, r4
 800c512:	4629      	mov	r1, r5
 800c514:	f7f4 fae8 	bl	8000ae8 <__aeabi_dcmpeq>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d146      	bne.n	800c5aa <pow+0xd6>
 800c51c:	ec45 4b10 	vmov	d0, r4, r5
 800c520:	f000 f851 	bl	800c5c6 <finite>
 800c524:	b338      	cbz	r0, 800c576 <pow+0xa2>
 800c526:	2200      	movs	r2, #0
 800c528:	2300      	movs	r3, #0
 800c52a:	4620      	mov	r0, r4
 800c52c:	4629      	mov	r1, r5
 800c52e:	f7f4 fae5 	bl	8000afc <__aeabi_dcmplt>
 800c532:	b300      	cbz	r0, 800c576 <pow+0xa2>
 800c534:	f7fe f964 	bl	800a800 <__errno>
 800c538:	2322      	movs	r3, #34	; 0x22
 800c53a:	e01b      	b.n	800c574 <pow+0xa0>
 800c53c:	ec47 6b10 	vmov	d0, r6, r7
 800c540:	f000 f841 	bl	800c5c6 <finite>
 800c544:	b9e0      	cbnz	r0, 800c580 <pow+0xac>
 800c546:	eeb0 0a48 	vmov.f32	s0, s16
 800c54a:	eef0 0a68 	vmov.f32	s1, s17
 800c54e:	f000 f83a 	bl	800c5c6 <finite>
 800c552:	b1a8      	cbz	r0, 800c580 <pow+0xac>
 800c554:	ec45 4b10 	vmov	d0, r4, r5
 800c558:	f000 f835 	bl	800c5c6 <finite>
 800c55c:	b180      	cbz	r0, 800c580 <pow+0xac>
 800c55e:	4632      	mov	r2, r6
 800c560:	463b      	mov	r3, r7
 800c562:	4630      	mov	r0, r6
 800c564:	4639      	mov	r1, r7
 800c566:	f7f4 faf1 	bl	8000b4c <__aeabi_dcmpun>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d0e2      	beq.n	800c534 <pow+0x60>
 800c56e:	f7fe f947 	bl	800a800 <__errno>
 800c572:	2321      	movs	r3, #33	; 0x21
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	ecbd 8b02 	vpop	{d8}
 800c57a:	ec47 6b10 	vmov	d0, r6, r7
 800c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c580:	2200      	movs	r2, #0
 800c582:	2300      	movs	r3, #0
 800c584:	4630      	mov	r0, r6
 800c586:	4639      	mov	r1, r7
 800c588:	f7f4 faae 	bl	8000ae8 <__aeabi_dcmpeq>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d0f2      	beq.n	800c576 <pow+0xa2>
 800c590:	eeb0 0a48 	vmov.f32	s0, s16
 800c594:	eef0 0a68 	vmov.f32	s1, s17
 800c598:	f000 f815 	bl	800c5c6 <finite>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d0ea      	beq.n	800c576 <pow+0xa2>
 800c5a0:	ec45 4b10 	vmov	d0, r4, r5
 800c5a4:	f000 f80f 	bl	800c5c6 <finite>
 800c5a8:	e7c3      	b.n	800c532 <pow+0x5e>
 800c5aa:	4f01      	ldr	r7, [pc, #4]	; (800c5b0 <pow+0xdc>)
 800c5ac:	2600      	movs	r6, #0
 800c5ae:	e7e2      	b.n	800c576 <pow+0xa2>
 800c5b0:	3ff00000 	.word	0x3ff00000

0800c5b4 <fabs>:
 800c5b4:	ec51 0b10 	vmov	r0, r1, d0
 800c5b8:	ee10 2a10 	vmov	r2, s0
 800c5bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5c0:	ec43 2b10 	vmov	d0, r2, r3
 800c5c4:	4770      	bx	lr

0800c5c6 <finite>:
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	ed8d 0b00 	vstr	d0, [sp]
 800c5cc:	9801      	ldr	r0, [sp, #4]
 800c5ce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c5d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c5d6:	0fc0      	lsrs	r0, r0, #31
 800c5d8:	b002      	add	sp, #8
 800c5da:	4770      	bx	lr
 800c5dc:	0000      	movs	r0, r0
	...

0800c5e0 <__ieee754_pow>:
 800c5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	ed2d 8b06 	vpush	{d8-d10}
 800c5e8:	b089      	sub	sp, #36	; 0x24
 800c5ea:	ed8d 1b00 	vstr	d1, [sp]
 800c5ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c5f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c5f6:	ea58 0102 	orrs.w	r1, r8, r2
 800c5fa:	ec57 6b10 	vmov	r6, r7, d0
 800c5fe:	d115      	bne.n	800c62c <__ieee754_pow+0x4c>
 800c600:	19b3      	adds	r3, r6, r6
 800c602:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c606:	4152      	adcs	r2, r2
 800c608:	4299      	cmp	r1, r3
 800c60a:	4b89      	ldr	r3, [pc, #548]	; (800c830 <__ieee754_pow+0x250>)
 800c60c:	4193      	sbcs	r3, r2
 800c60e:	f080 84d1 	bcs.w	800cfb4 <__ieee754_pow+0x9d4>
 800c612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c616:	4630      	mov	r0, r6
 800c618:	4639      	mov	r1, r7
 800c61a:	f7f3 fe47 	bl	80002ac <__adddf3>
 800c61e:	ec41 0b10 	vmov	d0, r0, r1
 800c622:	b009      	add	sp, #36	; 0x24
 800c624:	ecbd 8b06 	vpop	{d8-d10}
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	4b81      	ldr	r3, [pc, #516]	; (800c834 <__ieee754_pow+0x254>)
 800c62e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c632:	429c      	cmp	r4, r3
 800c634:	ee10 aa10 	vmov	sl, s0
 800c638:	463d      	mov	r5, r7
 800c63a:	dc06      	bgt.n	800c64a <__ieee754_pow+0x6a>
 800c63c:	d101      	bne.n	800c642 <__ieee754_pow+0x62>
 800c63e:	2e00      	cmp	r6, #0
 800c640:	d1e7      	bne.n	800c612 <__ieee754_pow+0x32>
 800c642:	4598      	cmp	r8, r3
 800c644:	dc01      	bgt.n	800c64a <__ieee754_pow+0x6a>
 800c646:	d10f      	bne.n	800c668 <__ieee754_pow+0x88>
 800c648:	b172      	cbz	r2, 800c668 <__ieee754_pow+0x88>
 800c64a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c64e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c652:	ea55 050a 	orrs.w	r5, r5, sl
 800c656:	d1dc      	bne.n	800c612 <__ieee754_pow+0x32>
 800c658:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c65c:	18db      	adds	r3, r3, r3
 800c65e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c662:	4152      	adcs	r2, r2
 800c664:	429d      	cmp	r5, r3
 800c666:	e7d0      	b.n	800c60a <__ieee754_pow+0x2a>
 800c668:	2d00      	cmp	r5, #0
 800c66a:	da3b      	bge.n	800c6e4 <__ieee754_pow+0x104>
 800c66c:	4b72      	ldr	r3, [pc, #456]	; (800c838 <__ieee754_pow+0x258>)
 800c66e:	4598      	cmp	r8, r3
 800c670:	dc51      	bgt.n	800c716 <__ieee754_pow+0x136>
 800c672:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c676:	4598      	cmp	r8, r3
 800c678:	f340 84ab 	ble.w	800cfd2 <__ieee754_pow+0x9f2>
 800c67c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c680:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c684:	2b14      	cmp	r3, #20
 800c686:	dd0f      	ble.n	800c6a8 <__ieee754_pow+0xc8>
 800c688:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c68c:	fa22 f103 	lsr.w	r1, r2, r3
 800c690:	fa01 f303 	lsl.w	r3, r1, r3
 800c694:	4293      	cmp	r3, r2
 800c696:	f040 849c 	bne.w	800cfd2 <__ieee754_pow+0x9f2>
 800c69a:	f001 0101 	and.w	r1, r1, #1
 800c69e:	f1c1 0302 	rsb	r3, r1, #2
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	b182      	cbz	r2, 800c6c8 <__ieee754_pow+0xe8>
 800c6a6:	e05f      	b.n	800c768 <__ieee754_pow+0x188>
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	d15b      	bne.n	800c764 <__ieee754_pow+0x184>
 800c6ac:	f1c3 0314 	rsb	r3, r3, #20
 800c6b0:	fa48 f103 	asr.w	r1, r8, r3
 800c6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6b8:	4543      	cmp	r3, r8
 800c6ba:	f040 8487 	bne.w	800cfcc <__ieee754_pow+0x9ec>
 800c6be:	f001 0101 	and.w	r1, r1, #1
 800c6c2:	f1c1 0302 	rsb	r3, r1, #2
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	4b5c      	ldr	r3, [pc, #368]	; (800c83c <__ieee754_pow+0x25c>)
 800c6ca:	4598      	cmp	r8, r3
 800c6cc:	d132      	bne.n	800c734 <__ieee754_pow+0x154>
 800c6ce:	f1b9 0f00 	cmp.w	r9, #0
 800c6d2:	f280 8477 	bge.w	800cfc4 <__ieee754_pow+0x9e4>
 800c6d6:	4959      	ldr	r1, [pc, #356]	; (800c83c <__ieee754_pow+0x25c>)
 800c6d8:	4632      	mov	r2, r6
 800c6da:	463b      	mov	r3, r7
 800c6dc:	2000      	movs	r0, #0
 800c6de:	f7f4 f8c5 	bl	800086c <__aeabi_ddiv>
 800c6e2:	e79c      	b.n	800c61e <__ieee754_pow+0x3e>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9304      	str	r3, [sp, #16]
 800c6e8:	2a00      	cmp	r2, #0
 800c6ea:	d13d      	bne.n	800c768 <__ieee754_pow+0x188>
 800c6ec:	4b51      	ldr	r3, [pc, #324]	; (800c834 <__ieee754_pow+0x254>)
 800c6ee:	4598      	cmp	r8, r3
 800c6f0:	d1ea      	bne.n	800c6c8 <__ieee754_pow+0xe8>
 800c6f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c6f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c6fa:	ea53 030a 	orrs.w	r3, r3, sl
 800c6fe:	f000 8459 	beq.w	800cfb4 <__ieee754_pow+0x9d4>
 800c702:	4b4f      	ldr	r3, [pc, #316]	; (800c840 <__ieee754_pow+0x260>)
 800c704:	429c      	cmp	r4, r3
 800c706:	dd08      	ble.n	800c71a <__ieee754_pow+0x13a>
 800c708:	f1b9 0f00 	cmp.w	r9, #0
 800c70c:	f2c0 8456 	blt.w	800cfbc <__ieee754_pow+0x9dc>
 800c710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c714:	e783      	b.n	800c61e <__ieee754_pow+0x3e>
 800c716:	2302      	movs	r3, #2
 800c718:	e7e5      	b.n	800c6e6 <__ieee754_pow+0x106>
 800c71a:	f1b9 0f00 	cmp.w	r9, #0
 800c71e:	f04f 0000 	mov.w	r0, #0
 800c722:	f04f 0100 	mov.w	r1, #0
 800c726:	f6bf af7a 	bge.w	800c61e <__ieee754_pow+0x3e>
 800c72a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c72e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c732:	e774      	b.n	800c61e <__ieee754_pow+0x3e>
 800c734:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c738:	d106      	bne.n	800c748 <__ieee754_pow+0x168>
 800c73a:	4632      	mov	r2, r6
 800c73c:	463b      	mov	r3, r7
 800c73e:	4630      	mov	r0, r6
 800c740:	4639      	mov	r1, r7
 800c742:	f7f3 ff69 	bl	8000618 <__aeabi_dmul>
 800c746:	e76a      	b.n	800c61e <__ieee754_pow+0x3e>
 800c748:	4b3e      	ldr	r3, [pc, #248]	; (800c844 <__ieee754_pow+0x264>)
 800c74a:	4599      	cmp	r9, r3
 800c74c:	d10c      	bne.n	800c768 <__ieee754_pow+0x188>
 800c74e:	2d00      	cmp	r5, #0
 800c750:	db0a      	blt.n	800c768 <__ieee754_pow+0x188>
 800c752:	ec47 6b10 	vmov	d0, r6, r7
 800c756:	b009      	add	sp, #36	; 0x24
 800c758:	ecbd 8b06 	vpop	{d8-d10}
 800c75c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	f000 bd18 	b.w	800d194 <__ieee754_sqrt>
 800c764:	2300      	movs	r3, #0
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	ec47 6b10 	vmov	d0, r6, r7
 800c76c:	f7ff ff22 	bl	800c5b4 <fabs>
 800c770:	ec51 0b10 	vmov	r0, r1, d0
 800c774:	f1ba 0f00 	cmp.w	sl, #0
 800c778:	d129      	bne.n	800c7ce <__ieee754_pow+0x1ee>
 800c77a:	b124      	cbz	r4, 800c786 <__ieee754_pow+0x1a6>
 800c77c:	4b2f      	ldr	r3, [pc, #188]	; (800c83c <__ieee754_pow+0x25c>)
 800c77e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c782:	429a      	cmp	r2, r3
 800c784:	d123      	bne.n	800c7ce <__ieee754_pow+0x1ee>
 800c786:	f1b9 0f00 	cmp.w	r9, #0
 800c78a:	da05      	bge.n	800c798 <__ieee754_pow+0x1b8>
 800c78c:	4602      	mov	r2, r0
 800c78e:	460b      	mov	r3, r1
 800c790:	2000      	movs	r0, #0
 800c792:	492a      	ldr	r1, [pc, #168]	; (800c83c <__ieee754_pow+0x25c>)
 800c794:	f7f4 f86a 	bl	800086c <__aeabi_ddiv>
 800c798:	2d00      	cmp	r5, #0
 800c79a:	f6bf af40 	bge.w	800c61e <__ieee754_pow+0x3e>
 800c79e:	9b04      	ldr	r3, [sp, #16]
 800c7a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c7a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c7a8:	431c      	orrs	r4, r3
 800c7aa:	d108      	bne.n	800c7be <__ieee754_pow+0x1de>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	f7f3 fd78 	bl	80002a8 <__aeabi_dsub>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	e78f      	b.n	800c6de <__ieee754_pow+0xfe>
 800c7be:	9b04      	ldr	r3, [sp, #16]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	f47f af2c 	bne.w	800c61e <__ieee754_pow+0x3e>
 800c7c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	e727      	b.n	800c61e <__ieee754_pow+0x3e>
 800c7ce:	0feb      	lsrs	r3, r5, #31
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	9306      	str	r3, [sp, #24]
 800c7d4:	9a06      	ldr	r2, [sp, #24]
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	d102      	bne.n	800c7e2 <__ieee754_pow+0x202>
 800c7dc:	4632      	mov	r2, r6
 800c7de:	463b      	mov	r3, r7
 800c7e0:	e7e6      	b.n	800c7b0 <__ieee754_pow+0x1d0>
 800c7e2:	4b19      	ldr	r3, [pc, #100]	; (800c848 <__ieee754_pow+0x268>)
 800c7e4:	4598      	cmp	r8, r3
 800c7e6:	f340 80fb 	ble.w	800c9e0 <__ieee754_pow+0x400>
 800c7ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c7ee:	4598      	cmp	r8, r3
 800c7f0:	4b13      	ldr	r3, [pc, #76]	; (800c840 <__ieee754_pow+0x260>)
 800c7f2:	dd0c      	ble.n	800c80e <__ieee754_pow+0x22e>
 800c7f4:	429c      	cmp	r4, r3
 800c7f6:	dc0f      	bgt.n	800c818 <__ieee754_pow+0x238>
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	da0f      	bge.n	800c81e <__ieee754_pow+0x23e>
 800c7fe:	2000      	movs	r0, #0
 800c800:	b009      	add	sp, #36	; 0x24
 800c802:	ecbd 8b06 	vpop	{d8-d10}
 800c806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	f000 bcba 	b.w	800d182 <__math_oflow>
 800c80e:	429c      	cmp	r4, r3
 800c810:	dbf2      	blt.n	800c7f8 <__ieee754_pow+0x218>
 800c812:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <__ieee754_pow+0x25c>)
 800c814:	429c      	cmp	r4, r3
 800c816:	dd19      	ble.n	800c84c <__ieee754_pow+0x26c>
 800c818:	f1b9 0f00 	cmp.w	r9, #0
 800c81c:	dcef      	bgt.n	800c7fe <__ieee754_pow+0x21e>
 800c81e:	2000      	movs	r0, #0
 800c820:	b009      	add	sp, #36	; 0x24
 800c822:	ecbd 8b06 	vpop	{d8-d10}
 800c826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82a:	f000 bca1 	b.w	800d170 <__math_uflow>
 800c82e:	bf00      	nop
 800c830:	fff00000 	.word	0xfff00000
 800c834:	7ff00000 	.word	0x7ff00000
 800c838:	433fffff 	.word	0x433fffff
 800c83c:	3ff00000 	.word	0x3ff00000
 800c840:	3fefffff 	.word	0x3fefffff
 800c844:	3fe00000 	.word	0x3fe00000
 800c848:	41e00000 	.word	0x41e00000
 800c84c:	4b60      	ldr	r3, [pc, #384]	; (800c9d0 <__ieee754_pow+0x3f0>)
 800c84e:	2200      	movs	r2, #0
 800c850:	f7f3 fd2a 	bl	80002a8 <__aeabi_dsub>
 800c854:	a354      	add	r3, pc, #336	; (adr r3, 800c9a8 <__ieee754_pow+0x3c8>)
 800c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85a:	4604      	mov	r4, r0
 800c85c:	460d      	mov	r5, r1
 800c85e:	f7f3 fedb 	bl	8000618 <__aeabi_dmul>
 800c862:	a353      	add	r3, pc, #332	; (adr r3, 800c9b0 <__ieee754_pow+0x3d0>)
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	4606      	mov	r6, r0
 800c86a:	460f      	mov	r7, r1
 800c86c:	4620      	mov	r0, r4
 800c86e:	4629      	mov	r1, r5
 800c870:	f7f3 fed2 	bl	8000618 <__aeabi_dmul>
 800c874:	4b57      	ldr	r3, [pc, #348]	; (800c9d4 <__ieee754_pow+0x3f4>)
 800c876:	4682      	mov	sl, r0
 800c878:	468b      	mov	fp, r1
 800c87a:	2200      	movs	r2, #0
 800c87c:	4620      	mov	r0, r4
 800c87e:	4629      	mov	r1, r5
 800c880:	f7f3 feca 	bl	8000618 <__aeabi_dmul>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	a14b      	add	r1, pc, #300	; (adr r1, 800c9b8 <__ieee754_pow+0x3d8>)
 800c88a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c88e:	f7f3 fd0b 	bl	80002a8 <__aeabi_dsub>
 800c892:	4622      	mov	r2, r4
 800c894:	462b      	mov	r3, r5
 800c896:	f7f3 febf 	bl	8000618 <__aeabi_dmul>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	2000      	movs	r0, #0
 800c8a0:	494d      	ldr	r1, [pc, #308]	; (800c9d8 <__ieee754_pow+0x3f8>)
 800c8a2:	f7f3 fd01 	bl	80002a8 <__aeabi_dsub>
 800c8a6:	4622      	mov	r2, r4
 800c8a8:	4680      	mov	r8, r0
 800c8aa:	4689      	mov	r9, r1
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	f7f3 feb1 	bl	8000618 <__aeabi_dmul>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4649      	mov	r1, r9
 800c8be:	f7f3 feab 	bl	8000618 <__aeabi_dmul>
 800c8c2:	a33f      	add	r3, pc, #252	; (adr r3, 800c9c0 <__ieee754_pow+0x3e0>)
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	f7f3 fea6 	bl	8000618 <__aeabi_dmul>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4650      	mov	r0, sl
 800c8d2:	4659      	mov	r1, fp
 800c8d4:	f7f3 fce8 	bl	80002a8 <__aeabi_dsub>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4680      	mov	r8, r0
 800c8de:	4689      	mov	r9, r1
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f7f3 fce2 	bl	80002ac <__adddf3>
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	4632      	mov	r2, r6
 800c8ec:	463b      	mov	r3, r7
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	460d      	mov	r5, r1
 800c8f2:	f7f3 fcd9 	bl	80002a8 <__aeabi_dsub>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	4649      	mov	r1, r9
 800c8fe:	f7f3 fcd3 	bl	80002a8 <__aeabi_dsub>
 800c902:	9b04      	ldr	r3, [sp, #16]
 800c904:	9a06      	ldr	r2, [sp, #24]
 800c906:	3b01      	subs	r3, #1
 800c908:	4313      	orrs	r3, r2
 800c90a:	4682      	mov	sl, r0
 800c90c:	468b      	mov	fp, r1
 800c90e:	f040 81e7 	bne.w	800cce0 <__ieee754_pow+0x700>
 800c912:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c9c8 <__ieee754_pow+0x3e8>
 800c916:	eeb0 8a47 	vmov.f32	s16, s14
 800c91a:	eef0 8a67 	vmov.f32	s17, s15
 800c91e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c922:	2600      	movs	r6, #0
 800c924:	4632      	mov	r2, r6
 800c926:	463b      	mov	r3, r7
 800c928:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c92c:	f7f3 fcbc 	bl	80002a8 <__aeabi_dsub>
 800c930:	4622      	mov	r2, r4
 800c932:	462b      	mov	r3, r5
 800c934:	f7f3 fe70 	bl	8000618 <__aeabi_dmul>
 800c938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c93c:	4680      	mov	r8, r0
 800c93e:	4689      	mov	r9, r1
 800c940:	4650      	mov	r0, sl
 800c942:	4659      	mov	r1, fp
 800c944:	f7f3 fe68 	bl	8000618 <__aeabi_dmul>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4640      	mov	r0, r8
 800c94e:	4649      	mov	r1, r9
 800c950:	f7f3 fcac 	bl	80002ac <__adddf3>
 800c954:	4632      	mov	r2, r6
 800c956:	463b      	mov	r3, r7
 800c958:	4680      	mov	r8, r0
 800c95a:	4689      	mov	r9, r1
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 fe5a 	bl	8000618 <__aeabi_dmul>
 800c964:	460b      	mov	r3, r1
 800c966:	4604      	mov	r4, r0
 800c968:	460d      	mov	r5, r1
 800c96a:	4602      	mov	r2, r0
 800c96c:	4649      	mov	r1, r9
 800c96e:	4640      	mov	r0, r8
 800c970:	f7f3 fc9c 	bl	80002ac <__adddf3>
 800c974:	4b19      	ldr	r3, [pc, #100]	; (800c9dc <__ieee754_pow+0x3fc>)
 800c976:	4299      	cmp	r1, r3
 800c978:	ec45 4b19 	vmov	d9, r4, r5
 800c97c:	4606      	mov	r6, r0
 800c97e:	460f      	mov	r7, r1
 800c980:	468b      	mov	fp, r1
 800c982:	f340 82f0 	ble.w	800cf66 <__ieee754_pow+0x986>
 800c986:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c98a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c98e:	4303      	orrs	r3, r0
 800c990:	f000 81e4 	beq.w	800cd5c <__ieee754_pow+0x77c>
 800c994:	ec51 0b18 	vmov	r0, r1, d8
 800c998:	2200      	movs	r2, #0
 800c99a:	2300      	movs	r3, #0
 800c99c:	f7f4 f8ae 	bl	8000afc <__aeabi_dcmplt>
 800c9a0:	3800      	subs	r0, #0
 800c9a2:	bf18      	it	ne
 800c9a4:	2001      	movne	r0, #1
 800c9a6:	e72b      	b.n	800c800 <__ieee754_pow+0x220>
 800c9a8:	60000000 	.word	0x60000000
 800c9ac:	3ff71547 	.word	0x3ff71547
 800c9b0:	f85ddf44 	.word	0xf85ddf44
 800c9b4:	3e54ae0b 	.word	0x3e54ae0b
 800c9b8:	55555555 	.word	0x55555555
 800c9bc:	3fd55555 	.word	0x3fd55555
 800c9c0:	652b82fe 	.word	0x652b82fe
 800c9c4:	3ff71547 	.word	0x3ff71547
 800c9c8:	00000000 	.word	0x00000000
 800c9cc:	bff00000 	.word	0xbff00000
 800c9d0:	3ff00000 	.word	0x3ff00000
 800c9d4:	3fd00000 	.word	0x3fd00000
 800c9d8:	3fe00000 	.word	0x3fe00000
 800c9dc:	408fffff 	.word	0x408fffff
 800c9e0:	4bd5      	ldr	r3, [pc, #852]	; (800cd38 <__ieee754_pow+0x758>)
 800c9e2:	402b      	ands	r3, r5
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	b92b      	cbnz	r3, 800c9f4 <__ieee754_pow+0x414>
 800c9e8:	4bd4      	ldr	r3, [pc, #848]	; (800cd3c <__ieee754_pow+0x75c>)
 800c9ea:	f7f3 fe15 	bl	8000618 <__aeabi_dmul>
 800c9ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	1523      	asrs	r3, r4, #20
 800c9f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c9fa:	4413      	add	r3, r2
 800c9fc:	9305      	str	r3, [sp, #20]
 800c9fe:	4bd0      	ldr	r3, [pc, #832]	; (800cd40 <__ieee754_pow+0x760>)
 800ca00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ca08:	429c      	cmp	r4, r3
 800ca0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca0e:	dd08      	ble.n	800ca22 <__ieee754_pow+0x442>
 800ca10:	4bcc      	ldr	r3, [pc, #816]	; (800cd44 <__ieee754_pow+0x764>)
 800ca12:	429c      	cmp	r4, r3
 800ca14:	f340 8162 	ble.w	800ccdc <__ieee754_pow+0x6fc>
 800ca18:	9b05      	ldr	r3, [sp, #20]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	9305      	str	r3, [sp, #20]
 800ca1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ca22:	2400      	movs	r4, #0
 800ca24:	00e3      	lsls	r3, r4, #3
 800ca26:	9307      	str	r3, [sp, #28]
 800ca28:	4bc7      	ldr	r3, [pc, #796]	; (800cd48 <__ieee754_pow+0x768>)
 800ca2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca2e:	ed93 7b00 	vldr	d7, [r3]
 800ca32:	4629      	mov	r1, r5
 800ca34:	ec53 2b17 	vmov	r2, r3, d7
 800ca38:	eeb0 9a47 	vmov.f32	s18, s14
 800ca3c:	eef0 9a67 	vmov.f32	s19, s15
 800ca40:	4682      	mov	sl, r0
 800ca42:	f7f3 fc31 	bl	80002a8 <__aeabi_dsub>
 800ca46:	4652      	mov	r2, sl
 800ca48:	4606      	mov	r6, r0
 800ca4a:	460f      	mov	r7, r1
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	ec51 0b19 	vmov	r0, r1, d9
 800ca52:	f7f3 fc2b 	bl	80002ac <__adddf3>
 800ca56:	4602      	mov	r2, r0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	49bb      	ldr	r1, [pc, #748]	; (800cd4c <__ieee754_pow+0x76c>)
 800ca5e:	f7f3 ff05 	bl	800086c <__aeabi_ddiv>
 800ca62:	ec41 0b1a 	vmov	d10, r0, r1
 800ca66:	4602      	mov	r2, r0
 800ca68:	460b      	mov	r3, r1
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	4639      	mov	r1, r7
 800ca6e:	f7f3 fdd3 	bl	8000618 <__aeabi_dmul>
 800ca72:	2300      	movs	r3, #0
 800ca74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca7e:	46ab      	mov	fp, r5
 800ca80:	106d      	asrs	r5, r5, #1
 800ca82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca8a:	ec41 0b18 	vmov	d8, r0, r1
 800ca8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca92:	2200      	movs	r2, #0
 800ca94:	4640      	mov	r0, r8
 800ca96:	4649      	mov	r1, r9
 800ca98:	4614      	mov	r4, r2
 800ca9a:	461d      	mov	r5, r3
 800ca9c:	f7f3 fdbc 	bl	8000618 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fbfe 	bl	80002a8 <__aeabi_dsub>
 800caac:	ec53 2b19 	vmov	r2, r3, d9
 800cab0:	4606      	mov	r6, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	4620      	mov	r0, r4
 800cab6:	4629      	mov	r1, r5
 800cab8:	f7f3 fbf6 	bl	80002a8 <__aeabi_dsub>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	4650      	mov	r0, sl
 800cac2:	4659      	mov	r1, fp
 800cac4:	f7f3 fbf0 	bl	80002a8 <__aeabi_dsub>
 800cac8:	4642      	mov	r2, r8
 800caca:	464b      	mov	r3, r9
 800cacc:	f7f3 fda4 	bl	8000618 <__aeabi_dmul>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4630      	mov	r0, r6
 800cad6:	4639      	mov	r1, r7
 800cad8:	f7f3 fbe6 	bl	80002a8 <__aeabi_dsub>
 800cadc:	ec53 2b1a 	vmov	r2, r3, d10
 800cae0:	f7f3 fd9a 	bl	8000618 <__aeabi_dmul>
 800cae4:	ec53 2b18 	vmov	r2, r3, d8
 800cae8:	ec41 0b19 	vmov	d9, r0, r1
 800caec:	ec51 0b18 	vmov	r0, r1, d8
 800caf0:	f7f3 fd92 	bl	8000618 <__aeabi_dmul>
 800caf4:	a37c      	add	r3, pc, #496	; (adr r3, 800cce8 <__ieee754_pow+0x708>)
 800caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafa:	4604      	mov	r4, r0
 800cafc:	460d      	mov	r5, r1
 800cafe:	f7f3 fd8b 	bl	8000618 <__aeabi_dmul>
 800cb02:	a37b      	add	r3, pc, #492	; (adr r3, 800ccf0 <__ieee754_pow+0x710>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f7f3 fbd0 	bl	80002ac <__adddf3>
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	462b      	mov	r3, r5
 800cb10:	f7f3 fd82 	bl	8000618 <__aeabi_dmul>
 800cb14:	a378      	add	r3, pc, #480	; (adr r3, 800ccf8 <__ieee754_pow+0x718>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fbc7 	bl	80002ac <__adddf3>
 800cb1e:	4622      	mov	r2, r4
 800cb20:	462b      	mov	r3, r5
 800cb22:	f7f3 fd79 	bl	8000618 <__aeabi_dmul>
 800cb26:	a376      	add	r3, pc, #472	; (adr r3, 800cd00 <__ieee754_pow+0x720>)
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	f7f3 fbbe 	bl	80002ac <__adddf3>
 800cb30:	4622      	mov	r2, r4
 800cb32:	462b      	mov	r3, r5
 800cb34:	f7f3 fd70 	bl	8000618 <__aeabi_dmul>
 800cb38:	a373      	add	r3, pc, #460	; (adr r3, 800cd08 <__ieee754_pow+0x728>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	f7f3 fbb5 	bl	80002ac <__adddf3>
 800cb42:	4622      	mov	r2, r4
 800cb44:	462b      	mov	r3, r5
 800cb46:	f7f3 fd67 	bl	8000618 <__aeabi_dmul>
 800cb4a:	a371      	add	r3, pc, #452	; (adr r3, 800cd10 <__ieee754_pow+0x730>)
 800cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb50:	f7f3 fbac 	bl	80002ac <__adddf3>
 800cb54:	4622      	mov	r2, r4
 800cb56:	4606      	mov	r6, r0
 800cb58:	460f      	mov	r7, r1
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	4629      	mov	r1, r5
 800cb60:	f7f3 fd5a 	bl	8000618 <__aeabi_dmul>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4630      	mov	r0, r6
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	f7f3 fd54 	bl	8000618 <__aeabi_dmul>
 800cb70:	4642      	mov	r2, r8
 800cb72:	4604      	mov	r4, r0
 800cb74:	460d      	mov	r5, r1
 800cb76:	464b      	mov	r3, r9
 800cb78:	ec51 0b18 	vmov	r0, r1, d8
 800cb7c:	f7f3 fb96 	bl	80002ac <__adddf3>
 800cb80:	ec53 2b19 	vmov	r2, r3, d9
 800cb84:	f7f3 fd48 	bl	8000618 <__aeabi_dmul>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	462b      	mov	r3, r5
 800cb8c:	f7f3 fb8e 	bl	80002ac <__adddf3>
 800cb90:	4642      	mov	r2, r8
 800cb92:	4682      	mov	sl, r0
 800cb94:	468b      	mov	fp, r1
 800cb96:	464b      	mov	r3, r9
 800cb98:	4640      	mov	r0, r8
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	f7f3 fd3c 	bl	8000618 <__aeabi_dmul>
 800cba0:	4b6b      	ldr	r3, [pc, #428]	; (800cd50 <__ieee754_pow+0x770>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	4606      	mov	r6, r0
 800cba6:	460f      	mov	r7, r1
 800cba8:	f7f3 fb80 	bl	80002ac <__adddf3>
 800cbac:	4652      	mov	r2, sl
 800cbae:	465b      	mov	r3, fp
 800cbb0:	f7f3 fb7c 	bl	80002ac <__adddf3>
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	460d      	mov	r5, r1
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4640      	mov	r0, r8
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	f7f3 fd29 	bl	8000618 <__aeabi_dmul>
 800cbc6:	4b62      	ldr	r3, [pc, #392]	; (800cd50 <__ieee754_pow+0x770>)
 800cbc8:	4680      	mov	r8, r0
 800cbca:	4689      	mov	r9, r1
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7f3 fb69 	bl	80002a8 <__aeabi_dsub>
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	463b      	mov	r3, r7
 800cbda:	f7f3 fb65 	bl	80002a8 <__aeabi_dsub>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4650      	mov	r0, sl
 800cbe4:	4659      	mov	r1, fp
 800cbe6:	f7f3 fb5f 	bl	80002a8 <__aeabi_dsub>
 800cbea:	ec53 2b18 	vmov	r2, r3, d8
 800cbee:	f7f3 fd13 	bl	8000618 <__aeabi_dmul>
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	460f      	mov	r7, r1
 800cbf8:	462b      	mov	r3, r5
 800cbfa:	ec51 0b19 	vmov	r0, r1, d9
 800cbfe:	f7f3 fd0b 	bl	8000618 <__aeabi_dmul>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4630      	mov	r0, r6
 800cc08:	4639      	mov	r1, r7
 800cc0a:	f7f3 fb4f 	bl	80002ac <__adddf3>
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460f      	mov	r7, r1
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4640      	mov	r0, r8
 800cc18:	4649      	mov	r1, r9
 800cc1a:	f7f3 fb47 	bl	80002ac <__adddf3>
 800cc1e:	a33e      	add	r3, pc, #248	; (adr r3, 800cd18 <__ieee754_pow+0x738>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	2000      	movs	r0, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	460d      	mov	r5, r1
 800cc2a:	f7f3 fcf5 	bl	8000618 <__aeabi_dmul>
 800cc2e:	4642      	mov	r2, r8
 800cc30:	ec41 0b18 	vmov	d8, r0, r1
 800cc34:	464b      	mov	r3, r9
 800cc36:	4620      	mov	r0, r4
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f7f3 fb35 	bl	80002a8 <__aeabi_dsub>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4630      	mov	r0, r6
 800cc44:	4639      	mov	r1, r7
 800cc46:	f7f3 fb2f 	bl	80002a8 <__aeabi_dsub>
 800cc4a:	a335      	add	r3, pc, #212	; (adr r3, 800cd20 <__ieee754_pow+0x740>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fce2 	bl	8000618 <__aeabi_dmul>
 800cc54:	a334      	add	r3, pc, #208	; (adr r3, 800cd28 <__ieee754_pow+0x748>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7f3 fcd9 	bl	8000618 <__aeabi_dmul>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	f7f3 fb1d 	bl	80002ac <__adddf3>
 800cc72:	9a07      	ldr	r2, [sp, #28]
 800cc74:	4b37      	ldr	r3, [pc, #220]	; (800cd54 <__ieee754_pow+0x774>)
 800cc76:	4413      	add	r3, r2
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	f7f3 fb16 	bl	80002ac <__adddf3>
 800cc80:	4682      	mov	sl, r0
 800cc82:	9805      	ldr	r0, [sp, #20]
 800cc84:	468b      	mov	fp, r1
 800cc86:	f7f3 fc5d 	bl	8000544 <__aeabi_i2d>
 800cc8a:	9a07      	ldr	r2, [sp, #28]
 800cc8c:	4b32      	ldr	r3, [pc, #200]	; (800cd58 <__ieee754_pow+0x778>)
 800cc8e:	4413      	add	r3, r2
 800cc90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc94:	4606      	mov	r6, r0
 800cc96:	460f      	mov	r7, r1
 800cc98:	4652      	mov	r2, sl
 800cc9a:	465b      	mov	r3, fp
 800cc9c:	ec51 0b18 	vmov	r0, r1, d8
 800cca0:	f7f3 fb04 	bl	80002ac <__adddf3>
 800cca4:	4642      	mov	r2, r8
 800cca6:	464b      	mov	r3, r9
 800cca8:	f7f3 fb00 	bl	80002ac <__adddf3>
 800ccac:	4632      	mov	r2, r6
 800ccae:	463b      	mov	r3, r7
 800ccb0:	f7f3 fafc 	bl	80002ac <__adddf3>
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	4632      	mov	r2, r6
 800ccb8:	463b      	mov	r3, r7
 800ccba:	4604      	mov	r4, r0
 800ccbc:	460d      	mov	r5, r1
 800ccbe:	f7f3 faf3 	bl	80002a8 <__aeabi_dsub>
 800ccc2:	4642      	mov	r2, r8
 800ccc4:	464b      	mov	r3, r9
 800ccc6:	f7f3 faef 	bl	80002a8 <__aeabi_dsub>
 800ccca:	ec53 2b18 	vmov	r2, r3, d8
 800ccce:	f7f3 faeb 	bl	80002a8 <__aeabi_dsub>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	4650      	mov	r0, sl
 800ccd8:	4659      	mov	r1, fp
 800ccda:	e610      	b.n	800c8fe <__ieee754_pow+0x31e>
 800ccdc:	2401      	movs	r4, #1
 800ccde:	e6a1      	b.n	800ca24 <__ieee754_pow+0x444>
 800cce0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd30 <__ieee754_pow+0x750>
 800cce4:	e617      	b.n	800c916 <__ieee754_pow+0x336>
 800cce6:	bf00      	nop
 800cce8:	4a454eef 	.word	0x4a454eef
 800ccec:	3fca7e28 	.word	0x3fca7e28
 800ccf0:	93c9db65 	.word	0x93c9db65
 800ccf4:	3fcd864a 	.word	0x3fcd864a
 800ccf8:	a91d4101 	.word	0xa91d4101
 800ccfc:	3fd17460 	.word	0x3fd17460
 800cd00:	518f264d 	.word	0x518f264d
 800cd04:	3fd55555 	.word	0x3fd55555
 800cd08:	db6fabff 	.word	0xdb6fabff
 800cd0c:	3fdb6db6 	.word	0x3fdb6db6
 800cd10:	33333303 	.word	0x33333303
 800cd14:	3fe33333 	.word	0x3fe33333
 800cd18:	e0000000 	.word	0xe0000000
 800cd1c:	3feec709 	.word	0x3feec709
 800cd20:	dc3a03fd 	.word	0xdc3a03fd
 800cd24:	3feec709 	.word	0x3feec709
 800cd28:	145b01f5 	.word	0x145b01f5
 800cd2c:	be3e2fe0 	.word	0xbe3e2fe0
 800cd30:	00000000 	.word	0x00000000
 800cd34:	3ff00000 	.word	0x3ff00000
 800cd38:	7ff00000 	.word	0x7ff00000
 800cd3c:	43400000 	.word	0x43400000
 800cd40:	0003988e 	.word	0x0003988e
 800cd44:	000bb679 	.word	0x000bb679
 800cd48:	0800e1a0 	.word	0x0800e1a0
 800cd4c:	3ff00000 	.word	0x3ff00000
 800cd50:	40080000 	.word	0x40080000
 800cd54:	0800e1c0 	.word	0x0800e1c0
 800cd58:	0800e1b0 	.word	0x0800e1b0
 800cd5c:	a3b3      	add	r3, pc, #716	; (adr r3, 800d02c <__ieee754_pow+0xa4c>)
 800cd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd62:	4640      	mov	r0, r8
 800cd64:	4649      	mov	r1, r9
 800cd66:	f7f3 faa1 	bl	80002ac <__adddf3>
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	ec41 0b1a 	vmov	d10, r0, r1
 800cd70:	462b      	mov	r3, r5
 800cd72:	4630      	mov	r0, r6
 800cd74:	4639      	mov	r1, r7
 800cd76:	f7f3 fa97 	bl	80002a8 <__aeabi_dsub>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	ec51 0b1a 	vmov	r0, r1, d10
 800cd82:	f7f3 fed9 	bl	8000b38 <__aeabi_dcmpgt>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f47f ae04 	bne.w	800c994 <__ieee754_pow+0x3b4>
 800cd8c:	4aa2      	ldr	r2, [pc, #648]	; (800d018 <__ieee754_pow+0xa38>)
 800cd8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd92:	4293      	cmp	r3, r2
 800cd94:	f340 8107 	ble.w	800cfa6 <__ieee754_pow+0x9c6>
 800cd98:	151b      	asrs	r3, r3, #20
 800cd9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cda2:	fa4a fa03 	asr.w	sl, sl, r3
 800cda6:	44da      	add	sl, fp
 800cda8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cdac:	489b      	ldr	r0, [pc, #620]	; (800d01c <__ieee754_pow+0xa3c>)
 800cdae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cdb2:	4108      	asrs	r0, r1
 800cdb4:	ea00 030a 	and.w	r3, r0, sl
 800cdb8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cdbc:	f1c1 0114 	rsb	r1, r1, #20
 800cdc0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cdc4:	fa4a fa01 	asr.w	sl, sl, r1
 800cdc8:	f1bb 0f00 	cmp.w	fp, #0
 800cdcc:	f04f 0200 	mov.w	r2, #0
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	bfb8      	it	lt
 800cdd6:	f1ca 0a00 	rsblt	sl, sl, #0
 800cdda:	f7f3 fa65 	bl	80002a8 <__aeabi_dsub>
 800cdde:	ec41 0b19 	vmov	d9, r0, r1
 800cde2:	4642      	mov	r2, r8
 800cde4:	464b      	mov	r3, r9
 800cde6:	ec51 0b19 	vmov	r0, r1, d9
 800cdea:	f7f3 fa5f 	bl	80002ac <__adddf3>
 800cdee:	a37a      	add	r3, pc, #488	; (adr r3, 800cfd8 <__ieee754_pow+0x9f8>)
 800cdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	460d      	mov	r5, r1
 800cdfa:	f7f3 fc0d 	bl	8000618 <__aeabi_dmul>
 800cdfe:	ec53 2b19 	vmov	r2, r3, d9
 800ce02:	4606      	mov	r6, r0
 800ce04:	460f      	mov	r7, r1
 800ce06:	4620      	mov	r0, r4
 800ce08:	4629      	mov	r1, r5
 800ce0a:	f7f3 fa4d 	bl	80002a8 <__aeabi_dsub>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4640      	mov	r0, r8
 800ce14:	4649      	mov	r1, r9
 800ce16:	f7f3 fa47 	bl	80002a8 <__aeabi_dsub>
 800ce1a:	a371      	add	r3, pc, #452	; (adr r3, 800cfe0 <__ieee754_pow+0xa00>)
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	f7f3 fbfa 	bl	8000618 <__aeabi_dmul>
 800ce24:	a370      	add	r3, pc, #448	; (adr r3, 800cfe8 <__ieee754_pow+0xa08>)
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	4680      	mov	r8, r0
 800ce2c:	4689      	mov	r9, r1
 800ce2e:	4620      	mov	r0, r4
 800ce30:	4629      	mov	r1, r5
 800ce32:	f7f3 fbf1 	bl	8000618 <__aeabi_dmul>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	f7f3 fa35 	bl	80002ac <__adddf3>
 800ce42:	4604      	mov	r4, r0
 800ce44:	460d      	mov	r5, r1
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	f7f3 fa2d 	bl	80002ac <__adddf3>
 800ce52:	4632      	mov	r2, r6
 800ce54:	463b      	mov	r3, r7
 800ce56:	4680      	mov	r8, r0
 800ce58:	4689      	mov	r9, r1
 800ce5a:	f7f3 fa25 	bl	80002a8 <__aeabi_dsub>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4620      	mov	r0, r4
 800ce64:	4629      	mov	r1, r5
 800ce66:	f7f3 fa1f 	bl	80002a8 <__aeabi_dsub>
 800ce6a:	4642      	mov	r2, r8
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	460f      	mov	r7, r1
 800ce70:	464b      	mov	r3, r9
 800ce72:	4640      	mov	r0, r8
 800ce74:	4649      	mov	r1, r9
 800ce76:	f7f3 fbcf 	bl	8000618 <__aeabi_dmul>
 800ce7a:	a35d      	add	r3, pc, #372	; (adr r3, 800cff0 <__ieee754_pow+0xa10>)
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	4604      	mov	r4, r0
 800ce82:	460d      	mov	r5, r1
 800ce84:	f7f3 fbc8 	bl	8000618 <__aeabi_dmul>
 800ce88:	a35b      	add	r3, pc, #364	; (adr r3, 800cff8 <__ieee754_pow+0xa18>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7f3 fa0b 	bl	80002a8 <__aeabi_dsub>
 800ce92:	4622      	mov	r2, r4
 800ce94:	462b      	mov	r3, r5
 800ce96:	f7f3 fbbf 	bl	8000618 <__aeabi_dmul>
 800ce9a:	a359      	add	r3, pc, #356	; (adr r3, 800d000 <__ieee754_pow+0xa20>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fa04 	bl	80002ac <__adddf3>
 800cea4:	4622      	mov	r2, r4
 800cea6:	462b      	mov	r3, r5
 800cea8:	f7f3 fbb6 	bl	8000618 <__aeabi_dmul>
 800ceac:	a356      	add	r3, pc, #344	; (adr r3, 800d008 <__ieee754_pow+0xa28>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f7f3 f9f9 	bl	80002a8 <__aeabi_dsub>
 800ceb6:	4622      	mov	r2, r4
 800ceb8:	462b      	mov	r3, r5
 800ceba:	f7f3 fbad 	bl	8000618 <__aeabi_dmul>
 800cebe:	a354      	add	r3, pc, #336	; (adr r3, 800d010 <__ieee754_pow+0xa30>)
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	f7f3 f9f2 	bl	80002ac <__adddf3>
 800cec8:	4622      	mov	r2, r4
 800ceca:	462b      	mov	r3, r5
 800cecc:	f7f3 fba4 	bl	8000618 <__aeabi_dmul>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	4640      	mov	r0, r8
 800ced6:	4649      	mov	r1, r9
 800ced8:	f7f3 f9e6 	bl	80002a8 <__aeabi_dsub>
 800cedc:	4604      	mov	r4, r0
 800cede:	460d      	mov	r5, r1
 800cee0:	4602      	mov	r2, r0
 800cee2:	460b      	mov	r3, r1
 800cee4:	4640      	mov	r0, r8
 800cee6:	4649      	mov	r1, r9
 800cee8:	f7f3 fb96 	bl	8000618 <__aeabi_dmul>
 800ceec:	2200      	movs	r2, #0
 800ceee:	ec41 0b19 	vmov	d9, r0, r1
 800cef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cef6:	4620      	mov	r0, r4
 800cef8:	4629      	mov	r1, r5
 800cefa:	f7f3 f9d5 	bl	80002a8 <__aeabi_dsub>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	ec51 0b19 	vmov	r0, r1, d9
 800cf06:	f7f3 fcb1 	bl	800086c <__aeabi_ddiv>
 800cf0a:	4632      	mov	r2, r6
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	460d      	mov	r5, r1
 800cf10:	463b      	mov	r3, r7
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 fb7f 	bl	8000618 <__aeabi_dmul>
 800cf1a:	4632      	mov	r2, r6
 800cf1c:	463b      	mov	r3, r7
 800cf1e:	f7f3 f9c5 	bl	80002ac <__adddf3>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4620      	mov	r0, r4
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7f3 f9bd 	bl	80002a8 <__aeabi_dsub>
 800cf2e:	4642      	mov	r2, r8
 800cf30:	464b      	mov	r3, r9
 800cf32:	f7f3 f9b9 	bl	80002a8 <__aeabi_dsub>
 800cf36:	460b      	mov	r3, r1
 800cf38:	4602      	mov	r2, r0
 800cf3a:	4939      	ldr	r1, [pc, #228]	; (800d020 <__ieee754_pow+0xa40>)
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	f7f3 f9b3 	bl	80002a8 <__aeabi_dsub>
 800cf42:	ec41 0b10 	vmov	d0, r0, r1
 800cf46:	ee10 3a90 	vmov	r3, s1
 800cf4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf52:	da2b      	bge.n	800cfac <__ieee754_pow+0x9cc>
 800cf54:	4650      	mov	r0, sl
 800cf56:	f000 f86f 	bl	800d038 <scalbn>
 800cf5a:	ec51 0b10 	vmov	r0, r1, d0
 800cf5e:	ec53 2b18 	vmov	r2, r3, d8
 800cf62:	f7ff bbee 	b.w	800c742 <__ieee754_pow+0x162>
 800cf66:	4b2f      	ldr	r3, [pc, #188]	; (800d024 <__ieee754_pow+0xa44>)
 800cf68:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf6c:	429e      	cmp	r6, r3
 800cf6e:	f77f af0d 	ble.w	800cd8c <__ieee754_pow+0x7ac>
 800cf72:	4b2d      	ldr	r3, [pc, #180]	; (800d028 <__ieee754_pow+0xa48>)
 800cf74:	440b      	add	r3, r1
 800cf76:	4303      	orrs	r3, r0
 800cf78:	d009      	beq.n	800cf8e <__ieee754_pow+0x9ae>
 800cf7a:	ec51 0b18 	vmov	r0, r1, d8
 800cf7e:	2200      	movs	r2, #0
 800cf80:	2300      	movs	r3, #0
 800cf82:	f7f3 fdbb 	bl	8000afc <__aeabi_dcmplt>
 800cf86:	3800      	subs	r0, #0
 800cf88:	bf18      	it	ne
 800cf8a:	2001      	movne	r0, #1
 800cf8c:	e448      	b.n	800c820 <__ieee754_pow+0x240>
 800cf8e:	4622      	mov	r2, r4
 800cf90:	462b      	mov	r3, r5
 800cf92:	f7f3 f989 	bl	80002a8 <__aeabi_dsub>
 800cf96:	4642      	mov	r2, r8
 800cf98:	464b      	mov	r3, r9
 800cf9a:	f7f3 fdc3 	bl	8000b24 <__aeabi_dcmpge>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f43f aef4 	beq.w	800cd8c <__ieee754_pow+0x7ac>
 800cfa4:	e7e9      	b.n	800cf7a <__ieee754_pow+0x99a>
 800cfa6:	f04f 0a00 	mov.w	sl, #0
 800cfaa:	e71a      	b.n	800cde2 <__ieee754_pow+0x802>
 800cfac:	ec51 0b10 	vmov	r0, r1, d0
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	e7d4      	b.n	800cf5e <__ieee754_pow+0x97e>
 800cfb4:	491a      	ldr	r1, [pc, #104]	; (800d020 <__ieee754_pow+0xa40>)
 800cfb6:	2000      	movs	r0, #0
 800cfb8:	f7ff bb31 	b.w	800c61e <__ieee754_pow+0x3e>
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	f7ff bb2d 	b.w	800c61e <__ieee754_pow+0x3e>
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7ff bb29 	b.w	800c61e <__ieee754_pow+0x3e>
 800cfcc:	9204      	str	r2, [sp, #16]
 800cfce:	f7ff bb7b 	b.w	800c6c8 <__ieee754_pow+0xe8>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	f7ff bb65 	b.w	800c6a2 <__ieee754_pow+0xc2>
 800cfd8:	00000000 	.word	0x00000000
 800cfdc:	3fe62e43 	.word	0x3fe62e43
 800cfe0:	fefa39ef 	.word	0xfefa39ef
 800cfe4:	3fe62e42 	.word	0x3fe62e42
 800cfe8:	0ca86c39 	.word	0x0ca86c39
 800cfec:	be205c61 	.word	0xbe205c61
 800cff0:	72bea4d0 	.word	0x72bea4d0
 800cff4:	3e663769 	.word	0x3e663769
 800cff8:	c5d26bf1 	.word	0xc5d26bf1
 800cffc:	3ebbbd41 	.word	0x3ebbbd41
 800d000:	af25de2c 	.word	0xaf25de2c
 800d004:	3f11566a 	.word	0x3f11566a
 800d008:	16bebd93 	.word	0x16bebd93
 800d00c:	3f66c16c 	.word	0x3f66c16c
 800d010:	5555553e 	.word	0x5555553e
 800d014:	3fc55555 	.word	0x3fc55555
 800d018:	3fe00000 	.word	0x3fe00000
 800d01c:	fff00000 	.word	0xfff00000
 800d020:	3ff00000 	.word	0x3ff00000
 800d024:	4090cbff 	.word	0x4090cbff
 800d028:	3f6f3400 	.word	0x3f6f3400
 800d02c:	652b82fe 	.word	0x652b82fe
 800d030:	3c971547 	.word	0x3c971547
 800d034:	00000000 	.word	0x00000000

0800d038 <scalbn>:
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	ec55 4b10 	vmov	r4, r5, d0
 800d03e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d042:	4606      	mov	r6, r0
 800d044:	462b      	mov	r3, r5
 800d046:	b999      	cbnz	r1, 800d070 <scalbn+0x38>
 800d048:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d04c:	4323      	orrs	r3, r4
 800d04e:	d03f      	beq.n	800d0d0 <scalbn+0x98>
 800d050:	4b35      	ldr	r3, [pc, #212]	; (800d128 <scalbn+0xf0>)
 800d052:	4629      	mov	r1, r5
 800d054:	ee10 0a10 	vmov	r0, s0
 800d058:	2200      	movs	r2, #0
 800d05a:	f7f3 fadd 	bl	8000618 <__aeabi_dmul>
 800d05e:	4b33      	ldr	r3, [pc, #204]	; (800d12c <scalbn+0xf4>)
 800d060:	429e      	cmp	r6, r3
 800d062:	4604      	mov	r4, r0
 800d064:	460d      	mov	r5, r1
 800d066:	da10      	bge.n	800d08a <scalbn+0x52>
 800d068:	a327      	add	r3, pc, #156	; (adr r3, 800d108 <scalbn+0xd0>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	e01f      	b.n	800d0b0 <scalbn+0x78>
 800d070:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d074:	4291      	cmp	r1, r2
 800d076:	d10c      	bne.n	800d092 <scalbn+0x5a>
 800d078:	ee10 2a10 	vmov	r2, s0
 800d07c:	4620      	mov	r0, r4
 800d07e:	4629      	mov	r1, r5
 800d080:	f7f3 f914 	bl	80002ac <__adddf3>
 800d084:	4604      	mov	r4, r0
 800d086:	460d      	mov	r5, r1
 800d088:	e022      	b.n	800d0d0 <scalbn+0x98>
 800d08a:	460b      	mov	r3, r1
 800d08c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d090:	3936      	subs	r1, #54	; 0x36
 800d092:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d096:	4296      	cmp	r6, r2
 800d098:	dd0d      	ble.n	800d0b6 <scalbn+0x7e>
 800d09a:	2d00      	cmp	r5, #0
 800d09c:	a11c      	add	r1, pc, #112	; (adr r1, 800d110 <scalbn+0xd8>)
 800d09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a2:	da02      	bge.n	800d0aa <scalbn+0x72>
 800d0a4:	a11c      	add	r1, pc, #112	; (adr r1, 800d118 <scalbn+0xe0>)
 800d0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0aa:	a319      	add	r3, pc, #100	; (adr r3, 800d110 <scalbn+0xd8>)
 800d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b0:	f7f3 fab2 	bl	8000618 <__aeabi_dmul>
 800d0b4:	e7e6      	b.n	800d084 <scalbn+0x4c>
 800d0b6:	1872      	adds	r2, r6, r1
 800d0b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d0bc:	428a      	cmp	r2, r1
 800d0be:	dcec      	bgt.n	800d09a <scalbn+0x62>
 800d0c0:	2a00      	cmp	r2, #0
 800d0c2:	dd08      	ble.n	800d0d6 <scalbn+0x9e>
 800d0c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0d0:	ec45 4b10 	vmov	d0, r4, r5
 800d0d4:	bd70      	pop	{r4, r5, r6, pc}
 800d0d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d0da:	da08      	bge.n	800d0ee <scalbn+0xb6>
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	a10a      	add	r1, pc, #40	; (adr r1, 800d108 <scalbn+0xd0>)
 800d0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0e4:	dac0      	bge.n	800d068 <scalbn+0x30>
 800d0e6:	a10e      	add	r1, pc, #56	; (adr r1, 800d120 <scalbn+0xe8>)
 800d0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ec:	e7bc      	b.n	800d068 <scalbn+0x30>
 800d0ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0f2:	3236      	adds	r2, #54	; 0x36
 800d0f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	4b0c      	ldr	r3, [pc, #48]	; (800d130 <scalbn+0xf8>)
 800d100:	2200      	movs	r2, #0
 800d102:	e7d5      	b.n	800d0b0 <scalbn+0x78>
 800d104:	f3af 8000 	nop.w
 800d108:	c2f8f359 	.word	0xc2f8f359
 800d10c:	01a56e1f 	.word	0x01a56e1f
 800d110:	8800759c 	.word	0x8800759c
 800d114:	7e37e43c 	.word	0x7e37e43c
 800d118:	8800759c 	.word	0x8800759c
 800d11c:	fe37e43c 	.word	0xfe37e43c
 800d120:	c2f8f359 	.word	0xc2f8f359
 800d124:	81a56e1f 	.word	0x81a56e1f
 800d128:	43500000 	.word	0x43500000
 800d12c:	ffff3cb0 	.word	0xffff3cb0
 800d130:	3c900000 	.word	0x3c900000

0800d134 <with_errno>:
 800d134:	b570      	push	{r4, r5, r6, lr}
 800d136:	4604      	mov	r4, r0
 800d138:	460d      	mov	r5, r1
 800d13a:	4616      	mov	r6, r2
 800d13c:	f7fd fb60 	bl	800a800 <__errno>
 800d140:	4629      	mov	r1, r5
 800d142:	6006      	str	r6, [r0, #0]
 800d144:	4620      	mov	r0, r4
 800d146:	bd70      	pop	{r4, r5, r6, pc}

0800d148 <xflow>:
 800d148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d14a:	4614      	mov	r4, r2
 800d14c:	461d      	mov	r5, r3
 800d14e:	b108      	cbz	r0, 800d154 <xflow+0xc>
 800d150:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d154:	e9cd 2300 	strd	r2, r3, [sp]
 800d158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fa5a 	bl	8000618 <__aeabi_dmul>
 800d164:	2222      	movs	r2, #34	; 0x22
 800d166:	b003      	add	sp, #12
 800d168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d16c:	f7ff bfe2 	b.w	800d134 <with_errno>

0800d170 <__math_uflow>:
 800d170:	b508      	push	{r3, lr}
 800d172:	2200      	movs	r2, #0
 800d174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d178:	f7ff ffe6 	bl	800d148 <xflow>
 800d17c:	ec41 0b10 	vmov	d0, r0, r1
 800d180:	bd08      	pop	{r3, pc}

0800d182 <__math_oflow>:
 800d182:	b508      	push	{r3, lr}
 800d184:	2200      	movs	r2, #0
 800d186:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d18a:	f7ff ffdd 	bl	800d148 <xflow>
 800d18e:	ec41 0b10 	vmov	d0, r0, r1
 800d192:	bd08      	pop	{r3, pc}

0800d194 <__ieee754_sqrt>:
 800d194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	ec55 4b10 	vmov	r4, r5, d0
 800d19c:	4e67      	ldr	r6, [pc, #412]	; (800d33c <__ieee754_sqrt+0x1a8>)
 800d19e:	43ae      	bics	r6, r5
 800d1a0:	ee10 0a10 	vmov	r0, s0
 800d1a4:	ee10 2a10 	vmov	r2, s0
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	462b      	mov	r3, r5
 800d1ac:	d10d      	bne.n	800d1ca <__ieee754_sqrt+0x36>
 800d1ae:	f7f3 fa33 	bl	8000618 <__aeabi_dmul>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f877 	bl	80002ac <__adddf3>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	ec45 4b10 	vmov	d0, r4, r5
 800d1c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ca:	2d00      	cmp	r5, #0
 800d1cc:	dc0b      	bgt.n	800d1e6 <__ieee754_sqrt+0x52>
 800d1ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d1d2:	4326      	orrs	r6, r4
 800d1d4:	d0f5      	beq.n	800d1c2 <__ieee754_sqrt+0x2e>
 800d1d6:	b135      	cbz	r5, 800d1e6 <__ieee754_sqrt+0x52>
 800d1d8:	f7f3 f866 	bl	80002a8 <__aeabi_dsub>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	f7f3 fb44 	bl	800086c <__aeabi_ddiv>
 800d1e4:	e7eb      	b.n	800d1be <__ieee754_sqrt+0x2a>
 800d1e6:	1509      	asrs	r1, r1, #20
 800d1e8:	f000 808d 	beq.w	800d306 <__ieee754_sqrt+0x172>
 800d1ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d1f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1f8:	07c9      	lsls	r1, r1, #31
 800d1fa:	bf5c      	itt	pl
 800d1fc:	005b      	lslpl	r3, r3, #1
 800d1fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d202:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d206:	bf58      	it	pl
 800d208:	0052      	lslpl	r2, r2, #1
 800d20a:	2500      	movs	r5, #0
 800d20c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d210:	1076      	asrs	r6, r6, #1
 800d212:	0052      	lsls	r2, r2, #1
 800d214:	f04f 0e16 	mov.w	lr, #22
 800d218:	46ac      	mov	ip, r5
 800d21a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d21e:	eb0c 0001 	add.w	r0, ip, r1
 800d222:	4298      	cmp	r0, r3
 800d224:	bfde      	ittt	le
 800d226:	1a1b      	suble	r3, r3, r0
 800d228:	eb00 0c01 	addle.w	ip, r0, r1
 800d22c:	186d      	addle	r5, r5, r1
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	f1be 0e01 	subs.w	lr, lr, #1
 800d234:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d238:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d23c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d240:	d1ed      	bne.n	800d21e <__ieee754_sqrt+0x8a>
 800d242:	4674      	mov	r4, lr
 800d244:	2720      	movs	r7, #32
 800d246:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d24a:	4563      	cmp	r3, ip
 800d24c:	eb01 000e 	add.w	r0, r1, lr
 800d250:	dc02      	bgt.n	800d258 <__ieee754_sqrt+0xc4>
 800d252:	d113      	bne.n	800d27c <__ieee754_sqrt+0xe8>
 800d254:	4290      	cmp	r0, r2
 800d256:	d811      	bhi.n	800d27c <__ieee754_sqrt+0xe8>
 800d258:	2800      	cmp	r0, #0
 800d25a:	eb00 0e01 	add.w	lr, r0, r1
 800d25e:	da57      	bge.n	800d310 <__ieee754_sqrt+0x17c>
 800d260:	f1be 0f00 	cmp.w	lr, #0
 800d264:	db54      	blt.n	800d310 <__ieee754_sqrt+0x17c>
 800d266:	f10c 0801 	add.w	r8, ip, #1
 800d26a:	eba3 030c 	sub.w	r3, r3, ip
 800d26e:	4290      	cmp	r0, r2
 800d270:	bf88      	it	hi
 800d272:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d276:	1a12      	subs	r2, r2, r0
 800d278:	440c      	add	r4, r1
 800d27a:	46c4      	mov	ip, r8
 800d27c:	005b      	lsls	r3, r3, #1
 800d27e:	3f01      	subs	r7, #1
 800d280:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d284:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d288:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d28c:	d1dd      	bne.n	800d24a <__ieee754_sqrt+0xb6>
 800d28e:	4313      	orrs	r3, r2
 800d290:	d01b      	beq.n	800d2ca <__ieee754_sqrt+0x136>
 800d292:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d340 <__ieee754_sqrt+0x1ac>
 800d296:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d344 <__ieee754_sqrt+0x1b0>
 800d29a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d29e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d2a2:	f7f3 f801 	bl	80002a8 <__aeabi_dsub>
 800d2a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	f7f3 fc2d 	bl	8000b10 <__aeabi_dcmple>
 800d2b6:	b140      	cbz	r0, 800d2ca <__ieee754_sqrt+0x136>
 800d2b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d2bc:	e9da 0100 	ldrd	r0, r1, [sl]
 800d2c0:	e9db 2300 	ldrd	r2, r3, [fp]
 800d2c4:	d126      	bne.n	800d314 <__ieee754_sqrt+0x180>
 800d2c6:	3501      	adds	r5, #1
 800d2c8:	463c      	mov	r4, r7
 800d2ca:	106a      	asrs	r2, r5, #1
 800d2cc:	0863      	lsrs	r3, r4, #1
 800d2ce:	07e9      	lsls	r1, r5, #31
 800d2d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d2d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d2d8:	bf48      	it	mi
 800d2da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d2de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d2e2:	461c      	mov	r4, r3
 800d2e4:	e76d      	b.n	800d1c2 <__ieee754_sqrt+0x2e>
 800d2e6:	0ad3      	lsrs	r3, r2, #11
 800d2e8:	3815      	subs	r0, #21
 800d2ea:	0552      	lsls	r2, r2, #21
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0fa      	beq.n	800d2e6 <__ieee754_sqrt+0x152>
 800d2f0:	02dc      	lsls	r4, r3, #11
 800d2f2:	d50a      	bpl.n	800d30a <__ieee754_sqrt+0x176>
 800d2f4:	f1c1 0420 	rsb	r4, r1, #32
 800d2f8:	fa22 f404 	lsr.w	r4, r2, r4
 800d2fc:	1e4d      	subs	r5, r1, #1
 800d2fe:	408a      	lsls	r2, r1
 800d300:	4323      	orrs	r3, r4
 800d302:	1b41      	subs	r1, r0, r5
 800d304:	e772      	b.n	800d1ec <__ieee754_sqrt+0x58>
 800d306:	4608      	mov	r0, r1
 800d308:	e7f0      	b.n	800d2ec <__ieee754_sqrt+0x158>
 800d30a:	005b      	lsls	r3, r3, #1
 800d30c:	3101      	adds	r1, #1
 800d30e:	e7ef      	b.n	800d2f0 <__ieee754_sqrt+0x15c>
 800d310:	46e0      	mov	r8, ip
 800d312:	e7aa      	b.n	800d26a <__ieee754_sqrt+0xd6>
 800d314:	f7f2 ffca 	bl	80002ac <__adddf3>
 800d318:	e9da 8900 	ldrd	r8, r9, [sl]
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	f7f3 fbea 	bl	8000afc <__aeabi_dcmplt>
 800d328:	b120      	cbz	r0, 800d334 <__ieee754_sqrt+0x1a0>
 800d32a:	1ca0      	adds	r0, r4, #2
 800d32c:	bf08      	it	eq
 800d32e:	3501      	addeq	r5, #1
 800d330:	3402      	adds	r4, #2
 800d332:	e7ca      	b.n	800d2ca <__ieee754_sqrt+0x136>
 800d334:	3401      	adds	r4, #1
 800d336:	f024 0401 	bic.w	r4, r4, #1
 800d33a:	e7c6      	b.n	800d2ca <__ieee754_sqrt+0x136>
 800d33c:	7ff00000 	.word	0x7ff00000
 800d340:	200002e8 	.word	0x200002e8
 800d344:	200002f0 	.word	0x200002f0

0800d348 <_init>:
 800d348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34a:	bf00      	nop
 800d34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34e:	bc08      	pop	{r3}
 800d350:	469e      	mov	lr, r3
 800d352:	4770      	bx	lr

0800d354 <_fini>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	bf00      	nop
 800d358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d35a:	bc08      	pop	{r3}
 800d35c:	469e      	mov	lr, r3
 800d35e:	4770      	bx	lr
